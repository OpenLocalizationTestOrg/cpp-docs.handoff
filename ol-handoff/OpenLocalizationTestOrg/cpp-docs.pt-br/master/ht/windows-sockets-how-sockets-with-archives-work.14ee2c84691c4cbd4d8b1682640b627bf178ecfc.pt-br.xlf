<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf92d76af80fac517b2b7a8cd3afdc0aa87ee47c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\windows-sockets-how-sockets-with-archives-work.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56b21542b4c0a941b0f87d5b004f89436cb1c49e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffff87029b7d2a2cac7c1f11fe025cf651039e69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Windows Sockets: How Sockets with Archives Work | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Sockets: How Sockets with Archives Work</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how a <bpt id="p1">[</bpt>CSocket<ept id="p1">](../mfc/reference/csocket-class.md)</ept> object, a <bpt id="p2">[</bpt>CSocketFile<ept id="p2">](../mfc/reference/csocketfile-class.md)</ept> object, and a <bpt id="p3">[</bpt>CArchive<ept id="p3">](../mfc/reference/carchive-class.md)</ept> object are combined to simplify sending and receiving data through a Windows Socket.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>Windows Sockets: Example of Sockets Using Archives<ept id="p1">](../mfc/windows-sockets-example-of-sockets-using-archives.md)</ept> presents the <bpt id="p2">**</bpt>PacketSerialize<ept id="p2">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The archive object in the <bpt id="p1">**</bpt>PacketSerialize<ept id="p1">**</ept> example works much like an archive object passed to an MFC <bpt id="p2">[</bpt>Serialize<ept id="p2">](../mfc/reference/cobject-class.md#cobject__serialize)</ept> function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The essential difference is that for sockets, the archive is attached not to a standard <bpt id="p1">[</bpt>CFile<ept id="p1">](../mfc/reference/cfile-class.md)</ept> object (typically associated with a disk file) but to a <ph id="ph1">`CSocketFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Rather than connecting to a disk file, the <ph id="ph1">`CSocketFile`</ph> object connects to a <ph id="ph2">`CSocket`</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object manages a buffer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the buffer of a storing (sending) archive is full, an associated <ph id="ph1">`CFile`</ph> object writes out the buffer's contents.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Flushing the buffer of an archive attached to a socket is equivalent to sending a message.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When the buffer of a loading (receiving) archive is full, the <ph id="ph1">`CFile`</ph> object stops reading until the buffer is available again.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CSocketFile`</ph> derives from <ph id="ph2">`CFile`</ph>, but it does not support <bpt id="p1">[</bpt>CFile<ept id="p1">](../mfc/reference/cfile-class.md)</ept> member functions such as the positioning functions (<ph id="ph3">`Seek`</ph>, <ph id="ph4">`GetLength`</ph>, <ph id="ph5">`SetLength`</ph>, and so on), the locking functions (<ph id="ph6">`LockRange`</ph>, <ph id="ph7">`UnlockRange`</ph>), or the <ph id="ph8">`GetPosition`</ph> function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All the <bpt id="p1">[</bpt>CSocketFile<ept id="p1">](../mfc/reference/csocketfile-class.md)</ept> object must do is write or read sequences of bytes to or from the associated <ph id="ph1">`CSocket`</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because a file is not involved, operations such as <ph id="ph1">`Seek`</ph> and <ph id="ph2">`GetPosition`</ph> make no sense.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>is derived from <ph id="ph1">`CFile`</ph>, so it would normally inherit all of these member functions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To prevent this, the unsupported <ph id="ph1">`CFile`</ph> member functions are overridden in <ph id="ph2">`CSocketFile`</ph> to throw a <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSocketFile`</ph> object calls member functions of its <ph id="ph2">`CSocket`</ph> object to send or receive data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following figure shows the relationships among these objects on both sides of the communication.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CArchive, CSocketFile, and CSocket</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CArchive, CSocketFile, and CSocket</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The purpose of this apparent complexity is to shield you from the necessity of managing the details of the socket yourself.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You create the socket, the file, and the archive, and then begin sending or receiving data by inserting it to the archive or extracting it from the archive.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CArchive<ept id="p1">](../mfc/reference/carchive-class.md)</ept>, <bpt id="p2">[</bpt>CSocketFile<ept id="p2">](../mfc/reference/csocketfile-class.md)</ept>, and <bpt id="p3">[</bpt>CSocket<ept id="p3">](../mfc/reference/csocket-class.md)</ept> manage the details behind the scenes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSocket`</ph> object is actually a two-state object: sometimes asynchronous (the usual state) and sometimes synchronous.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In its asynchronous state, a socket can receive asynchronous notifications from the framework.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, during an operation such as receiving or sending data the socket becomes synchronous.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means the socket will receive no further asynchronous notifications until the synchronous operation has completed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because it switches modes, you can, for example, do something like the following:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_MFCSimpleSocket#2</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CSocket`</ph> were not implemented as a two-state object, it might be possible to receive additional notifications for the same kind of event while you were processing a previous notification.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, you might get an <ph id="ph1">`OnReceive`</ph> notification while processing an <ph id="ph2">`OnReceive`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the code fragment above, extracting <ph id="ph1">`str`</ph> from the archive might lead to recursion.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By switching states, <ph id="ph1">`CSocket`</ph> prevents recursion by preventing additional notifications.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The general rule is no notifications within notifications.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSocketFile`</ph> can also be used as a (limited) file without a <ph id="ph2">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">`CSocketFile`</ph> constructor's <ph id="ph2">`bArchiveCompatible`</ph> parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This specifies that the file object is for use with an archive.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To use the file object without an archive, pass <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> in the <ph id="ph1">`bArchiveCompatible`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In its "archive compatible" mode, a <ph id="ph1">`CSocketFile`</ph> object provides better performance and reduces the danger of a "deadlock."</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A deadlock occurs when both the sending and receiving sockets are waiting on each other, or waiting for a common resource.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This situation might occur if the <ph id="ph1">`CArchive`</ph> object worked with the <ph id="ph2">`CSocketFile`</ph> the way it does with a <ph id="ph3">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CFile`</ph>, the archive can assume that if it receives fewer bytes than it requested, the end of file has been reached.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CSocketFile`</ph>, however, data is message based; the buffer can contain multiple messages, so receiving fewer than the number of bytes requested does not imply end of file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The application does not block in this case as it might with <ph id="ph1">`CFile`</ph>, and it can continue reading messages from the buffer until the buffer is empty.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IsBufferEmpty<ept id="p1">](../mfc/reference/carchive-class.md#carchive__isbufferempty)</ept> function in <ph id="ph1">`CArchive`</ph> is useful for monitoring the state of the archive's buffer in such a case.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Sockets: Using Sockets with Archives<ept id="p1">](../mfc/windows-sockets-using-sockets-with-archives.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Windows Sockets in MFC</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CObject::Serialize</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>