<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97eda4a08f78acb50af3f995fb9b1dcf09b5d3f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\deriving-a-class-from-cobject.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a796d455a5a877383f5ac9c7abc3fd7f868c5a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">712707b68c4536e48761eff60b6ebb386400203d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deriving a Class from CObject | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Deriving a Class from CObject</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the minimum steps necessary to derive a class from <bpt id="p1">[</bpt>CObject<ept id="p1">](../mfc/reference/cobject-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Other <ph id="ph1">`CObject`</ph> class articles describe the steps needed to take advantage of specific <ph id="ph2">`CObject`</ph> features, such as serialization and diagnostic debugging support.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the discussions of <ph id="ph1">`CObject`</ph>, the terms "interface file" and "implementation file" are used frequently.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The interface file (often called the header file, or .H file) contains the class declaration and any other information needed to use the class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The implementation file (or .CPP file) contains the class definition as well as the code that implements the class member functions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, for a class named <ph id="ph1">`CPerson`</ph>, you would typically create an interface file named PERSON.H and an implementation file named PERSON.CPP.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, for some small classes that will not be shared among applications, it is sometimes easier to combine the interface and implementation into a single .CPP file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can choose from four levels of functionality when deriving a class from <ph id="ph1">`CObject`</ph>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Basic functionality: No support for run-time class information or serialization but includes diagnostic memory management.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Basic functionality plus support for run-time class information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Basic functionality plus support for run-time class information and dynamic creation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Basic functionality plus support for run-time class information, dynamic creation, and serialization.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Classes designed for reuse (those that will later serve as base classes) should at least include run-time class support and serialization support, if any future serialization need is anticipated.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You choose the level of functionality by using specific declaration and implementation macros in the declaration and implementation of the classes you derive from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table shows the relationship among the macros used to support serialization and run-time information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Macros Used for Serialization and Run-Time Information</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Macro used</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CObject::IsKindOf</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CRuntimeClass::</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CreateObject</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CArchive::operator&gt;&gt;</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CArchive::operator&lt;&lt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Basic <ph id="ph1">`CObject`</ph> functionality</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To use basic CObject functionality</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use the normal C++ syntax to derive your class from <ph id="ph1">`CObject`</ph> (or from a class derived from <ph id="ph2">`CObject`</ph>).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example shows the simplest case, the derivation of a class from <ph id="ph1">`CObject`</ph>:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#1</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Normally, however, you may want to override some of <ph id="ph1">`CObject`</ph>'s member functions to handle the specifics of your new class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, you may usually want to override the <ph id="ph1">`Dump`</ph> function of <ph id="ph2">`CObject`</ph> to provide debugging output for the contents of your class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For details on how to override <ph id="ph1">`Dump`</ph>, see the article <bpt id="p1">[</bpt>Diagnostics: Dumping Object Contents<ept id="p1">](http://msdn.microsoft.com/en-us/727855b1-5a83-44bd-9fe3-f1d535584b59)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You may also want to override the <ph id="ph1">`AssertValid`</ph> function of <ph id="ph2">`CObject`</ph> to provide customized testing to validate the consistency of the data members of class objects.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a description of how to override <ph id="ph1">`AssertValid`</ph>, see <bpt id="p1">[</bpt>MFC ASSERT_VALID and CObject::AssertValid<ept id="p1">](http://msdn.microsoft.com/en-us/7654fb75-9e9a-499a-8165-0a96faf2d5e6)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>Specifying Levels of Functionality<ept id="p1">](../mfc/specifying-levels-of-functionality.md)</ept> describes how to specify other levels of functionality, including run-time class information, dynamic object creation, and serialization.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Using CObject</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>