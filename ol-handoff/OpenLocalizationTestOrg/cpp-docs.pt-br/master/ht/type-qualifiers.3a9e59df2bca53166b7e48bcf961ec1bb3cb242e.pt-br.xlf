<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b73e089cd4a334da33e5a4dc16e4ca22d6dfb4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\type-qualifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87c211c1f16f536235a13661a6651ddfe9d1b837</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08d8e2a7e185256b0f2aa8124c3797487bc0de69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Qualifiers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Qualifiers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Type qualifiers give one of two properties to an identifier.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> type qualifier declares an object to be nonmodifiable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> type qualifier declares an item whose value can legitimately be changed by something beyond the control of the program in which it appears, such as a concurrently executing thread.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The two type qualifiers, <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph>, can appear only once in a declaration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type qualifiers can appear with any type specifier; however, they cannot appear after the first comma in a multiple item declaration.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the following declarations are legal:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These declarations are not legal:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Type qualifiers are relevant only when accessing identifiers as l-values in expressions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>L-Value and R-Value Expressions<ept id="p1">](../c-language/l-value-and-r-value-expressions.md)</ept> for information about l-values and expressions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>constvolatile</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following are legal <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph> declarations:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the specification of an array type includes type qualifiers, the element is qualified, not the array type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the specification of the function type includes qualifiers, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`volatile`</ph> nor <bpt id="p1">**</bpt>const<ept id="p1">**</ept> affects the range of values or arithmetic properties of the object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This list describes how to use <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword can be used to modify any fundamental or aggregate type, or a pointer to an object of any type, or a <ph id="ph1">`typedef`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an item is declared with only the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> type qualifier, its type is taken to be <bpt id="p2">**</bpt>const int<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>const<ept id="p1">**</ept> variable can be initialized or can be placed in a read-only region of storage.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword is useful for declaring pointers to <bpt id="p2">**</bpt>const<ept id="p2">**</ept> since this requires the function not to change the pointer in any way.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The compiler assumes that, at any point in the program, a <ph id="ph1">`volatile`</ph> variable can be accessed by an unknown process that uses or modifies its value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, regardless of the optimizations specified on the command line, the code for each assignment to or reference of a <ph id="ph1">`volatile`</ph> variable must be generated even if it appears to have no effect.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`volatile`</ph> is used alone, <ph id="ph2">`int`</ph> is assumed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> type specifier can be used to provide reliable access to special memory locations.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`volatile`</ph> with data objects that may be accessed or altered by signal handlers, by concurrently executing programs, or by special hardware such as memory-mapped I/O control registers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can declare a variable as <ph id="ph1">`volatile`</ph> for its lifetime, or you can cast a single reference to be <ph id="ph2">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An item can be both <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph>, in which case the item could not be legitimately modified by its own program, but could be modified by some asynchronous process.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Declarations and Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>