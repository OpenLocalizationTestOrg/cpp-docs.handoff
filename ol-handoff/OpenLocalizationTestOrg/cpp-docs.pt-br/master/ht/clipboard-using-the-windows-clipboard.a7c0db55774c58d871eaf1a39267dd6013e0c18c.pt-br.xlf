<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">417f7b1bf2193e726822b64471cf00ac628404b3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\clipboard-using-the-windows-clipboard.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef03ebfe9db194692e993ff2ea940b4c97ee627e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84ac11bf5b5cb86a52363b48a451539ae9ec1383</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Clipboard: Using the Windows Clipboard | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Clipboard: Using the Windows Clipboard</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to use the standard Windows Clipboard API within your MFC application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most applications for Windows support cutting or copying data to the Windows Clipboard and pasting data from the Clipboard.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Clipboard data formats vary among applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The framework supports only a limited number of Clipboard formats for a limited number of classes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You will normally implement the Clipboard-related commands — Cut, Copy, and Paste — on the Edit menu for your view.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The class library defines the command IDs for these commands: <bpt id="p1">**</bpt>ID_EDIT_CUT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ID_EDIT_COPY<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>ID_EDIT_PASTE<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Their message-line prompts are also defined.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Messages and Commands in the Framework<ept id="p1">](../mfc/messages-and-commands-in-the-framework.md)</ept> explains how to handle menu commands in your application by mapping the menu command to a handler function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As long as your application does not define handler functions for the Clipboard commands on the Edit menu, they remain disabled.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To write handler functions for the Cut and Copy commands, implement selection in your application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To write a handler function for the Paste command, query the Clipboard to see whether it contains data in a format your application can accept.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, to enable the Copy command, you might write a handler something like the following:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_MFCListView#2</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Cut, Copy, and Paste commands are only meaningful in certain contexts.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Cut and Copy commands should be enabled only when something is selected, and the Paste command only when something is in the Clipboard.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can provide this behavior by defining update handler functions that enable or disable these commands depending on the context.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to Update User-Interface Objects<ept id="p1">](../mfc/how-to-update-user-interface-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library does provide Clipboard support for text editing with the <ph id="ph1">`CEdit`</ph> and <ph id="ph2">`CEditView`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The OLE classes also simplify implementing Clipboard operations that involve OLE items.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information on the OLE classes, see <bpt id="p1">[</bpt>Clipboard: Using the OLE Clipboard Mechanism<ept id="p1">](../mfc/clipboard-using-the-ole-clipboard-mechanism.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implementing other Edit menu commands, such as Undo (<bpt id="p1">**</bpt>ID_EDIT_UNDO<ept id="p1">**</ept>) and Redo (<bpt id="p2">**</bpt>ID_EDIT_REDO<ept id="p2">**</ept>), is also left to you.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your application does not support these commands, you can easily delete them from your resource file using the Visual C++ resource editors.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Copying and pasting data</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using the OLE Clipboard mechanism</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Clipboard</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>