<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">172ba3554f3e77fad8dd52e9c9916528ba9a93de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\data-type-specifiers-and-equivalents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c67990659ed6245b4df96a42ac59ca489b5fef64</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">646f7f96a406bc7676897c33af6042244d868898</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data Type Specifiers and Equivalents | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Type Specifiers and Equivalents</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This book generally uses the forms of the type specifiers listed in the following table rather than the long forms, and it assumes that the <ph id="ph1">`char`</ph> type is signed by default.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Therefore, throughout this book, <ph id="ph1">`char`</ph> is equivalent to <bpt id="p1">**</bpt>signed char<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Type Specifiers and Equivalents</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type Specifier</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Equivalent(s)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>signed char<ept id="p1">**</ept>1</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>signed int</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>signed<ept id="p1">**</ept>,</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>signed short int</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>short<ept id="p1">**</ept>,</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>signed long int</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>long<ept id="p1">**</ept>, <bpt id="p2">**</bpt>signed long<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>unsigned short int</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>unsigned long int</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>1   When you make the <ph id="ph1">`char`</ph> type unsigned by default (by specifying the /J compiler option), you cannot abbreviate <bpt id="p1">**</bpt>signed char<ept id="p1">**</ept> as <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>2   In 32-bit operating systems, the Microsoft C compiler maps <bpt id="p1">**</bpt>long double<ept id="p1">**</ept> to type <bpt id="p2">**</bpt>double<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can specify the /J compiler option to change the default <ph id="ph1">`char`</ph> type from signed to unsigned.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When this option is in effect, <ph id="ph1">`char`</ph> means the same as <ph id="ph2">`unsigned char`</ph>, and you must use the <bpt id="p1">**</bpt>signed<ept id="p1">**</ept> keyword to declare a signed character value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`char`</ph> value is explicitly declared signed, the /J option does not affect it, and the value is sign-extended when widened to an <ph id="ph2">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`char`</ph> type is zero-extended when widened to <ph id="ph2">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>C Type Specifiers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>