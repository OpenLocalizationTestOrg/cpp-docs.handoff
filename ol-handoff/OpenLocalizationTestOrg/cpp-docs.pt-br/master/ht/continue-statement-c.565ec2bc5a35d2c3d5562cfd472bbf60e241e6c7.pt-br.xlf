<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e6d9662870a41b6ffe7e534653948f14e251962</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\continue-statement-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3145fa2f125e547bf997aa62ab4545e14c2824aa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec6de6491c21238a7e6e06dd9ba2bf78754330ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>continue Statement (C) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>continue Statement (C)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`continue`</ph> statement passes control to the next iteration of the nearest enclosing <ph id="ph2">`do`</ph>, <ph id="ph3">`for`</ph>, or <ph id="ph4">`while`</ph> statement in which it appears, bypassing any remaining statements in the <ph id="ph5">`do`</ph>, <ph id="ph6">`for`</ph>, or <ph id="ph7">`while`</ph> statement body.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The next iteration of a <ph id="ph1">`do`</ph>, <ph id="ph2">`for`</ph>, or <ph id="ph3">`while`</ph> statement is determined as follows:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Within a <ph id="ph1">`do`</ph> or a <ph id="ph2">`while`</ph> statement, the next iteration starts by reevaluating the expression of the <ph id="ph3">`do`</ph> or <ph id="ph4">`while`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`continue`</ph> statement in a <ph id="ph2">`for`</ph> statement causes the loop expression of the <ph id="ph3">`for`</ph> statement to be evaluated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Then the compiler reevaluates the conditional expression and, depending on the result, either terminates or iterates the statement body.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>The for Statement<ept id="p1">](../c-language/for-statement-c.md)</ept> for more information on the <ph id="ph1">`for`</ph> statement and its nonterminals.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is an example of the <ph id="ph1">`continue`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example, the statement body is executed while <ph id="ph1">`i`</ph> is greater than 0.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First <ph id="ph1">`f(i)`</ph> is assigned to <ph id="ph2">`x`</ph>; then, if <ph id="ph3">`x`</ph> is equal to 1, the <ph id="ph4">`continue`</ph> statement is executed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The rest of the statements in the body are ignored, and execution resumes at the top of the loop with the evaluation of the loop's test.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>continue Statement</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>