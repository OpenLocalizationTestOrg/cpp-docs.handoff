<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f11a507cb9fd76dab1e7bb330941e11dfbbb11ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-stringbuf-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f9ee9393e296e4558803b417c71f4508d073134</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d754c1c76947886f2bdfd5f82f85a67d38cb9cb3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_stringbuf Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_stringbuf Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes a stream buffer that controls the transmission of elements of type <ph id="ph1">`Elem`</ph>, whose character traits are determined by the class <ph id="ph2">`Tr`</ph>, to and from a sequence of elements stored in an array object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The allocator class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of the basic element of the string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The character traits specialized on the basic element of the string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The object is allocated, extended, and freed as necessary to accommodate changes in the sequence.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An object of class basic_stringbuf&lt; <ph id="ph1">`Elem`</ph>, <ph id="ph2">`Tr`</ph>, <ph id="ph3">`Alloc`</ph>&gt; stores a copy of the <ph id="ph4">`ios_base::`</ph><bpt id="p1">[</bpt>openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept> argument from its constructor as its <ph id="ph5">`stringbuf`</ph> mode <bpt id="p2">**</bpt>mode<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mode &amp; ios_base::in`</ph> is nonzero, the input buffer is accessible.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_streambuf Class<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mode &amp; ios_base::out`</ph> is nonzero, the output buffer is accessible.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>basic_stringbuf</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_stringbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <ph id="ph1">`Elem`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>int_type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Makes this type within <ph id="ph1">`basic_filebuf`</ph>'s scope equivalent to the type of the same name in the <ph id="ph2">`Tr`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>off_type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Makes this type within <ph id="ph1">`basic_filebuf`</ph>'s scope equivalent to the type of the same name in the <ph id="ph2">`Tr`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>pos_type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Makes this type within <ph id="ph1">`basic_filebuf`</ph>'s scope equivalent to the type of the same name in the <ph id="ph2">`Tr`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <ph id="ph1">`Tr`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>overflow</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A protected, virtual function that can be called when a new character is inserted into a full buffer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>pbackfail</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to put back an element into the input buffer, then makes it the current element (pointed to by the next pointer).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>seekoff</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>seekpos</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>str</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Sets or gets the text in a string buffer without changing the write position.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>underflow</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The protected virtual member function to extract the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>sstream&gt;</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::allocator_type</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::basic_stringbuf</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_stringbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>One of the enumerations in <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An object of type <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The first constructor stores a null pointer in all the pointers controlling the input buffer and the output buffer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section of the <bpt id="p1">[</bpt>basic_streambuf Class<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It also stores <ph id="ph1">`_Mode`</ph> as the stringbuf mode.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section of the <bpt id="p1">[</bpt>basic_stringbuf Class<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The second constructor allocates a copy of the sequence controlled by the string object <ph id="ph1">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Mode &amp; ios_base::in`</ph> is nonzero, it sets the input buffer to start reading at the start of the sequence.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Mode &amp; ios_base::out`</ph> is nonzero, it sets the output buffer to begin writing at the start of the sequence.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It also stores <ph id="ph1">`_Mode`</ph> as the stringbuf mode.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section of the <bpt id="p1">[</bpt>basic_stringbuf Class<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::char_type</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept> template parameter.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::int_type</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Makes this type within basic_filebuf's scope equivalent to the type of the same name in the <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept> scope.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::off_type</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Makes this type within basic_filebuf's scope equivalent to the type of the same name in the <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept> scope.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::overflow</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A protected virtual function that can be called when a new character is inserted into a full buffer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The character to insert into the buffer, or <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>not_eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__not_eof)</ept>(_ <bpt id="p3">*</bpt>Meta<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Meta<ept id="p1">*</ept> does not compare equal to <bpt id="p2">**</bpt>traits_type::<ept id="p2">**</ept><bpt id="p3">[</bpt>eof<ept id="p3">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, the protected virtual member function tries to insert the element <bpt id="p4">**</bpt>traits_type::<ept id="p4">**</ept><bpt id="p5">[</bpt>to_char_type<ept id="p5">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(<ph id="ph1">\_</ph> <bpt id="p6">*</bpt>Meta<ept id="p6">*</ept>) into the output buffer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It can do so in various ways:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If a write position is available, it can store the element into the write position and increment the next pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It can make a write position available by allocating new or additional storage for the output buffer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Extending the output buffer this way also extends any associated input buffer.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::pbackfail</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to put back an element into the input buffer, and then make it the current element (pointed to by the next pointer).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The character to insert into the buffer, or <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>not_eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__not_eof)</ept>(_ <bpt id="p3">*</bpt>Meta<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Meta`</ph> compares equal to <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, the element to push back is effectively the one already in the stream before the current element.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Otherwise, that element is replaced by <bpt id="p1">**</bpt>byte<ept id="p1">**</ept><ph id="ph1"> = </ph><bpt id="p2">**</bpt>traits_type::<ept id="p2">**</ept><bpt id="p3">[</bpt>to_char_type<ept id="p3">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(_ <bpt id="p4">*</bpt>Meta<ept id="p4">*</ept>).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The function can put back an element in various ways:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If a putback position is available, and the element stored there compares equal to byte, it can decrement the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If a putback position is available, and if the stringbuf mode permits the sequence to be altered ( <bpt id="p1">**</bpt>mode &amp; ios_base::out<ept id="p1">**</ept> is nonzero), it can store byte into the putback position and decrement the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::pos_type</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Makes this type within basic_filebuf's scope equivalent to the type of the same name in the <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept> scope.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::seekoff</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The position to seek for relative to <ph id="ph1">`_Way`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_stringbuf::off_type<ept id="p1">](#basic_stringbuf__off_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The starting point for offset operations.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ios_base::seekdir<ept id="p1">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> for possible values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns the new position or an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For an object of class <ph id="ph1">`basic_stringbuf&lt;Elem, Tr, Alloc&gt;`</ph>, a stream position consists purely of a stream offset.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Offset zero designates the first element of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The new position is determined as follows:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::beg`</ph>, the new position is the beginning of the stream plus <ph id="ph2">`_Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::cur`</ph>, the new position is the current stream position plus <ph id="ph2">`_Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::end`</ph>, the new position is the end of the stream plus <ph id="ph2">`_Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Mode &amp; ios_base::in`</ph> is nonzero, the function alters the next position to read in the input buffer.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Mode &amp; ios_base::out`</ph> is nonzero, the function alters the next position to write in the output buffer.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For a stream to be affected, its buffer must exist.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For a positioning operation to succeed, the resulting stream position must lie within the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the function affects both stream positions, <ph id="ph1">`_Way`</ph> must be <ph id="ph2">`ios_base::beg`</ph> or <ph id="ph3">`ios_base::end`</ph> and both streams are positioned at the same element.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Otherwise (or if neither position is affected), the positioning operation fails.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the function succeeds in altering either or both of the stream positions, it returns the resultant stream position.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Otherwise, it fails and returns an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::seekpos</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The position to seek for.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If the function succeeds in altering either or both of the stream positions, it returns the resultant stream position.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Otherwise, it fails and returns an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>To determine if the stream position is invalid, compare the return value with <ph id="ph1">`pos_type(off_type(-1))`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For an object of class basic_stringbuf&lt; <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Tr<ept id="p2">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;, a stream position consists purely of a stream offset.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Offset zero designates the first element of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The new position is determined by _ <bpt id="p1">*</bpt>Sp<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::in<ept id="p1">**</ept> is nonzero, the function alters the next position to read in the input buffer.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::out<ept id="p1">**</ept> is nonzero, the function alters the next position to write in the output buffer.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For a stream to be affected, its buffer must exist.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For a positioning operation to succeed, the resulting stream position must lie within the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Otherwise (or if neither position is affected), the positioning operation fails.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::str</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Sets or gets the text in a string buffer without changing the write position.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The new string.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Returns an object of class <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept><ph id="ph1">\&lt;</ph> <bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, Alloc <bpt id="p4">**</bpt>&gt;,<ept id="p4">**</ept> whose controlled sequence is a copy of the sequence controlled by <bpt id="p5">**</bpt><ph id="ph2">\*</ph>this<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The first member function returns an object of class basic_string&lt; <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Tr<ept id="p2">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;, whose controlled sequence is a copy of the sequence controlled by <bpt id="p3">**</bpt><ph id="ph2">\*</ph>this<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The sequence copied depends on the stored stringbuf mode:</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::out<ept id="p1">**</ept> is nonzero and an output buffer exists, the sequence is the entire output buffer ( <bpt id="p2">[</bpt>epptr<ept id="p2">](../standard-library/basic-streambuf-class.md#basic_streambuf__epptr)</ept><ph id="ph1"> - </ph><bpt id="p3">[</bpt>pbase<ept id="p3">](../standard-library/basic-streambuf-class.md#basic_streambuf__pbase)</ept> elements beginning with <ph id="ph2">`pbase`</ph>).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::in<ept id="p1">**</ept> is nonzero and an input buffer exists, the sequence is the entire input buffer ( <bpt id="p2">[</bpt>egptr<ept id="p2">](../standard-library/basic-streambuf-class.md#basic_streambuf__egptr)</ept><ph id="ph1"> - </ph><bpt id="p3">[</bpt>eback<ept id="p3">](../standard-library/basic-streambuf-class.md#basic_streambuf__eback)</ept> elements beginning with <ph id="ph2">`eback`</ph>).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Otherwise, the copied sequence is empty.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The second member function deallocates any sequence currently controlled by <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>It then allocates a copy of the sequence controlled by <ph id="ph1">`_Newstr`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::in<ept id="p1">**</ept> is nonzero, it sets the input buffer to start reading at the beginning of the sequence.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mode &amp; ios_base::out<ept id="p1">**</ept> is nonzero, it sets the output buffer to start writing at the beginning of the sequence.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::traits_type</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept> template parameter.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::underflow</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Protected, virtual function to extract the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the current element in the input stream, which are converted.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to extract the current element <bpt id="p1">**</bpt>byte<ept id="p1">**</ept> from the input buffer, advance the current stream position, and return the element as <bpt id="p2">**</bpt>traits_type::<ept id="p2">**</ept><bpt id="p3">[</bpt>to_int_type<ept id="p3">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id="p4">**</bpt>byte<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It can do so in one way: If a read position is available, it takes <bpt id="p1">**</bpt>byte<ept id="p1">**</ept> as the element stored in the read position and advances the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>basic_streambuf::swap</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Swaps the contents of this string buffer with another string buffer.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The basic_stringbuf whose contents will be swapped with this basic_stringbuf.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>basic_stringbuf::operator=</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Assigns the contents of the basic_stringbuf on the right side of the operator to the basic_stringbuf on the left side..</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A basic_stringbuf whose contents, including locale traits, will be assigned to the stringbuf on the left side of the operator.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>