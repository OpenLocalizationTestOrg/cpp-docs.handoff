<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62c9d69f0cdce3b108a03951301746e61a91f4ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\drawing-in-a-view.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b749c7220f9d1016254e92997edb427f5ef5951</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c06f97eeba1c0d49295b5655fdaff2c33c7637d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Drawing in a View | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Drawing in a View</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Nearly all drawing in your application occurs in the view's <ph id="ph1">`OnDraw`</ph> member function, which you must override in your view class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(The exception is mouse drawing, discussed in <bpt id="p1">[</bpt>Interpreting User Input Through a View<ept id="p1">](../mfc/interpreting-user-input-through-a-view.md)</ept>.) Your <ph id="ph1">`OnDraw`</ph> override:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Gets data by calling the document member functions you provide.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Displays the data by calling member functions of a device-context object that the framework passes to <ph id="ph1">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a document's data changes in some way, the view must be redrawn to reflect the changes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typically, this happens when the user makes a change through a view on the document.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this case, the view calls the document's <bpt id="p1">[</bpt>UpdateAllViews<ept id="p1">](../mfc/reference/cdocument-class.md#cdocument__updateallviews)</ept> member function to notify all views on the same document to update themselves.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>calls each view's <bpt id="p1">[</bpt>OnUpdate<ept id="p1">](../mfc/reference/cview-class.md#cview__onupdate)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnUpdate`</ph> invalidates the view's entire client area.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can override it to invalidate only those regions of the client area that map to the modified portions of the document.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UpdateAllViews`</ph> member function of class <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> and the <ph id="ph2">`OnUpdate`</ph> member function of class <ph id="ph3">`CView`</ph> let you pass information describing what parts of the document were modified.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This "hint" mechanism lets you limit the area that the view must redraw.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>takes two "hint" arguments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The first, <ph id="ph1">`lHint`</ph>, of type <bpt id="p1">**</bpt>LPARAM<ept id="p1">**</ept>, lets you pass any data you like, while the second, <ph id="ph2">`pHint`</ph>, of type <ph id="ph3">`CObject`</ph>*, lets you pass a pointer to any object derived from <ph id="ph4">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When a view becomes invalid, Windows sends it a <ph id="ph1">`WM_PAINT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The view's <bpt id="p1">[</bpt>OnPaint<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__onpaint)</ept> handler function responds to the message by creating a device-context object of class <bpt id="p2">[</bpt>CPaintDC<ept id="p2">](../mfc/reference/cpaintdc-class.md)</ept> and calls your view's <ph id="ph1">`OnDraw`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You do not normally have to write an overriding <ph id="ph1">`OnPaint`</ph> handler function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>device context<ept id="p1">](../mfc/device-contexts.md)</ept> is a Windows data structure that contains information about the drawing attributes of a device such as a display or a printer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All drawing calls are made through a device-context object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For drawing on the screen, <ph id="ph1">`OnDraw`</ph> is passed a <ph id="ph2">`CPaintDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For drawing on a printer, it is passed a <bpt id="p1">[</bpt>CDC<ept id="p1">](../mfc/reference/cdc-class.md)</ept> object set up for the current printer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Your code for drawing in the view first retrieves a pointer to the document, then makes drawing calls through the device context.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following simple <ph id="ph1">`OnDraw`</ph> example illustrates the process:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#1</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this example, you would define the <ph id="ph1">`GetData`</ph> function as a member of your derived document class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The example prints whatever string it gets from the document, centered in the view.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`OnDraw`</ph> call is for screen drawing, the <ph id="ph2">`CDC`</ph> object passed in <ph id="ph3">`pDC`</ph> is a <ph id="ph4">`CPaintDC`</ph> whose constructor has already called <ph id="ph5">`BeginPaint`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Calls to drawing functions are made through the device-context pointer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about device contexts and drawing calls, see class <bpt id="p1">[</bpt>CDC<ept id="p1">](../mfc/reference/cdc-class.md)</ept> in the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept> and <bpt id="p3">[</bpt>Working with Window Objects<ept id="p3">](../mfc/working-with-window-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more examples of how to write <ph id="ph1">`OnDraw`</ph>, see the <bpt id="p1">[</bpt>MFC Samples<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Using Views</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>