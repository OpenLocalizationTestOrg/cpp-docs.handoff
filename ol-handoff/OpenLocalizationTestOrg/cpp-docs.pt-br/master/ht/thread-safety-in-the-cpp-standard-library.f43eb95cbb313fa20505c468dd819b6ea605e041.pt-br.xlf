<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df3fe2b0816b53bfe5d557a335f4eb33daec2b27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\thread-safety-in-the-cpp-standard-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c069eae861430f6874ded135b52908984ea32363</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fcce0800257ad469659b6c816acf9ba89054081</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following thread safety rules apply to all classes in the Standard C++ Library—this includes <ph id="ph1">`shared_ptr`</ph>, as described below.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Stronger guarantees are sometimes provided—for example, the standard iostream objects, as described below, and types specifically intended for multithreading, like those in <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>atomic&gt;<ept id="p1">](../standard-library/atomic.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An object is thread-safe for reading from multiple threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, given an object A, it is safe to read A from thread 1 and from thread 2 simultaneously.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If an object is being written to by one thread, then all reads and writes to that object on the same or other threads must be protected.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, given an object A, if thread 1 is writing to A, then thread 2 must be prevented from reading from or writing to A.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is safe to read and write to one instance of a type even if another thread is reading or writing to a different instance of the same type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, given objects A and B of the same type, it is safe when A is being written in thread 1 and B is being read in thread 2.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>shared_ptr</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Multiple threads can simultaneously read and write different <bpt id="p1">[</bpt>shared_ptr<ept id="p1">](../standard-library/shared-ptr-class.md)</ept> objects, even when the objects are copies that share ownership.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>iostream</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The standard iostream objects <ph id="ph1">`cin`</ph>, <ph id="ph2">`cout`</ph>, <ph id="ph3">`cerr`</ph>, <ph id="ph4">`clog`</ph>, <ph id="ph5">`wcin`</ph>, <ph id="ph6">`wcout`</ph>, <ph id="ph7">`wcerr`</ph>, and <ph id="ph8">`wclog`</ph> follow the same rules as the other classes, with this exception: it is safe to write to an object from multiple threads.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, thread 1 can write to <bpt id="p1">[</bpt>cout<ept id="p1">](../standard-library/iostream.md#cout)</ept> at the same time as thread 2.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, this can cause the output from the two threads to be intermixed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reading from a stream buffer is not considered to be a read operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instead it is considered to be a write operation because the state of the class is changed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>STL Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>