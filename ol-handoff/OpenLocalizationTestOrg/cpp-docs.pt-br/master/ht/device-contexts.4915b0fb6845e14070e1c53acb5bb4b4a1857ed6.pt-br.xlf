<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f419ced14de3d5a8873448c8589b85dcdce49449</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\device-contexts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec4b6a987c2bb4387efacd8484b5000e1700d59b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff74167e2b8b5b4240b81c91184221109dde0d4b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Device Contexts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Device Contexts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All drawing calls are made through a device-context object, which encapsulates the Windows APIs for drawing lines, shapes, and text.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Device contexts allow device-independent drawing in Windows.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Device contexts can be used to draw to the screen, to the printer, or to a metafile.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPaintDC<ept id="p1">](../mfc/reference/cpaintdc-class.md)</ept> objects encapsulate the common idiom of Windows, calling the <ph id="ph1">`BeginPaint`</ph> function, then drawing in the device context, then calling the <ph id="ph2">`EndPaint`</ph> function.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CPaintDC`</ph> constructor calls <ph id="ph2">`BeginPaint`</ph> for you, and the destructor calls <ph id="ph3">`EndPaint`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The simplified process is to create the <bpt id="p1">[</bpt>CDC<ept id="p1">](../mfc/reference/cdc-class.md)</ept> object, draw, and then destroy the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the framework, much of even this process is automated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In particular, your <ph id="ph1">`OnDraw`</ph> function is passed a <ph id="ph2">`CPaintDC`</ph> already prepared (via <ph id="ph3">`OnPrepareDC`</ph>), and you simply draw into it.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is destroyed by the framework and the underlying device context is released to Windows upon return from the call to your <ph id="ph1">`OnDraw`</ph> function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CClientDC<ept id="p1">](../mfc/reference/cclientdc-class.md)</ept> objects encapsulate working with a device context that represents only the client area of a window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CClientDC`</ph> constructor calls the <ph id="ph2">`GetDC`</ph> function, and the destructor calls the <ph id="ph3">`ReleaseDC`</ph> function.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWindowDC<ept id="p1">](../mfc/reference/cwindowdc-class.md)</ept> objects encapsulate a device context that represents the whole window, including its frame.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMetaFileDC<ept id="p1">](../mfc/reference/cmetafiledc-class.md)</ept> objects encapsulate drawing into a Windows metafile.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In contrast to the <ph id="ph1">`CPaintDC`</ph> passed to <ph id="ph2">`OnDraw`</ph>, you must in this case call <bpt id="p1">[</bpt>OnPrepareDC<ept id="p1">](../mfc/reference/cview-class.md#cview__onpreparedc)</ept> yourself.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Mouse Drawing</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Most drawing in a framework program — and thus most device-context work — is done in the view's <ph id="ph1">`OnDraw`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, you can still use device-context objects for other purposes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, to provide tracking feedback for mouse movement in a view, you need to draw directly into the view without waiting for <ph id="ph1">`OnDraw`</ph> to be called.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In such a case, you can use a <bpt id="p1">[</bpt>CClientDC<ept id="p1">](../mfc/reference/cclientdc-class.md)</ept> device-context object to draw directly into the view.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Device contexts (definition)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Drawing in a View</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Interpreting User Input Through a View</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Lines and curves</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Filled shapes</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Fonts and text</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Colors</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Coordinate spaces and transformations</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Window Objects</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>