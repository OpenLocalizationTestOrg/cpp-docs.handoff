<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21d253dae17b212dd6011205a5d149117fa7e389</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\conversions-from-unsigned-integral-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7919ee71bcceb5b18664aaeaecec308378b69963</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e30d43d89e780bfac98625a2138533da828e14e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Conversions from Unsigned Integral Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conversions from Unsigned Integral Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An unsigned integer is converted to a shorter unsigned or signed integer by truncating the high-order bits, or to a longer unsigned or signed integer by zero-extending (see the <bpt id="p1">[</bpt>Conversions from Unsigned Integral Types<ept id="p1">](#_clang_table_4..3)</ept> table).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When the value with integral type is demoted to a signed integer with smaller size, or an unsigned integer is converted to its corresponding signed integer, the value is unchanged if it can be represented in the new type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the value it represents changes if the sign bit is set, as in the following example.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If it cannot be represented, the result is implementation-defined.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Type-Cast Conversions<ept id="p1">](../c-language/type-cast-conversions.md)</ept> for information on the Microsoft C compiler's handling of demotion of integers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The same behavior results from integer conversion or from type casting the integer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Unsigned values are converted in a way that preserves their value and is not representable directly in C. The only exception is a conversion from <ph id="ph1">`unsigned long`</ph> to <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, which loses at most the low-order bits.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Otherwise, value is preserved, signed or unsigned.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a value of integral type is converted to floating, and the value is outside the range representable, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Storage of Basic Types<ept id="p1">](../c-language/storage-of-basic-types.md)</ept> for information about the range for integral and floating-point types.)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table summarizes conversions from unsigned integral types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Conversions from Unsigned Integral Types</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>From</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Preserve bit pattern; high-order bit becomes sign bit</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>float<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>double<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>double<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Preserve low-order byte</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Preserve bit pattern; high-order bit becomes sign bit</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Preserve low-order byte</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Zero-extend</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>float<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>double<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>double<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Preserve low-order byte</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Preserve low-order word</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Preserve bit pattern; high-order bit becomes sign bit</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Preserve low-order byte</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Preserve low-order word</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>float<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Convert directly to <bpt id="p1">**</bpt>double<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Convert to <bpt id="p1">**</bpt>long<ept id="p1">**</ept>; convert <bpt id="p2">**</bpt>long<ept id="p2">**</ept> to <bpt id="p3">**</bpt>double<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For the Microsoft 32-bit C compiler, the <ph id="ph1">`unsigned int`</ph> type is equivalent to the <ph id="ph2">`unsigned long`</ph> type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Conversion of an <ph id="ph1">`unsigned int`</ph> value proceeds in the same way as conversion of an <ph id="ph2">`unsigned long`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Conversions from <ph id="ph1">`unsigned long`</ph> values to <bpt id="p1">**</bpt>float<ept id="p1">**</ept> are not accurate if the value being converted is larger than the maximum positive signed <bpt id="p2">**</bpt>long<ept id="p2">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Assignment Conversions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>