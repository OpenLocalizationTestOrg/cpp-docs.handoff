<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">349d218329d42f980f278634630b6c170e19bda6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-define-and-use-delegates-cpp-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16464cfb5b6ae1be080f9df1eb1d61bd3fd512b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc29e4f7faa313d11834c5db31702e5c1909c2c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Define and Use Delegates (C++-CLI) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Define and Use Delegates (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article shows how to define and consume delegates in <ph id="ph1">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although the .NET Framework provides a number of delegates, sometimes you might have to define new delegates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following code example defines a delegate that's named <ph id="ph1">`MyCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The event-handling code—the function that's called when this new delegate is fired—must have a return type of <ph id="ph1">`void`</ph> and take a &lt;xref:System.String&gt; reference.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The main function uses a static method that's defined by <ph id="ph1">`SomeClass`</ph> to instantiate the <ph id="ph2">`MyCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The delegate then becomes an alternate method of calling this function, as demonstrated by sending the string "single" to the delegate object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Next, additional instances of <ph id="ph1">`MyCallback`</ph> are linked together and then executed by one call to the delegate object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The next code sample shows how to associate a delegate with a member of a value class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>How to compose delegates</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the "<ph id="ph1">`-`</ph>" operator to remove a component delegate from a composed delegate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pass a delegate^ to a native function that expects a function pointer</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>From a managed component you can call a native function with function pointer parameters where the native function then can call the member function of the managed component's delegate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This sample creates the .dll that exports the native function:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The next sample consumes the .dll and passes a delegate handle to the native function that expects a function pointer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To associate delegates with unmanaged functions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To associate a delegate with a native function, you must wrap the native function in a managed type and declare the function to be invoked through <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To use unbound delegates</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use an unbound delegate to pass an instance of the type whose function you want to call when the delegate is called.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Unbound delegates are especially useful if you want to iterate through the objects in a collection—by using <bpt id="p1">[</bpt>for each, in<ept id="p1">](../dotnet/for-each-in.md)</ept> keywords—and call a member function on each instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here's how to declare, instantiate, and call bound and unbound delegates:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Bound Delegates</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Unbound Delegates</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Declare</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate signature must match the signature of the function you want to call through the delegate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The first parameter of the delegate signature is the type of <ph id="ph1">`this`</ph> for the object you want to call.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After the first parameter, the delegate signature must match the signature of the function you want to call through the delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instantiate</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you instantiate a bound delegate, you can specify an instance function, or a global or static member function.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To specify an instance function, the first parameter is an instance of the type whose member function you want to call and the second parameter is the address of the function you want to call.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you want to call a global or static member function, just pass the name of a global function or the name of the static member function.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you instantiate an unbound delegate, just pass the address of the function you want to call.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you call a bound delegate, just pass the parameters that are required by the delegate signature.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Same as a bound delegate, but remember that the first parameter must be an instance of the object that contains the function you want to call.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to declare, instantiate, and call unbound delegates:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The next sample shows how to use unbound delegates and the <bpt id="p1">[</bpt>for each, in<ept id="p1">](../dotnet/for-each-in.md)</ept> keywords to iterate through objects in a collection and call a member function on each instance.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This sample creates an unbound delegate to a property's accessor functions:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following sample shows how to invoke a multicast delegate, where one instance is bound and one instance is unbound.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The next sample shows how to create and call an unbound generic delegate.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>delegate  (C++ Component Extensions)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>