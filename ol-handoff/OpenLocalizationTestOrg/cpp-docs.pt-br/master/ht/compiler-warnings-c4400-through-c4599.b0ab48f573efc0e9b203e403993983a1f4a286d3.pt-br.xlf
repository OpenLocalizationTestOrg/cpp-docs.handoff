<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6991adb0413221ddb101d07af41f83d1bbcabe2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warnings-c4400-through-c4599.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcf69468237c2da98c0ce5a9a0c82d8f7c34f411</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">765fca5d9c3c1b3126bace2834a8e412d700d2a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warnings C4400 Through C4599 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warnings C4400 Through C4599</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The articles in this part of the documentation contain information about a subset of the Visual C++ compiler warnings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can access the information here or, in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio, you can select a warning number and then choose the F1 key.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Warning</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Message</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4600</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>pragma 'macro name': expected a valid non-empty string</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4400</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>'type': const/volatile qualifiers on this type are not supported</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4401</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>'bitfield': member is bit field</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4402</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>must use PTR operator</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4403</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>illegal PTR operator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4404</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>period on directive ignored</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4405</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>'identifier': identifier is reserved word</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4406</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>operand on directive ignored</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4407</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>cast between different pointer to member representations, compiler may generate incorrect code</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4408</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>anonymous 'struct&amp;#124;union' did not declare any data members</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4409</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>illegal instruction size</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4410</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>illegal size for operand</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4411</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>'identifier': symbol resolves to displacement register</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4412</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>'function': function signature contains type 'type'; C++ objects are unsafe to pass between pure code and mixed or native.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compiler warning C4413</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>'classname::member': reference member is initialized to a temporary that doesn't persist after the constructor exits</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4414</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>'function': short jump to function converted to near</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4415</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>duplicate __declspec(code_seg('%$I'))</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4416</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>__declspec(code_seg(...)) contains empty string: ignored</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4417</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>an explicit template instantiation cannot have __declspec(code_seg(...)): ignored</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4418</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>__declspec(code_seg(...)) ignored on an enum</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4419</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>'%$I' has no effect when applied to private ref class '%$S'.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4420</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>'checked_operator': operator not available, using 'operator' instead; run-time checking may be compromised</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4421</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>'%$I': a reference parameter on a resumable function is potentially unsafe</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4423</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>'std::bad_alloc': will be caught by class ('%$T') on line %d</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4424</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>catch for '%$T' preceded by '%$T' on line %d; unpredictable behavior may result if 'std::bad_alloc' is thrown</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4425</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A SAL annotation cannot be applied to '...'</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Compiler warning C4426</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>optimization flags changed after including header, may be due to #pragma optimize()</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4427</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>'%$L': overflow in constant division, undefined behavior</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4429</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>possible incomplete or improperly formed universal-character-name</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4430</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>missing type specifier - int assumed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note: C++ does not support default-int</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4431</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>missing type specifier - int assumed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note: C no longer supports default-int</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4434</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>a static constructor must have private accessibility; changing to private access</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4435</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>'derived_class': Object layout under /vd2 will change due to virtual base 'base_class'</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4436</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>dynamic_cast from virtual base 'base_class' to 'derived_class' in constructor or destructor could fail with partially-constructed object</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4437</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>dynamic_cast from virtual base 'base_class' to 'derived_class' could fail in some contexts</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Compiler warning C4438</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>'%$S': cannot be called safely in /await:clrcompat mode.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If '%$S' calls into the CLR it may result in CLR head corruption</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4439</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>'function': function definition with a managed type in the signature must have a __clrcall calling convention</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4440</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>calling convention redefinition from 'calling_convention1' to 'calling_convenction2' ignored</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4441</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>calling convention of 'calling_convention1' ignored; 'calling_convention2' used instead</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4442</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>embedded null terminator in __annotation argument.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Value will be truncated.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4443</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>expected pragma parameter to be '0', '1', or '2'</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4444</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>'identifier': top level '__unaligned' is not implemented in this context</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4445</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>'function': in a 'WinRT&amp;#124;managed' type a virtual method cannot be private</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4446</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>'%$S': cannot map member '%$I' into this type, due to conflict with the type name.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The method was renamed to '%$I'</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4447</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>'main' signature found without threading model.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Consider using 'int main(Platform::Array<ph id="ph1">\&lt;</ph>Platform::String^&gt;^ args)'.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Compiler warning C4448</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>'%$S' does not have a default interface specified in metadata.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Picking: '%$S', which may fail at runtime.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Compiler warning C4449</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>'%$S' an unsealed type should be marked as '[WebHostHidden]'</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Compiler warning C4450</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>'%$S' should be marked as '[WebHostHidden]' because it derives from '%$S'</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4451</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>'classname1::member': Usage of ref class 'classname2::member' inside this context can lead to invalid marshaling of object across contexts</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4452</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>'identifier': public type cannot be at global scope.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>It must be in a namespace that is a child of the name of the output .winmd file.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4453</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>'%$S': A '[WebHostHidden]' type should not be used on the published surface of a public type that is not '[WebHostHidden]'</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4454</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>'%$S' is overloaded by more than the number of input parameters without having [DefaultOverload] specified.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Picking '%$D' as the default overload</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4455</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>'operator %$I': literal suffix identifiers that do not start with an underscore are reserved</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4456</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>declaration of 'identifier' hides previous local declaration</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4457</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>declaration of 'identifier' hides function parameter</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4458</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>declaration of 'identifier' hides class member</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4459</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>declaration of 'identifier' hides global declaration</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4460</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>'WinRT&amp;#124;managed' operator 'operator', has parameter passed by reference.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>'WinRT&amp;#124;managed' operator 'operator' has different semantics from C++ operator 'cpp_operator', did you intend to pass by value?</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4461</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>'classname': this class has a finalizer '!finalizer' but no destructor '~dtor'</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4462</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>'type' : cannot determine the GUID of the type.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Program may fail at runtime.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Compiler warning C4463</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>overflow; assigning 'value' to bit-field that can only hold values from 'mi_valuen' to 'max_value'</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Compiler warning C4464</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>relative include path contains '..'</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4470</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>floating-point control pragmas ignored under /clr</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4471</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>'enumeration': a forward declaration of an unscoped enumeration must have an underlying type (int assumed)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4472</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>'identifier' is a native enum: add an access specifier (private/public) to declare a 'WinRT&amp;#124;managed' enum</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Compiler warning C4480</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: specifying underlying type for enum 'enumeration'</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4481</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: override specifier 'keyword'</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Compiler warning C4482</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: enum 'enumeration' used in qualified name</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4483</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>syntax error: expected C++ keyword</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4484</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>'override_function': matches base ref class method 'base_class_function', but is not marked 'virtual', 'new' or 'override'; 'new' (and not 'virtual') is assumed</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4485</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>'override_function': matches base ref class method 'base_class_function', but is not marked 'new' or 'override'; 'new' (and 'virtual') is assumed</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4486</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>'function': a private virtual method of a ref class or value class should be marked 'sealed'</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4487</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>'derived_class_function': matches inherited non-virtual method 'base_class_function' but is not explicitly marked 'new'</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4488</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>'function': requires 'keyword' keyword to implement the interface method 'interface_method'</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4489</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>'specifier': not allowed on interface method 'method'; override specifiers are only allowed on ref class and value class methods</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4490</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>'override': incorrect use of override specifier; 'function' does not match a base ref class method</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4491</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>'%s': has an illegal IDL version format</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4492</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>'%$S': matches base ref class method '%$S', but is not marked 'override'</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4493</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>delete expression has no effect as the destructor of 'type' does not have 'public' accessibility</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4494</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>'%$S' : Ignoring __declspec(allocator) because the function return type is not a pointer or reference</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4502</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>'linkage specification' requires use of keyword 'extern' and must precede all other specifiers</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4503</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>'identifier': decorated name length exceeded, name was truncated</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4505</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>'function': unreferenced local function has been removed</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4506</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>no definition for inline function 'function'</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4508</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>'function': function should return a value; 'void' return type assumed</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Compiler warning C4509</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'function' uses SEH and 'object' has destructor</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4510</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>'class': default constructor was implicitly defined as deleted</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4511</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>'class': copy constructor was implicitly defined as deleted</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4512</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>'class': assignment operator was implicitly defined as deleted</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4513</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>'class': destructor was implicitly defined as deleted</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4514</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>'function': unreferenced inline function has been removed</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4515</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>'namespace': namespace uses itself</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4516</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>'class::symbol': access-declarations are deprecated; member using-declarations provide a better alternative</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4517</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>access-declarations are deprecated; member using-declarations provide a better alternative</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4518</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>'specifier': storage-class or type specifier(s) unexpected here; ignored</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Compiler warning C4519</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>default template arguments are only allowed on a class template</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4521</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>'class': multiple copy constructors specified</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4522</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>'class': multiple assignment operators specified</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4523</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>'class': multiple destructors specified</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4526</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>'function': static member function cannot override virtual function 'virtual function'\n override ignored, virtual function will be hidden</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4530</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>C++ exception handler used, but unwind semantics are not enabled.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Specify /EHsc</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4531</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C++ exception handling not available on Windows CE.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Use Structured Exception Handling</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4532</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>'continue': jump out of '__finally/finally' block has undefined behavior during termination handling</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4533</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>initialization of 'variable' is skipped by 'goto label'</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4534</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>'constructor' will not be a default constructor for 'class&amp;#124;struct' 'identifier' due to the default argument</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4535</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>calling _set_se_translator() requires /EHa</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4536</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>'typename': type-name exceeds meta-data limit of 'character_limit' characters</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4537</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>'object': '.' applied to non-UDT type</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4538</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>'type': const/volatile qualifiers on this type are not supported</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4540</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>dynamic_cast used to convert to inaccessible or ambiguous base; run-time test will fail ('type1' to 'type2')</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4541</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>'identifier' used on polymorphic type 'type' with /GR-; unpredictable behavior may result</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4542</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Skipping generation of merged injected text file, cannot write %$M file: '%s': %$e</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4543</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Injected text suppressed by attribute 'no_injected_text'</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4544</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>'declaration': default template argument ignored on this template declaration</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4545</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>expression before comma evaluates to a function which is missing an argument list</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4546</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>function call before comma missing argument list</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4547</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>'operator': operator before comma has no effect; expected operator with side-effect</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4548</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>expression before comma has no effect; expected expression with side-effect</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4549</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>'operator': operator before comma has no effect; did you intend 'operator'?</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4550</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>expression evaluates to a function which is missing an argument list</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4551</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>function call missing argument list</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4552</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>'operator': operator has no effect; expected operator with side-effect</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4553</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>'operator': operator has no effect; did you intend 'operator?</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiler Warning (level 3) C4554<ept id="p1">](../../error-messages/compiler-warnings/compiler-warning-level-3-c4554.md)</ept> C4554</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>'operator': check operator precedence for possible error; use parentheses to clarify precedence</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4555</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>expression has no effect; expected expression with side-effect</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4556</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>value of intrinsic immediate argument 'value' is out of range 'lower_bound - upper_bound'</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4557</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>'__assume' contains effect 'effect'</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4558</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>value of operand 'value' is out of range 'lower_bound - upper_bound'</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4559</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>'function': redefinition; the function gains __declspec(modifier)</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4561</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>'__fastcall' incompatible with the '/clr' option: converting to '<ph id="ph1">\_</ph>_stdcall'</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4562</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>fully prototyped functions are required with the '/clr' option: converting '()' to '(void)'</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4564</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>method 'method' of 'class' 'classname' defines unsupported default parameter 'parameter'</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4565</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>'function': redefinition; the symbol was previously declared with __declspec(modifier)</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4566</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>character represented by universal-character-name 'char' cannot be represented in the current code page (%d)</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4568</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>'%$S': no members match the signature of the explicit override</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4569</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>'%$S': no members match the signature of the explicit override</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4570</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>'type': is not explicitly declared as abstract but has abstract functions</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4571</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4572</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>[ParamArray] attribute is deprecated under /clr, use '...'</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>instead</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4573</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>the usage of '%$S' requires the compiler to capture 'this' but the current default capture mode does not allow it</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4574</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>'Identifier' is defined to be '0': did you mean to use '#if identifier'?</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4575</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>'__vectorcall' incompatible with the '/clr' option: converting to '<ph id="ph1">\_</ph>_stdcall'</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4580</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>[attribute] is deprecated; instead specify System::Attribute or Platform::Metadata as a base class</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4581</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>deprecated behavior: '"string"' replaced with 'string' to process attribute</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4582</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>'%$S': constructor is not implicitly called</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4583</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>'%$S': destructor is not implicitly called</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4584</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>'class1': base-class 'class2' is already a base-class of '%class3'</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4585</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>'class': A WinRT 'public ref class' must either be sealed or derive from an existing unsealed class</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4586</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>'%$S': A public type cannot be declared in a top-level namespace called 'Windows'</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4587</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>'anonymous_structure': behavior change: constructor is no longer implicitly called</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4588</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>'anonymous_structure': behavior change: destructor is no longer implicitly called</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4591</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>'constexpr' call-depth limit of %d exceeded (/constexpr:depth<ph id="ph1">\&lt;</ph>NUMBER&gt;)</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4592</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>'function': 'constexpr' call evaluation failed; function will be called at run-time</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4593</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>'function': 'constexpr' call evaluation step limit of 'limit' exceeded; use /constexpr:steps<ph id="ph1">\&lt;</ph>NUMBER&gt; to increase the limit</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4594</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>'%$S': destructor will not be implicitly called if an exception is thrown</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4595</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>'%$S': behavior change: destructor will no longer be implicitly called if an exception is thrown</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>