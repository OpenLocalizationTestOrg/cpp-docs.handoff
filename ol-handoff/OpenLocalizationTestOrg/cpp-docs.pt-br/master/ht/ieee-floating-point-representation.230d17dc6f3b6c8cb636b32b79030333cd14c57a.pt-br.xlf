<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0411d953b2d8b0e5234742600e7524df3ef186f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\ieee-floating-point-representation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10c032f9728178bc7ade27d50ef95ded1ee100a7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0f2bfaed3952dfce148d931088e55a7eadb53fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IEEE Floating-Point Representation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IEEE Floating-Point Representation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Visual C++ is consistent with the IEEE numeric standards.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are three internal varieties of real numbers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Real<ph id="ph1">\*</ph>4 and real<ph id="ph2">\*</ph>8 are used in Visual C++.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Real<ph id="ph1">\*</ph>4 is declared using the word <bpt id="p1">**</bpt>float<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Real<ph id="ph1">\*</ph>8 is declared using the word <bpt id="p1">**</bpt>double<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In Windows 32-bit programming, the <ph id="ph1">`long double`</ph> data type maps to <bpt id="p1">**</bpt>double<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There is, however, assembly language support for computations using the real*10 data type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The values are stored as follows:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Stored as</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>real*4</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>sign bit, 8-bit exponent, 23-bit mantissa</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>real*8</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>sign bit, 11-bit exponent, 52-bit mantissa</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>real*10</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>sign bit, 15-bit exponent, 64-bit mantissa</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In real*4 and real<ph id="ph1">\*</ph>8 formats, there is an assumed leading 1 in the mantissa that is not stored in memory, so the mantissas are actually 24 or 53 bits, even though only 23 or 52 bits are stored.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The real<ph id="ph1">\*</ph>10 format actually stores this bit.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The exponents are biased by half of their possible value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This means you subtract this bias from the stored exponent to get the actual exponent.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the stored exponent is less than the bias, it is actually a negative exponent.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The exponents are biased as follows:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Exponent</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Biased by</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>8-bit (real*4)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>127</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>11-bit (real*8)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>1023</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>15-bit (real*10)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>16383</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These exponents are not powers of ten; they are powers of two.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>That is, 8-bit stored exponents can be up to 127.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The value 2**127 is roughly equivalent to 10<ph id="ph1">\*\*</ph>38, which is the actual limit of real<ph id="ph2">\*</ph>4.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The mantissa is stored as a binary fraction of the form 1.XXX... .</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This fraction has a value greater than or equal to 1 and less than 2.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Note that real numbers are always stored in normalized form; that is, the mantissa is left-shifted such that the high-order bit of the mantissa is always 1.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because this bit is always 1, it is assumed (not stored) in the real*4 and real<ph id="ph1">\*</ph>8 formats.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The binary (not decimal) point is assumed to be just to the right of the leading 1.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The format, then, for the various sizes is as follows:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Format</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>BYTE 1</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>BYTE 2</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>BYTE 3</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>BYTE 4</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>BYTE n</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>real*4</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>real*8</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>real*10</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>represents the sign bit, the <ph id="ph1">`X`</ph>'s are the exponent bits, and the <ph id="ph2">`M`</ph>'s are the mantissa bits.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Note that the leftmost bit is assumed in real*4 and real<ph id="ph1">\*</ph>8 formats, but is present as "1" in BYTE 3 of the real<ph id="ph2">\*</ph>10 format.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To shift the binary point properly, you first unbias the exponent and then move the binary point to the right or left the appropriate number of bits.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following are some examples in real*4 format:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the following example, the sign bit is zero, and the stored exponent is 128, or 100 0000 0 in binary, which is 127 plus 1.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The stored mantissa is (1.) 000 0000 ... 0000 0000, which has an implied leading 1 and binary point, so the actual mantissa is one.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Same as +2 except that the sign bit is set.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is true for all IEEE format floating-point numbers.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Same mantissa, exponent increases by one (biased value is 129, or 100 0000 1 in binary.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Same exponent, mantissa is larger by half — it's (1.) 100 0000 ...0000 0000, which, since this is a binary fraction, is 1 1/2 (the values of the fractional digits are 1/2, 1/4, 1/8, and so forth).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Same exponent as other powers of two, mantissa is one less than two at 127, or 011 1111 1 in binary.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The biased exponent is 126, 011 1111 0 in binary, and the mantissa is (1.) 100 0000 ... 0000 0000, which is 1 1/2.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Exactly the same as two except that the bit that represents 1/4 is set in the mantissa.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>1/10 is a repeating fraction in binary.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The mantissa is just shy of 1.6, and the biased exponent says that 1.6 is to be divided by 16 (it is 011 1101 1 in binary, which is 123 in decimal).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The true exponent is 123 – 127 = –4, which means that the factor by which to multiply is 2**–4 = 1/16.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that the stored mantissa is rounded up in the last bit — an attempt to represent the unrepresentable number as accurately as possible.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>(The reason that 1/10 and 1/100 are not exactly representable in binary is similar to the reason that 1/3 is not exactly representable in decimal.)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Why Floating-Point Numbers May Lose Precision</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>