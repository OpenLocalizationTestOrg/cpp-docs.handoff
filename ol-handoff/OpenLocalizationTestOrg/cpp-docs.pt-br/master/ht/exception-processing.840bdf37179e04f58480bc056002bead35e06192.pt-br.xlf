<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">720289822a6d7f8acd645a3dc76f78ccf37fc1a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\exception-processing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8f64261ed8c9c3fe18d8e2bcdbc90a346244cbb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6fc3e090a9c9e3c4c4b525fe1c52b24e9582a04</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exception Processing | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exception Processing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When a program executes, a number of abnormal conditions and errors called "exceptions" can occur.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These may include running out of memory, resource allocation errors, and failure to find files.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library uses an exception-handling scheme that is modeled closely after the one proposed by the ANSI standards committee for C++.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An exception handler must be set up before calling a function that may encounter an abnormal situation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the function encounters an abnormal condition, it throws an exception and control is passed to the exception handler.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Several macros included with the Microsoft Foundation Class Library will set up exception handlers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A number of other global functions help to throw specialized exceptions and terminate programs, if necessary.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These macros and global functions fall into the following categories:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Exception macros, which structure your exception handler.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exception-throwing functions), which generate exceptions of specific types.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Termination functions, which cause program termination.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For examples and more details, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exception Macros</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>TRY</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Designates a block of code for exception processing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CATCH</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Designates a block of code for catching an exception from the preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Designates a block of code for catching all exceptions from the preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>AND_CATCH</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Designates a block of code for catching additional exception types from the preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>AND_CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Designates a block of code for catching all other additional exception types thrown in a preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>END_CATCH</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ends the last <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> or <ph id="ph1">`AND_CATCH`</ph> code block.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>END_CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Ends the last <ph id="ph1">`CATCH_ALL`</ph> code block.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>THROW</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Throws a specified exception.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>THROW_LAST</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Throws the currently handled exception to the next outer handler.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Exception-Throwing Functions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>AfxThrowArchiveException</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Throws an archive exception.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>AfxThrowFileException</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Throws a file exception.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>AfxThrowMemoryException</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Throws a memory exception.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>AfxThrowNotSupportedException</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Throws a not-supported exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>AfxThrowResourceException</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Throws a Windows resource-not-found exception.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>AfxThrowUserException</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Throws an exception in a user-initiated program action.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>MFC provides two exception-throwing functions specifically for OLE exceptions:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>OLE Exception Functions</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>AfxThrowOleDispatchException</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Throws an exception within an OLE automation function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>AfxThrowOleException</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Throws an OLE exception.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To support database exceptions, the database classes provide two exception classes, <ph id="ph1">`CDBException`</ph> and <ph id="ph2">`CDaoException`</ph>, and global functions to support the exception types:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>DAO Exception Functions</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AfxThrowDAOException</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Throws a <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept> from your own code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>AfxThrowDBException</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Throws a <bpt id="p1">[</bpt>CDBException<ept id="p1">](../../mfc/reference/cdbexception-class.md)</ept> from your own code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>MFC provides the following termination function:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Termination Functions</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>AfxAbort</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Called to terminate an application when a fatal error occurs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>TRY</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Sets up a <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block identifies a block of code that might throw exceptions.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Those exceptions are handled in the following <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> and <ph id="ph1">`AND_CATCH`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Recursion is allowed: exceptions may be passed to an outer <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block, either by ignoring them or by using the <ph id="ph1">`THROW_LAST`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>End the <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block with an <ph id="ph1">`END_CATCH`</ph> or <ph id="ph2">`END_CATCH_ALL`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CATCH<ept id="p1">](#catch)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CATCH</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Defines a block of code that catches the first exception type thrown in the preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>exception_class</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies the exception type to test for.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For a list of standard exception classes, see class <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>exception_object_pointer_name</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies a name for an exception-object pointer that will be created by the macro.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use the pointer name to access the exception object within the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This variable is declared for you.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The exception-processing code can interrogate the exception object, if appropriate, to get more information about the specific cause of the exception.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Invoke the <ph id="ph1">`THROW_LAST`</ph> macro to shift processing to the next outer exception frame.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>End the <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block with an <ph id="ph1">`END_CATCH`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>exception_class<ept id="p1">*</ept> is the class <ph id="ph1">`CException`</ph>, then all exception types will be caught.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>CObject::IsKindOf<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__iskindof)</ept> member function to determine which specific exception was thrown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A better way to catch several kinds of exceptions is to use sequential <ph id="ph1">`AND_CATCH`</ph> statements, each with a different exception type.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The exception object pointer is created by the macro.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You do not need to declare it yourself.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> block is defined as a C++ scope delineated by braces.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you declare variables in this scope, they are accessible only within that scope.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This also applies to <bpt id="p1">*</bpt>exception_object_pointer_name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information on exceptions and the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro, see the article <bpt id="p2">[</bpt>Exceptions<ept id="p2">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#26</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Defines a block of code that catches all exception types thrown in the preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>exception_object_pointer_name</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Specifies a name for an exception-object pointer that will be created by the macro.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can use the pointer name to access the exception object within the <ph id="ph1">`CATCH_ALL`</ph> block.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This variable is declared for you.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The exception-processing code can interrogate the exception object, if appropriate, to get more information about the specific cause of the exception.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Invoke the <ph id="ph1">`THROW_LAST`</ph> macro to shift processing to the next outer exception frame.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`CATCH_ALL`</ph>, end the <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block with an <ph id="ph2">`END_CATCH_ALL`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CATCH_ALL`</ph> block is defined as a C++ scope delineated by braces.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you declare variables in this scope, they are accessible only within that scope.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information on exceptions, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFile::Abort<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__abort)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>AND_CATCH</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Defines a block of code for catching additional exception types thrown in a preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>exception_class</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Specifies the exception type to test for.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For a list of standard exception classes, see class <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>exception_object_pointer_name</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A name for an exception-object pointer that will be created by the macro.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can use the pointer name to access the exception object within the <ph id="ph1">`AND_CATCH`</ph> block.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This variable is declared for you.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro to catch one exception type, then the <ph id="ph1">`AND_CATCH`</ph> macro to catch each subsequent type.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>End the <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block with an <ph id="ph1">`END_CATCH`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The exception-processing code can interrogate the exception object, if appropriate, to get more information about the specific cause of the exception.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`THROW_LAST`</ph> macro within the <ph id="ph2">`AND_CATCH`</ph> block to shift processing to the next outer exception frame.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>marks the end of the preceding <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> or <ph id="ph1">`AND_CATCH`</ph> block.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AND_CATCH`</ph> block is defined as a C++ scope (delineated by curly braces).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you declare variables in this scope, remember that they are accessible only within that scope.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This also applies to the <bpt id="p1">*</bpt>exception_object_pointer_name<ept id="p1">*</ept> variable.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CATCH<ept id="p1">](#catch)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>AND_CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Defines a block of code for catching additional exception types thrown in a preceding <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>exception_object_pointer_name</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A name for an exception-object pointer that will be created by the macro.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can use the pointer name to access the exception object within the <ph id="ph1">`AND_CATCH_ALL`</ph> block.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This variable is declared for you.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro to catch one exception type, then the <ph id="ph1">`AND_CATCH_ALL`</ph> macro to catch all other subsequent types.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`AND_CATCH_ALL`</ph>, end the <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> block with an <ph id="ph2">`END_CATCH_ALL`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The exception-processing code can interrogate the exception object, if appropriate, to get more information about the specific cause of the exception.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`THROW_LAST`</ph> macro within the <ph id="ph2">`AND_CATCH_ALL`</ph> block to shift processing to the next outer exception frame.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>marks the end of the preceding <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> or <ph id="ph1">`AND_CATCH_ALL`</ph> block.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AND_CATCH_ALL`</ph> block is defined as a C++ scope (delineated by braces).</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If you declare variables in this scope, remember that they are accessible only within that scope.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>END_CATCH</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Marks the end of the last <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> or <ph id="ph1">`AND_CATCH`</ph> block.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">`END_CATCH`</ph> macro, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>END_CATCH_ALL</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Marks the end of the last <ph id="ph1">`CATCH_ALL`</ph> or <ph id="ph2">`AND_CATCH_ALL`</ph> block.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>THROW (MFC)</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Throws the specified exception.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>exception_object_pointer</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Points to an exception object derived from <ph id="ph1">`CException`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>THROW<ept id="p1">**</ept> interrupts program execution, passing control to the associated <bpt id="p2">**</bpt>CATCH<ept id="p2">**</ept> block in your program.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If you have not provided the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> block, then control is passed to a Microsoft Foundation Class Library module that prints an error message and exits.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>THROW_LAST</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Throws the exception back to the next outer <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This macro allows you to throw a locally created exception.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If you try to throw an exception that you have just caught, it will normally go out of scope and be deleted.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`THROW_LAST`</ph>, the exception is passed correctly to the next <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> handler.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFile::Abort<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__abort)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>AfxThrowArchiveException</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Throws an archive exception.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Specifies an integer that indicates the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For a list of the possible values, see <bpt id="p1">[</bpt>CArchiveException::m_cause<ept id="p1">](../../mfc/reference/carchiveexception-class.md#carchiveexception__m_cause)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Points to a string containing the name of the <ph id="ph1">`CArchive`</ph> object that caused the exception (if available).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>AfxThrowFileException</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Throws a file exception.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Specifies an integer that indicates the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For a list of the possible values, see <bpt id="p1">[</bpt>CFileException::m_cause<ept id="p1">](../../mfc/reference/cfileexception-class.md#cfileexception__m_cause)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Contains the operating-system error number (if available) that states the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>See your operating-system manual for a listing of error codes.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Points to a string containing the name of the file that caused the exception (if available).</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You are responsible for determining the cause based on the operating-system error code.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>AfxThrowMemoryException</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Throws a memory exception.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Call this function if calls to underlying system memory allocators (such as <ph id="ph1">`malloc`</ph> and the <bpt id="p1">[</bpt>GlobalAlloc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept> Windows function) fail.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>You do not need to call it for <bpt id="p1">**</bpt>new<ept id="p1">**</ept> because <bpt id="p2">**</bpt>new<ept id="p2">**</ept> will throw a memory exception automatically if the memory allocation fails.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>AfxThrowNotSupportedException</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Throws an exception that is the result of a request for an unsupported feature.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>AfxThrowResourceException</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Throws a resource exception.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This function is normally called when a Windows resource cannot be loaded.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>AfxThrowUserException</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Throws an exception to stop an end-user operation.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This function is normally called immediately after <ph id="ph1">`AfxMessageBox`</ph> has reported an error to the user.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>AfxThrowOleDispatchException</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Use this function to throw an exception within an OLE automation function.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>An error code specific to your application.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Verbal description of the error.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Resource ID for the verbal error description.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A help context for your application's help (.HLP) file.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The information provided to this function can be displayed by the driving application (Microsoft Visual Basic or another OLE automation client application).</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#25</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>AfxThrowOleException</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Creates an object of type <ph id="ph1">`COleException`</ph> and throws an exception.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>An OLE status code that indicates the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Handle to a result code that indicates the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The version that takes an <ph id="ph1">`HRESULT`</ph> as an argument converts that result code into the corresponding <ph id="ph2">`SCODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`HRESULT`</ph> and <ph id="ph2">`SCODE`</ph>, see <bpt id="p1">[</bpt>Structure of COM Error Codes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690088)</ept> in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>AfxThrowDaoException</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Call this function to throw an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept> from your own code.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An integer value representing a DAO extended error code, which can be one of the values listed under <bpt id="p1">[</bpt>CDaoException::m_nAfxDaoError<ept id="p1">](../../mfc/reference/cdaoexception-class.md#cdaoexception__m_nafxdaoerror)</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>scode</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An OLE error code from DAO, of type <ph id="ph1">`SCODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>CDaoException::m_scode<ept id="p1">](../../mfc/reference/cdaoexception-class.md#cdaoexception__m_scode)</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The framework also calls <ph id="ph1">`AfxThrowDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>In your call, you can pass one of the parameters or both.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>For example, if you want to raise one of the errors defined in <bpt id="p1">**</bpt>CDaoException::nAfxDaoError<ept id="p1">**</ept> but you do not care about the <bpt id="p2">*</bpt>scode<ept id="p2">*</ept> parameter, pass a valid code in the <ph id="ph1">`nAfxDaoError`</ph> parameter and accept the default value for <bpt id="p3">*</bpt>scode<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For information about exceptions related to the MFC DAO classes, see class <ph id="ph1">`CDaoException`</ph> in this book and the article <bpt id="p1">[</bpt>Exceptions: Database Exceptions<ept id="p1">](../../mfc/exceptions-database-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>AfxThrowDBException</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Call this function to throw an exception of type <ph id="ph1">`CDBException`</ph> from your own code.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A value of type <bpt id="p1">**</bpt>RETCODE<ept id="p1">**</ept>, defining the type of error that caused the exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CDatabase`</ph> object that represents the data source connection with which the exception is associated.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>An ODBC <bpt id="p1">**</bpt>HSTMT<ept id="p1">**</ept> handle that specifies the statement handle with which the exception is associated.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`AfxThrowDBException`</ph> when it receives an ODBC <bpt id="p1">**</bpt>RETCODE<ept id="p1">**</ept> from a call to an ODBC API function and interprets the <bpt id="p2">**</bpt>RETCODE<ept id="p2">**</ept> as an exceptional condition rather than an expectable error.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For example, a data access operation might fail because of a disk read error.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>For information about the <bpt id="p1">**</bpt>RETCODE<ept id="p1">**</ept> values defined by ODBC, see Chapter 8, "Retrieving Status and Error Information," in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For information about MFC extensions to these codes, see class <bpt id="p1">[</bpt>CDBException<ept id="p1">](../../mfc/reference/cdbexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>AfxAbort</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The default termination function supplied by MFC.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>is called internally by MFC member functions when there is a fatal error, such as an uncaught exception that cannot be handled.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`AfxAbort`</ph> in the rare case when you encounter a catastrophic error from which you cannot recover.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CATCH<ept id="p1">](#catch)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CException Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>