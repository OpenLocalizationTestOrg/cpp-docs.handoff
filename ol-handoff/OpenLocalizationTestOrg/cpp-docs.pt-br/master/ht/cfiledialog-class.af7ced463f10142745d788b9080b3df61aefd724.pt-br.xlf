<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b63da707c8fd5574663dcd1e037d45cb67c36f94</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cfiledialog-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">967625ec99f62550f5e78642a514e59afe47568c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98958efd7d5b66cc0826a0c1b39a0ab03e7e7af1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CFileDialog Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CFileDialog Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates the common dialog box that is used for file open or file save operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CFileDialog::CFileDialog</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddCheckButton</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a check button to the dialog.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddComboBox</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds a combo box to the dialog.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddControlItem</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adds an item to a container control in the dialog.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddEditBox</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Adds an edit box to the dialog.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddMenu</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adds a menu to the dialog.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddPlace</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adds a folder to the list of places available for the user to open or save items.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddPushButton</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adds a button to the dialog.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddRadioButtonList</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Adds an option button (also known as radio button) group to the dialog.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddSeparator</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Adds a separator to the dialog.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddText</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Adds text content to the dialog.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CFileDialog::ApplyOFNToShellDialog</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Updates the state of the <ph id="ph1">`CFileDialog`</ph> to match the parameters and flags stored in the <ph id="ph2">`m_ofn`</ph> member variable.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CFileDialog::DoModal</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Displays the dialog box and enables the user to make a selection.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CFileDialog::EnableOpenDropDown</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Enables a drop-down list on the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save<ept id="p2">**</ept> button in the dialog.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CFileDialog::EndVisualGroup</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Stops the addition of elements to a visual group in the dialog.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetCheckButtonState</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets the current state of a check button (check box) in the dialog.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetControlItemState</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets the current state of an item in a container control found in the dialog.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetControlState</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets the current visibility and enabled states of a given control.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetEditBoxText</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets the current text in an edit box control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileExt</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Returns the extension of the selected file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileName</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns the file name of the selected file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns the title of the selected file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFolderPath</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Retrieves the path of the currently open folder or directory for an Explorer-style <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> common dialog box.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileDialogCustomize</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieves the internal COM object for a customized <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileOpenDialog</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Retrieves the internal COM object for a <ph id="ph1">`CFileDialog`</ph> that is used as an <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> file dialog box.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileSaveDialog</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Retrieves the internal COM object for a <ph id="ph1">`CFileDialog`</ph> that is used as a <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> file dialog box.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetNextPathName</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns the full path of the next selected file.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetOFN</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`OPENFILENAME`</ph> structure of the <ph id="ph2">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetPathName</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the full path of the selected file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetReadOnlyPref</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns the read-only status of the selected file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetResult</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets the choice that the user made in the dialog.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetResults</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets the user's choices in a dialog that allows multiple selection.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetSelectedControlItem</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets a particular item from specified container controls in the dialog.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetStartPosition</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the position of the first element of the file name list.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CFileDialog::HideControl</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Hides the specified control in an Explorer-style <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> common dialog box.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CFileDialog::IsPickFoldersMode</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Determines if the current dialog in folder picker mode.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CFileDialog::MakeProminent</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Places a control in the dialog so that it stands out compared to other added controls.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CFileDialog::RemoveControlItem</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Removes an item from a container control in the dialog.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetCheckButtonState</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sets the current state of a check button (check box) in the dialog.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlItemState</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Sets the current state of an item in a container control found in the dialog.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlItemText</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the text of a control item.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the text that accompanies a radio button or an item in a menu.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlLabel</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Sets the text associated with a control, such as button text or an edit box label.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlState</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Sets the current visibility and enabled states of a given control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlText</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Sets the text for the specified control in an Explorer-style <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> common dialog box.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetDefExt</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Sets the default file name extension for an Explorer-style <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> common dialog box.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetEditBoxText</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Sets the current text in an edit box control.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetProperties</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Provides a property store that defines the default values to be used for the item being saved.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetSelectedControlItem</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Sets the selected state of a particular item in an option button group or a combo box found in the dialog.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetTemplate</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Sets the dialog box template for the <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CFileDialog::StartVisualGroup</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Declares a visual group in the dialog.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Subsequent calls to any "add" method add those elements to this group.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CFileDialog::UpdateOFNFromShellDialog</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Updates the data stored in the <ph id="ph1">`m_ofn`</ph> member variable to match the current state of the file dialog box.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnButtonClicked</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Called when the button is clicked.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnCheckButtonToggled</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Called when the check box is checked/unchecked.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnControlActivating</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Called when the control is being active.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFileNameChange</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`WM_NOTIFY CDN_SELCHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFileNameOK</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Validates the file name entered in the dialog box.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFolderChange</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`WM_NOTIFY CDN_FOLDERCHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnInitDone</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`WM_NOTIFY CDN_INITDONE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnItemSelected</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Called when the container item is being selected.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnLBSelChangedNotify</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Allows you to perform custom actions when the file selection changes.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnShareViolation</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Handles share violations.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnTypeChange</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`WM_NOTIFY CDN_TYPECHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CFileDialog::m_ofn</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">`OPENFILENAME`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Provides access to basic file dialog box parameters.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Common file dialog boxes let you implement file-selection dialog boxes, for example, <bpt id="p1">**</bpt>Open File<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept>, in a manner that is consistent with Windows standards.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> as is with the constructor provided, or you can derive your own dialog box class from <ph id="ph1">`CFileDialog`</ph> and write a constructor to suit your needs.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In either case, these dialog boxes will behave like standard MFC dialog boxes because they are derived from the <bpt id="p1">[</bpt>CCommonDialog Class<ept id="p1">](../../mfc/reference/ccommondialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>relies on the COMMDLG.DLL file that is included in Windows.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Both the appearance and the functionality of the <ph id="ph1">`CFileDialog`</ph> with <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> differ from the earlier versions of Windows.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`CFileDialog`</ph> automatically uses the new <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style without code changes if a program is compiled and run under <ph id="ph3">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`bVistaStyle`</ph> parameter in the constructor to manually override this automatic update.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The exception to the automatic update is customized dialog boxes.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>They will not be converted to the new style.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For more information about the constructor, see <bpt id="p1">[</bpt>CFileDialog::CFileDialog<ept id="p1">](#cfiledialog__cfiledialog)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The control ID system differs in <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> from earlier versions of Windows when you use a <ph id="ph2">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You must update all references to <ph id="ph1">`CFileDialog`</ph> controls in code before you can port your project from an earlier version of Windows.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`CFileDialog`</ph> methods are not supported under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Check the individual method topic for information about whether the method is supported.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In addition, the following inherited functions are not supported under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CDialog::OnInitDialog</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CDialog::OnSetFont</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The windows messages for the <ph id="ph1">`CFileDialog`</ph> class vary based on what operating system you are using.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For example, Windows XP does not support <bpt id="p1">[</bpt>CDialog::OnCancel<ept id="p1">](../../mfc/reference/cdialog-class.md#cdialog__oncancel)</ept> and <bpt id="p2">[</bpt>CDialog::OnOK<ept id="p2">](../../mfc/reference/cdialog-class.md#cdialog__onok)</ept> for the <ph id="ph1">`CFileDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> does support them.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For more information about the different messages that are generated and the order in which they are received, see <bpt id="p1">[</bpt>CFileDialog Sample: Logging Event Order<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CFileDialog`</ph> object, first create the object by using the <ph id="ph2">`CFileDialog`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>After the dialog box has been constructed, you can set or modify any values in the <bpt id="p1">[</bpt>CFileDialog::m_ofn<ept id="p1">](#cfiledialog__m_ofn)</ept> structure to initialize the values or states of the dialog box controls.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_ofn`</ph> structure is of type <ph id="ph2">`OPENFILENAME`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>After you initialize the dialog box controls, call the <bpt id="p1">[</bpt>CFileDialog::DoModal<ept id="p1">](#cfiledialog__domodal)</ept> method to display the dialog box so that the user can type the path and file name.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>returns whether the user clicked the OK (IDOK) or the Cancel (IDCANCEL) button.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`DoModal`</ph> returns IDOK, you can use one of the <ph id="ph2">`CFileDialog`</ph> public member functions to retrieve the information put in by the user.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, multiple calls to <bpt id="p1">[</bpt>IFileDialog::SetFileTypes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775980)</ept> causes an error.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">`SetFileTypes`</ph> for any instance of a <ph id="ph2">`CFileDialog`</ph> will return <ph id="ph3">`E_UNEXPECTED`</ph> in <ph id="ph4">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`CFileDialog`</ph> method functions call <ph id="ph2">`SetFileTypes`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For example, two calls to <ph id="ph1">`CFileDialog::DoModal`</ph> for the same instance of a <ph id="ph2">`CFileDialog`</ph> generates <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>includes several protected members that let you do custom handling of share violations, file name validation, and list-box change notification.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>These protected members are callback functions that most applications do not have to use because default handling is performed automatically.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Message-map entries for these functions are not required because they are standard virtual functions.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can use the Windows <bpt id="p1">[</bpt>CommDlgExtendedError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646916)</ept> function to determine whether an error occurred during initialization of the dialog box and to learn more about the error.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The destruction of <ph id="ph1">`CFileDialog`</ph> objects is handled automatically.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You do not have to call <bpt id="p1">[</bpt>CDialog::EndDialog<ept id="p1">](../../mfc/reference/cdialog-class.md#cdialog__enddialog)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To let the user select multiple files, set the <ph id="ph1">`OFN_ALLOWMULTISELECT`</ph> flag before you call <ph id="ph2">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You must supply your own file name buffer to accommodate the returned list of multiple file names.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Do this by replacing <ph id="ph1">`m_ofn.lpstrFile`</ph> with a pointer to a buffer you have allocated, after you construct the <ph id="ph2">`CFileDialog`</ph>, but before you call <ph id="ph3">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Additionally, you must set <ph id="ph1">`m_ofn.nMaxFile`</ph> by using the number of characters in the buffer pointed to by <ph id="ph2">`m_ofn.lpstrFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you set the maximum number of files to be selected to <ph id="ph1">`n`</ph>, the required buffer size is <ph id="ph2">`n * (_MAX_PATH + 1) + 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The first item returned in the buffer is the path to the folder where the files were selected.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>-style dialog boxes, the directory and file name strings are null-terminated, with an extra null character after the last file name.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This format enables the Explorer-style dialog boxes to return long file names that include spaces.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For old-style dialog boxes, the directory and file name strings are separated by spaces and the function uses short file names for file names with spaces.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use a buffer to retrieve and list multiple file names.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#23</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To change the buffer size in response to the user selecting multiple file names, you must derive a new class from <ph id="ph1">`CFileDialog`</ph> and override the <bpt id="p1">[</bpt>CFileDialog::OnFileNameChange<ept id="p1">](#cfiledialog__onfilenamechange)</ept> method.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If you derive a new class from <ph id="ph1">`CFileDialog`</ph>, you can use a message map to handle any messages.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>To extend the default message handling, derive a class from <ph id="ph1">`CFileDialog`</ph>, add a message map to the new class, and provide member functions for the new messages.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You do not have to provide a hook function to customize the dialog box.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>To customize the dialog box, derive a class from <ph id="ph1">`CFileDialog`</ph>, provide a custom dialog box template, and add a message map to process the notification messages from the extended controls.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Pass any unprocessed messages to the base class.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>You do not have to customize the hook function.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>When you are using the <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of the <ph id="ph2">`CFileDialog`</ph>, you cannot use message maps and dialog box templates.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Instead, you must use the COM interfaces for similar functionality.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For more information about how to use <ph id="ph1">`CFileDialog`</ph>, see <bpt id="p1">[</bpt>Common Dialog Classes<ept id="p1">](../../mfc/common-dialog-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>CDialog</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CCommonDialog</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdlgs.h</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddCheckButton</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Adds a check button to the dialog.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The ID of the check button to add.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The check button name.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A Boolean indicating the current state of the check button.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>if checked; <ph id="ph1">`FALSE`</ph> otherwise</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddComboBox</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Adds a combo box to the dialog.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The ID of the combo box to add.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddControlItem</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Adds an item to a container control in the dialog.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The ID of the container control to add the item to.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Item's text.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddEditBox</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Adds an edit box to the dialog.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The ID of the edit box to add.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The edit box name.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddMenu</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Adds a menu to the dialog.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The ID of the menu to add.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The menu name.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddPlace</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Adds a folder to the list of places available for the user to open or save items.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A path to the folder to be made available to the user.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This can only be a folder.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Specifies where the folder is placed within the list.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A pointer to an IShellItem that represents the folder to be made available to the user.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This can only be a folder.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddPushButton</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Adds a button to the dialog.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The ID of the button to add.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The button name.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddRadioButtonList</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Adds an option button (also known as radio button) group to the dialog.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The ID of the option button group to add.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddSeparator</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Adds a separator to the dialog.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The ID of the separator add.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>CFileDialog::AddText</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Adds text to the dialog.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The ID of the text to add.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The text name.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CFileDialog::ApplyOFNToShellDialog</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Updates the current state of the <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> based on the values stored in the <ph id="ph1">`m_ofn`</ph> data structure.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>In versions of Windows before <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the member <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](https://msdn.microsoft.com/library/ms911906.aspx)</ept> data structure was continuously synchronized with the state of the <ph id="ph2">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Any changes to the <bpt id="p1">[</bpt>m_ofn<ept id="p1">](#cfiledialog__m_ofn)</ept> member variable were immediately reflected in the state of the dialog box.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Also, any changes to the state of the dialog box immediately update the <ph id="ph1">`m_ofn`</ph> member variable.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the values in the <ph id="ph2">`m_ofn`</ph> member variable and state of the <ph id="ph3">`CFileDialog`</ph> are not guaranteed to be synchronized.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>This function forces the state of the <ph id="ph1">`CFileDialog`</ph> to be updated to match the <ph id="ph2">`m_ofn`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Windows calls this function automatically during <bpt id="p1">[</bpt>CFileDialog::DoModal<ept id="p1">](#cfiledialog__domodal)</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`CFileDialog`</ph> class under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileDialog::UpdateOFNFromShellDialog<ept id="p1">](#cfiledialog__updateofnfromshelldialog)</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CFileDialog::CFileDialog</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Call this function to construct a standard Windows file dialog box.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The parameter that specifies what type of dialog box to create.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Set it to <ph id="ph1">`TRUE`</ph> to construct a <bpt id="p1">**</bpt>File Open<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Set it to <ph id="ph1">`FALSE`</ph> to construct a <bpt id="p1">**</bpt>File Save As<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The default file name extension.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the user does not include a known extension (one that has an association on the user’s computer) in the Filename box, the extension specified by <ph id="ph1">`lpszDefExt`</ph> is automatically appended to the file name.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`NULL`</ph>, no extension is appended.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The initial file name that appears in the Filename box.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`NULL`</ph>, no initial file name appears.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A combination of one or more flags that you can use to customize the dialog box.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>For a description of these flags, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If you modify the <ph id="ph1">`m_ofn.Flags`</ph> structure member, use a bitwise-OR operator in your changes to keep the default behavior intact.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>A series of string pairs that specify filters you can apply to the file.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>If you specify file filters, only files that match filter criteria will appear in the Files list.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>See the Remarks section for more information about how to work with file filters.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>A pointer to the parent or owner window of the file dialog box.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The size of the <ph id="ph1">`OPENFILENAME`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>This value depends on the operating system version.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>MFC used this parameter to determine the appropriate kind of dialog box to create (for example, new <ph id="ph1">[!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)]</ph> dialog boxes instead of NT4 dialog boxes).</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The default size of 0 means that the MFC code will determine the correct dialog box size to use based on the operating system version on which the program is run.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Note<ept id="p1">**</ept> This parameter is available in Visual Studio 2008 and later and is will cause the new-style dialog to be used only if you are running in <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> or later.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The parameter that specifies the style of the file dialog.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Set it to <ph id="ph1">`TRUE`</ph> to use the new Vista style file dialogs.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Otherwise, the old style of dialog boxes will be used.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>See the Remarks section for more information about running under Vista.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Either a <bpt id="p1">**</bpt>File Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>File Save As<ept id="p2">**</ept> dialog box is constructed, depending on the value of <ph id="ph1">`bOpenFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Specifying a default extension using <ph id="ph1">`lpszDefExt`</ph> may not produce the behavior that you expect, because it is seldom predictable what extensions have file associations on the user’s computer.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>If you need more control over the appending of a default extension, you can derive your own class from <ph id="ph1">`CFileDialog`</ph>, and override the <ph id="ph2">`CFileDialog::OnFileNameOK`</ph> method to perform your own extension handling.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To enable the user to select multiple files, set the <ph id="ph1">`OFN_ALLOWMULTISELECT`</ph> flag before you call <bpt id="p1">[</bpt>DoModal<ept id="p1">](#cfiledialog__domodal)</ept>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>You must supply your own file name buffer to store the returned list of multiple file names.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Do this by replacing <ph id="ph1">`m_ofn.lpstrFile`</ph> with a pointer to a buffer you have allocated, after you construct the <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>, but before you call <ph id="ph2">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Additionally, you must set <ph id="ph1">`m_ofn.nMaxFile`</ph> with the number of characters in the buffer pointed to by <ph id="ph2">`m_ofn.lpstrFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>If you set the maximum number of files to be selected to <ph id="ph1">`n`</ph>, the necessary buffer size is <ph id="ph2">`n`</ph>*(_MAX_PATH + 1) + 1.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#23</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To enable the user to resize an Explorer-style dialog box by using either the mouse or keyboard, set the <ph id="ph1">`OFN_ENABLESIZING`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Setting this flag is necessary only if you provide a hook procedure or custom template.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The flag works only with an Explorer-style dialog box; old-style dialog boxes cannot be resized.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszFilter`</ph> parameter is used to determine the type of file name a file must have to be displayed in the file list.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The first string in the string pair describes the filter; the second string indicates the file name extension to use.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Multiple extensions may be specified by using a semicolon (the ';' character) as the delimiter.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The string ends with two '&amp;#124;' characters, followed by a <ph id="ph1">`NULL`</ph> character.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>You can also use a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[ofprexcel](../../mfc/reference/includes/ofprexcel_md.md)]</ph> allows users to open files that have extensions .xlc (chart) or .xls (worksheet), among others.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The filter for Excel could be written as:</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#24</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>However, if you plan to use this string to directly update the <ph id="ph1">`OPENFILENAME`</ph> structure, you should delimit your strings with the null character, '\0', instead of the vertical bars ('&amp;#124;').</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bVistaStyle`</ph> parameter is applicable only when running under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Under earlier versions of Windows, this parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bVistaStyle`</ph> is set to <ph id="ph2">`TRUE`</ph>, when you compile a program with <ph id="ph3">[!INCLUDE[vs_orcas_long](../../atl/reference/includes/vs_orcas_long_md.md)]</ph> or later, the new Vista style <bpt id="p1">**</bpt>File Dialog<ept id="p1">**</ept> will be used.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Otherwise, the previous MFC style <bpt id="p1">**</bpt>File Dialog<ept id="p1">**</ept> will be used.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Dialog templates are not supported on dialogs based on</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileDialog::DoModal<ept id="p1">](#cfiledialog__domodal)</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>CFileDialog::DoModal</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Call this function to display the Windows common file dialog box and allow the user to browse files and directories and enter a filename.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDOK<ept id="p1">**</ept> or <bpt id="p2">**</bpt>IDCANCEL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>IDCANCEL<ept id="p1">**</ept> is returned, call the Windows <bpt id="p2">[</bpt>CommDlgExtendedError<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646916)</ept> function to determine whether an error occurred.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDOK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IDCANCEL<ept id="p2">**</ept> are constants that indicate whether the user selected the OK or Cancel button.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>If you want to initialize the various file dialog-box options by setting members of the <bpt id="p1">**</bpt>m_ofn<ept id="p1">**</ept> structure, you should do this before calling <ph id="ph1">`DoModal`</ph>, but after the dialog object is constructed.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>For example, if you want to allow the user to select multiple files, set the <ph id="ph1">`OFN_ALLOWMULTISELECT`</ph> flag before calling <ph id="ph2">`DoModal`</ph>, as shown in the code example in <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>When the user clicks the dialog box's OK or Cancel buttons, or selects the Close option from the dialog box's control menu, control is returned to your application.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>You can then call other member functions to retrieve the settings or information the user inputs into the dialog box.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>is a virtual function overridden from class <ph id="ph1">`CDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#25</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CFileDialog::EnableOpenDropDown</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Enables a drop-down list on the Open or Save button in the dialog.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The ID of the drop-down list.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>CFileDialog::EndVisualGroup</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Stops the addition of elements to a visual group in the dialog.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Returns S_OK if successful; an error value otherwise.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetCheckButtonState</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Retrieves the current state of a check button (check box) in the dialog.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The ID of the check box.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The state of the check box.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>indicates checked; <ph id="ph1">`FALSE`</ph> indicates unchecked.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetControlItemState</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Retrieves the current state of an item in a container control found in the dialog.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>A reference to a variable that receives one of more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetControlState</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Retrieves the current visibility and enabled states of a given control.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>A reference to a variable that receives one or more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetEditBoxText</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Retrieves the current text in an edit box control.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The ID of the edit box.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The text value.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileExt</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the extension of the filename entered into the dialog box.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The extension of the filename.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>For example, if the name of the file entered is DATA.TXT, <ph id="ph1">`GetFileExt`</ph> returns "TXT".</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_ofn.Flags`</ph> has the <ph id="ph2">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To retrieve file pathnames, use the <bpt id="p1">[</bpt>GetStartPosition<ept id="p1">](#cfiledialog__getstartposition)</ept> and <bpt id="p2">[</bpt>GetNextPathName<ept id="p2">](#cfiledialog__getnextpathname)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileName</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the name of the filename entered in the dialog box.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The name of the file.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The name of the file includes both the prefix and the extension.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetFileName`</ph> will return "TEXT.DAT" for the file C:\FILES\TEXT.DAT.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_ofn.Flags`</ph> has the <ph id="ph2">`OFN_ALLOWMULTISELECT`</ph> flag set, you should call <bpt id="p1">[</bpt>GetStartPosition<ept id="p1">](#cfiledialog__getstartposition)</ept> and <bpt id="p2">[</bpt>GetNextPathName<ept id="p2">](#cfiledialog__getnextpathname)</ept> to retrieve a file pathname.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the title of the file entered in the dialog box.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The title of the file.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The title of the file includes only its prefix, without the path or the extension.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetFileTitle`</ph> will return "TEXT" for the file C:\FILES\TEXT.DAT.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_ofn.Flags`</ph> has the <ph id="ph2">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>For this reason, use the <bpt id="p1">[</bpt>GetStartPosition<ept id="p1">](#cfiledialog__getstartposition)</ept> and <bpt id="p2">[</bpt>GetNextPathName<ept id="p2">](#cfiledialog__getnextpathname)</ept> member functions to retrieve the next file name in the list.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileDialog::DoModal<ept id="p1">](#cfiledialog__domodal)</ept>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetFolderPath</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the path of the currently open folder or directory for an Explorer-style Open or Save As common dialog box.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object containing the currently open folder or directory.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The dialog box must have been created with the <bpt id="p1">**</bpt>OFN_EXPLORER<ept id="p1">**</ept> style; otherwise, the method will fail with an assertion.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>You can call this method only while the dialog box is being displayed.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>After the dialog box has been closed, this function will no longer work, and the method will fail with an assertion.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileDialogCustomize</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the internal COM object for a given <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The pointer to the internal COM object for the <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>It is your responsibility to release this pointer appropriately.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Use this function only under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id="ph2">`bVistaStyle`</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If you use this function when <ph id="ph1">`bVistaStyle`</ph> is <ph id="ph2">`false`</ph>, it will return <ph id="ph3">`NULL`</ph> in release mode and throw an assertion in debug mode.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`IFileDialogCustomize`</ph> interface,  see <bpt id="p1">[</bpt>IFileDialogCustomize<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775912)</ept>.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>This example retrieves the internal COM object.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>To run this code example, you must compile it under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CFileDialog#4</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileOpenDialog</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the internal COM object for a given <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The pointer to the internal COM object for the <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>It is your responsibility to release this pointer appropriately.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Use this function only under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id="ph2">`bVistaStyle`</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>This function returns <ph id="ph1">`NULL`</ph> if the <ph id="ph2">`CFileDialog`</ph> is not an <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> dialog box or if <ph id="ph3">`bVistaStyle`</ph> is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>In this final case, the function only returns <ph id="ph1">`NULL`</ph> in release mode - in debug mode it will throw an assertion.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`IFileOpenDialog`</ph> interface, see <bpt id="p1">[</bpt>IFileOpenDialog<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775834)</ept>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>This example retrieves the internal COM object.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>To run this code, you must compile it under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CFileDialog#2</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetIFileSaveDialog</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the internal COM object for a given <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The pointer to the internal COM object for the <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>It is your responsibility to release this pointer appropriately.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Use this function only under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id="ph2">`bVistaStyle`</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>This function will return <ph id="ph1">`NULL`</ph> if the <ph id="ph2">`CFileDialog`</ph> is not a <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> dialog box or if <ph id="ph3">`bVistaStyle`</ph> is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>In this final case, the function only returns <ph id="ph1">`NULL`</ph> in release mode - in debug mode it will throw an assertion.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`IFileSaveDialog`</ph> interface, see <bpt id="p1">[</bpt>IFileSaveDialog<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775688)</ept>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This example retrieves the internal COM object.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>To run this code example, you must compile it under <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CFileDialog#3</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetNextPathName</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the next filename from the group selected in the dialog box.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNextPathName`</ph> or <ph id="ph2">`GetStartPosition`</ph> function call.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the end of the list has been reached.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The full path of the file.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The path of the filename includes the file's title plus the entire directory path.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetNextPathName`</ph> will return "C:\FILES\TEXT.DAT" for the file C:\FILES\TEXT.DAT.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNextPathName`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id="ph2">`GetStartPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>If the selection consists of only one file, that file name will be returned.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetOFN</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Retrieves the associated <bpt id="p1">**</bpt>OPENFILENAME<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Use the second version of this function to initialize the appearance of a <bpt id="p1">**</bpt>File Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>File Save As<ept id="p2">**</ept> dialog box after it is constructed but before it is displayed with the <ph id="ph1">`DoModal`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>For example, you can set the <bpt id="p1">**</bpt>lpstrTitle<ept id="p1">**</ept> member of <bpt id="p2">**</bpt>m_ofn<ept id="p2">**</ept> to the caption you want the dialog box to have.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetPathName</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the full path of the file entered in the dialog box.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The full path of the file.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The path of the filename includes the file's title plus the entire directory path.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetPathName`</ph> will return "C:\FILES\TEXT.DAT" for the file C:\FILES\TEXT.DAT.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_ofn.Flags`</ph> has the <ph id="ph2">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-teminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>For this reason, use the <bpt id="p1">[</bpt>GetStartPosition<ept id="p1">](#cfiledialog__getstartposition)</ept> and <bpt id="p2">[</bpt>GetNextPathName<ept id="p2">](#cfiledialog__getnextpathname)</ept> member functions to retrieve the next file name in the list.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileDialog::DoModal<ept id="p1">](#cfiledialog__domodal)</ept>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetReadOnlyPref</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the Read Only check box has been selected in the Windows standard File Open and File Save As dialog boxes.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Non-zero if the Read Only check box in the dialog box is selected; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>You can hide the Read Only check box by setting the <ph id="ph1">`OFN_HIDEREADONLY`</ph> style in the <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>style <ph id="ph1">`CFileDialog`</ph> objects do not support this function.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Attempting to use this function on a <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style <ph id="ph2">`CFileDialog`</ph> will throw <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetResult</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Retrieves the choice that the user made in the dialog.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A pointer to an IShellItem that represents the user's choice.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetResults</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Retrieves the user's choices in a dialog that allows multiple selection.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>A pointer to an IShellItemArray through which the items selected in the dialog can be accessed.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetSelectedControlItem</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Retrieves a particular item from the specified container control in the dialog.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The ID of the item that the user selected in the control.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>CFileDialog::GetStartPosition</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the position of the first file pathname in the list, if <ph id="ph1">`m_ofn.Flags`</ph> has the <ph id="ph2">`OFN_ALLOWMULTISELECT`</ph> flag set.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>CFileDialog::HideControl</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Call this member function to hide the specified control in an Explorer-style Open or Save As common dialog box.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The ID of the control to hide.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The dialog box must have been created with the <bpt id="p1">**</bpt>OFN_EXPLORER<ept id="p1">**</ept> style; otherwise, the function will fail with an assertion.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>CFileDialog::IsPickFoldersMode</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Determines if the current dialog is in folder picker mode.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>if the dialog is in folder picker mode; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>CFileDialog::m_ofn</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>is a structure of type <ph id="ph1">`OPENFILENAME`</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The data in this structure represents the current state of the <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Use this structure to initialize the appearance of a <bpt id="p1">**</bpt>File Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>File Save As<ept id="p2">**</ept> dialog box after you construct it but before you display it with the <bpt id="p3">[</bpt>DoModal<ept id="p3">](#cfiledialog__domodal)</ept> method.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>For example, you can set the <ph id="ph1">`lpstrTitle`</ph> member of <ph id="ph2">`m_ofn`</ph> to the caption you want the dialog box to have.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>, <ph id="ph2">`m_ofn`</ph> is not guaranteed to always match the state of the dialog box.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>It is synchronized with the dialog box in earlier versions of Windows.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFileDialog::ApplyOFNToShellDialog<ept id="p1">](#cfiledialog__applyofntoshelldialog)</ept> and <bpt id="p2">[</bpt>CFileDialog::UpdateOFNFromShellDialog<ept id="p2">](#cfiledialog__updateofnfromshelldialog)</ept> for more information about synchronizing the <ph id="ph1">`m_ofn`</ph> structure and the <ph id="ph2">`CFileDialog`</ph> state under <ph id="ph3">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>style file dialogs do not support certain members and flags of the <ph id="ph1">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>As a result, these will have no effect.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The following is a list of the members that are not supported by <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The following flags are not supported and therefore have no effect when you use the <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of <ph id="ph2">`CFileDialog`</ph>:</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>OFN_ENABLEHOOK</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>OFN_ENABLEINCLUDENOTIFY</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>OFN_ENABLETEMPLATE</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>OFN_ENABLETEMPLATEHANDLE</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>OFN_EXPLORER</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>OFN_EXTENSIONDIFFERENT</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>OFN_HIDEREADONLY</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>OFN_LONGNAMES - effectively always on in</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>OFN_NOLONGNAMES - effectively always off in</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>OFN_NONETWORKBUTTON - effectively always on in</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>OFN_READONLY</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>OFN_SHOWHELP</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>For more information about this structure, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>For more information about the different behavior of the <ph id="ph1">`CFileDialog`</ph> under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>CFileDialog::MakeProminent</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Places a control in the dialog so that it stands out compared to other controls.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnButtonClicked</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Called when the button is clicked.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The ID of the button.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnCheckButtonToggled</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Called when the check box is checked or unchecked.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>The ID of the check box.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Checked or unchecked.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnControlActivating</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Called when the control is activated.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFileNameChange</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Override this method if you want to handle the <ph id="ph1">`WM_NOTIFY``CDN_SELCHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The system sends the <ph id="ph1">`CDN_SELCHANGE`</ph> message when the user selects a new file or folder in the file list of the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Override this method if you want to perform any actions in response to this message.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The system sends this message only if the dialog box was created with the OFN_EXPLORER flag turned on.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>For more information about the notification, see <bpt id="p1">[</bpt>CDN_SELCHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646865)</ept>.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>For information about the OFN_EXPLORER flag, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id="p2">[</bpt>Open and Save As Dialog Boxes<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFileNameOK</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Override this function only if you want to provide custom validation of filenames that are entered into a common file dialog box.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>1 if the filename is not a valid filename; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>This function allows you to reject a filename for any application-specific reason.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Normally, you do not need to use this function because the framework provides default validation of filenames and displays a message box if an invalid filename is entered.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>If 1 is returned, the dialog box will remain displayed for the user to enter another filename.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The dialog procedure dismisses the dialog if the return is 0.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Other nonzero return values are currently reserved and should not be used.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnFolderChange</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Override this function to handle the <bpt id="p1">**</bpt>WM_NOTIFYCDN_FOLDERCHANGE<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>The notification message is sent when a new folder is opened in the Open or Save As dialog box.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Notification is sent only if the dialog box was created with the OFN_EXPLORER style.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>For more information about the notification, see <bpt id="p1">[</bpt>CDN_FOLDERCHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646859)</ept>.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>For information about the OFN_EXPLORER style, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id="p2">[</bpt>Open and Save As Dialog Boxes<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnInitDone</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Override this function to handle the <ph id="ph1">`WM_NOTIFY``CDN_INITDONE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The system sends this notification message when the system has finished arranging controls in the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> dialog box to make room for the controls of the child dialog box.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>The system sends this only if the dialog box was created with the OFN_EXPLORER style.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>For more information about the notification, see <bpt id="p1">[</bpt>CDN_INITDONE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646863)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>For information about the OFN_EXPLORER style, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id="p2">[</bpt>Open and Save As Dialog Boxes<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>style file dialogs do not support this function.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Attempting to use this function on a <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style file dialog will throw <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnItemSelected</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Called when the container item is selected.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnLBSelChangedNotify</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>This function is called whenever the current selection in a list box is about to change.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>nIDBox</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The ID of the list box or combo box in which the selection occurred.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The index of the current selection.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The control notification code.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>This parameter must have one of the following values:</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CD_LBSELCHANGE<ept id="p1">**</ept> Specifies <ph id="ph1">`iCurSel`</ph> is the selected item in a single-selection list box.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CD_LBSELSUB<ept id="p1">**</ept> Specifies that <ph id="ph1">`iCurSel`</ph> is no longer selected in a multiselection list box.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CD_LBSELADD<ept id="p1">**</ept> Specifies that <ph id="ph1">`iCurSel`</ph> is selected in a multiselection list box.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CD_LBSELNOITEMS<ept id="p1">**</ept> Specifies that no selection exists in a multiselection list box.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Override this function to provide custom handling of selection changes in the list box.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>For example, you can use this function to display the access rights or date-last-modified of each file the user selects.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnShareViolation</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Override this function to provide custom handling of share violations.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The path of the file on which the share violation occurred.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OFN_SHAREFALLTHROUGH<ept id="p1">**</ept> The filename is returned from the dialog box.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OFN_SHARENOWARN<ept id="p1">**</ept> No further action needs to be taken.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OFN_SHAREWARN<ept id="p1">**</ept> The user receives the standard warning message for this error.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Normally, you do not need to use this function because the framework provides default checking of share violations and displays a message box if a share violation occurs.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>If you want to disable share violation checking, use the bitwise OR operator to combine the flag <bpt id="p1">**</bpt>OFN_SHAREAWARE<ept id="p1">**</ept> with <ph id="ph1">`m_ofn.Flags`</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>CFileDialog::OnTypeChange</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Override this function to handle the <bpt id="p1">**</bpt>WM_NOTIFYCDN_TYPECHANGE<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The notification message is sent when the user selects a new file type from the list of file types in the Open or Save As dialog box.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Notification is sent only if the dialog box was created with the OFN_EXPLORER style.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>For more information about the notification, see <bpt id="p1">[</bpt>CDN_TYPECHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646868)</ept>.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>For information about the OFN_EXPLORER style, see the <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id="p2">[</bpt>Open and Save As Dialog Boxes<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>CFileDialog::RemoveControlItem</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Removes an item from a container control in the dialog.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>The ID of the container control to remove the item from.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetCheckButtonState</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Sets the current state of a check button (check box) in the dialog.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The ID of the check box.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The state of the check box.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>indicates checked; <ph id="ph1">`FALSE`</ph> indicates Unchecked.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlItemState</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Sets the current state of an item in a container control found in the dialog.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>One or more values from the CDCONTROLSTATE enumeration that indicate the new state of the control.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlItemText</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Sets the text of a control item.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>For example, the text that accompanies a radio button or an item in a menu.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The ID of the item.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Item's text.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlLabel</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Sets the text associated with a control, such as button text or an edit box label.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The control name.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlState</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Sets the current visibility and enabled states of a given control.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>One or more values from the CDCONTROLSTATE enumeration that indicate the current state of the control.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetControlText</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Call this method to set the text for the specified control in an Explorer-style <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The ID of the control for which to set the text.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>A pointer to the string that contains the text to set for the control.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Both versions of this function are valid for applications that use Unicode.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>However, only the version with the LPCSTR type is valid for applications that use <ph id="ph1">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>To use this method, you must create the dialog box with the OFN_EXPLORER style.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Otherwise, the function will fail with an assertion.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetDefExt</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Call this function to set the default file name extension for an Explorer-style Open or Save As common dialog box.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the default extension to use for the dialog box object.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>This string must not contain a period (.).</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The dialog box must have been created with the <bpt id="p1">**</bpt>OFN_EXPLORER<ept id="p1">**</ept> style; otherwise, the function will fail with an assertion.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetEditBoxText</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Sets the current text in an edit box control.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>The ID of the edit box.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The text value.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetProperties</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Provides a property store that defines the default values to be used for the item being saved.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>A list of predefined properties separated by ";".</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>For a list of the flags, see the <ph id="ph1">`Flags`</ph> section of <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](http://msdn.microsoft.com/en-us/8cecfd45-f7c1-4f8d-81a0-4e7fecc3b104)</ept>.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetSelectedControlItem</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Sets the selected state of a particular item in an option button group or a combo box found in the dialog.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>The ID of the container control.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The ID of the item that the user selected in the control.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>CFileDialog::SetTemplate</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Sets the dialog box template for the <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Contains the ID number of the template resource for the non-Explorer <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Contains the ID number of the template resource for the Explorer <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>This template is used only on <ph id="ph1">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Contains the name of the template resource for the non-Explorer <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Contains the name of the template resource of the Explorer <ph id="ph1">`CFileDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>This template is used only on <ph id="ph1">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>The system will use only one of the specified templates.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>The system determines which template to use based on the presence of the OFN_EXPLORER style and the operating system that the application is running on.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>By specifying both a non-Explorer and Explorer-style template, it is easy to support Windows NT 3.51, <ph id="ph1">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, and Windows 95 and later versions.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>style file dialog boxes do not support this function.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Attempting to use this function on a <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style file dialog box will throw <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>An alternative is to use a customized dialog.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>For more information about using a custom <ph id="ph1">`CFileDialog`</ph>, see <bpt id="p1">[</bpt>IFileDialogCustomize<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775912)</ept>.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>CFileDialog::StartVisualGroup</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Declares a visual group in the dialog.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Subsequent calls to any "add" method add those elements to this group.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>The ID of the visual group.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The group name.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>CFileDialog::UpdateOFNFromShellDialog</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Updates the <ph id="ph1">`m_ofn`</ph> data structure of the <bpt id="p1">[</bpt>CFileDialog<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept> based on the current state of the internal object.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>In versions of Windows before <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the member <bpt id="p1">[</bpt>OPENFILENAME<ept id="p1">](https://msdn.microsoft.com/library/ms911906.aspx)</ept> data structure was continuously synchronized with the state of the <ph id="ph2">`CFileDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Any changes to the <bpt id="p1">[</bpt>m_ofn<ept id="p1">](#cfiledialog__m_ofn)</ept> member variable directly affected the state of the dialog box.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Also, any changes to the state of the dialog immediately updated the m_ofn member variable.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the <ph id="ph2">`m_ofn`</ph> data structure is not automatically updated.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>To guarantee the accuracy of the data in the <ph id="ph1">`m_ofn`</ph> member variable, you should call the <ph id="ph2">`UpdateOFNFromShellDialog`</ph> function before accessing the data.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Windows calls this function automatically during the processing of <bpt id="p1">[</bpt>IFileDialog::OnFileOK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775879)</ept>.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`CFileDialog`</ph> class under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>This example updates the <ph id="ph1">`CFileDialog`</ph> before displaying it.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Before updating the <ph id="ph1">`m_ofn`</ph> member variable, we need to synchronize it to the current state of the dialog box.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CFileDialog#1</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>CCommonDialog Class</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>