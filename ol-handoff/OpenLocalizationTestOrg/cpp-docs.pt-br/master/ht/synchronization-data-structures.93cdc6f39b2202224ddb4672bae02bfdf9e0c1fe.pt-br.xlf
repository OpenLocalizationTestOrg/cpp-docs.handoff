<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46ac3835e90e928561e78e9ccbeb0d5afea98653</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\synchronization-data-structures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99b73beae586dc6800009a89db6b265c776b092b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8418da882a8453780bc3f14128def00fe75cf12d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides several data structures that let you synchronize access to shared data from multiple threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These data structures are useful when you have shared data that you modify infrequently.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A synchronization object, for example, a critical section, causes other threads to wait until the shared resource is available.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Therefore, if you use such an object to synchronize access to data that is used frequently, you can lose scalability in your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> provides the <bpt id="p2">[</bpt>concurrency::combinable<ept id="p2">](../../parallel/concrt/reference/combinable-class.md)</ept> class, which enables you to share a resource among several threads or tasks without the need for synchronization.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`combinable`</ph> class, see <bpt id="p1">[</bpt>Parallel Containers and Objects<ept id="p1">](../../parallel/concrt/parallel-containers-and-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes the following asynchronous message block types in detail:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>critical_section</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>reader_writer_lock</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>scoped_lock and scoped_lock_read</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>critical_section</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::critical_section<ept id="p1">](../../parallel/concrt/reference/critical-section-class.md)</ept> class represents a cooperative mutual exclusion object that yields to other tasks instead of preempting them.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Critical sections are useful when multiple threads require exclusive read and write access to shared data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`critical_section`</ph> class is non-reentrant.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::critical_section::lock<ept id="p1">](reference/critical-section-class.md#lock)</ept> method throws an exception of type <bpt id="p2">[</bpt>concurrency::improper_lock<ept id="p2">](../../parallel/concrt/reference/improper-lock-class.md)</ept> if it is called by the thread that already owns the lock.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following table shows the important methods that are defined by the <ph id="ph1">`critical_section`</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Acquires the critical section.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The calling context blocks until it acquires the lock.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Tries to acquire the critical section, but does not block.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Releases the critical section.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>reader_writer_lock</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::reader_writer_lock<ept id="p1">](../../parallel/concrt/reference/reader-writer-lock-class.md)</ept> class provides thread-safe read/write operations to shared data.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use reader/writer locks when multiple threads require concurrent read access to a shared resource but rarely write to that shared resource.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This class gives only one thread write access to an object at any time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reader_writer_lock`</ph> class can perform better than the <ph id="ph2">`critical_section`</ph> class because a <ph id="ph3">`critical_section`</ph> object acquires exclusive access to a shared resource, which prevents concurrent read access.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`critical_section`</ph> class, the <ph id="ph2">`reader_writer_lock`</ph> class represents a cooperative mutual exclusion object that yields to other tasks instead of preempting them.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When a thread that must write to a shared resource acquires a reader/writer lock, other threads that also must access the resource are blocked until the writer releases the lock.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reader_writer_lock`</ph> class is an example of a <bpt id="p1">*</bpt>write-preference<ept id="p1">*</ept> lock, which is a lock that unblocks waiting writers before it unblocks waiting readers.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`critical_section`</ph> class, the <ph id="ph2">`reader_writer_lock`</ph> class is non-reentrant.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::reader_writer_lock::lock<ept id="p1">](reference/reader-writer-lock-class.md#lock)</ept> and <bpt id="p2">[</bpt>concurrency::reader_writer_lock::lock_read<ept id="p2">](reference/reader-writer-lock-class.md#lock_read)</ept> methods throw an exception of type <ph id="ph1">`improper_lock`</ph> if they are called by a thread that already owns the lock.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`reader_writer_lock`</ph> class is non-reentrant, you cannot upgrade a read-only lock to a reader/writer lock or downgrade a reader/writer lock to a read-only lock.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Performing either of these operations produces unspecified behavior.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following table shows the important methods that are defined by the <ph id="ph1">`reader_writer_lock`</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Acquires read/write access to the lock.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Tries to acquire read/write access to the lock, but does not block.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>lock_read</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Acquires read-only access to the lock.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>try_lock_read</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Tries to acquire read-only access to the lock, but does not block.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Releases the lock.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>scoped_lock and scoped_lock_read</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`critical_section`</ph> and <ph id="ph2">`reader_writer_lock`</ph> classes provide nested helper classes that simplify the way you work with mutual exclusion objects.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These helper classes are known as <bpt id="p1">*</bpt>scoped locks<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`critical_section`</ph> class contains the <bpt id="p1">[</bpt>concurrency::critical_section::scoped_lock<ept id="p1">](reference/critical-section-class.md#critical_section__scoped_lock_class)</ept> class.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The constructor acquires access to the provided <ph id="ph1">`critical_section`</ph> object; the destructor releases access to that object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reader_writer_lock`</ph> class contains the <bpt id="p1">[</bpt>concurrency::reader_writer_lock::scoped_lock<ept id="p1">](reference/reader-writer-lock-class.md#scoped_lock_class)</ept> class, which resembles <ph id="ph2">`critical_section::scoped_lock`</ph>, except that it manages write access to the provided <ph id="ph3">`reader_writer_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reader_writer_lock`</ph> class also contains the <bpt id="p1">[</bpt>concurrency::reader_writer_lock::scoped_lock_read<ept id="p1">](reference/reader-writer-lock-class.md#scoped_lock_read_class)</ept> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This class manages read access to the provided <ph id="ph1">`reader_writer_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Scoped locks provide several benefits when you are working with <ph id="ph1">`critical_section`</ph> and <ph id="ph2">`reader_writer_lock`</ph> objects manually.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Typically, you allocate a scoped lock on the stack.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A scoped lock releases access to its mutual exclusion object automatically when it is destroyed; therefore, you do not manually unlock the underlying object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This is useful when a function contains multiple <ph id="ph1">`return`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Scoped locks can also help you write exception-safe code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`throw`</ph> statement causes the stack to unwind, the destructor for any active scoped lock is called, and therefore the mutual exclusion object is always correctly released.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`critical_section::scoped_lock`</ph>, <ph id="ph2">`reader_writer_lock::scoped_lock`</ph>, and <ph id="ph3">`reader_writer_lock::scoped_lock_read`</ph> classes, do not manually release access to the underlying mutual exclusion object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This can put the runtime in an invalid state.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::event<ept id="p1">](../../parallel/concrt/reference/event-class.md)</ept> class represents a synchronization object whose state can be signaled or non-signaled.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Unlike synchronization objects, such as critical sections, whose purpose is to protect access to shared data, events synchronize flow of execution.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`event`</ph> class is useful when one task has completed work for another task.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, one task might signal another task that it has read data from a network connection or from a file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following table shows several of the important methods that are defined by the <ph id="ph1">`event`</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wait<ept id="p1">](reference/event-class.md#wait)</ept>|Waits for the event to become signaled.|</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>set<ept id="p1">](reference/event-class.md#set)</ept>|Sets the event to the signaled state.|</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reset<ept id="p1">](reference/event-class.md#reset)</ept>|Sets the event to the non-signaled state.|</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wait_for_multiple<ept id="p1">](reference/event-class.md#wait_for_multiple)</ept>|Waits for multiple events to become signaled.|</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For an example that shows how to use the <ph id="ph1">`event`</ph> class, see <bpt id="p1">[</bpt>Comparing Synchronization Data Structures to the Windows API<ept id="p1">](../../parallel/concrt/comparing-synchronization-data-structures-to-the-windows-api.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Comparing Synchronization Data Structures to the Windows API</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Compares the behavior of the synchronization data structures to those provided by the Windows API.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Describes the Concurrency Runtime, which simplifies parallel programming, and contains links to related topics.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>