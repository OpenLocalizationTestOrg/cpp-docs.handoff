<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8c92b9f381b4a406ac1f84c73d976dbda7b8f68</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\walkthrough-creating-a-dataflow-agent.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2067c8a0269ed08d50c8c05a130ff1db5762d1e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a20ffd1958e41e000e906dc40a1142179ca2b192</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Agent | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document demonstrates how to create agent-based applications that are based on dataflow, instead of control flow.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Control flow<ept id="p1">*</ept> refers to the execution order of operations in a program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Control flow is regulated by using control structures such as conditional statements, loops, and so on.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Alternatively, <bpt id="p1">*</bpt>dataflow<ept id="p1">*</ept> refers to a programming model in which computations are made only when all required data is available.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The dataflow programming model is related to the concept of message passing, in which independent components of a program communicate with one another by sending messages.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous agents support both the control-flow and dataflow programming models.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although the control-flow model is appropriate in many cases, the dataflow model is appropriate in others, for example, when an agent receives data and performs an action that is based on the payload of that data.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Read the following documents before you start this walkthrough:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This walkthrough contains the following sections:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a Basic Control-Flow Agent</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a Basic Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating a Message-Logging Agent</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating a Basic Control-Flow Agent</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Consider the following example that defines the <ph id="ph1">`control_flow_agent`</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`control_flow_agent`</ph> class acts on three message buffers: one input buffer and two output buffers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method reads from the source message buffer in a loop and uses a conditional statement to direct the flow of program execution.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The agent increments one counter for non-zero, negative values and increments another counter for non-zero, positive values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>After the agent receives the sentinel value of zero, it sends the values of the counters to the output message buffers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`negatives`</ph> and <ph id="ph2">`positives`</ph> methods enable the application to read the counts of negative and positive values from the agent.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#1</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Although this example makes basic use of control flow in an agent, it demonstrates the serial nature of control-flow-based programming.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each message must be processed sequentially, even though multiple messages might be available in the input message buffer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The dataflow model enables both branches of the conditional statement to evaluate concurrently.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The dataflow model also enables you to create more complex messaging networks that act on data as it becomes available.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating a Basic Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This section shows how to convert the <ph id="ph1">`control_flow_agent`</ph> class to use the dataflow model to perform the same task.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The dataflow agent works by creating a network of message buffers, each of which serves a specific purpose.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Certain message blocks use a filter function to accept or reject a message on the basis of its payload.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A filter function ensures that a message block receives only certain values.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To convert the control-flow agent to a dataflow agent</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Copy the body of the <ph id="ph1">`control_flow_agent`</ph> class to another class, for example, <ph id="ph2">`dataflow_agent`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alternatively, you can rename the <ph id="ph1">`control_flow_agent`</ph> class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remove the body of the loop that calls <ph id="ph1">`receive`</ph> from the <ph id="ph2">`run`</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#2</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`run`</ph> method, after the initialization of the variables <ph id="ph2">`negative_count`</ph> and <ph id="ph3">`positive_count`</ph>, add a <ph id="ph4">`countdown_event`</ph> object that tracks the count of active operations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#6</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`countdown_event`</ph> class is shown later in this topic.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Create the message buffer objects that will participate in the dataflow network.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#3</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Connect the message buffers to form a network.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#4</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Wait for the <ph id="ph1">`event`</ph> and <ph id="ph2">`countdown event`</ph> objects to be set.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These events signal that that the agent has received the sentinel value and that all operations have finished.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#5</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following diagram shows the complete dataflow network for the <ph id="ph1">`dataflow_agent`</ph> class:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The dataflow network</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following table describes the members of the network.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::transformer<ept id="p1">](../../parallel/concrt/reference/transformer-class.md)</ept> object that increments the active event counter and passes the input value to the rest of the network.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> objects that increment the count of numbers and decrements the active event counter.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The objects each use a filter to accept either negative numbers or positive numbers.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> object that accepts only the sentinel value of zero and decrements the active event counter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept> object that connects the source message buffer to the internal network.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`run`</ph> method is called on a separate thread, other threads can send messages to the network before the network is fully connected.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_source`</ph> data member is an <ph id="ph2">`unbounded_buffer`</ph> object that buffers all input that is sent from the application to the agent.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To make sure that the network processes all input messages, the agent first links the internal nodes of the network and then links the start of that network, <ph id="ph1">`connector`</ph>, to the <ph id="ph2">`_source`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This guarantees that messages do not get processed as the network is being formed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the network in this example is based on dataflow, rather than on control-flow, the network must communicate to the agent that it has finished processing each input value and that the sentinel node has received its value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">`countdown_event`</ph> object to signal that all input values have been processed and a <bpt id="p1">[</bpt>concurrency::event<ept id="p1">](../../parallel/concrt/reference/event-class.md)</ept> object to indicate that the sentinel node has received its value.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`countdown_event`</ph> class uses an <ph id="ph2">`event`</ph> object to signal when a counter value reaches zero.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The head of the dataflow network increments the counter every time that it receives a value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Every terminal node of the network decrements the counter after it processes the input value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>After the agent forms the dataflow network, it waits for the sentinel node to set the <ph id="ph1">`event`</ph> object and for the <ph id="ph2">`countdown_event`</ph> object to signal that its counter has reached zero.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`control_flow_agent`</ph>, <ph id="ph2">`dataflow_agent`</ph>, and <ph id="ph3">`countdown_event`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wmain`</ph> function creates a <ph id="ph2">`control_flow_agent`</ph> and a <ph id="ph3">`dataflow_agent`</ph> object and uses the <ph id="ph4">`send_values`</ph> function to send a series of random values to the agents.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>concrt-dataflow-agent#7</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example produces the following sample output:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`dataflow-agent.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc dataflow-agent.cpp</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Creating a Message-Logging Agent</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`log_agent`</ph> class, which resembles the <ph id="ph2">`dataflow_agent`</ph> class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`log_agent`</ph> class implements an asynchronous logging agent that writes log messages to a file and to the console.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`log_agent`</ph> class enables the application to categorize messages as informational, warning, or error.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It also enables the application to specify whether each log category is written to a file, the console, or both.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This example writes all log messages to a file and only error messages to the console.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>concrt-log-filter#1</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This example writes the following output to the console.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This example also produces the log.txt file, which contains the following text.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`log-filter.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc log-filter.cpp</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime Walkthroughs</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>