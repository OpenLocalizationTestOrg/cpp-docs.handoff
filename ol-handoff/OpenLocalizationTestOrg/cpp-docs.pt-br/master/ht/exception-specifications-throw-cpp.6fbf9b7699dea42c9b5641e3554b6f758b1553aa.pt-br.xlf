<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e9f66acf1f19855d3b715e440c212edc89fee04</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\exception-specifications-throw-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">669a8d76e7d65cfc2a2c94cb6eb2dcf1a1545932</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b05787df54ad5dd9e8cb4c32ee8e922786fddbb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exception Specifications (throw) (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exception Specifications (throw) (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Exception specifications are a C++ language feature that is deprecated in C++11.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They were designed to provide summary information about what exceptions can be thrown out of a function, but in practice they were found to be problematic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The one exception specification that did prove to be somewhat useful was the throw() specification.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>tells the compiler that the function does not throw any exceptions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is the equivalent to using <bpt id="p1">[</bpt>__declspec(nothrow)<ept id="p1">](../cpp/nothrow-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Its use is considered optional.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(C++11)<ept id="p1">**</ept> In the ISO C++11 Standard, <bpt id="p2">[</bpt>noexcept<ept id="p2">](../cpp/noexcept-cpp.md)</ept> operator was introduced and is supported in Visual Studio 2015 and later.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Whenever possible, use <ph id="ph1">`noexcept`</ph> to specify whether a function might throw exceptions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Visual C++ departs from the ISO C++ Standard in its implementation of exception specifications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table summarizes the Visual C++ implementation of exception specifications:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Exception specification</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>throw()</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The function does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, if an exception is thrown out of a function marked throw(), the Visual C++ compiler will not call unexpected (see <bpt id="p1">[</bpt>unexpected<ept id="p1">](../c-runtime-library/reference/unexpected-crt.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If a function is marked with throw(), the Visual C++ compiler will assume that the function does not throw C++ exceptions and generate code accordingly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Due to code optimizations that might be performed by the C++ compiler (based on the assumption that the function does not throw any C++ exceptions) if a function does throw an exception, the program may not execute correctly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The function can throw an exception.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>throw(<ph id="ph1">`type`</ph>)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The function can throw an exception of type <ph id="ph1">`type`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, in Visual C++ .NET, this is interpreted as throw(...).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If exception handling is used in an application, there must be one or more functions that handle thrown exceptions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any functions called between the one that throws an exception and the one that handles the exception must be capable of throwing the exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The throw behavior of a function depends on the following factors:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Whether you are compiling the function under C or C++.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Which <bpt id="p1">[</bpt>/EH<ept id="p1">](../build/reference/eh-exception-handling-model.md)</ept> compiler option you use.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Whether you explicitly specify the exception specification.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Explicit exception specifications are not allowed on C functions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following table summarizes the throw behavior of a function:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>/EHsc</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>/EHs</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>/EHa</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>/EHac</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>C function</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>throw()</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C++ function with no exception specification</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>C++ function with throw() exception specification</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>throw()</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>throw()</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C++ function with throw(...) exception specification</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>C++ function with throw(<ph id="ph1">`type`</ph>) exception specification</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>throw(...)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>try, throw, and catch Statements (C++)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>