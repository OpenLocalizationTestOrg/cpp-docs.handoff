<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dab70cae0f790c30b5ad4aeeed8ae8442daa9601</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\exception-handling-in-the-concurrency-runtime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6b9dde7b3a02d6439fbc0b0a39a3178b8250261</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc1ddd0d2892206edce8d70a05cb7da02e8ccb13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exception Handling in the Concurrency Runtime | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exception Handling in the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime uses C++ exception handling to communicate many kinds of errors.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These errors include invalid use of the runtime, runtime errors such as failure to acquire a resource, and errors that occur in work functions that you provide to tasks and task groups.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When a task or task group throws an exception, the runtime holds that exception and marshals it to the context that waits for the task or task group to finish.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For components such as lightweight tasks and agents, the runtime does not manage exceptions for you.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In these cases, you must implement your own exception-handling mechanism.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic describes how the runtime handles exceptions that are thrown by tasks, task groups, lightweight tasks, and asynchronous agents, and how to respond to exceptions in your applications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Key Points</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When a task or task group throws an exception, the runtime holds that exception and marshals it to the context that waits for the task or task group to finish.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When possible, surround every call to <bpt id="p1">[</bpt>concurrency::task::get<ept id="p1">](reference/task-class.md#get)</ept> and <bpt id="p2">[</bpt>concurrency::task::wait<ept id="p2">](reference/task-class.md#wait)</ept> with a <ph id="ph1">`try`/`catch`</ph> block to handle errors that you can recover from.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The runtime terminates the app if a task throws an exception and that exception is not caught by the task, one of its continuations, or the main app.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A task-based continuation always runs; it does not matter whether the antecedent task completed successfully, threw an exception, or was canceled.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A value-based continuation does not run if the antecedent task throws or cancels.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because task-based continuations always run, consider whether to add a task-based continuation at the end of your continuation chain.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This can help guarantee that your code observes all exceptions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The runtime throws <bpt id="p1">[</bpt>concurrency::task_canceled<ept id="p1">](../../parallel/concrt/reference/task-canceled-class.md)</ept> when you call <bpt id="p2">[</bpt>concurrency::task::get<ept id="p2">](reference/task-class.md#get)</ept> and that task is canceled.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The runtime does not manage exceptions for lightweight tasks and agents.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this Document</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Tasks and Continuations</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Task Groups and Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Exceptions Thrown by the Runtime</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Multiple Exceptions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Lightweight Tasks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Tasks and Continuations</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This section describes how the runtime handles exceptions that are thrown by <bpt id="p1">[</bpt>concurrency::task<ept id="p1">](../../parallel/concrt/reference/task-class.md)</ept> objects and their continuations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about the task and continuation model, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you throw an exception in the body of a work function that you pass to a <ph id="ph1">`task`</ph> object, the runtime stores that exception and marshals it to the context that calls <bpt id="p1">[</bpt>concurrency::task::get<ept id="p1">](reference/task-class.md#get)</ept> or <bpt id="p2">[</bpt>concurrency::task::wait<ept id="p2">](reference/task-class.md#wait)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The document <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept> describes task-based versus value-based continuations, but to summarize, a value-based continuation takes a parameter of type <ph id="ph1">`T`</ph> and a task-based continuation takes a parameter of type <ph id="ph2">`task&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a task that throws has one or more value-based continuations, those continuations are not scheduled to run.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example illustrates this behavior:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>concrt-eh-task#1</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A task-based continuation enables you to handle any exception that is thrown by the antecedent task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A task-based continuation always runs; it does not matter whether the task completed successfully, threw an exception, or was canceled.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When a task throws an exception, its task-based continuations are scheduled to run.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows a task that always throws.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The task has two continuations; one is value-based and the other is task-based.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The task-based exception always runs, and therefore can catch the exception that is thrown by the antecedent task.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When the example waits for both continuations to finish, the exception is thrown again because the task exception is always thrown when <ph id="ph1">`task::get`</ph> or <ph id="ph2">`task::wait`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>concrt-eh-continuations#1</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We recommend that you use task-based continuations to catch exceptions that you are able to handle.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because task-based continuations always run, consider whether to add a task-based continuation at the end of your continuation chain.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can help guarantee that your code observes all exceptions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example shows a basic value-based continuation chain.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The third task in the chain throws, and therefore any value-based continuations that follow it are not run.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, the final continuation is task-based, and therefore always runs.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This final continuation handles the exception that is thrown by the third task.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>We recommend that you catch the most specific exceptions that you can.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can omit this final task-based continuation if you don’t have specific exceptions to catch.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Any exception will remain unhandled and can terminate the app.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>concrt-eh-task-chain#1</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>concurrency::task_completion_event::set_exception<ept id="p1">](../../parallel/concrt/reference/task-completion-event-class.md)</ept> method to associate an exception with a task completion event.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The document <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept> describes the <bpt id="p2">[</bpt>concurrency::task_completion_event<ept id="p2">](../../parallel/concrt/reference/task-completion-event-class.md)</ept> class in greater detail.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency::task_canceled<ept id="p1">](../../parallel/concrt/reference/task-canceled-class.md)</ept> is an important runtime exception type that relates to <ph id="ph1">`task`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The runtime throws <ph id="ph1">`task_canceled`</ph> when you call <ph id="ph2">`task::get`</ph> and that task is canceled.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(Conversely, <ph id="ph1">`task::wait`</ph> returns <bpt id="p1">[</bpt>task_status::canceled<ept id="p1">](reference/concurrency-namespace-enums.md#task_group_status)</ept> and does not throw.) You can catch and handle this exception from a task-based continuation or when you call <ph id="ph2">`task::get`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information about task cancellation, see <bpt id="p1">[</bpt>Cancellation in the PPL<ept id="p1">](cancellation-in-the-ppl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Never throw <ph id="ph1">`task_canceled`</ph> from your code.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>concurrency::cancel_current_task<ept id="p1">](reference/concurrency-namespace-functions.md#cancel_current_task)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The runtime terminates the app if a task throws an exception and that exception is not caught by the task, one of its continuations, or the main app.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If your application crashes, you can configure Visual Studio to break when C++ exceptions are thrown.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After you diagnose the location of the unhandled exception, use a task-based continuation to handle it.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The section <bpt id="p1">[</bpt>Exceptions Thrown by the Runtime<ept id="p1">](#runtime)</ept> in this document describes how to work with runtime exceptions in greater detail.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Task Groups and Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This section describes how the runtime handles exceptions that are thrown by task groups.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This section also applies to parallel algorithms such as <bpt id="p1">[</bpt>concurrency::parallel_for<ept id="p1">](reference/concurrency-namespace-functions.md#parallel_for)</ept>, because these algorithms build on task groups.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Make sure that you understand the effects that exceptions have on dependent tasks.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For recommended practices about how to use exception handling with tasks or parallel algorithms, see the <bpt id="p1">[</bpt>Understand how Cancellation and Exception Handling Affect Object Destruction<ept id="p1">](../../parallel/concrt/best-practices-in-the-parallel-patterns-library.md#object-destruction)</ept> section in the Best Practices in the Parallel Patterns Library topic.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information about task groups, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about parallel algorithms, see <bpt id="p1">[</bpt>Parallel Algorithms<ept id="p1">](../../parallel/concrt/parallel-algorithms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you throw an exception in the body of a work function that you pass to a <bpt id="p1">[</bpt>concurrency::task_group<ept id="p1">](reference/task-group-class.md)</ept> or <bpt id="p2">[</bpt>concurrency::structured_task_group<ept id="p2">](../../parallel/concrt/reference/structured-task-group-class.md)</ept> object, the runtime stores that exception and marshals it to the context that calls <bpt id="p3">[</bpt>concurrency::task_group::wait<ept id="p3">](reference/task-group-class.md#wait)</ept>, <bpt id="p4">[</bpt>concurrency::structured_task_group::wait<ept id="p4">](reference/structured-task-group-class.md#wait)</ept>, <bpt id="p5">[</bpt>concurrency::task_group::run_and_wait<ept id="p5">](reference/task-group-class.md#run_and_wait)</ept>, or <bpt id="p6">[</bpt>concurrency::structured_task_group::run_and_wait<ept id="p6">](reference/structured-task-group-class.md#run_and_wait)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The runtime also stops all active tasks that are in the task group (including those in child task groups) and discards any tasks that have not yet started.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example shows the basic structure of a work function that throws an exception.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The example uses a <ph id="ph1">`task_group`</ph> object to print the values of two <ph id="ph2">`point`</ph> objects in parallel.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`print_point`</ph> work function prints the values of a <ph id="ph2">`point`</ph> object to the console.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The work function throws an exception if the input value is <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The runtime stores this exception and marshals it to the context that calls <ph id="ph1">`task_group::wait`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>concrt-eh-task-group#1</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For a complete example that uses exception handling in a task group, see <bpt id="p1">[</bpt>How to: Use Exception Handling to Break from a Parallel Loop<ept id="p1">](../../parallel/concrt/how-to-use-exception-handling-to-break-from-a-parallel-loop.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Exceptions Thrown by the Runtime</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An exception can result from a call to the runtime.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Most exception types, except for <bpt id="p1">[</bpt>concurrency::task_canceled<ept id="p1">](../../parallel/concrt/reference/task-canceled-class.md)</ept> and <bpt id="p2">[</bpt>concurrency::operation_timed_out<ept id="p2">](../../parallel/concrt/reference/operation-timed-out-class.md)</ept>, indicate a programming error.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>These errors are typically unrecoverable, and therefore should not be caught or handled by application code.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We suggest that you only catch or handle unrecoverable errors in your application code when you need to diagnose programming errors.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, understanding the exception types that are defined by the runtime can help you diagnose programming errors.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The exception handling mechanism is the same for exceptions that are thrown by the runtime as exceptions that are thrown by work functions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>concurrency::receive<ept id="p1">](reference/concurrency-namespace-functions.md#receive)</ept> function throws <ph id="ph1">`operation_timed_out`</ph> when it does not receive a message in the specified time period.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`receive`</ph> throws an exception in a work function that you pass to a task group, the runtime stores that exception and marshals it to the context that calls <ph id="ph2">`task_group::wait`</ph>, <ph id="ph3">`structured_task_group::wait`</ph>, <ph id="ph4">`task_group::run_and_wait`</ph>, or <ph id="ph5">`structured_task_group::run_and_wait`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>concurrency::parallel_invoke<ept id="p1">](reference/concurrency-namespace-functions.md#parallel_invoke)</ept> algorithm to run two tasks in parallel.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The first task waits five seconds and then sends a message to a message buffer.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The second task uses the <ph id="ph1">`receive`</ph> function to wait three seconds to receive a message from the same message buffer.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`receive`</ph> function throws <ph id="ph2">`operation_timed_out`</ph> if it does not receive the message in the time period.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>concrt-eh-time-out#1</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To prevent abnormal termination of your application, make sure that your code handles exceptions when it calls into the runtime.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Also handle exceptions when you call into external code that uses the Concurrency Runtime, for example, a third-party library.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Multiple Exceptions</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If a task or parallel algorithm receives multiple exceptions, the runtime marshals only one of those exceptions to the calling context.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The runtime does not guarantee which exception it marshals.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`parallel_for`</ph> algorithm to print numbers to the console.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It throws an exception if the input value is less than some minimum value or greater than some maximum value.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this example, multiple work functions can throw an exception.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>concrt-eh-multiple#1</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following shows sample output for this example.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Not all exceptions indicate an error.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, a search algorithm might use exception handling to stop its associated task when it finds the result.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information about how to use cancellation mechanisms in your code, see <bpt id="p1">[</bpt>Cancellation in the PPL<ept id="p1">](../../parallel/concrt/cancellation-in-the-ppl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Lightweight Tasks</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A lightweight task is a task that you schedule directly from a <bpt id="p1">[</bpt>concurrency::Scheduler<ept id="p1">](../../parallel/concrt/reference/scheduler-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Lightweight tasks carry less overhead than ordinary tasks.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>However, the runtime does not catch exceptions that are thrown by lightweight tasks.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Instead, the exception is caught by the unhandled exception handler, which by default terminates the process.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Therefore, use an appropriate error-handling mechanism in your application.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information about lightweight tasks, see <bpt id="p1">[</bpt>Task Scheduler<ept id="p1">](../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Like lightweight tasks, the runtime does not manage exceptions that are thrown by asynchronous agents.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example shows one way to handle exceptions in a class that derives from <bpt id="p1">[</bpt>concurrency::agent<ept id="p1">](../../parallel/concrt/reference/agent-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This example defines the <ph id="ph1">`points_agent`</ph> class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`points_agent::run`</ph> method reads <ph id="ph2">`point`</ph> objects from the message buffer and prints them to the console.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method throws an exception if it receives a <ph id="ph2">`NULL`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method surrounds all work in a <ph id="ph2">`try`-`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`catch`</ph> block stores the exception in a message buffer.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The application checks whether the agent encountered an error by reading from this buffer after the agent finishes.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>concrt-eh-agents#1</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`try`-`catch`</ph> block exists outside the <ph id="ph2">`while`</ph> loop, the agent ends processing when it encounters the first error.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`try`-`catch`</ph> block was inside the <ph id="ph2">`while`</ph> loop, the agent would continue after an error occurs.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This example stores exceptions in a message buffer so that another component can monitor the agent for errors as it runs.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This example uses a <bpt id="p1">[</bpt>concurrency::single_assignment<ept id="p1">](../../parallel/concrt/reference/single-assignment-class.md)</ept> object to store the error.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the case where an agent handles multiple exceptions, the <ph id="ph1">`single_assignment`</ph> class stores only the first message that is passed to it.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To store only the last exception, use the <bpt id="p1">[</bpt>concurrency::overwrite_buffer<ept id="p1">](../../parallel/concrt/reference/overwrite-buffer-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To store all exceptions, use the <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For more information about these message blocks, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous agents, see <bpt id="p1">[</bpt>Asynchronous Agents<ept id="p1">](../../parallel/concrt/asynchronous-agents.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Task Parallelism</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Cancellation in the PPL</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>