<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e67ea71c87c13706d902b10749af8bdc5424fda3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\control87-controlfp-control87-2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b7c99a596d7a18790743255de16844f2aa35188</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3f4218da532664ddca13dfb802308e1b23f67d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_control87, _controlfp, __control87_2 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_control87, _controlfp, __control87_2</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets and sets the floating-point control word.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A more secure version of <ph id="ph1">`_controlfp`</ph> is available; see <bpt id="p1">[</bpt>_controlfp_s<ept id="p1">](../../c-runtime-library/reference/controlfp-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>New control-word bit values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Mask for new control-word bits to set.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Filled in with the control word for the x87 floating-point unit.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pass in 0 (<ph id="ph1">`NULL`</ph>) to set only the SSE2 control word.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Control word for the SSE floating-point unit.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pass in 0 (<ph id="ph1">`NULL`</ph>) to set only the x87 control word.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`_control87`</ph> and <ph id="ph2">`_controlfp`</ph>, the bits in the value returned indicate the floating-point control state.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For a complete definition of the bits that are returned by <ph id="ph1">`_control87`</ph>, see FLOAT.H.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`__control87_2`</ph>, the return value is 1, which indicates success.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_control87`</ph> function gets and sets the floating-point control word.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The floating-point control word enables the program to change the precision, rounding, and infinity modes in the floating-point math package, depending on the platform.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`_control87`</ph> to mask or unmask floating-point exceptions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the value for <ph id="ph1">`mask`</ph> is equal to 0, <ph id="ph2">`_control87`</ph> gets the floating-point control word.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mask`</ph> is nonzero, a new value for the control word is set: For any bit that is on (that is, equal to 1) in <ph id="ph2">`mask`</ph>, the corresponding bit in <ph id="ph3">`new`</ph> is used to update the control word.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">`fpcntrl`</ph> <ph id="ph2">`=`</ph> ((<ph id="ph3">`fpcntrl`</ph> <ph id="ph4">`&amp; ~mask`</ph>) &amp;#124; (<ph id="ph5">`new &amp; mask`</ph>)) where <ph id="ph6">`fpcntrl`</ph> is the floating-point control word.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, the run-time libraries mask all floating-point exceptions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_controlfp`</ph> is a platform-independent, portable version of <ph id="ph2">`_control87`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It is nearly identical to the <ph id="ph1">`_control87`</ph> function on Intel (x86), <ph id="ph2">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM platforms.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you are targeting x86, <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph>, or ARM platforms, use <ph id="ph2">`_control87`</ph> or <ph id="ph3">`_controlfp`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The difference between <ph id="ph1">`_control87`</ph> and <ph id="ph2">`_controlfp`</ph> is in how they treat DENORMAL values.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For Intel (x86), <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM platforms, <ph id="ph2">`_control87`</ph> can set and clear the DENORMAL OPERAND exception mask.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_controlfp`</ph> does not modify the DENORMAL OPERAND exception mask.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example demonstrates the difference:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The possible values for the mask constant (<ph id="ph1">`mask`</ph>) and new control values (<ph id="ph2">`new`</ph>) are shown in the following Hexadecimal Values table.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use the portable constants listed below (<ph id="ph1">`_MCW_EM`</ph>, <ph id="ph2">`_EM_INVALID`</ph>, and so forth) as arguments to these functions, rather than supplying the hexadecimal values explicitly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Intel (x86)-derived platforms support the DENORMAL input and output values in hardware.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The x86 behavior is to preserve DENORMAL values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The ARM platform and the <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> platforms that have SSE2 support enable DENORMAL operands and results to be flushed, or forced to zero.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_controlfp`</ph> and <ph id="ph2">`_control87`</ph> functions provide a mask to change this behavior.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of this mask.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On ARM platforms, the <ph id="ph1">`_control87`</ph> and <ph id="ph2">`_controlfp`</ph> functions apply to the FPSCR register.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> architectures, only the SSE2 control word that's stored in the MXCSR register is affected.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>On Intel (x86) platforms, <ph id="ph1">`_control87`</ph> and <ph id="ph2">`_controlfp`</ph> affect the control words for both the x87 and the SSE2, if present.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`__control87_2`</ph> enables both the x87 and SSE2 floating-point units to be controlled together or separately.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you want to affect both units, pass in the addresses of two integers to <ph id="ph1">`x86_cw`</ph> and <ph id="ph2">`sse2_cw`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you only want to affect one unit, pass in an address for that parameter but pass in 0 (NULL) for the other.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If 0 is passed for one of these parameters, the function has no effect on that floating-point unit.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This functionality could be useful in situations where part of the code uses the x87 floating-point unit and another part of the code uses the SSE2 floating-point unit.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`__control87_2`</ph> in one part of a program and set different values for the floating-point control words, and then use <ph id="ph2">`_control87`</ph> or <ph id="ph3">`_controlfp`</ph> to further manipulate the control word, then <ph id="ph4">`_control87`</ph> and <ph id="ph5">`_controlfp`</ph> might be unable to return a single control word to represent the state of both floating-point units.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In such a case, these functions set the <ph id="ph1">`EM_AMBIGUOUS`</ph> flag in the returned integer value to indicate that there is an inconsistency between the two control words.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is a warning that the returned control word might not represent the state of both floating-point control words accurately.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>On the ARM and <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> architectures, changing the infinity mode or the floating-point precision is not supported.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the precision control mask is used on the <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> platform, the function raises an assertion and the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `__control87_2`</ph> is not supported on the ARM or <ph id="ph2">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> architectures.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`__control87_2`</ph> and compile your program for the ARM or <ph id="ph2">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> architectures, the compiler generates an error.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These functions are ignored when you use <bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> or <ph id="ph1">`/clr:pure`</ph> to compile because the common language runtime (CLR) only supports the default floating-point precision.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hexadecimal Values<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`_MCW_EM`</ph> mask, clearing the mask sets the exception, which allows the hardware exception; setting the mask hides the exception.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`_EM_UNDERFLOW`</ph> or <ph id="ph2">`_EM_OVERFLOW`</ph> occurs, no hardware exception is thrown until the next floating-point instruction is executed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To generate a hardware exception immediately after <ph id="ph1">`_EM_UNDERFLOW`</ph> or <ph id="ph2">`_EM_OVERFLOW`</ph>, call the <ph id="ph3">`FWAIT`</ph> MASM instruction.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Mask</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Hex value</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Hex value</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_MCW_DN`</ph> (Denormal control)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>0x03000000</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>0x00000000</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>0x01000000</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_MCW_EM`</ph> (Interrupt exception mask)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>0x0008001F</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>0x00000010</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>0x00080000</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>0x00000008</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>0x00000004</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>0x00000002</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>0x00000001</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_MCW_IC`</ph> (Infinity control)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>(Not supported on ARM or <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> platforms.)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>0x00040000</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>0x00040000</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>0x00000000</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_MCW_RC`</ph> (Rounding control)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>0x00000300</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>0x00000300</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>0x00000200</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>0x00000100</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>0x00000000</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_MCW_PC`</ph> (Precision control)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(Not supported on ARM or <ph id="ph1">[!INCLUDE[vcprx64](../../assembler/inline/includes/vcprx64_md.md)]</ph> platforms.)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>0x00030000</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_PC_24`</ph> (24 bits)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_PC_53`</ph> (53 bits)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_PC_64`</ph> (64 bits)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>0x00020000</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>0x00010000</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>0x00000000</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_control87`</ph>, <ph id="ph2">`_controlfp`</ph>, <ph id="ph3">`_control87_2`</ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>float.h&gt;</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Floating-Point Support<ept id="p1">](../../c-runtime-library/floating-point-support.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_clear87, _clearfp<ept id="p1">](../../c-runtime-library/reference/clear87-clearfp.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_status87, _statusfp, _statusfp2<ept id="p1">](../../c-runtime-library/reference/status87-statusfp-statusfp2.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_controlfp_s<ept id="p1">](../../c-runtime-library/reference/controlfp-s.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>