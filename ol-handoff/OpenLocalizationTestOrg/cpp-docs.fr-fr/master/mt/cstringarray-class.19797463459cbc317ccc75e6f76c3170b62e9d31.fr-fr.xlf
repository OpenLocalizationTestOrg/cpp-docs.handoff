<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26f8dd000806daa9a80c21048f397ae6d9cabd84</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cstringarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b5f144e88073382f58b90766550900875c6be21</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9809939e42147bbce788cf9b763f2cf32d91d11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CStringArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CStringArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports arrays of <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The member functions of <ph id="ph1">`CStringArray`</ph> are similar to the member functions of class <bpt id="p1">[</bpt>CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because of this similarity, you can use the <ph id="ph1">`CObArray`</ph> reference documentation for member function specifics.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Wherever you see a <ph id="ph1">`CObject`</ph> pointer as a return value, substitute a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> object (not a <bpt id="p2">[</bpt>CString<ept id="p2">](../../atl-mfc-shared/using-cstring.md)</ept> pointer).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Wherever you see a <ph id="ph1">`CObject`</ph> pointer as a function parameter, substitute a <ph id="ph2">`LPCTSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>for example, translates to</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>translates to</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__cobarray)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs an empty array.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::Add<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__add)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::Append<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__append)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Appends another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::Copy<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__copy)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Copies another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::ElementAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__elementat)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a temporary reference to the element pointer within the array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::FreeExtra<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__freeextra)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Frees all unused memory above the current upper bound.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::GetAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getat)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the value at a given index.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::GetCount<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getcount)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::GetData<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getdata)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Allows access to elements in the array.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::GetSize<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getsize)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::GetUpperBound<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the largest valid index.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::InsertAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__insertat)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inserts an element (or all the elements in another array) at a specified index.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::IsEmpty<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__isempty)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines if the array is empty.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::RemoveAll<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__removeall)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this array.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::RemoveAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__removeat)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Removes an element at a specific index.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::SetAt<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__setat)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; array not allowed to grow.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::SetAtGrow<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::SetSize<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__setsize)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sets the number of elements to be contained in this array.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObArray::operator [ ]<ept id="p1">](../../mfc/reference/cobarray-class.md#cobarray__operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Sets or gets the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CStringArray`</ph> incorporates the <ph id="ph2">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If an array of <ph id="ph1">`CString`</ph> objects is stored to an archive, either with an overloaded insertion operator or with the <ph id="ph2">`Serialize`</ph> member function, each element is serialized in turn.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Before using an array, use <ph id="ph1">`SetSize`</ph> to establish its size and allocate memory for it.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you do not use <ph id="ph1">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Frequent reallocation and copying are inefficient and can fragment memory.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CString`</ph> array is deleted, or when its elements are removed, string memory is freed as appropriate.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CStringArray`</ph>, see the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcoll.h</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>