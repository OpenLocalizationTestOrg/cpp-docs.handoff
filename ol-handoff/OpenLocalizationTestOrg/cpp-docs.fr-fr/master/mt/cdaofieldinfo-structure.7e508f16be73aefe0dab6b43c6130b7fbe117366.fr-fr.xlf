<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3caa95e37888247c0f63b3e74387c6e80caf4aa7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaofieldinfo-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ef53b82871a163775a3a3b019064345ffd0ee3e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">899383737e30dde8b2a43ee4bd48fa33f4d72f5c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoFieldInfo Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoFieldInfo Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDaoFieldInfo`</ph> structure contains information about a field object defined for data access objects (DAO).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Uniquely names the field object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A value that indicates the data type of the field.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Type Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The value of this property can be one of the following:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbBoolean<ept id="p1">**</ept> Yes/No, same as <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept><ph id="ph1">/</ph><bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbByte<ept id="p1">**</ept> Byte</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbInteger<ept id="p1">**</ept> Short</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLong<ept id="p1">**</ept> Long</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbCurrency<ept id="p1">**</ept> Currency; see MFC class <bpt id="p2">[</bpt>COleCurrency<ept id="p2">](../../mfc/reference/colecurrency-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSingle<ept id="p1">**</ept> Single</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDouble<ept id="p1">**</ept> Double</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDate<ept id="p1">**</ept> Date/Time; see MFC class <bpt id="p2">[</bpt>COleDateTime<ept id="p2">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbText<ept id="p1">**</ept> Text; see MFC class <bpt id="p2">[</bpt>CString<ept id="p2">](../../atl-mfc-shared/reference/cstringt-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLongBinary<ept id="p1">**</ept> Long Binary (OLE Object); you might want to use MFC class <bpt id="p2">[</bpt>CByteArray<ept id="p2">](../../mfc/reference/cbytearray-class.md)</ept> instead of class <ph id="ph1">`CLongBinary`</ph> as <ph id="ph2">`CByteArray`</ph> is richer and easier to use.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbMemo<ept id="p1">**</ept> Memo; see MFC class <ph id="ph1">`CString`</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbGUID<ept id="p1">**</ept> A Globally Unique Identifier/Universally Unique Identifier used with remote procedure calls.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see the topic "Type Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Do not use string data types for binary data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This causes your data to pass through the Unicode/ANSI translation layer, resulting in increased overhead and possibly unexpected translation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_lSize<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A value that indicates the maximum size, in bytes, of a DAO field object that contains text or the fixed size of a field object that contains text or numeric values.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Size Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sizes can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Size (Bytes)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbBoolean<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Yes/No (same as True/False)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbByte<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbInteger<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Integer</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLong<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Long</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbCurrency<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Currency (<bpt id="p1">[</bpt>COleCurrency<ept id="p1">](../../mfc/reference/colecurrency-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSingle<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Single</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDouble<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Double</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDate<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Date/Time (<bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbText<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>1 - 255</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Text (<bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLongBinary<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Long Binary (OLE Object; <bpt id="p1">[</bpt>CByteArray<ept id="p1">](../../mfc/reference/cbytearray-class.md)</ept>; use instead of <ph id="ph1">`CLongBinary`</ph>)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbMemo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Memo (<bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbGUID<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A Globally Unique Identifier/Universally Unique Identifier used with remote procedure calls.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifies characteristics of a field object contained by a tabledef, recordset, querydef, or index object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value returned can be a sum of these constants, created with the C++ bitwise-OR (<bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operator:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbFixedField<ept id="p1">**</ept> The field size is fixed (default for Numeric fields).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbVariableField<ept id="p1">**</ept> The field size is variable (Text fields only).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbAutoIncrField<ept id="p1">**</ept> The field value for new records is automatically incremented to a unique long integer that cannot be changed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Only supported for Microsoft Jet database tables.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbUpdatableField<ept id="p1">**</ept> The field value can be changed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDescending<ept id="p1">**</ept> The field is sorted in descending (Z - A or 100 - 0) order (applies only to a field object in a Fields collection of an index object; in MFC, index objects are themselves contained in tabledef objects).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you omit this constant, the field is sorted in ascending (A - Z or 0 - 100) order (default).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When checking the setting of this property, you can use the C++ bitwise-AND operator (<bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) to test for a specific attribute.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When setting multiple attributes, you can combine them by combining the appropriate constants with the bitwise-OR (<bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operator.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_nOrdinalPosition<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A value that specifies the numeric order in which you want a field represented by a DAO field object to be displayed relative to other fields.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can set this property with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For details, see the topic "OrdinalPosition Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates whether a DAO field object requires a non-Null value.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If this property is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the field does not allow a Null value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If Required is set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the field can contain Null values as well as values that meet the conditions specified by the AllowZeroLength and ValidationRule property settings.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Required Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_bAllowZeroLength<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Indicates whether an empty string ("") is a valid value of a DAO field object with a Text or Memo data type.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If this property is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, an empty string is a valid value.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can set this property to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> to ensure that you cannot use an empty string to set the value of a field.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For details, see the topic "AllowZeroLength Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Specifies the sequence of the sort order in text for string comparison or sorting.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For details, see the topic "Customizing Windows Registry Settings for Data Access" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For a list of the possible values returned, see the <bpt id="p1">**</bpt>m_lCollatingOrder<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>CDaoDatabaseInfo<ept id="p2">](../../mfc/reference/cdaodatabaseinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A value that, in a relation, specifies the name of the DAO field object in a foreign table that corresponds to a field in a primary table.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For details, see the topic "ForeignName Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_strSourceField<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Indicates the name of the field that is the original source of the data for a DAO field object contained by a tabledef, recordset, or querydef object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This property indicates the original field name associated with a field object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, you could use this property to determine the original source of the data in a query field whose name is unrelated to the name of the field in the underlying table.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For details, see the topic "SourceField, SourceTable Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_strSourceTable<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Indicates the name of the table that is the original source of the data for a DAO field object contained by a tabledef, recordset, or querydef object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This property indicates the original table name associated with a field object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, you could use this property to determine the original source of the data in a query field whose name is unrelated to the name of the field in the underlying table.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For details, see the topic "SourceField, SourceTable Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A value that validates the data in a field as it is changed or added to a table.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For details, see the topic "ValidationRule Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For related information about tabledefs, see the <bpt id="p1">**</bpt>m_strValidationRule<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>CDaoTableDefInfo<ept id="p2">](../../mfc/reference/cdaotabledefinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A value that specifies the text of the message that your application displays if the value of a DAO field object does not satisfy the validation rule specified by the ValidationRule property setting.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For details, see the topic "ValidationText Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>m_strDefaultValue<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default value of a DAO field object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When a new record is created, the DefaultValue property setting is automatically entered as the value for the field.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For details, see the topic "DefaultValue Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can set this property for a tabledef with <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The references to Primary, Secondary, and All above indicate how the information is returned by the <ph id="ph1">`GetFieldInfo`</ph> member function in classes <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__getfieldinfo)</ept>, <bpt id="p2">[</bpt>CDaoQueryDef<ept id="p2">](../../mfc/reference/cdaoquerydef-class.md#cdaoquerydef__getfieldinfo)</ept>, and <bpt id="p3">[</bpt>CDaoRecordset<ept id="p3">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__getfieldinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Field objects are not represented by an MFC class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Instead, the DAO objects underlying MFC objects of the following classes contain collections of field objects: <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept>, <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept>, and <bpt id="p3">[</bpt>CDaoQueryDef<ept id="p3">](../../mfc/reference/cdaoquerydef-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>These classes supply member functions to access some individual items of field information, or you can access them all at once with a <ph id="ph1">`CDaoFieldInfo`</ph> object by calling the <ph id="ph2">`GetFieldInfo`</ph> member function of the containing object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Besides its use for examining object properties, you can also use <ph id="ph1">`CDaoFieldInfo`</ph> to construct an input parameter for creating new fields in a tabledef.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Simpler options are available for this task, but if you want finer control, you can use the version of <bpt id="p1">[</bpt>CDaoTableDef::CreateField<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__createfield)</ept> that takes a <ph id="ph1">`CDaoFieldInfo`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Information retrieved by the <ph id="ph1">`GetFieldInfo`</ph> member function (of the class that contains the field) is stored in a <ph id="ph2">`CDaoFieldInfo`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetFieldInfo`</ph> member function of the containing object in whose Fields collection the field object is stored.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDaoFieldInfo`</ph> also defines a <ph id="ph2">`Dump`</ph> member function in debug builds.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Dump`</ph> to dump the contents of a <ph id="ph2">`CDaoFieldInfo`</ph> object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structures, Styles, Callbacks, and Message Maps<ept id="p1">](../../mfc/reference/structures-styles-callbacks-and-message-maps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoTableDef::GetFieldInfo<ept id="p1">](../../mfc/reference/cdaotabledef-class.md#cdaotabledef__getfieldinfo)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoRecordset::GetFieldInfo<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__getfieldinfo)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDaoQueryDef::GetFieldInfo<ept id="p1">](../../mfc/reference/cdaoquerydef-class.md#cdaoquerydef__getfieldinfo)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>