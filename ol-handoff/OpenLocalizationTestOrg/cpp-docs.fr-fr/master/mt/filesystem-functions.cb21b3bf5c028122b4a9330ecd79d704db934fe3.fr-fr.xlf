<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">253af6748b2d46ee1421604ed6f16fd97bf5a459</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\filesystem-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1612f5c9fa610e921424661f63dfcd8fb12e2060</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755ab3233952d4327b50a296fdaee6964c1fb8bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>filesystem<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>filesystem<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These free functions in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>filesystem&gt;<ept id="p1">](../standard-library/filesystem.md)</ept> header perform modifying and query operations on paths, files, symlinks, directories and volumes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>File System Navigation (C++)<ept id="p1">](../standard-library/file-system-navigation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>absolute<ept id="p1">](#absolute)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>begin<ept id="p1">](#begin)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>canonical<ept id="p1">](#canonical)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>copy<ept id="p1">](#copy)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>copy_file<ept id="p1">](#copy_file)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>copy_symlink<ept id="p1">](#copy_symlink)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create_directories<ept id="p1">](#create_directories)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create_directory<ept id="p1">](#create_directory)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create_directory_symlink<ept id="p1">](#create_directory_symlink)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create_hard_link<ept id="p1">](#create_hard_link)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>create_symlink<ept id="p1">](#create_symlink)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>current_path<ept id="p1">](#current_path)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>end<ept id="p1">](#end)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>equivalent<ept id="p1">](#equivalent)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>exists<ept id="p1">](#exists)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>file_size<ept id="p1">](#file_size)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>hard_link_count<ept id="p1">](#hard_link_count)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>hash_value<ept id="p1">](#hash_value)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_block_file<ept id="p1">](#is_block_file)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_character_file<ept id="p1">](#is_character_file)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_directory<ept id="p1">](#is_directory)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_empty<ept id="p1">](#is_empty)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_fifo<ept id="p1">](#is_fifo)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_other<ept id="p1">](#is_other)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_regular_file<ept id="p1">](#is_regular_file)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_socket<ept id="p1">](#is_socket)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_symlink<ept id="p1">](#is_symlink)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>last_write_time<ept id="p1">](#last_write_time)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>permissions<ept id="p1">](#permissions)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>read_symlink<ept id="p1">](#read_symlink)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>remove<ept id="p1">](#remove)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>remove_all<ept id="p1">](#remove_all)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rename<ept id="p1">](#rename)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>resize_file<ept id="p1">](#resize_file)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>space<ept id="p1">](#space)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>status<ept id="p1">](#status)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>status_known<ept id="p1">](#status_known)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](#swap)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>symlink_status<ept id="p1">](#symlink_status)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>system_complete<ept id="p1">](#system_complete)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>temp_directory_path<ept id="p1">](#temp_directory_path)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>u8path<ept id="p1">](#u8path)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name=""&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  <bpt id="p2">&lt;a name="absolute"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept> absolute</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The function returns the absolute pathname corresponding to <ph id="ph1">`pval`</ph> relative to the pathname <ph id="ph2">`base`</ph>:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If pval.has_root_name() &amp;&amp; pval.has_root_directory() the function returns pval.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If pval.has_root_name() &amp;&amp; !pval.has_root_directory() the function returns pval.root_name() / absolute(base).root_directory() / absolute(base).relative_path() / pval.relative_path().</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If !pval.has_root_name() &amp;&amp; pval.has_root_directory() the function returns absolute(base).root_name() / pval.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If !pval.has_root_name() &amp;&amp; !pval.has_root_directory() the function returns absolute(base) / pval.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="begin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  begin</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Both functions return <ph id="ph1">`iter`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="canonical"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  canonical</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The functions all form an absolute pathname pabs = absolute(pval, base) (or pabs = absolute(pval) for the overload with no base parameter), then reduce it to a canonical form in the following sequence of steps:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Every path component X for which is_symlink(X) is true is replaced by read_symlink(X).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Every path component .</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(dot is the current directory established by previous path components) is removed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Every pair of path components X/..</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(dot-dot is the parent directory established by previous path components) is removed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The function then returns pabs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="copy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  copy</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The functions all possibly copy or link one or more files at <ph id="ph1">`from`</ph> to <ph id="ph2">`to`</ph> under control of <ph id="ph3">`opts`</ph>, which is taken as copy_options::none for the overloads with no <ph id="ph4">`opts`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`opts`</ph> shall contain at most one of:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>skip_existing, overwrite_existing, or update_existing</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>copy_symlinks or skip_symlinks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>directories_only, create_symlinks, or create_hard_links</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The functions first determine the file_status values f for <ph id="ph1">`from`</ph> and t for <ph id="ph2">`to`</ph>:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>if opts &amp; (copy_options::create_symlinks &amp;#124; copy_options::skip_symlinks), by calling symlink_status</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>otherwise, by calling status</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Otherwise report an error.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If !exists(f) &amp;#124;&amp;#124; equivalent(f, t) &amp;#124;&amp;#124; is_other(f) &amp;#124;&amp;#124; is_other(t) &amp;#124;&amp;#124; is_directory(f)&amp;&amp; is_regular_file(t), they then report an error (and do nothing else).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Otherwise, if is_symlink(f) then:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If options &amp; copy_options::skip_symlinks then do nothing.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Otherwise, if !exists(t)&amp;&amp; options &amp; copy_options::copy_symlinks then copy_symlink(from, to, opts).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Otherwise report an error.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Otherwise, if is_regular_file(f) then:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If opts &amp; copy_options::directories_only then do nothing.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Otherwise, if opts &amp; copy_options::create_symlinks then create_symlink(to, from).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Otherwise, if opts &amp; copy_options::create_hard_links then create_hard_link(to, from).</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Otherwise, if is_directory(f) then copy_file(from, to / from.filename(), opts).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Otherwise, copy_file(from, to, opts).</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Otherwise, if is_directory(f) &amp;&amp; (opts &amp; copy_options::recursive &amp;#124;&amp;#124; !opts) then:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Otherwise, do nothing.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="opy_file"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  copy_file</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The functions all possibly copy the file at <ph id="ph1">`from`</ph> to <ph id="ph2">`to`</ph> under control of <ph id="ph3">`opts`</ph>, which is taken as copy_options::none for the overloads with no <ph id="ph4">`opts`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`opts`</ph> shall contain at most one of skip_existing, overwrite_existing, or update_existing.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If exists<ph id="ph1">\(</ph>to<ph id="ph2">\)</ph><ph id="ph3"> &amp;&amp; </ph><ph id="ph4">\!</ph><ph id="ph5">\(</ph>opts &amp; <ph id="ph6">\(</ph>copy_options::skip_existing &amp;#124; copy_options::overwrite_existing &amp;#124; copy_options::update_existing<ph id="ph7">\)</ph><ph id="ph8">\)</ph> then report as an error that the file already exists.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">\!</ph>exists<ph id="ph2">\(</ph>to<ph id="ph3">\)</ph> &amp;#124;&amp;#124; opts &amp; copy_options::overwrite_existing &amp;#124;&amp;#124; opts &amp; copy_options::update_existing&amp;&amp; last_write_time<ph id="ph4">\(</ph>to<ph id="ph5">\)</ph> <ph id="ph6">\&lt;</ph> last_write_time<ph id="ph7">\(</ph>from<ph id="ph8">\)</ph> &amp;#124;&amp;#124; <ph id="ph9">\!</ph><ph id="ph10">\(</ph>opts &amp; <ph id="ph11">\(</ph>copy_options::skip_existing &amp;#124; copy_options::overwrite_existing &amp;#124; copy_options:update_existing<ph id="ph12">\)</ph><ph id="ph13">\)</ph> then attempt to copy the contents and attributes of the file from to the file to.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Report as an error if the copy attempt fails.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The functions return true if the copy is attempted and succeeds, otherwise false.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="copy_symlink "&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  copy_symlink</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If is_directory<ph id="ph1">\(</ph>from<ph id="ph2">\)</ph> the function calls create_directory_symlink<ph id="ph3">\(</ph>from, to<ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Otherwise, it calls create_symlink<ph id="ph1">\(</ph>from, to<ph id="ph2">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_directories"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  create_directories</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For a pathname such as a<ph id="ph1">\/</ph>b<ph id="ph2">\/</ph>c the function creates directories a and a<ph id="ph3">\/</ph>b as needed so that it can create the directory a<ph id="ph4">\/</ph>b<ph id="ph5">\/</ph>c as needed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It returns true only if it actually creates the directory <ph id="ph1">`pval`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_directory"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  create_directory</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The function creates the directory <ph id="ph1">`pval`</ph> as needed.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It returns true only if it actually creates the directory <ph id="ph1">`pval`</ph>, in which case it copies permissions from the existing file <ph id="ph2">`attr`</ph>, or uses perms::all for the overloads with no <ph id="ph3">`attr`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_directory_symlink "&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  create_directory_symlink</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The function creates link as a symlink to the directory <ph id="ph1">`to`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_hard_link"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  create_hard_link</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The function creates link as a hard link to the directory or file <ph id="ph1">`to`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_symlink "&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  create_symlink</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The function creates <ph id="ph1">`link`</ph> as a symlink to the file <ph id="ph2">`to`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="current_path"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  current_path</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The functions with no parameter <ph id="ph1">`pval`</ph> return the pathname for the current directory.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The remaining functions set the current directory to <ph id="ph1">`pval`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="end"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  end</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The first function returns directory_iterator<ph id="ph1">\(</ph><ph id="ph2">\)</ph> and the second function returns recursive_directory_iterator<ph id="ph3">\(</ph><ph id="ph4">\)</ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="equivalent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  equivalent</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The functions return true only if <ph id="ph1">`left`</ph> and <ph id="ph2">`right`</ph> designate the same filesystem entity.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="exists"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  exists</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The first function returns status_known &amp;&amp; stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\!</ph><ph id="ph4">\=</ph> file_not_found.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The second and third functions return exists<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="file_size"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  file_size</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The functions return the size in bytes of the file designated by <ph id="ph1">`pval`</ph>, if exists<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph> &amp;&amp; is_regular_file<ph id="ph4">\(</ph>pval<ph id="ph5">\)</ph> and the file size can be determined.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Otherwise they report an error and return uintmax_t<ph id="ph1">\(</ph><ph id="ph2">\-</ph>1<ph id="ph3">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="hard_link_count"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  hard_link_count</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The function returns the number of hard links for <ph id="ph1">`pval`</ph>, or <ph id="ph2">\-</ph>1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="hash_value"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  hash_value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The function returns a hash value for pval.native<ph id="ph1">\(</ph><ph id="ph2">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_block_file"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_block_file</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::block.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_block_file<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_character_file"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_character_file</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::character.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_character_file<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_directory "&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_directory</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::directory.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_directory_file<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_empty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_empty</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If is_directory<ph id="ph1">\(</ph>pval<ph id="ph2">\)</ph> then the function returns directory_iterator<ph id="ph3">\(</ph>pval<ph id="ph4">\)</ph> <ph id="ph5">\=</ph><ph id="ph6">\=</ph> directory_iterator<ph id="ph7">\(</ph><ph id="ph8">\)</ph>; otherwise it returns file_size<ph id="ph9">\(</ph>pval<ph id="ph10">\)</ph> <ph id="ph11">\=</ph><ph id="ph12">\=</ph> 0.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_fifo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_fifo</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::fifo.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_fifo<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_other"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_other</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::other.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_other<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="s_regular_file"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_regular_file</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::regular.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_regular_file<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_socket"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_socket</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::socket.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_socket<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_symlink"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  is_symlink</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The first function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> file_type::symlink.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The remaining functions return is_symlink<ph id="ph1">\(</ph>status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="last_write_time"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  last_write_time</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The first two functions return the time of last data modification for <ph id="ph1">`pval`</ph>, or file_time_type<ph id="ph2">\(</ph><ph id="ph3">\-</ph>1<ph id="ph4">\)</ph> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The last two functions set the time of last data modification for <ph id="ph1">`pval`</ph> to new_time.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="permissions"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  permissions</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The functions set the permissions for the pathname designated by <ph id="ph1">`pval`</ph> to mask &amp; perms::mask under control of perms &amp; <ph id="ph2">\(</ph>perms::add_perms &amp;#124; perms::remove_perms<ph id="ph3">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>mask shall contain at most one of perms::add_perms and perms::remove_perms.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If mask &amp; perms::add_perms the functions set the permissions to status<ph id="ph1">\(</ph>pval<ph id="ph2">\)</ph>.permissions<ph id="ph3">\(</ph><ph id="ph4">\)</ph> &amp;#124; mask &amp; perms::mask.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Otherwise, if mask &amp; perms::remove_perms the functions set the permissions to status<ph id="ph1">\(</ph>pval<ph id="ph2">\)</ph>.permissions<ph id="ph3">\(</ph><ph id="ph4">\)</ph> &amp; ~<ph id="ph5">\(</ph>mask &amp; perms::mask<ph id="ph6">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Otherwise, the functions set the permissions to mask &amp; perms::mask.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="read_symlink"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  read_symlink</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The functions report an error and return path<ph id="ph1">\(</ph><ph id="ph2">\)</ph> if <ph id="ph3">\!</ph>is_symlink<ph id="ph4">\(</ph>pval<ph id="ph5">\)</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Otherwise, the functions return an object of type <ph id="ph1">`path`</ph> containing the symbolic link.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="remove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  remove</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The functions return true only if exists<ph id="ph1">\(</ph>symlink_status<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph><ph id="ph4">\)</ph> and the file is successfully removed.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A symlink is itself removed, not the file it designates.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="remove_all"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  remove_all</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pval`</ph> is a directory, the functions recursively remove all directory entries, then the entry itself.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Otherwise, the functions call remove.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>They return a count of all elements successfully removed.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="rename"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  rename</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The functions rename <ph id="ph1">`from`</ph> to <ph id="ph2">`to`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A symlink is itself renamed, not the file it designates.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="resize_file"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  resize_file</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The functions alter the size of a file such that file_size<ph id="ph1">\(</ph>pval<ph id="ph2">\)</ph> <ph id="ph3">\=</ph><ph id="ph4">\=</ph> size</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="space"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  space</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The function returns information about the volume designated by <ph id="ph1">`pval`</ph>, in a structure of type <ph id="ph2">`space_info`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The structure contains uintmax_t<ph id="ph1">\(</ph><ph id="ph2">\-</ph>1<ph id="ph3">\)</ph> for any value that cannot be determined.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="status"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  status</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The functions return the pathname status, the file type and permissions, associated with <ph id="ph1">`pval`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A symlink is itself not tested, but the file it designates.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="status_known"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  status_known</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The function returns stat.type<ph id="ph1">\(</ph><ph id="ph2">\)</ph> <ph id="ph3">\!</ph><ph id="ph4">\=</ph> file_type::none</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  swap</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The function exchanges the contents of <ph id="ph1">`left`</ph> and <ph id="ph2">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="symlink_status"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  symlink_status</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The functions return the pathname symlink status, the file type and permissions, associated with <ph id="ph1">`pval`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The functions behave the same as status<ph id="ph1">\(</ph>pval<ph id="ph2">\)</ph> except that a symlink is itself tested, not the file it designates.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="system_complete"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  system_complete</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The functions return an absolute pathname that takes into account, as necessary, the current directory associated with its root name.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\(</ph>For Posix, the functions return absolute<ph id="ph2">\(</ph>pval<ph id="ph3">\)</ph>.<ph id="ph4">\)</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="temp_directory_path"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  temp_directory_path</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The functions return a pathname for a directory suitable for containing temporary files.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="u8path"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  u8path</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The first function behaves the same as path(source) and the second function behaves the same as path(first, last) except that the designated source in each case is taken as a sequence of char elements encoded as UTF-8, regardless of the filesystem.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>