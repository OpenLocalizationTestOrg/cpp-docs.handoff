<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63dc0ac4dfe81de2012a10863c2b28f3af709e07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cwndclassinfo-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5413e02ae8cb8999eb824dbd1c7c2bc661099342</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebc1fd4b060dbd87205992a90f4b6950d0d2702c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWndClassInfo Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWndClassInfo Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for registering information for a window class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Register<ept id="p1">](#cwndclassinfo__register)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Registers the window class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_atom<ept id="p1">](#cwndclassinfo__m_atom)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Uniquely identifies the registered window class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_bSystemCursor<ept id="p1">](#cwndclassinfo__m_bsystemcursor)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Specifies whether the cursor resource refers to a system cursor or to a cursor contained in a module resource.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_lpszCursorID<ept id="p1">](#cwndclassinfo__m_lpszcursorid)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies the name of the cursor resource.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_lpszOrigName<ept id="p1">](#cwndclassinfo__m_lpszorigname)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Contains the name of an existing window class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_szAutoName<ept id="p1">](#cwndclassinfo__m_szautoname)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Holds an ATL-generated name of the window class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_wc<ept id="p1">](#cwndclassinfo__m_wc)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Maintains window class information in a <bpt id="p1">**</bpt>WNDCLASSEX<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pWndProc<ept id="p1">](#cwndclassinfo__pwndproc)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Points to the window procedure of an existing window class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> manages the information of a window class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You typically use <ph id="ph1">`CWndClassInfo`</ph> through one of three macros, <ph id="ph2">`DECLARE_WND_CLASS`</ph>, <ph id="ph3">`DECLARE_WND_CLASS_EX`</ph>, or <ph id="ph4">`DECLARE_WND_SUPERCLASS`</ph>, as described in the following table:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> registers information for a new window class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_WND_CLASS_EX<ept id="p1">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> registers information for a new window class, including the class parameters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> registers information for a window class that is based on an existing class but uses a different window procedure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This technique is called superclassing.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>CWindowImpl<ept id="p1">](../../atl/reference/cwindowimpl-class.md)</ept> includes the <ph id="ph1">`DECLARE_WND_CLASS`</ph> macro to create a window based on a new window class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>DECLARE_WND_CLASS provides default styles and background color for the control.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you want to specify the style and background color yourself, derive your class from <ph id="ph1">`CWindowImpl`</ph> and include the <ph id="ph2">`DECLARE_WND_CLASS_EX`</ph> macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you want to create a window based on an existing window class, derive your class from <ph id="ph1">`CWindowImpl`</ph> and include the <ph id="ph2">`DECLARE_WND_SUPERCLASS`</ph> macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#43<ept id="p2">](../../atl/codesnippet/cpp/cwndclassinfo-class_1.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about window classes, see <bpt id="p1">[</bpt>Window Classes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632596)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information about using windows in ATL, see the article <bpt id="p1">[</bpt>ATL Window Classes<ept id="p1">](../../atl/atl-window-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlwin.h</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_atom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_atom</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Contains the unique identifier for the registered window class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_bsystemcursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_bSystemCursor</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the system cursor resource will be loaded when the window class is registered.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise, the cursor resource contained in your module will be loaded.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> uses <ph id="ph2">`m_bSystemCursor`</ph> only when the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> (the default in <bpt id="p2">[</bpt>CWindowImpl<ept id="p2">](../../atl/reference/cwindowimpl-class.md)</ept>) or the <bpt id="p3">[</bpt>DECLARE_WND_CLASS_EX<ept id="p3">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept> macro is specified.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`m_bSystemCursor`</ph> is initialized to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_lpszcursorid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_lpszCursorID</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Specifies either the name of the cursor resource or the resource identifier in the low-order word and zero in the high-order word.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When the window class is registered, the handle to the cursor identified by <ph id="ph1">`m_lpszCursorID`</ph> is retrieved and stored by <bpt id="p1">[</bpt>m_wc<ept id="p1">](#cwndclassinfo__m_wc)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> uses <ph id="ph2">`m_lpszCursorID`</ph> only when the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> (the default in <bpt id="p2">[</bpt>CWindowImpl<ept id="p2">](../../atl/reference/cwindowimpl-class.md)</ept>) or the <bpt id="p3">[</bpt>DECLARE_WND_CLASS_EX<ept id="p3">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept> macro is specified.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`m_lpszCursorID`</ph> is initialized to <bpt id="p1">**</bpt>IDC_ARROW<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_lpszorigname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_lpszOrigName</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Contains the name of an existing window class.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> uses <ph id="ph2">`m_lpszOrigName`</ph> only when you include the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`CWndClassInfo`</ph> registers a window class based on the class named by <ph id="ph2">`m_lpszOrigName`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_szautoname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_szAutoName</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Holds the name of the window class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> uses <ph id="ph2">`m_szAutoName`</ph> only if <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is passed for the <ph id="ph3">`WndClassName`</ph> parameter to <bpt id="p2">[</bpt>DECLARE_WND_CLASS<ept id="p2">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept>, the <bpt id="p3">[</bpt>DECLARE_WND_CLASS_EX<ept id="p3">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept> or <bpt id="p4">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p4">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ATL will construct a name when the window class is registered.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__m_wc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::m_wc</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Maintains the window class information in a <bpt id="p1">[</bpt>WNDCLASSEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633577)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you have specified the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> (the default in <bpt id="p2">[</bpt>CWindowImpl<ept id="p2">](../../atl/reference/cwindowimpl-class.md)</ept>) or the <bpt id="p3">[</bpt>DECLARE_WND_CLASS_EX<ept id="p3">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept> macro, <ph id="ph1">`m_wc`</ph> contains information about a new window class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you have specified the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro, <ph id="ph1">`m_wc`</ph> contains information about a superclass — a window class that is based on an existing class but uses a different window procedure.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_lpszOrigName<ept id="p1">](#cwndclassinfo__m_lpszorigname)</ept> and <bpt id="p2">[</bpt>pWndProc<ept id="p2">](#cwndclassinfo__pwndproc)</ept> save the existing window class's name and window procedure, respectively.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__pwndproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::pWndProc</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Points to the window procedure of an existing window class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWndClassInfo`</ph> uses <ph id="ph2">`pWndProc`</ph> only when you include the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`CWndClassInfo`</ph> registers a window class that is based on an existing class but uses a different window procedure.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The existing window class's window procedure is saved in <ph id="ph1">`pWndProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwndclassinfo__register"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWndClassInfo::Register</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Called by <bpt id="p1">[</bpt>CWindowImpl::Create<ept id="p1">](../../atl/reference/cwindowimpl-class.md#cwindowimpl__create)</ept> to register the window class if it has not yet been registered.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[out] Specifies the original window procedure of an existing window class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If successful, an atom that uniquely identifies the window class being registered.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you have specified the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> (the default in <bpt id="p2">[</bpt>CWindowImpl<ept id="p2">](../../atl/reference/cwindowimpl-class.md)</ept>) or the <bpt id="p3">[</bpt>DECLARE_WND_CLASS_EX<ept id="p3">](http://msdn.microsoft.com/library/0672c144-f2aa-4f6a-ae16-566e3a1f5411)</ept> macro, <ph id="ph1">`Register`</ph> registers a new window class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`pProc`</ph> parameter is not used.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you have specified the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro, <ph id="ph1">`Register`</ph> registers a superclass — a window class that is based on an existing class but uses a different window procedure.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The existing window class's window procedure is returned in <ph id="ph1">`pProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComControl Class<ept id="p1">](../../atl/reference/ccomcontrol-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Class Overview<ept id="p1">](../../atl/atl-class-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>