<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3febfb99df557dc9ab5acbb078b450eb3708041e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\iviewobjecteximpl-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfe6a3e17a88278e3cb4a9b7db8ffb068462ef55</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38342343f36754fed2ac134c37edfb7c3d49b9a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IViewObjectExImpl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IViewObjectExImpl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> and provides default implementations of the <bpt id="p2">[</bpt>IViewObject<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms680763)</ept>, <bpt id="p3">[</bpt>IViewObject2<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms691318)</ept>, and <bpt id="p4">[</bpt>IViewObjectEx<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms682375)</ept> interfaces.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the <ph id="ph1">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Your class, derived from <ph id="ph1">`IViewObjectExImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::Draw<ept id="p1">](#iviewobjecteximpl__draw)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Draws a representation of the control onto a device context.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::Freeze<ept id="p1">](#iviewobjecteximpl__freeze)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Freezes the drawn representation of a control so it won't change until an <ph id="ph1">`Unfreeze`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetAdvise<ept id="p1">](#iviewobjecteximpl__getadvise)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieves an existing advisory sink connection on the control, if there is one.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetColorSet<ept id="p1">](#iviewobjecteximpl__getcolorset)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns the logical palette used by the control for drawing.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetExtent<ept id="p1">](#iviewobjecteximpl__getextent)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member <bpt id="p1">[</bpt>CComControlBase::m_sizeExtent<ept id="p1">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetNaturalExtent<ept id="p1">](#iviewobjecteximpl__getnaturalextent)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Provides sizing hints from the container for the object to use as the user resizes it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetRect<ept id="p1">](#iviewobjecteximpl__getrect)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns a rectangle describing a requested drawing aspect.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::GetViewStatus<ept id="p1">](#iviewobjecteximpl__getviewstatus)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns information about the opacity of the object and what drawing aspects are supported.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::QueryHitPoint<ept id="p1">](#iviewobjecteximpl__queryhitpoint)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Checks if the specified point is in the specified rectangle and returns a <bpt id="p1">[</bpt>HITRESULT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id="ph1">`pHitResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::QueryHitRect<ept id="p1">](#iviewobjecteximpl__queryhitrect)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a <bpt id="p1">**</bpt>HITRESULT<ept id="p1">**</ept> value in <ph id="ph1">`pHitResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::SetAdvise<ept id="p1">](#iviewobjecteximpl__setadvise)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IViewObjectExImpl::Unfreeze<ept id="p1">](#iviewobjecteximpl__unfreeze)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unfreezes the drawn representation of the control.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IViewObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680763)</ept>, <bpt id="p2">[</bpt>IViewObject2<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms691318)</ept>, and <bpt id="p3">[</bpt>IViewObjectEx<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms682375)</ept> interfaces enable a control to display itself directly, and to create and manage an advise sink to notify the container of changes in the control display.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IViewObjectEx<ept id="p1">**</ept> interface provides support for extended control features such as flicker-free drawing, non-rectangular and transparent controls, and hit-testing (for example, how close a mouse click must be to be considered on the control).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`IViewObjectExImpl`</ph> provides a default implementation of these interfaces and implements <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> by sending information to the dump device in debug builds.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlctl.h</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__draw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::Draw</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Draws a representation of the control onto a device context.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method calls <bpt id="p1">**</bpt>CComControl::OnDrawAdvanced<ept id="p1">**</ept> which in turn calls your control class's <ph id="ph1">`OnDraw`</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`OnDraw`</ph> method is automatically added to your control class when you create your control with the ATL Control Wizard.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Wizard's default <ph id="ph1">`OnDraw`</ph> draws a rectangle with the label "ATL 3.0".</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::Draw<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms688655)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__freeze"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::Freeze</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Freezes the drawn representation of a control so it won't change until an <ph id="ph1">`Unfreeze`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::Freeze<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms688728)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getadvise"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetAdvise</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieves an existing advisory sink connection on the control, if there is one.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The advisory sink is stored in the control class data member <bpt id="p1">[</bpt>CComControlBase::m_spAdviseSink<ept id="p1">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::GetAdvise<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692772)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getcolorset"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetColorSet</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the logical palette used by the control for drawing.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::GetColorSet<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686553)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetExtent</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member <bpt id="p1">[</bpt>CComControlBase::m_sizeExtent<ept id="p1">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject2::GetExtent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684032)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getnaturalextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetNaturalExtent</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Provides sizing hints from the container for the object to use as the user resizes it.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwAspect`</ph> is <ph id="ph2">`DVASPECT_CONTENT`</ph> and <bpt id="p1">*</bpt>pExtentInfo-&gt;dwExtentMode<ept id="p1">*</ept> is <bpt id="p2">**</bpt>DVEXTENT_CONTENT<ept id="p2">**</ept>, sets * <ph id="ph3">`psizel`</ph> to the control class's data member <bpt id="p3">[</bpt>CComControlBase::m_sizeNatural<ept id="p3">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizenatural)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Otherwise, returns an error <ph id="ph1">`HRESULT`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObjectEx::GetNaturalExtent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683718)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetRect</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns a rectangle describing a requested drawing aspect.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObjectEx::GetRect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms695246)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__getviewstatus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::GetViewStatus</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns information about the opacity of the object and what drawing aspects are supported.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>By default, ATL sets <ph id="ph1">`pdwStatus`</ph> to indicate that the control supports <bpt id="p1">**</bpt>VIEWSTATUS_OPAQUE<ept id="p1">**</ept> (possible values are in the <bpt id="p2">[</bpt>VIEWSTATUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms687201)</ept> enumeration).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObjectEx::GetViewStatus<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693371)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__queryhitpoint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::QueryHitPoint</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Checks if the specified point is in the specified rectangle and returns a <bpt id="p1">[</bpt>HITRESULT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id="ph1">`pHitResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The value can be either <bpt id="p1">**</bpt>HITRESULT_HIT<ept id="p1">**</ept> or <bpt id="p2">**</bpt>HITRESULT_OUTSIDE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwAspect`</ph> equals <bpt id="p1">[</bpt>DVASPECT_CONTENT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept>, the method returns <ph id="ph2">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Otherwise, the method returns <bpt id="p1">**</bpt>E_FAIL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObjectEx::QueryHitPoint<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms691209)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__queryhitrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::QueryHitRect</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a <bpt id="p1">[</bpt>HITRESULT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id="ph1">`pHitResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The value can be either <bpt id="p1">**</bpt>HITRESULT_HIT<ept id="p1">**</ept> or <bpt id="p2">**</bpt>HITRESULT_OUTSIDE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwAspect`</ph> equals <bpt id="p1">[</bpt>DVASPECT_CONTENT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept>, the method returns <ph id="ph2">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Otherwise, the method returns <bpt id="p1">**</bpt>E_FAIL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObjectEx::QueryHitRect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693797)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__setadvise"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::SetAdvise</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The pointer to the <bpt id="p1">[</bpt>IAdviseSink<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface on the advise sink is stored in the control class data member <bpt id="p2">[</bpt>CComControlBase::m_spAdviseSink<ept id="p2">](ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::SetAdvise<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683950)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iviewobjecteximpl__unfreeze"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IViewObjectExImpl::Unfreeze</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Unfreezes the drawn representation of the control.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IViewObject::Unfreeze<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686641)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iworkerthreadclient__closehandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IWorkerThreadClient::CloseHandle</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Implement this method to close the handle associated with this object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hHandle<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The handle to be closed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The handle passed to this method was previously associated with this object by a call to <bpt id="p1">[</bpt>CWorkerThread::AddHandle<ept id="p1">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following code shows a simple implementation of <ph id="ph1">`IWorkerThreadClient::CloseHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#135<ept id="p2">](../../atl/codesnippet/cpp/iviewobjecteximpl-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iworkerthreadclient__execute"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IWorkerThreadClient::Execute</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Implement this method to execute code when the handle associated with this object becomes signaled.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The user parameter.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The handle that has become signaled.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Return S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The handle and DWORD/pointer passed to this method were previously associated with this object by a call to <bpt id="p1">[</bpt>CWorkerThread::AddHandle<ept id="p1">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following code shows a simple implementation of <ph id="ph1">`IWorkerThreadClient::Execute`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#136<ept id="p2">](../../atl/codesnippet/cpp/iviewobjecteximpl-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComControl Class<ept id="p1">](../../atl/reference/ccomcontrol-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ActiveX Controls Interfaces<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692724)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Tutorial<ept id="p1">](../../atl/active-template-library-atl-tutorial.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating an ATL Project<ept id="p1">](../../atl/reference/creating-an-atl-project.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Class Overview<ept id="p1">](../../atl/atl-class-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>