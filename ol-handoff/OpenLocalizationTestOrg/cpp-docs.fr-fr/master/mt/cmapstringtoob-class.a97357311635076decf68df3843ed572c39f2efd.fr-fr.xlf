<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43a03c9bd59d0aafbd3a189b98c6fde8927d03ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmapstringtoob-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13e712d5ce555a550b0514dbcd9b537a34244fe6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f03d0a47b47746f7a1abd33cdfa31674f7c0e7db</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMapStringToOb Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMapStringToOb Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A dictionary collection class that maps unique <ph id="ph1">`CString`</ph> objects to <ph id="ph2">`CObject`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::CMapStringToOb<ept id="p1">](#cmapstringtoob__cmapstringtoob)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::GetCount<ept id="p1">](#cmapstringtoob__getcount)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this map.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::GetHashTableSize<ept id="p1">](#cmapstringtoob__gethashtablesize)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Determines the current number of elements in the hash table.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::GetNextAssoc<ept id="p1">](#cmapstringtoob__getnextassoc)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the next element for iterating.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::GetSize<ept id="p1">](#cmapstringtoob__getsize)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this map.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::GetStartPosition<ept id="p1">](#cmapstringtoob__getstartposition)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the position of the first element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::HashKey<ept id="p1">](#cmapstringtoob__hashkey)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Calculates the hash value of a specified key.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::InitHashTable<ept id="p1">](#cmapstringtoob__inithashtable)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes the hash table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::IsEmpty<ept id="p1">](#cmapstringtoob__isempty)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Tests for the empty-map condition (no elements).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::Lookup<ept id="p1">](#cmapstringtoob__lookup)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Looks up a void pointer based on the void pointer key.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The pointer value, not the entity it points to, is used for the key comparison.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::LookupKey<ept id="p1">](#cmapstringtoob__lookupkey)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a reference to the key associated with the specified key value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::RemoveAll<ept id="p1">](#cmapstringtoob__removeall)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this map.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::RemoveKey<ept id="p1">](#cmapstringtoob__removekey)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Removes an element specified by a key.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::SetAt<ept id="p1">](#cmapstringtoob__setat)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Inserts an element into the map; replaces an existing element if a matching key is found.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToOb::operator [ ]<ept id="p1">](#cmapstringtoob__operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Inserts an element into the map â€” operator substitution for <ph id="ph1">`SetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Once you have inserted a <ph id="ph1">`CString`</ph><ph id="ph2">- </ph><ph id="ph3">`CObject*`</ph> pair (element) into the map, you can efficiently retrieve or delete the pair using a string or a <ph id="ph4">`CString`</ph> value as a key.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can also iterate over all the elements in the map.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is used for alternate entry access in all map variations.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> to "remember" an entry and to iterate through the map.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You might think that this iteration is sequential by key value; it is not.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The sequence of retrieved elements is indeterminate.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CMapStringToOb`</ph> incorporates the <ph id="ph2">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( <bpt id="p1">**</bpt><ph id="ph1">&lt;&lt;</ph><ept id="p1">**</ept>) operator or with the <ph id="ph2">`Serialize`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you need a diagnostic dump of the individual elements in the map (the <ph id="ph1">`CString`</ph> value and the <ph id="ph2">`CObject`</ph> contents), you must set the depth of the dump context to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CMapStringToOb`</ph> object is deleted, or when its elements are removed, the <ph id="ph2">`CString`</ph> objects and the <ph id="ph3">`CObject`</ph> pointers are removed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The objects referenced by the <ph id="ph1">`CObject`</ph> pointers are not destroyed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Map class derivation is similar to list derivation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept> for an illustration of the derivation of a special-purpose list class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcoll.h</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__cmapstringtoob"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::CMapStringToOb</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Constructs an empty <ph id="ph1">`CString`</ph>-to- <ph id="ph2">`CObject*`</ph> map.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies the memory-allocation granularity for extending the map.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As the map grows, memory is allocated in units of <ph id="ph1">`nBlockSize`</ph> entries.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <bpt id="p1">**</bpt>CMapStringToOb:: CMapStringToOb<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMapPtrToPtr( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMapPtrToWord( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMapStringToPtr( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMapStringToString( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMapWordToOb( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MapWordToPtr( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#63<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__getcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::GetCount</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Determines how many elements are in the map.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The number of elements in this map.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::GetCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#64<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__gethashtablesize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::GetHashTableSize</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Determines the current number of elements in the hash table.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the hash table.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::GetHashTableSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetHashTableSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__getnextassoc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::GetNextAssoc</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Retrieves the map element at <bpt id="p1">*</bpt>rNextPosition<ept id="p1">*</ept>, then updates <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> to refer to the next element in the map.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>rNextPosition<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies a reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <bpt id="p2">**</bpt>GetNextAssoc<ept id="p2">**</ept> or <bpt id="p3">**</bpt>GetStartPosition<ept id="p3">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>rKey<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Specifies the returned key of the retrieved element (a string).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>rValue<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Specifies the returned value of the retrieved element (a <bpt id="p1">**</bpt>CObject<ept id="p1">**</ept> pointer).</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See Remarks for more about this parameter.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This function is most useful for iterating through all the elements in the map.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Note that the position sequence is not necessarily the same as the key value sequence.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the map, then the new value of <bpt id="p1">*</bpt>rNextPosition<ept id="p1">*</ept> is set to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">*</bpt>rValue<ept id="p1">*</ept> parameter, be sure to cast your object type to <bpt id="p2">**</bpt>CObject<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p2">**</ept>, which is what the compiler requires, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#65<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This is not true of <bpt id="p1">**</bpt>GetNextAssoc<ept id="p1">**</ept> for maps based on templates.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <bpt id="p1">**</bpt>CMapStringToOb::GetNextAssoc<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, void<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, void<ph id="ph3">\*</ph><ph id="ph4">&amp;</ph><ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, void<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, WORD&amp;<ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, CString&amp;<ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, void<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, CString&amp;<ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, CString&amp;<ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, WORD&amp;<ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, CObject<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void GetNextAssoc( POSITION&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>rNextPosition<ept id="p2">*</ept> <bpt id="p3">**</bpt>, WORD&amp;<ept id="p3">**</ept> <bpt id="p4">*</bpt>rKey<ept id="p4">*</ept> <bpt id="p5">**</bpt>, void<ph id="ph1">\*</ph><ph id="ph2">&amp;</ph><ept id="p5">**</ept> <bpt id="p6">*</bpt>rValue<ept id="p6">*</ept> <bpt id="p7">**</bpt>) const;<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#66<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__getsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::GetSize</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returns the number of map elements.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The number of items in the map.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the number of elements in the map.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::GetSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#67<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__getstartposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::GetStartPosition</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Starts a map iteration by returning a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be passed to a <ph id="ph1">`GetNextAssoc`</ph> call.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that indicates a starting position for iterating the map; or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the map is empty.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The iteration sequence is not predictable; therefore, the "first element in the map" has no special significance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::GetStartPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetStartPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMapStringToOb::GetNextAssoc<ept id="p1">](#cmapstringtoob__getnextassoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__hashkey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::HashKey</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Calculates the hash value of a specified key.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The key whose hash value is to be calculated.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The Key's hash value</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::HashKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT HashKey( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__inithashtable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::InitHashTable</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Initializes the hash table.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Number of entries in the hash table.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, allocates the hash table upon initialization; otherwise the table is allocated when needed.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For best performance, the hash table size should be a prime number.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>To minimize collisions, the size should be roughly 20 percent larger than the largest anticipated data set.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::InitHashTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InitHashTable( UINT<ept id="p1">**</ept> <ph id="ph1">`hashSize`</ph> <bpt id="p2">**</bpt>, BOOL<ept id="p2">**</ept> <ph id="ph2">`bAllocNow`</ph> <bpt id="p3">**</bpt>= TRUE );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__isempty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::IsEmpty</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Determines whether the map is empty.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Nonzero if this map contains no elements; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>RemoveAll<ept id="p1">](#cmapstringtoob__removeall)</ept>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <bpt id="p1">**</bpt>CMapStringToOb:: IsEmpty<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__lookup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::Lookup</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CObject`</ph> pointer based on a <ph id="ph2">`CString`</ph> value.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Specifies the string key that identifies the element to be looked up.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Specifies the returned value from the looked-up element.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Nonzero if the element was found; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Lookup`</ph> uses a hashing algorithm to quickly find the map element with a key that matches exactly ( <ph id="ph2">`CString`</ph> value).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::LookUp`</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph3">\*</ph><ph id="ph4">&amp;</ph><ept id="p2">**</ept> <ph id="ph5">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>, WORD&amp;<ept id="p2">**</ept> <ph id="ph3">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ph id="ph3">&amp;</ph><ept id="p2">**</ept> <ph id="ph4">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, CString&amp;<ept id="p2">**</ept> <ph id="ph2">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, CObject<ph id="ph2">\*</ph><ph id="ph3">&amp;</ph><ept id="p2">**</ept> <ph id="ph4">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL Lookup( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ph id="ph3">&amp;</ph><ept id="p2">**</ept> <ph id="ph4">`rValue`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#68<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__lookupkey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::LookupKey</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Returns a reference to the key associated with the specified key value.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Specifies the string key that identifies the element to be looked up.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The reference to the associated key.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Nonzero if the key was found; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Using a reference to a key is unsafe if used after the associated element was removed from the map or after the map was destroyed.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <bpt id="p1">**</bpt>CMapStringToOb:: LookupKey<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL LookupKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, LPCTSTR&amp;<ept id="p2">**</ept> <ph id="ph2">`rKey`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL LookupKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, LPCTSTR&amp;<ept id="p2">**</ept> <ph id="ph2">`rKey`</ph> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::operator [ ]</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A convenient substitute for the <ph id="ph1">`SetAt`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A reference to a pointer to a <ph id="ph1">`CObject`</ph> object; or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the map is empty or <ph id="ph2">`key`</ph> is out of range.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Thus it can be used only on the left side of an assignment statement (an l-value).</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>If there is no map element with the specified key, then a new element is created.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>There is no "right side" (r-value) equivalent to this operator because there is a possibility that a key may not be found in the map.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Lookup`</ph> member function for element retrieval.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <bpt id="p1">**</bpt>CMapStringToOb::operator []<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; operator[](void<ph id="ph2">\*</ph><ept id="p1">**</ept> <ph id="ph3">`key`</ph> <bpt id="p2">**</bpt><ph id="ph4">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WORD&amp; operator[](void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; operator[](lpctstr<ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString&amp; operator[](lpctstr<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CObject<ph id="ph1">\*</ph>&amp; operator[](word<ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; operator[](word<ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#72<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__removeall"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::RemoveAll</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this map and destroys the <ph id="ph1">`CString`</ph> key objects.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> objects referenced by each key are not destroyed.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RemoveAll`</ph> function can cause memory leaks if you do not ensure that the referenced <ph id="ph2">`CObject`</ph> objects are destroyed.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The function works correctly if the map is already empty.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::RemoveAll`</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#69<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__removekey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::RemoveKey</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Looks up the map entry corresponding to the supplied key; then, if the key is found, removes the entry.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Specifies the string used for map lookup.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Nonzero if the entry was found and successfully removed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>This can cause memory leaks if the <ph id="ph1">`CObject`</ph> object is not deleted elsewhere.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::RemoveKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL RemoveKey( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#70<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmapstringtoob__setat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMapStringToOb::SetAt</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The primary means to insert an element in a map.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Specifies the string that is the key of the new element.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`CObject`</ph> pointer that is the value of the new element.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>First, the key is looked up.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If the key is found, then the corresponding value is changed; otherwise a new key-value element is created.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CMapStringToOb::SetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph3">\*</ph><ept id="p2">**</ept> <ph id="ph4">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapPtrToWord<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`key`</ph> <bpt id="p2">**</bpt>, WORD<ept id="p2">**</ept> <ph id="ph3">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToPtr<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapStringToString<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, LPCTSTR<ept id="p2">**</ept> <ph id="ph2">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToOb<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, CObject<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMapWordToPtr<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( WORD<ept id="p1">**</ept> <ph id="ph1">`key`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newValue`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#71<ept id="p2">](../../mfc/codesnippet/cpp/cmapstringtoob-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapPtrToPtr Class<ept id="p1">](../../mfc/reference/cmapptrtoptr-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapPtrToWord Class<ept id="p1">](../../mfc/reference/cmapptrtoword-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapStringToPtr Class<ept id="p1">](../../mfc/reference/cmapstringtoptr-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapStringToString Class<ept id="p1">](../../mfc/reference/cmapstringtostring-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapWordToOb Class<ept id="p1">](../../mfc/reference/cmapwordtoob-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMapWordToPtr Class<ept id="p1">](../../mfc/reference/cmapwordtoptr-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>