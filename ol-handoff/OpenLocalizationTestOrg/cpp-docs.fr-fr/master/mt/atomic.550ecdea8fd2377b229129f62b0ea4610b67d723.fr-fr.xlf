<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2d8190f6bf612ee0cfa07e56de2857fc8eac6d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\atomic.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d8b44ea5bd7151e847d0d5fb81a45bc2e3e532f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b44e0be1be2bb18f305f75b08767f22d70ee1e8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>atomic<ph id="ph2">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>atomic<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines classes and template classes to use to create types that support atomic operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In code that's compiled by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, this header is blocked.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An atomic operation has two key properties that help you use multiple threads to correctly manipulate an object without using mutex locks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because an atomic operation is indivisible, a second atomic operation on the same object from a different thread can obtain the state of the object only before or after the first atomic operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Based on its <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> argument, an atomic operation establishes ordering requirements for the visibility of the effects of other atomic operations in the same thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Consequently, it inhibits compiler optimizations that violate the ordering requirements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>On some platforms, it might not be possible to efficiently implement atomic operations for some types without using <ph id="ph1">`mutex`</ph> locks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An atomic type is <bpt id="p1">*</bpt>lock-free<ept id="p1">*</ept> if no atomic operations on that type use locks.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C++11<ept id="p1">**</ept>: In signal-handlers you can perform atomic operations on an object <ph id="ph1">`obj`</ph> if <ph id="ph2">`obj.is_lock_free()`</ph> or <ph id="ph3">`atomic_is_lock_free(x)`</ph> are true.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The class <bpt id="p1">[</bpt>atomic_flag<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept> provides a minimal atomic type that holds a <ph id="ph1">`bool`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Its operations are always lock-free.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The template class <ph id="ph1">`atomic&lt;T&gt;`</ph> stores an object of its argument type <ph id="ph2">`T`</ph> and provides atomic access to that stored value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can instantiate it by using any type that can be copied by using <bpt id="p1">[</bpt>memcpy<ept id="p1">](../c-runtime-library/reference/memcpy-wmemcpy.md)</ept> and tested for equality by using <bpt id="p2">[</bpt>memcmp<ept id="p2">](../c-runtime-library/reference/memcmp-wmemcmp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In particular, you can use it with user-defined types that meet these requirements and, in many cases, with floating-point types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The template also has a set of specializations for integral types and a partial specialization for pointers.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These specializations provide additional operations that are not available through the primary template.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Pointer Specializations</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic&lt;T *&gt;`</ph> partial specializations apply to all pointer types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>They provide methods for pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Integral Specializations</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic&lt;integral&gt;`</ph> specializations apply to all integral types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>They provide additional operations that are not available through the primary template.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`atomic&lt;integral&gt;`</ph> type has a corresponding macro that you can use in an <ph id="ph2">`if directive`</ph> to determine at compile time whether operations on that type are lock-free.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the value of the macro is zero, operations on the type are not lock-free.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the value is 1, operations might be lock-free, and a runtime check is required.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the value is 2, operations are lock-free.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use the function <ph id="ph1">`atomic_is_lock_free`</ph> to determine at runtime whether operations on the type are lock-free.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For each of the integral types, there is a corresponding named atomic type that manages an object of that integral type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`atomic_integral`</ph> type has the same set of member functions as the corresponding instantiation of <ph id="ph2">`atomic&lt;T&gt;`</ph> and can be passed to any of the non-member atomic functions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_integral`</ph> Type</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Integral Type</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`atomic_is_lock_free`</ph> Macro</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Typedef names exist for specializations of the atomic template for some of the types that are defined in the header <ph id="ph1">\&lt;</ph>inttypes.h&gt;.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Atomic Type</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Typedef Name</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Structs</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic Structure<ept id="p1">](../standard-library/atomic-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Describes an object that performs atomic operations on a stored value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag Structure<ept id="p1">](../standard-library/atomic-flag-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Describes an object that atomically sets and clears a <ph id="ph1">`bool`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Enums</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>memory_order Enum<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Supplies symbolic names for synchronization operations on memory locations.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These operations affect how assignments in one thread become visible in another.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the following list, the functions that do not end in <ph id="ph1">`_explicit`</ph> have the semantics of the corresponding <ph id="ph2">`_explicit`</ph>, except that they have the implicit <bpt id="p1">[</bpt>memory_order<ept id="p1">](../standard-library/atomic-enums.md#memory_order_enum)</ept> arguments of <ph id="ph3">`memory_order_seq_cst`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_strong Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_function)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Performs an <bpt id="p1">*</bpt>atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_strong_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Performs an <bpt id="p1">*</bpt>atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_weak Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_function)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Performs a <bpt id="p1">*</bpt>weak atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange_weak_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performs a <bpt id="p1">*</bpt>weak atomic compare and exchange<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_exchange Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_exchange_function)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Replaces a stored value.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_exchange_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_exchange_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Replaces a stored value.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_add Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_add_function)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Adds a specified value to an existing stored value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_add_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_add_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Adds a specified value to an existing stored value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_and Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_and_function)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_and_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_and_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_or Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_or_function)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_or_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_or_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_sub Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_sub_function)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Subtracts a specified value from an existing stored value.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_sub_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_sub_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Subtracts a specified value from an existing stored value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_xor Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_xor_function)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_xor_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_fetch_xor_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a specified value and an existing stored value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_clear Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_flag_clear_function)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sets the flag in an <ph id="ph1">`atomic_flag`</ph> object to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_clear_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_flag_clear_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Sets the flag in an <ph id="ph1">`atomic_flag`</ph> object to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_test_and_set Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_flag_test_and_set_function)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the flag in an <ph id="ph1">`atomic_flag`</ph> object to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_flag_test_and_set_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_flag_test_and_set_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Sets the flag in an <ph id="ph1">`atomic_flag`</ph> object to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_init Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_init_function)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Sets the stored value in an <ph id="ph1">`atomic`</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_is_lock_free Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_is_lock_free_function)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Specifies whether atomic operations on a specified object are lock-free.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_load Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_load_function)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Atomically retrieves a value.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_load_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_load_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Atomically retrieves a value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_signal_fence Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_signal_fence_function)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Acts as a <bpt id="p1">*</bpt>fence<ept id="p1">*</ept> that establishes memory ordering requirements between fences in a calling thread that has signal handlers executed in the same thread.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_store Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_store_function)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Atomically stores a value.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_store_explicit Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_store_explicit_function)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Atomically stores a value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_thread_fence Function<ept id="p1">](../standard-library/atomic-functions.md#atomic_thread_fence_function)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Acts as a <bpt id="p1">*</bpt>fence<ept id="p1">*</ept> that establishes memory ordering requirements with respect to other fences.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>kill_dependency Function<ept id="p1">](../standard-library/atomic-functions.md#kill_dependency_function)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Breaks a possible dependency chain.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>