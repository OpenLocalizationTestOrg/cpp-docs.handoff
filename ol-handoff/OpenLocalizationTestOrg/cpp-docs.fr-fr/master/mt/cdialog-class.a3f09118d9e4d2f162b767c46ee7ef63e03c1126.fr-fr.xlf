<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b363dfce600b0a763fddf6c1c553ce3d61963f1b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdialog-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbe71725f462a362532f8299d18780854543f048</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c52e455914ee18a848900a45aa5e66531686c94</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDialog Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDialog Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class used for displaying dialog boxes on the screen.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::CDialog<ept id="p1">](#cdialog__cdialog)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::Create<ept id="p1">](#cdialog__create)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates a modeless dialog box and attaches it to the <ph id="ph1">`CDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::CreateIndirect<ept id="p1">](#cdialog__createindirect)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates a modeless dialog box from a dialog-box template in memory (not resource-based).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::DoModal<ept id="p1">](#cdialog__domodal)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Calls a modal dialog box and returns when done.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::EndDialog<ept id="p1">](#cdialog__enddialog)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Closes a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::GetDefID<ept id="p1">](#cdialog__getdefid)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the ID of the default pushbutton control for a dialog box.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::GotoDlgCtrl<ept id="p1">](#cdialog__gotodlgctrl)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Moves the focus to a specified dialog-box control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::InitModalIndirect<ept id="p1">](#cdialog__initmodalindirect)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creates a modal dialog box from a dialog-box template in memory (not resource-based).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The parameters are stored until the function <ph id="ph1">`DoModal`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::MapDialogRect<ept id="p1">](#cdialog__mapdialogrect)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Converts the dialog-box units of a rectangle to screen units.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::NextDlgCtrl<ept id="p1">](#cdialog__nextdlgctrl)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Moves the focus to the next dialog-box control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::OnInitDialog<ept id="p1">](#cdialog__oninitdialog)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Override to augment dialog-box initialization.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::OnSetFont<ept id="p1">](#cdialog__onsetfont)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Override to specify the font that a dialog-box control is to use when it draws text.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::PrevDlgCtrl<ept id="p1">](#cdialog__prevdlgctrl)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Moves the focus to the previous dialog-box control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::SetDefID<ept id="p1">](#cdialog__setdefid)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Changes the default pushbutton control for a dialog box to a specified pushbutton.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::SetHelpID<ept id="p1">](#cdialog__sethelpid)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sets a context-sensitive help ID for the dialog box.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::OnCancel<ept id="p1">](#cdialog__oncancel)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Override to perform the Cancel button or ESC key action.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default closes the dialog box and <bpt id="p1">**</bpt>DoModal<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>IDCANCEL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDialog::OnOK<ept id="p1">](#cdialog__onok)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Override to perform the OK button action in a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default closes the dialog box and <ph id="ph1">`DoModal`</ph> returns <bpt id="p1">**</bpt>IDOK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Dialog boxes are of two types: modal and modeless.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A modal dialog box must be closed by the user before the application continues.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A modeless dialog box allows the user to display the dialog box and return to another task without canceling or removing the dialog box.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDialog`</ph> object is a combination of a dialog template and a <ph id="ph2">`CDialog`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use the dialog editor to create the dialog template and store it in a resource, then use the Add Class wizard to create a class derived from <ph id="ph1">`CDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A dialog box, like any other window, receives messages from Windows.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In a dialog box, you are particularly interested in handling notification messages from the dialog box's controls since that is how the user interacts with your dialog box.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the Properties window to select which messages you wish to handle and it will add the appropriate message-map entries and message-handler member functions to the class for you.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You only need to write application-specific code in the handler member functions.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you prefer, you can always write message-map entries and member functions manually.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In all but the most trivial dialog box, you add member variables to your derived dialog class to store data entered in the dialog box's controls by the user or to display data for the user.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can use the Add Variable wizard to create member variables and associate them with controls.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>At the same time, you choose a variable type and permissible range of values for each variable.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The code wizard adds the member variables to your derived dialog class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A data map is generated to automatically handle the exchange of data between the member variables and the dialog box's controls.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The data map provides functions that initialize the controls in the dialog box with the proper values, retrieve the data, and validate the data.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To create a modal dialog box, construct an object on the stack using the constructor for your derived dialog class and then call <ph id="ph1">`DoModal`</ph> to create the dialog window and its controls.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you wish to create a modeless dialog, call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> in the constructor of your dialog class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also create a template in memory by using a <bpt id="p1">[</bpt>DLGTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645394)</ept> data structure as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>After you construct a <ph id="ph1">`CDialog`</ph> object, call <bpt id="p1">[</bpt>CreateIndirect<ept id="p1">](#cdialog__createindirect)</ept> to create a modeless dialog box, or call <bpt id="p2">[</bpt>InitModalIndirect<ept id="p2">](#cdialog__initmodalindirect)</ept> and <bpt id="p3">[</bpt>DoModal<ept id="p3">](#cdialog__domodal)</ept> to create a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The exchange and validation data map is written in an override of <ph id="ph1">`CWnd::DoDataExchange`</ph> that is added to your new dialog class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>DoDataExchange<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__dodataexchange)</ept> member function in <ph id="ph1">`CWnd`</ph> for more on the exchange and validation functionality.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Both the programmer and the framework call <ph id="ph1">`DoDataExchange`</ph> indirectly through a call to <bpt id="p1">[</bpt>CWnd::UpdateData<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__updatedata)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`UpdateData`</ph> when the user clicks the OK button to close a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(The data is not retrieved if the Cancel button is clicked.) The default implementation of <bpt id="p1">[</bpt>OnInitDialog<ept id="p1">](#cdialog__oninitdialog)</ept> also calls <ph id="ph1">`UpdateData`</ph> to set the initial values of the controls.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You typically override <ph id="ph1">`OnInitDialog`</ph> to further initialize controls.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnInitDialog`</ph> is called after all the dialog controls are created and just before the dialog box is displayed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`CWnd::UpdateData`</ph> at any time during the execution of a modal or modeless dialog box.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you develop a dialog box by hand, you add the necessary member variables to the derived dialog-box class yourself, and you add member functions to set or get these values.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A modal dialog box closes automatically when the user presses the OK or Cancel buttons or when your code calls the <ph id="ph1">`EndDialog`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you implement a modeless dialog box, always override the <ph id="ph1">`OnCancel`</ph> member function and call <ph id="ph2">`DestroyWindow`</ph> from within it.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Don't call the base class <ph id="ph1">`CDialog::OnCancel`</ph>, because it calls <ph id="ph2">`EndDialog`</ph>, which will make the dialog box invisible but will not destroy it.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You should also override <ph id="ph1">`PostNcDestroy`</ph> for modeless dialog boxes in order to delete <bpt id="p1">**</bpt>this<ept id="p1">**</ept>, since modeless dialog boxes are usually allocated with <bpt id="p2">**</bpt>new<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Modal dialog boxes are usually constructed on the frame and do not need <ph id="ph1">`PostNcDestroy`</ph> cleanup.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CDialog`</ph>, see:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dialog Boxes<ept id="p1">](../../mfc/dialog-boxes.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Knowledge Base article Q262954 : HOWTO: Create a Resizeable Dialog Box with Scroll Bars</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__cdialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::CDialog</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To construct a resource-based modal dialog box, call either public form of the constructor.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Contains a null-terminated string that is the name of a dialog-box template resource.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Contains the ID number of a dialog-box template resource.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Points to the parent or owner window object (of type <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept>) to which the dialog object belongs.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the dialog object's parent window is set to the main application window.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>One form of the constructor provides access to the dialog resource by template name.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The other constructor provides access by template ID number, usually with an <bpt id="p1">**</bpt>IDD_<ept id="p1">**</ept> prefix (for example, IDD_DIALOG1).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To construct a modal dialog box from a template in memory, first invoke the parameterless, protected constructor and then call <ph id="ph1">`InitModalIndirect`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After you construct a modal dialog box with one of the above methods, call <ph id="ph1">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To construct a modeless dialog box, use the protected form of the <ph id="ph1">`CDialog`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The constructor is protected because you must derive your own dialog-box class to implement a modeless dialog box.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Construction of a modeless dialog box is a two-step process.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>First call the constructor; then call the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function to create a resource-based dialog box, or call <ph id="ph1">`CreateIndirect`</ph> to create the dialog box from a template in memory.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::Create</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create a modeless dialog box using a dialog-box template from a resource.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Contains a null-terminated string that is the name of a dialog-box template resource.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Points to the parent window object (of type <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept>) to which the dialog object belongs.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the dialog object's parent window is set to the main application window.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Contains the ID number of a dialog-box template resource.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Both forms return nonzero if dialog-box creation and initialization were successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can put the call to <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> inside the constructor or call it after the constructor is invoked.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Two forms of the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function are provided for access to the dialog-box template resource by either template name or template ID number (for example, IDD_DIALOG1).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For either form, pass a pointer to the parent window object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pParentWnd`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the dialog box will be created with its parent or owner window set to the main application window.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function returns immediately after it creates the dialog box.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style in the dialog-box template if the dialog box should appear when the parent window is created.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Otherwise, you must call <ph id="ph1">`ShowWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For further dialog-box styles and their application, see the <bpt id="p1">[</bpt>DLGTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645394)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> and <bpt id="p2">[</bpt>Window Styles<ept id="p2">](../../mfc/reference/window-styles.md)</ept> in the <bpt id="p3">*</bpt>MFC Reference<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CWnd::DestroyWindow`</ph> function to destroy a dialog box created by the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#62<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__createindirect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::CreateIndirect</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call this member function to create a modeless dialog box from a dialog-box template in memory.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Points to memory that contains a dialog-box template used to create the dialog box.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This template is in the form of a <bpt id="p1">[</bpt>DLGTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645394)</ept> structure and control information, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Points to the dialog object's parent window object (of type <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the dialog object's parent window is set to the main application window.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">**</bpt>DLGINIT<ept id="p1">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Contains a handle to global memory containing a dialog-box template.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This template is in the form of a <bpt id="p1">**</bpt>DLGTEMPLATE<ept id="p1">**</ept> structure and data for each control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Nonzero if the dialog box was created and initialized successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CreateIndirect`</ph> member function returns immediately after it creates the dialog box.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style in the dialog-box template if the dialog box should appear when the parent window is created.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Otherwise, you must call <ph id="ph1">`ShowWindow`</ph> to cause it to appear.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information on how you can specify other dialog-box styles in the template, see the <bpt id="p1">[</bpt>DLGTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645394)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CWnd::DestroyWindow`</ph> function to destroy a dialog box created by the <ph id="ph2">`CreateIndirect`</ph> function.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Dialog boxes that contain ActiveX controls require additional information provided in a <bpt id="p1">**</bpt>DLGINIT<ept id="p1">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q231591, " HOWTO: Use a Dialog Template to Create a MFC Dialog with an ActiveX Control."</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__domodal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::DoModal</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Call this member function to invoke the modal dialog box and return the dialog-box result when done.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> value that specifies the value of the <ph id="ph2">`nResult`</ph> parameter that was passed to the <bpt id="p1">[</bpt>CDialog::EndDialog<ept id="p1">](#cdialog__enddialog)</ept> member function, which is used to close the dialog box.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The return value is –1 if the function could not create the dialog box, or <bpt id="p1">**</bpt>IDABORT<ept id="p1">**</ept> if some other error occurred, in which case the output window will contain error information from <bpt id="p2">[</bpt>GetLastError<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This member function handles all interaction with the user while the dialog box is active.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This is what makes the dialog box modal; that is, the user cannot interact with other windows until the dialog box is closed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If the user clicks one of the pushbuttons in the dialog box, such as OK or Cancel, a message-handler member function, such as <bpt id="p1">[</bpt>OnOK<ept id="p1">](#cdialog__onok)</ept> or <bpt id="p2">[</bpt>OnCancel<ept id="p2">](#cdialog__oncancel)</ept>, is called to attempt to close the dialog box.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`OnOK`</ph> member function will validate and update the dialog-box data and close the dialog box with result <bpt id="p1">**</bpt>IDOK<ept id="p1">**</ept>, and the default <ph id="ph2">`OnCancel`</ph> member function will close the dialog box with result <bpt id="p2">**</bpt>IDCANCEL<ept id="p2">**</ept> without validating or updating the dialog-box data.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You can override these message-handler functions to alter their behavior.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PreTranslateMessage`</ph> is now called for modal dialog box message processing.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#63<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__enddialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::EndDialog</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Call this member function to terminate a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Contains the value to be returned from the dialog box to the caller of <ph id="ph1">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This member function returns <ph id="ph1">`nResult`</ph> as the return value of <ph id="ph2">`DoModal`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`EndDialog`</ph> function to complete processing whenever a modal dialog box is created.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`EndDialog`</ph> at any time, even in <bpt id="p1">[</bpt>OnInitDialog<ept id="p1">](#cdialog__oninitdialog)</ept>, in which case you should close the dialog box before it is shown or before the input focus is set.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EndDialog`</ph> does not close the dialog box immediately.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Instead, it sets a flag that directs the dialog box to close as soon as the current message handler returns.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#64<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#65<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__getdefid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::GetDefID</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetDefID`</ph> member function to get the ID of the default pushbutton control for a dialog box.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A 32-bit value ( <ph id="ph1">`DWORD`</ph>).</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If the default pushbutton has an ID value, the high-order word contains <bpt id="p1">**</bpt>DC_HASDEFID<ept id="p1">**</ept> and the low-order word contains the ID value.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the default pushbutton does not have an ID value, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This is usually an OK button.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__gotodlgctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::GotoDlgCtrl</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Moves the focus to the specified control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Identifies the window (control) that is to receive the focus.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To get a pointer to the control (child window) to pass as <ph id="ph1">`pWndCtrl`</ph>, call the <ph id="ph2">`CWnd::GetDlgItem`</ph> member function, which returns a pointer to a <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::GetDlgItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getdlgitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__initmodalindirect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::InitModalIndirect</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Call this member function to initialize a modal dialog object using a dialog-box template that you construct in memory.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Points to memory that contains a dialog-box template used to create the dialog box.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This template is in the form of a <bpt id="p1">[</bpt>DLGTEMPLATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645394)</ept> structure and control information, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Contains a handle to global memory containing a dialog-box template.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This template is in the form of a <bpt id="p1">**</bpt>DLGTEMPLATE<ept id="p1">**</ept> structure and data for each control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Points to the parent or owner window object (of type <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept>) to which the dialog object belongs.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the dialog object's parent window is set to the main application window.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">**</bpt>DLGINIT<ept id="p1">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Nonzero if the dialog object was created and initialized successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To create a modal dialog box indirectly, first allocate a global block of memory and fill it with the dialog box template.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Then call the empty <ph id="ph1">`CDialog`</ph> constructor to construct the dialog-box object.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Next, call <ph id="ph1">`InitModalIndirect`</ph> to store your handle to the in-memory dialog-box template.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The Windows dialog box is created and displayed later, when the <bpt id="p1">[</bpt>DoModal<ept id="p1">](#cdialog__domodal)</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Dialog boxes that contain ActiveX controls require additional information provided in a <bpt id="p1">**</bpt>DLGINIT<ept id="p1">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q231591, " HOWTO: Use a Dialog Template to Create a MFC Dialog with an ActiveX Control."</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__mapdialogrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::MapDialogRect</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Call to convert the dialog-box units of a rectangle to screen units.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the dialog-box coordinates to be converted.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Dialog-box units are stated in terms of the current dialog-box base unit derived from the average width and height of characters in the font used for dialog-box text.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>One horizontal unit is one-fourth of the dialog-box base-width unit, and one vertical unit is one-eighth of the dialog-box base height unit.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetDialogBaseUnits<ept id="p1">**</ept> Windows function returns size information for the system font, but you can specify a different font for each dialog box if you use the <bpt id="p2">**</bpt>DS_SETFONT<ept id="p2">**</ept> style in the resource-definition file.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MapDialogRect`</ph> Windows function uses the appropriate font for this dialog box.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MapDialogRect`</ph> member function replaces the dialog-box units in <ph id="ph2">`lpRect`</ph> with screen units (pixels) so that the rectangle can be used to create a dialog box or position a control within a box.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__nextdlgctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::NextDlgCtrl</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Moves the focus to the next control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the focus is at the last control in the dialog box, it moves to the first control.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__oncancel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::OnCancel</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user clicks <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> or presses the ESC key in a modal or modeless dialog box.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Override this method to perform actions (such as restoring old data) when a user closes the dialog box by clicking <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> or hitting the ESC key.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The default closes a modal dialog box by calling <bpt id="p1">[</bpt>EndDialog<ept id="p1">](#cdialog__enddialog)</ept> and causing <bpt id="p2">[</bpt>DoModal<ept id="p2">](#cdialog__domodal)</ept> to return IDCANCEL.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If you implement the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button in a modeless dialog box, you must override the <ph id="ph1">`OnCancel`</ph> method and call <bpt id="p2">[</bpt>DestroyWindow<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__destroywindow)</ept> inside it.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Do not call the base-class method, because it calls <ph id="ph1">`EndDialog`</ph>, which will make the dialog box invisible but not destroy it.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You cannot override this method when you use a <ph id="ph1">`CFileDialog`</ph> object in a program that is compiled under Windows XP.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`CFileDialog`</ph>, see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#66<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__oninitdialog"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::OnInitDialog</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>This method is called in response to the <ph id="ph1">`WM_INITDIALOG`</ph> message.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Specifies whether the application has set the input focus to one of the controls in the dialog box.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`OnInitDialog`</ph> returns nonzero, Windows sets the input focus to the default location, the first control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The application can return 0 only if it has explicitly set the input focus to one of the controls in the dialog box.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Windows sends the <ph id="ph1">`WM_INITDIALOG`</ph> message to the dialog box during the <bpt id="p1">[</bpt>Create<ept id="p1">](#cdialog__create)</ept>, <bpt id="p2">[</bpt>CreateIndirect<ept id="p2">](#cdialog__createindirect)</ept>, or <bpt id="p3">[</bpt>DoModal<ept id="p3">](#cdialog__domodal)</ept> calls, which occur immediately before the dialog box is displayed.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Override this method if you want to perform special processing when the dialog box is initialized.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In the overridden version, first call the base class <ph id="ph1">`OnInitDialog`</ph> but ignore its return value.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You will typically return <ph id="ph1">`TRUE`</ph> from your overridden method.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Windows calls the <ph id="ph1">`OnInitDialog`</ph> function by using the standard global dialog-box procedure common to all Microsoft Foundation Class Library dialog boxes.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>It does not call this function through your message map, and therefore you do not need a message map entry for this method.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>You cannot override this method when you use a <ph id="ph1">`CFileDialog`</ph> object in a program that is compiled under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>For more information about changes to <ph id="ph1">`CFileDialog`</ph> under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#67<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__onok"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::OnOK</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Called when the user clicks the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button (the button with an ID of IDOK).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Override this method to perform actions when the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button is activated.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the dialog box includes automatic data validation and exchange, the default implementation of this method validates the dialog box data and updates the appropriate variables in your application.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you implement the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button in a modeless dialog box, you must override the <ph id="ph1">`OnOK`</ph> method and call <bpt id="p2">[</bpt>DestroyWindow<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__destroywindow)</ept> inside it.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Do not call the base-class method, because it calls <bpt id="p1">[</bpt>EndDialog<ept id="p1">](#cdialog__enddialog)</ept> which makes the dialog box invisible but does not destroy it.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>You cannot override this method when you use a <ph id="ph1">`CFileDialog`</ph> object in a program that is compiled under Windows XP.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`CFileDialog`</ph>, see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCControlLadenDialog#68<ept id="p2">](../../mfc/codesnippet/cpp/cdialog-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__onsetfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::OnSetFont</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Specifies the font a dialog-box control will use when drawing text.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pFont`</ph></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the font that will be used as the default font for all controls in this dialog box.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The dialog box will use the specified font as the default for all its controls.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The dialog editor typically sets the dialog-box font as part of the dialog-box template resource.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>You cannot override this method when you use a <ph id="ph1">`CFileDialog`</ph> object in a program that is compiled under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For more information about changes to <ph id="ph1">`CFileDialog`</ph> under <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> see <bpt id="p1">[</bpt>CFileDialog Class<ept id="p1">](../../mfc/reference/cfiledialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__prevdlgctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::PrevDlgCtrl</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Sets the focus to the previous control in the dialog box.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If the focus is at the first control in the dialog box, it moves to the last control in the box.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__setdefid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::SetDefID</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Changes the default pushbutton control for a dialog box.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the pushbutton control that will become the default.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdialog__sethelpid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDialog::SetHelpID</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Sets a context-sensitive help ID for the dialog box.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nIDR<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Specifies the context-sensitive help ID.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample DLGCBR32<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample DLGTEMPL<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>