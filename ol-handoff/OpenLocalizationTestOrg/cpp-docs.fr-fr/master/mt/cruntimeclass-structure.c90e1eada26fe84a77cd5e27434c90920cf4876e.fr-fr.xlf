<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad28f03811ece74f61a48a7f270293181e7b97f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cruntimeclass-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">448398f50d191772d1c9ffe25933d0a3f6c06077</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93fae35f57375b13edd3e8ef3e891d778521007a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRuntimeClass Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRuntimeClass Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each class derived from <ph id="ph1">`CObject`</ph> is associated with a <ph id="ph2">`CRuntimeClass`</ph> structure that you can use to obtain information about an object or its base class at run time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::CreateObject<ept id="p1">](#cruntimeclass__createobject)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates an object during run time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::FromName<ept id="p1">](#cruntimeclass__fromname)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creates an object during run time using the familiar class name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Determines if the class is derived from the specified class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_lpszClassName<ept id="p1">](#cruntimeclass__m_lpszclassname)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The name of the class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_nObjectSize<ept id="p1">](#cruntimeclass__m_nobjectsize)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The size of the object in bytes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_pBaseClass<ept id="p1">](#cruntimeclass__m_pbaseclass)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CRuntimeClass`</ph> structure of the base class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_pfnCreateObject<ept id="p1">](#cruntimeclass__m_pfncreateobject)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A pointer to the function that dynamically creates the object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_pfnGetBaseClass<ept id="p1">](#cruntimeclass__m_pfngetbaseclass)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">`CRuntimeClass`</ph> structure (only available when dynamically linked).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CRuntimeClass::m_wSchema<ept id="p1">](#cruntimeclass__m_wschema)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The schema number of the class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CRuntimeClass`</ph> is a structure and therefore does not have a base class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The ability to determine the class of an object at run time is useful when extra type checking of function arguments is needed, or when you must write special-purpose code based on the class of an object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Run-time class information is not supported directly by the C++ language.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CRuntimeClass`</ph> provides information on the related C++ object, such as a pointer to the <ph id="ph2">`CRuntimeClass`</ph> of the base class and the ASCII class name of the related class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This structure also implements various functions that can be used to dynamically create objects, specifying the type of object by using a familiar name, and determining if the related class is derived from a specific class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CRuntimeClass`</ph>, see the article <bpt id="p1">[</bpt>Accessing Run-Time Class Information<ept id="p1">](../../mfc/accessing-run-time-class-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__createobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::CreateObject</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Call this function to dynamically create the specified class during run time.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The familiar name of the class to be created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A pointer to the newly created object, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the class name is not found or there is insufficient memory to create the object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Classes derived from <ph id="ph1">`CObject`</ph> can support dynamic creation, which is the ability to create an object of a specified class at run time.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Document, view, and frame classes, for example, should support dynamic creation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on dynamic creation and the <ph id="ph1">`CreateObject`</ph> member, see <bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/using-cobject.md)</ept> and <bpt id="p2">[</bpt>CObject Class: Specifying Levels of Functionality<ept id="p2">](../../mfc/specifying-levels-of-functionality.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__fromname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::FromName</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the <ph id="ph1">`CRuntimeClass`</ph> structure associated with the familiar name.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The familiar name of a class derived from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CRuntimeClass`</ph> object, corresponding to the name as passed in <ph id="ph2">`lpszClassName`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no matching class name was found.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCObjectSample#17<ept id="p2">](../../mfc/codesnippet/cpp/cruntimeclass-structure_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__isderivedfrom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::IsDerivedFrom</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call this function to determine if the calling class is derived from the class specified in the <bpt id="p1">*</bpt>pBaseClass<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pBaseClass<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The familiar name of a class derived from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the class calling <ph id="ph1">`IsDerivedFrom`</ph> is derived from the base class whose <ph id="ph2">`CRuntimeClass`</ph> structure is given as a parameter; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The relationship is determined by "walking" from the member's class up the chain of derived classes all the way to the top.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This function only returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if no match is found for the base class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`CRuntimeClass`</ph> structure, you must include the <ph id="ph2">`IMPLEMENT_DYNAMIC`</ph>, <ph id="ph3">`IMPLEMENT_DYNCREATE`</ph>, or <ph id="ph4">`IMPLEMENT_SERIAL`</ph> macro in the implementation of the class for which you want to retrieve run-time object information.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CRuntimeClass`</ph>, see the article <bpt id="p1">[</bpt>CObject Class: Accessing Run-Time Class Information<ept id="p1">](../../mfc/accessing-run-time-class-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCObjectSample#18<ept id="p2">](../../mfc/codesnippet/cpp/cruntimeclass-structure_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_lpszclassname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_lpszClassName</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A null-terminated string containing the ASCII class name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This name can be used to create an instance of the class using the <ph id="ph1">`FromName`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_nobjectsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_nObjectSize</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The size of the object, in bytes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the object has data members that point to allocated memory, the size of that memory is not included.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_pbaseclass"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_pBaseClass</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If your application statically links to MFC, this data member contains a pointer to the <ph id="ph1">`CRuntimeClass`</ph> structure of the base class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If your application dynamically links to the MFC library, see <bpt id="p1">[</bpt>m_pfnGetBaseClass<ept id="p1">](#cruntimeclass__m_pfngetbaseclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_pfncreateobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_pfnCreateObject</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A function pointer to the default constructor that creates an object of your class.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This pointer is only valid if the class supports dynamic creation; otherwise, the function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_pfngetbaseclass"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_pfnGetBaseClass</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If your application uses the MFC library as a shared DLL, this data member points to a function that returns the <ph id="ph1">`CRuntimeClass`</ph> structure of the base class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If your application statically links to the MFC library, see <bpt id="p1">[</bpt>m_pBaseClass<ept id="p1">](#cruntimeclass__m_pbaseclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cruntimeclass__m_wschema"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CRuntimeClass::m_wSchema</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The schema number ( -1 for nonserializable classes).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information on schema numbers, see the <bpt id="p1">[</bpt>IMPLEMENT_SERIAL<ept id="p1">](run-time-object-model-services.md#implement_serial)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>IsDerivedFrom<ept id="p1">](#cruntimeclass__isderivedfrom)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CObject::GetRuntimeClass<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__getruntimeclass)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CObject::IsKindOf<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__iskindof)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>RUNTIME_CLASS<ept id="p1">](run-time-object-model-services.md#runtime_class)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>IMPLEMENT_DYNAMIC<ept id="p1">](run-time-object-model-services.md#implement_dynamic)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>IMPLEMENT_DYNCREATE<ept id="p1">](run-time-object-model-services.md#implement_dyncreate)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>IMPLEMENT_SERIAL<ept id="p1">](run-time-object-model-services.md#implement_serial)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>