<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abf229c496fb5d2171b69d9af64deb343dcc90e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cbindstatuscallback-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0df694104cd731bb9a1226d3d7ce11ed4ddca9f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0894efdb5bd41a583da04c4f2d642a69cab1889</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CBindStatusCallback Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CBindStatusCallback Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements the <ph id="ph1">`IBindStatusCallback`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Your class containing the function that will be called as the data is received.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nBindFlags<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifies the bind flags that are returned by <bpt id="p1">[</bpt>GetBindInfo<ept id="p1">](#cbindstatuscallback__getbindinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The default implementation sets the binding to be asynchronous, retrieves the newest version of the data/object, and does not store retrieved data in the disk cache.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::CBindStatusCallback<ept id="p1">](#cbindstatuscallback__cbindstatuscallback)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::~CBindStatusCallback<ept id="p1">](#cbindstatuscallback___dtorcbindstatuscallback)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::Download<ept id="p1">](#cbindstatuscallback__download)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Static method that starts the download process, creates a <ph id="ph1">`CBindStatusCallback`</ph> object, and calls <ph id="ph2">`StartAsyncDownload`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::GetBindInfo<ept id="p1">](#cbindstatuscallback__getbindinfo)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Called by the asynchronous moniker to request information on the type of bind to be created.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::GetPriority<ept id="p1">](#cbindstatuscallback__getpriority)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Called by the asynchronous moniker to get the priority of the bind operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <ph id="ph1">`E_NOTIMPL`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnDataAvailable<ept id="p1">](#cbindstatuscallback__ondataavailable)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Called to provide data to your application as it becomes available.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Reads the data, then calls the function passed to it to use the data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnLowResource<ept id="p1">](#cbindstatuscallback__onlowresource)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Called when resources are low.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnObjectAvailable<ept id="p1">](#cbindstatuscallback__onobjectavailable)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Called by the asynchronous moniker to pass an object interface pointer to your application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnProgress<ept id="p1">](#cbindstatuscallback__onprogress)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Called to indicate the progress of a data downloading process.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The ATL implementation returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnStartBinding<ept id="p1">](#cbindstatuscallback__onstartbinding)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Called when binding is started.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::OnStopBinding<ept id="p1">](#cbindstatuscallback__onstopbinding)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Called when the asynchronous data transfer is stopped.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::StartAsyncDownload<ept id="p1">](#cbindstatuscallback__startasyncdownload)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes the bytes available and bytes read to zero, creates a push-type stream object from a URL, and calls <ph id="ph1">`OnDataAvailable`</ph> every time data is available.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_dwAvailableToRead<ept id="p1">](#cbindstatuscallback__m_dwavailabletoread)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Number of bytes available to read.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_dwTotalRead<ept id="p1">](#cbindstatuscallback__m_dwtotalread)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Total number of bytes read.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_pFunc<ept id="p1">](#cbindstatuscallback__m_pfunc)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Pointer to the function called when data is available.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_pT<ept id="p1">](#cbindstatuscallback__m_pt)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Pointer to the object requesting the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_spBindCtx<ept id="p1">](#cbindstatuscallback__m_spbindctx)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>IBindCtx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693755)</ept> interface for the current bind operation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_spBinding<ept id="p1">](#cbindstatuscallback__m_spbinding)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Pointer to the <ph id="ph1">`IBinding`</ph> interface for the current bind operation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_spMoniker<ept id="p1">](#cbindstatuscallback__m_spmoniker)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>IMoniker<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679705)</ept> interface for the URL to use.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBindStatusCallback::m_spStream<ept id="p1">](#cbindstatuscallback__m_spstream)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>IStream<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface for the data transfer.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBindStatusCallback`</ph> class implements the <ph id="ph2">`IBindStatusCallback`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IBindStatusCallback`</ph> must be implemented by your application so it can receive notifications from an asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The asynchronous moniker provided by the system uses <ph id="ph1">`IBindStatusCallback`</ph> methods to send and receive information about the asynchronous data transfer to and from your object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Typically, the <ph id="ph1">`CBindStatusCallback`</ph> object is associated with a specific bind operation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, in the <bpt id="p1">[</bpt>ASYNC<ept id="p1">](../../visual-cpp-samples.md)</ept> sample, when you set the URL property, it creates a <ph id="ph1">`CBindStatusCallback`</ph> object in the call to <ph id="ph2">`Download`</ph>:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#86<ept id="p2">](../../atl/codesnippet/cpp/cbindstatuscallback-class_1.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The asynchronous moniker uses the callback function <ph id="ph1">`OnData`</ph> to call your application when it has data.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The asynchronous moniker is provided by the system.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComObjectRootEx<ept id="p1">](../../atl/reference/ccomobjectrootex-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlctl.h</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__cbindstatuscallback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::CBindStatusCallback</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Creates an object to receive notifications concerning the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Typically, one object is created for each bind operation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The constructor also initializes <bpt id="p1">[</bpt>m_pT<ept id="p1">](#cbindstatuscallback__m_pt)</ept> and <bpt id="p2">[</bpt>m_pFunc<ept id="p2">](#cbindstatuscallback__m_pfunc)</ept> to <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback___dtorcbindstatuscallback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::~CBindStatusCallback</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Frees all allocated resources.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__download"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::Download</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CBindStatusCallback`</ph> object and calls <ph id="ph2">`StartAsyncDownload`</ph> to start downloading data asynchronously from the specified URL.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pT<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the object requesting the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBindStatusCallback`</ph> object is templatized on this object's class.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pFunc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the function that receives the data that is read.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The function is a member of your object's class of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>StartAsyncDownload<ept id="p1">](#cbindstatuscallback__startasyncdownload)</ept> for syntax and an example.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>[in] The URL to obtain data from.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Can be any valid URL or file name.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> of the container.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> by default.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>[in] A flag indicating whether the URL is relative or absolute.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> by default, meaning the URL is absolute.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>One of the standard <ph id="ph1">`HRESULT`</ph> values.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Every time data is available it is sent to the object through <ph id="ph1">`OnDataAvailable`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnDataAvailable`</ph> reads the data and calls the function pointed to by <bpt id="p1">*</bpt>pFunc<ept id="p1">*</ept> (for example, to store the data or print it to the screen).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__getbindinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::GetBindInfo</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Called to tell the moniker how to bind.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pgrfBSCF<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>[out] A pointer to <bpt id="p1">**</bpt>BINDF<ept id="p1">**</ept> enumeration values indicating how the bind operation should occur.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>By default, set with the following enumeration values:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BINDF_ASYNCHRONOUS<ept id="p1">**</ept> Asynchronous download.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BINDF_ASYNCSTORAGE<ept id="p1">**</ept> <ph id="ph1">`OnDataAvailable`</ph> returns <bpt id="p2">**</bpt>E_PENDING<ept id="p2">**</ept> when data is not yet available rather than blocking until data is available.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BINDF_GETNEWESTVERSION<ept id="p1">**</ept> The bind operation should retrieve the newest version of the data.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BINDF_NOWRITECACHE<ept id="p1">**</ept> The bind operation should not store retrieved data in the disk cache.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pbindinfo<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[in, out] A pointer to the <bpt id="p1">**</bpt>BINDINFO<ept id="p1">**</ept> structure giving more information about how the object wants binding to occur.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>One of the standard <ph id="ph1">`HRESULT`</ph> values.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default implementation sets the binding to be asynchronous and to use the data-push model.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In the data-push model, the moniker drives the asynchronous bind operation and continuously notifies the client whenever new data is available.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__getpriority"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::GetPriority</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Called by the asynchronous moniker to get the priority of the bind operation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pnPriority<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>[out] Address of the <bpt id="p1">**</bpt>LONG<ept id="p1">**</ept> variable that, on success, receives the priority.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_dwavailabletoread"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_dwAvailableToRead</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Can be used to store the number of bytes available to be read.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Initialized to zero in <ph id="ph1">`StartAsyncDownload`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_dwtotalread"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_dwTotalRead</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The cumulative total of bytes read in the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Incremented every time <ph id="ph1">`OnDataAvailable`</ph> is called by the number of bytes actually read.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Initialized to zero in <ph id="ph1">`StartAsyncDownload`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_pfunc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_pFunc</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The function pointed to by <ph id="ph1">`m_pFunc`</ph> is called by <ph id="ph2">`OnDataAvailable`</ph> after it reads the available data (for example, to store the data or print it to the screen).</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The function pointed to by <ph id="ph1">`m_pFunc`</ph> is a member of your object's class and has the following syntax:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_pt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_pT</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A pointer to the object requesting the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBindStatusCallback`</ph> object is templatized on this object's class.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_spbindctx"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_spBindCtx</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">[</bpt>IBindCtx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693755)</ept> interface that provides access to the bind context (an object that stores information about a particular moniker binding operation).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Initialized in <ph id="ph1">`StartAsyncDownload`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_spbinding"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_spBinding</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`IBinding`</ph> interface of the current bind operation.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Initialized in <ph id="ph1">`OnStartBinding`</ph> and released in <ph id="ph2">`OnStopBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_spmoniker"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_spMoniker</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>IMoniker<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679705)</ept> interface for the URL to use.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Initialized in <ph id="ph1">`StartAsyncDownload`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__m_spstream"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::m_spStream</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>IStream<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface of the current bind operation.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Initialized in <ph id="ph1">`OnDataAvailable`</ph> from the <bpt id="p1">**</bpt>STGMEDIUM<ept id="p1">**</ept> structure when the <bpt id="p2">**</bpt>BCSF<ept id="p2">**</ept> flag is <bpt id="p3">**</bpt>BCSF_FIRSTDATANOTIFICATION<ept id="p3">**</ept> and released when the <bpt id="p4">**</bpt>BCSF<ept id="p4">**</ept> flag is <bpt id="p5">**</bpt>BCSF_LASTDATANOTIFICATION<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__ondataavailable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnDataAvailable</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The system-supplied asynchronous moniker calls <ph id="ph1">`OnDataAvailable`</ph> to provide data to the object as it becomes available.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>grfBSCF<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>[in] A <bpt id="p1">**</bpt>BSCF<ept id="p1">**</ept> enumeration value.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>One or more of the following: <bpt id="p1">**</bpt>BSCF_FIRSTDATANOTIFICATION<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BSCF_INTERMEDIARYDATANOTIFICATION<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>BSCF_LASTDATANOTIFICATION<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>[in] The cumulative amount (in bytes) of data available since the beginning of the binding.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Can be zero, indicating that the amount of data is not relevant or that no specific amount became available.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pformatetc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>[in] Pointer to the <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682242)</ept> structure that contains the format of the available data.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If there is no format, can be <bpt id="p1">**</bpt>CF_NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pstgmed<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in] Pointer to the <bpt id="p1">[</bpt>STGMEDIUM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms695269)</ept> structure that holds the actual data now available.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>One of the standard <ph id="ph1">`HRESULT`</ph> values.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnDataAvailable`</ph> reads the data, then calls a method of your object's class (for example, to store the data or print it to the screen).</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CBindStatusCallback::StartAsyncDownload<ept id="p1">](#cbindstatuscallback__startasyncdownload)</ept> for details.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__onlowresource"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnLowResource</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Called when resources are low.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__onobjectavailable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnObjectAvailable</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Called by the asynchronous moniker to pass an object interface pointer to your application.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Interface identifier of the requested interface.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Address of the IUnknown interface.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__onprogress"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnProgress</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Called to indicate the progress of a data downloading process.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Unsigned long integer.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Unsigned long integer Unused.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Unsigned long integer.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Address of a string value.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__onstartbinding"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnStartBinding</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Sets the data member <bpt id="p1">[</bpt>m_spBinding<ept id="p1">](#cbindstatuscallback__m_spbinding)</ept> to the <ph id="ph1">`IBinding`</ph> pointer in <ph id="ph2">`pBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>[in] Address of the IBinding interface of the current bind operation.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This cannot be NULL.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The client should call AddRef on this pointer to keep a reference to the binding object.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__onstopbinding"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::OnStopBinding</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">`IBinding`</ph> pointer in the data member <bpt id="p1">[</bpt>m_spBinding<ept id="p1">](#cbindstatuscallback__m_spbinding)</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Status code returned from the bind operation.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>szStatusText</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Address of a string value Unused.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Called by the system-supplied asynchronous moniker to indicate the end of the bind operation.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbindstatuscallback__startasyncdownload"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBindStatusCallback::StartAsyncDownload</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Starts downloading data asynchronously from the specified URL.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pT<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the object requesting the asynchronous data transfer.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBindStatusCallback`</ph> object is templatized on this object's class.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pFunc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the function that receives the data being read.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The function is a member of your object's class of type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> for syntax and an example.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>[in] The URL to obtain data from.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Can be any valid URL or file name.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> of the container.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> by default.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>[in] A flag indicating whether the URL is relative or absolute.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> by default, meaning the URL is absolute.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>One of the standard <ph id="ph1">`HRESULT`</ph> values.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Every time data is available it is sent to the object through <ph id="ph1">`OnDataAvailable`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnDataAvailable`</ph> reads the data and calls the function pointed to by <bpt id="p1">*</bpt>pFunc<ept id="p1">*</ept> (for example, to store the data or print it to the screen).</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The function pointed to by <bpt id="p1">*</bpt>pFunc<ept id="p1">*</ept> is a member of your object's class and has the following syntax:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBindStatusCallback&lt;T&gt;*`</ph> <ph id="ph2">`pbsc`</ph> <ph id="ph3">`,`</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BYTE*`</ph> <ph id="ph2">`pBytes`</ph> <ph id="ph3">`,`</ph></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DWORD`</ph> <ph id="ph2">`dwSize`</ph></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In the following example (taken from the <bpt id="p1">[</bpt>ASYNC<ept id="p1">](../../visual-cpp-samples.md)</ept> sample), the function <ph id="ph1">`OnData`</ph> writes the received data into a text box.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Windowing#87<ept id="p2">](../../atl/codesnippet/cpp/cbindstatuscallback-class_2.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class Overview<ept id="p1">](../../atl/atl-class-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>