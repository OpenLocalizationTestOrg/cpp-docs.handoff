<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80bb4c80d6f57dab48b6a7d9720e7a798d1b078e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\valarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284b321fd9bfc15f2575e7c3c176fae98d6db2f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2aff261197648329646efab1ea21777198532a70</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>valarray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>valarray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that controls a sequence of elements of type <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> that are stored as an array, designed for performing high-speed mathematical operations, and optimized for computational performance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The class is a representation of the mathematical concept of an ordered set of values and the elements are numbered sequentially from zero.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The class is described as a near container because it supports some, but not all, of the capabilities that first-class sequence containers, such as <bpt id="p1">[</bpt>vector<ept id="p1">](../standard-library/vector-class.md)</ept>, support.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It differs from template class vector in two important ways:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It defines numerous arithmetic operations between corresponding elements of <bpt id="p1">**</bpt>valarray<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept> objects of the same type and length, such as <bpt id="p2">*</bpt>xarr<ept id="p2">*</ept> = cos( <bpt id="p3">*</bpt>yarr<ept id="p3">*</ept>) + sin( <bpt id="p4">*</bpt>zarr<ept id="p4">*</ept>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It defines a variety of interesting ways to subscript a <bpt id="p1">**</bpt>valarray<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept> object, by overloading <bpt id="p2">[</bpt>operator&amp;#91;&amp;#93;<ept id="p2">](#valarray__operator_at)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An object of class <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Has a public default constructor, destructor, copy constructor, and assignment operator, with conventional behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Defines the arithmetic operators and math functions, as needed, that are defined for the floating-point types, with conventional behavior.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In particular, no subtle differences may exist between copy construction and default construction followed by assignment.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>None of the operations on objects of class <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> may throw exceptions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>valarray<ept id="p1">](#valarray__valarray)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`valarray`</ph> of a specific size or with elements of a specific value or as a copy of another <ph id="ph2">`valarray`</ph> or subset of another <ph id="ph3">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>value_type<ept id="p1">](#valarray__value_type)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type that represents the type of element stored in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>apply<ept id="p1">](#valarray__apply)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Applies a specified function to each element of a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cshift<ept id="p1">](#valarray__cshift)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Cyclically shifts all the elements in a <ph id="ph1">`valarray`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>free<ept id="p1">](#valarray__free)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Frees the memory used by the <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>max<ept id="p1">](#valarray__max)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Finds the largest element in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>min<ept id="p1">](#valarray__min)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Finds the smallest element in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>resize<ept id="p1">](#valarray__resize)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Changes the number of elements in a <ph id="ph1">`valarray`</ph> to a specified number, adding or removing elements as required.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>shift<ept id="p1">](#valarray__shift)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shifts all the elements in a <ph id="ph1">`valarray`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size<ept id="p1">](#valarray__size)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Finds the number of elements in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sum<ept id="p1">](#valarray__sum)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Determines the sum of all the elements in a <ph id="ph1">`valarray`</ph> of nonzero length.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](#valarray__swap)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!<ept id="p1">](#valarray__operator_not)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A unary operator that obtains the logical <ph id="ph1">`NOT`</ph> values of each element in a <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator%=<ept id="p1">](#valarray__operator_mod_eq)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Obtains the remainder of dividing the elements of an array element-wise either by a specified <ph id="ph1">`valarray`</ph> or by a value of the element type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&amp;=<ept id="p1">](#valarray__operator_amp__eq)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <ph id="ph1">`AND`</ph> of elements in an array either with the corresponding elements in a specified <ph id="ph2">`valarray`</ph> or with a value of the element type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;&gt;=<ept id="p1">](#valarray__operator_gt__gt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Right-shifts the bits for each element of a <ph id="ph1">`valarray`</ph> operand a specified number of positions or by an element-wise amount specified by a second <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;&lt;=<ept id="p1">](#valarray__operator_lt__lt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Left-shifts the bits for each element of a <ph id="ph1">`valarray`</ph> operand a specified number of positions or by an element-wise amount specified by a second <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator*=<ept id="p1">](#valarray__operator_star_eq)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Multiplies the elements of a specified <ph id="ph1">`valarray`</ph> or a value of the element type, element-wise, to an operand <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+<ept id="p1">](#valarray__operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A unary operator that applies a plus to each element in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+=<ept id="p1">](#valarray__operator_add_eq)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Adds the elements of a specified <ph id="ph1">`valarray`</ph> or a value of the element type, element-wise, to an operand <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-<ept id="p1">](#valarray__operator-)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A unary operator that applies a minus to each element in a <ph id="ph1">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-=<ept id="p1">](#valarray__operator-_eq)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Subtracts the elements of a specified <ph id="ph1">`valarray`</ph> or a value of the element type, element-wise, from an operand <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator/=<ept id="p1">](#valarray__operator__eq)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Divides an operand <ph id="ph1">`valarray`</ph> element-wise by the elements of a specified <ph id="ph2">`valarray`</ph> or a value of the element type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](#valarray__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Assigns elements to a <ph id="ph1">`valarray`</ph> whose values are specified either directly or as part of some other <ph id="ph2">`valarray`</ph> or by a <ph id="ph3">`slice_array`</ph>, <ph id="ph4">`gslice_array`</ph>, <ph id="ph5">`mask_array`</ph>, or <ph id="ph6">`indirect_array`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&amp;#91;&amp;#93;<ept id="p1">](#valarray__operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element or its value at specified index or a specified subset.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator^=<ept id="p1">](#valarray__operator_xor_eq)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise exclusive logical or operator ( <ph id="ph1">`XOR`</ph>) of an array with either a specified valarray or a value of the element type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&amp;#124;=<ept id="p1">](#valarray__operator_or_eq)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <ph id="ph1">`OR`</ph> of elements in an array either with the corresponding elements in a specified <ph id="ph2">`valarray`</ph> or with a value of the element type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator~<ept id="p1">](#valarray__operator_dtor)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A unary operator that obtains the bitwise <ph id="ph1">`NOT`</ph> values of each element in a <ph id="ph2">`valarray`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>valarray&gt;</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__apply"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::apply</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Applies a specified function to each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>_Func(Type)<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The function object to be applied to each element of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>_Func(const Type&amp;)<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The function object for const to be applied to each element of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A valarray whose elements have had <ph id="ph1">`_Func`</ph> applied element-wise to the elements of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The member function returns an object of class <bpt id="p1">[</bpt>valarray<ept id="p1">](../standard-library/valarray-class.md)</ept><bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p2">**</ept>, of length <bpt id="p3">[</bpt>size<ept id="p3">](#valarray__size)</ept>, each of whose elements <ph id="ph2">`I`</ph> is <bpt id="p4">**</bpt>func<ept id="p4">**</ept>(( <bpt id="p5">**</bpt><ph id="ph3">\*</ph>this<ept id="p5">**</ept>)[ <ph id="ph4">`I`</ph>]).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__cshift"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::cshift</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Cyclically shifts all the elements in a valarray by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The number of places the elements are to be shifted forward.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A new valarray in which all the elements have been moved <ph id="ph1">` count`</ph> positions cyclically toward the front of the valarray, left with respect to their positions in the operand valarray.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A positive value of <ph id="ph1">` count`</ph> shifts the elements cyclically left <ph id="ph2">` count`</ph> places.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A negative value of <ph id="ph1">` count`</ph> shifts the elements cyclically right <ph id="ph2">` count`</ph> places.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__free"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::free</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Frees the memory used by the valarray.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This nonstandard function is equivalent to assigning an empty valarray.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__max"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::max</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Finds the largest element in a valarray.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The maximum value of the elements in the operand valarray.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The member function compares values by applying <bpt id="p1">**</bpt>operator<ph id="ph1">\&lt;</ph><ept id="p1">**</ept> or <bpt id="p2">**</bpt>operator&gt;<ept id="p2">**</ept> between pairs of elements of class <bpt id="p3">**</bpt>Type<ept id="p3">**</ept>, for which operators must be provided for the element <bpt id="p4">**</bpt>Type<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__min"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::min</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Finds the smallest element in a valarray.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The minimum value of the elements in the operand valarray.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The member function compares values by applying <bpt id="p1">**</bpt>operator<ph id="ph1">\&lt;</ph><ept id="p1">**</ept> or <bpt id="p2">**</bpt>operator&gt;<ept id="p2">**</ept> between pairs of elements of class <bpt id="p3">**</bpt>Type<ept id="p3">**</ept>, for which operators must be provided for the element <bpt id="p4">**</bpt>Type<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_not"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator!</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A unary operator that obtains the logical <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept> values of each element in a valarray.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The valarray of Boolean values that are the negation of the element values of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The logical operation <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept> negates the elements because it converts all zeros into ones and regards all nonzero values as ones and converts them into zeros.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The returned valarray of Boolean values is of the same size as the operand valarray.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>There is also a bitwise <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept><bpt id="p2">[</bpt>valarray::operator~<ept id="p2">](#valarray__operator_dtor)</ept> that negates on the level of individual bits within the binary representation of <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> elements of a valarray.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_mod_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator%=</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Obtains the remainder of dividing the elements of an array element-wise either by a specified valarray or by a value of the element type.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to divide, element-wise, the operand valarray.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the remainder from the element-wise division of the operand valarray by <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_amp__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator<ph id="ph1">&amp;amp;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> with the operand valarray.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> of the operand valarray by <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <bpt id="p3">**</bpt>longdouble<ept id="p3">**</ept>, <ph id="ph3">`void`</ph>, <ph id="ph4">`bool`</ph>, or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The bitwise AND has the same truth table as the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> but applies to the data type on the level of the individual bits.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Given bits <bpt id="p1">*</bpt>b<ept id="p1">*</ept>1 and <bpt id="p2">*</bpt>b<ept id="p2">*</ept>2, <bpt id="p3">*</bpt>b<ept id="p3">*</ept>1 <bpt id="p4">**</bpt>AND<ept id="p4">**</ept> <bpt id="p5">*</bpt>b<ept id="p5">*</ept>2 is <bpt id="p6">**</bpt>true<ept id="p6">**</ept> if both bits are true; <bpt id="p7">**</bpt>false<ept id="p7">**</ept> if at least one is false.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_gt__gt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph><ph id="ph3">=</ph></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Right-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A valarray whose elements have been shifted right the amount specified in <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Signed numbers have their signs preserved.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_lt__lt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph><ph id="ph3">=</ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Left-shifts the bits for each element of a valarray operand a specified number of positions or by an element-wise amount specified by a second valarray.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A valarray whose elements have been shifted left the amount specified in <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Signed numbers have their signs preserved.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_star_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator*=</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Multiplies the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to multiply, element-wise, the operand valarray.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise product of the operand valarray and <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator+</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A unary operator that applies a plus to each element in a valarray.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are plus those of the operand array.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_add_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator+=</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Adds the elements of a specified valarray or a value of the element type, element-wise, to an operand valarray.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be added, element-wise, to the operand valarray.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise sum of the operand valarray and <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator-"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator-</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A unary operator that applies a minus to each element in a valarray.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are minus those of the operand array.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator-_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator-=</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Subtracts the elements of a specified valarray or a value of the element type, element-wise, from an operand valarray.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be subtracted, element-wise, from the operand valarray.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise difference of the operand valarray and <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator/=</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Divides an operand valarray element-wise by the elements of a specified valarray or a value of the element type.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be divided, element-wise, into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise quotient of the operand valarray divided by <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator=</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Assigns elements to a valarray whose values are specified either directly or as part of some other valarray or by a slice_array, gslice_array, mask_array, or indirect_array.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The valarray to be copied into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The value to be assigned to the elements of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The slice_array to be copied into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The gslice_array to be copied into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The mask_array to be copied into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The indirect_array to be copied into the operand valarray.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The first member operator replaces the controlled sequence with a copy of the sequence controlled by <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The second member operator is the same as the first, but with an <bpt id="p1">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The third member operator replaces each element of the controlled sequence with a copy of <ph id="ph1">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The remaining member operators replace those elements of the controlled sequence selected by their arguments, which are generated only by <bpt id="p1">[</bpt>operator&amp;#91;&amp;#93;<ept id="p1">](#valarray__operator_at)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If the value of a member in the replacement controlled sequence depends on a member in the initial controlled sequence, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If the length of the controlled sequence changes, the result is generally undefined.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>In this implementation, however, the effect is merely to invalidate any pointers or references to elements in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator[]</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element or its value at specified index or a specified subset.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The index of the element to be assigned a value.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A slice_array of a valarray that specifies a subset to be selected or returned to a new valarray.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A gslice_array of a valarray that specifies a subset to be selected or returned to a new valarray.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>_Boolarray<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A bool_array of a valarray that specifies a subset to be selected or returned to a new valarray.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An indirect_array of a valarray that specifies a subset to be selected or returned to a new valarray.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A reference to an element or its value at specified index or a specified subset.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The member operator is overloaded to provide several ways to select sequences of elements from among those controlled by <bpt id="p1">*</bpt><ph id="ph1">\*</ph><ept id="p1">*</ept><bpt id="p2">**</bpt>this<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The first group of five member operators work in conjunction with various overloads of <bpt id="p1">[</bpt>operator=<ept id="p1">](#valarray__operator_eq)</ept> (and other assigning operators) to allow selective replacement (slicing) of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The selected elements must exist.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the valarray.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>See the examples for <bpt id="p1">[</bpt>slice::slice<ept id="p1">](../standard-library/slice-class.md#slice__slice)</ept> and <bpt id="p2">[</bpt>gslice::gslice<ept id="p2">](../standard-library/gslice-class.md#gslice__gslice)</ept> for an example of how to declare and use the operator.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_xor_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator^=</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise exclusive logical or operator ( <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept>) of an array with either a specified valarray or a value of the element type.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the exclusive logical <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> with the operand valarray.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise, exclusive logical <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> of the operand valarray and <ph id="ph1">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The exclusive logical or, referred to as <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept>, has the following semantics: Given elements <bpt id="p2">*</bpt>e<ept id="p2">*</ept>1 and <bpt id="p3">*</bpt>e<ept id="p3">*</ept>2, <bpt id="p4">*</bpt>e<ept id="p4">*</ept>1 <bpt id="p5">**</bpt>XOR<ept id="p5">**</ept> <bpt id="p6">*</bpt>e<ept id="p6">*</ept>2 is <bpt id="p7">**</bpt>true<ept id="p7">**</ept> if exactly one of the elements is true; <bpt id="p8">**</bpt>false<ept id="p8">**</ept> if both elements are false or if both elements are true.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_or_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <ph id="ph1">`OR`</ph> of elements in an array either with the corresponding elements in a specified valarray or with a value of the element type.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The valarray or value of an element type identical to that of the operand valarray that is to be combined, element-wise, by the bitwise <ph id="ph1">`OR`</ph> with the operand valarray.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise bitwise <ph id="ph1">`OR`</ph> of the operand valarray by <ph id="ph2">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <bpt id="p3">**</bpt>longdouble<ept id="p3">**</ept>, <ph id="ph3">`void`</ph>, <ph id="ph4">`bool`</ph>, or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The bitwise <ph id="ph1">`OR`</ph> has the same truth table as the logical <ph id="ph2">`OR`</ph> but applies to the data type on the level of the individual bits.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Given bits <bpt id="p1">*</bpt>b<ept id="p1">*</ept>1 and <bpt id="p2">*</bpt>b<ept id="p2">*</ept>2, <bpt id="p3">*</bpt>b<ept id="p3">*</ept>1 <ph id="ph1">`OR`</ph> <bpt id="p4">*</bpt>b<ept id="p4">*</ept>2 is <bpt id="p5">**</bpt>true<ept id="p5">**</ept> if at least one of the bits is true; <bpt id="p6">**</bpt>false<ept id="p6">**</ept> if both bits are false.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__operator_dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::operator~</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A unary operator that obtains the bitwise <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept> values of each element in a valarray.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The valarray of Boolean values that are the bitwise <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept> of the element values of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <bpt id="p3">**</bpt>longdouble<ept id="p3">**</ept>, <ph id="ph3">`void`</ph>, <ph id="ph4">`bool`</ph> or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The bitwise <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept> has the same truth table as the logical <bpt id="p2">**</bpt>NOT<ept id="p2">**</ept> but applies to the data type on the level of the individual bits.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Given bit <bpt id="p1">*</bpt>b<ept id="p1">*</ept>, ~ <bpt id="p2">*</bpt>b<ept id="p2">*</ept> is true if <bpt id="p3">*</bpt>b<ept id="p3">*</ept> is false and false if <bpt id="p4">*</bpt>b<ept id="p4">*</ept> is true.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The logical <bpt id="p1">**</bpt>NOT<ept id="p1">**</ept><bpt id="p2">[</bpt>operator!<ept id="p2">](#valarray__operator_not)</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>applies on an element level, counting all nonzero values as <bpt id="p1">**</bpt>true<ept id="p1">**</ept>, and the result is a valarray of Boolean values.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The bitwise <bpt id="p1">**</bpt>NOToperator~<ept id="p1">**</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__resize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::resize</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Changes the number of elements in a valarray to a specified number.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The number of elements in the resized valarray.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The value to be given to the elements of the resized valarray.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The first member function initializes elements with their default constructor.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Any pointers or references to elements in the controlled sequence are invalidated.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the valarray::resize member function.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__shift"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::shift</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Shifts all the elements in a valarray by a specified number of places.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The number of places the elements are to be shifted forward.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A new valarray in which all the elements have been moved <ph id="ph1">` count`</ph> positions toward the front of the valarray, left with respect to their positions in the operand valarray.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A positive value of <ph id="ph1">` count`</ph> shifts the elements left <ph id="ph2">` count`</ph> places, with zero fill.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A negative value of <ph id="ph1">` count`</ph> shifts the elements right <ph id="ph2">` count`</ph> places, with zero fill.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__size"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::size</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Finds the number of elements in a valarray.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The number of elements in the operand valarray.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the valarray::size member function.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__sum"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::sum</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Determines the sum of all the elements in a valarray of nonzero length.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The sum of the elements of the operand valarray.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>If the length is greater than one, the member function adds values to the sum by applying <ph id="ph1">`operator+=`</ph> between pairs of elements of class <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>, which operator, consequently, needs be provided for elements of type <bpt id="p2">**</bpt>Type<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::swap</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two <ph id="ph1">`valarray`</ph>s.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`valarray`</ph> providing the elements to be swapped.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The member function swaps the controlled sequences between <ph id="ph1">`*this`</ph> and <ph id="ph2">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>It does so in constant time, it throws no exceptions, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__valarray"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::valarray</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Constructs a valarray of a specific size or with elements of a specific value or as a copy of another valarray or subset of another valarray.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The number of elements to be in the valarray.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The value to be used in initializing the elements in the valarray.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Pointer to the values to be used to initialize the elements in the valarray.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>An existing valarray to initialize the new valarray.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A slice_array whose element values are to be used in initializing the elements of the valarray being constructed.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A gslice_array whose element values are to be used in initializing the elements of the valarray being constructed.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A mask_array whose element values are to be used in initializing the elements of the valarray being constructed.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A indirect_array whose element values are to be used in initializing the elements of the valarray being constructed.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The initializer_list containing the elements to copy.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The first (default) constructor initializes the object to an empty array.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The next three constructors each initialize the object to an array of <ph id="ph1">`Count`</ph> elements as follows:</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>For explicit <ph id="ph1">`valarray(size_t Count)`</ph>, each element is initialized with the default constructor.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`valarray(const Type&amp; Val, Count)`</ph>, each element is initialized with <ph id="ph2">`Val`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`valarray(const Type* Ptr, Count)`</ph>, the element at position <ph id="ph2">`I`</ph> is initialized with <ph id="ph3">`Ptr`</ph>[ <ph id="ph4">`I`</ph>].</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Each remaining constructor initializes the object to a valarray<ph id="ph1">\&lt;</ph>Type&gt; object determined by the subset specified in the argument.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The last constructor is the same as the next to last, but with an <bpt id="p1">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="valarray__value_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  valarray::value_type</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A type that represents the type of element stored in a valarray.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>