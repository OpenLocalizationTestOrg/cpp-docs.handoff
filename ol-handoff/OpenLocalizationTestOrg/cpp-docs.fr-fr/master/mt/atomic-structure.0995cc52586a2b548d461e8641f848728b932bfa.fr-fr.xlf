<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03665af409892b087bcc8a0858513f1f96f0c41d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\atomic-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7ac73b0336748396705b5c1bde65ebf004296af</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fc8d8872cab00a4ba344f8f49077a5babf71ce3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>atomic Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>atomic Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes an object that performs atomic operations on a stored value of type <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::atomic Constructor<ept id="p1">](http://msdn.microsoft.com/Library/a538c43f-4d48-4308-ae1b-bab1839bccb8)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs an atomic object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator Ty Operator<ept id="p1">](http://msdn.microsoft.com/Library/a366c700-c7a0-4bcb-8eb4-4b57dfaea065)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Reads and returns the stored value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>atomic::load Method<ept id="p1">](http://msdn.microsoft.com/Library/05212726-cf8a-46fe-83d2-c16ac2abb7d1)</ept>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator= Operator<ept id="p1">](http://msdn.microsoft.com/Library/fe161d57-47ae-4bad-92bf-ce32ac8d5953)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Uses a specified value to replace the stored value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>atomic::store Method<ept id="p1">](http://msdn.microsoft.com/Library/84759413-d664-47ef-a1f3-a73c5a62007b)</ept>)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator++ Operator<ept id="p1">](http://msdn.microsoft.com/Library/492959e9-1ea8-4e02-a031-82b1b92e91a0)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Increments the stored value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Used only by integral and pointer specializations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator+= Operator<ept id="p1">](http://msdn.microsoft.com/Library/9ec97aa2-c9d7-436b-943d-2989eb2617dd)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adds a specified value to the stored value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Used only by integral and pointer specializations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator-- Operator<ept id="p1">](http://msdn.microsoft.com/Library/ad7c1ea7-1f6d-4a54-bf26-07630f749864)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Decrements the stored value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Used only by integral and pointer specializations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator-= Operator<ept id="p1">](http://msdn.microsoft.com/Library/902d0d9f-88fd-4500-aa2d-1e50f443e77c)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Subtracts a specified value from the stored value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Used only by integral and pointer specializations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator&amp;= Operator<ept id="p1">](http://msdn.microsoft.com/Library/90e730ac-12e1-4abb-98f5-4eadd6861a89)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Used only by integral specializations.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator&amp;#124;= Operator<ept id="p1">](http://msdn.microsoft.com/Library/f105eacc-31a6-4906-abba-f1cf013599b2)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Used only by integral specializations.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::operator^= Operator<ept id="p1">](http://msdn.microsoft.com/Library/f2a4da9d-67e8-4249-9161-9998e72a33c2)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Used only by integral specializations.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::compare_exchange_strong Method<ept id="p1">](http://msdn.microsoft.com/Library/47bbf894-b28c-4ece-959e-67b3863cf4ed)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Performs an <ph id="ph1">`atomic_compare_and_exchange`</ph> operation on <ph id="ph2">`this`</ph> and returns the result.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::compare_exchange_weak Method<ept id="p1">](http://msdn.microsoft.com/Library/e15e421a-f7a3-4272-993a-f487d2242e4f)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Performs a <ph id="ph1">`weak_atomic_compare_and_exchange`</ph> operation on <ph id="ph2">`this`</ph> and returns the result.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::fetch_add Method<ept id="p1">](http://msdn.microsoft.com/Library/c68b91f2-6e8a-4ffa-8991-6bb6d466e1f3)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Adds a specified value to the stored value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::fetch_and Method<ept id="p1">](http://msdn.microsoft.com/Library/a9c83001-b72c-4085-9640-f63f866714b9)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`and`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::fetch_or Method<ept id="p1">](http://msdn.microsoft.com/Library/4c532f7f-80c5-432a-b34b-48feacab8dca)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`or`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::fetch_sub Method<ept id="p1">](http://msdn.microsoft.com/Library/8cc80d4b-0942-45a3-9db8-bbf339a903e4)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Subtracts a specified value from the stored value.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::fetch_xor Method<ept id="p1">](http://msdn.microsoft.com/Library/92bbaff8-ee29-4a1e-aee4-d9d405285bfe)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Performs a bitwise <ph id="ph1">`exclusive or`</ph> on a specified value and the stored value.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::is_lock_free Method<ept id="p1">](http://msdn.microsoft.com/Library/b99d5130-cdda-40a2-b14c-152b13a8ba45)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies whether atomic operations on <ph id="ph1">`this`</ph> are <bpt id="p1">*</bpt>lock free<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An atomic type is <bpt id="p1">*</bpt>lock free<ept id="p1">*</ept> if no atomic operations on that type use locks.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::load Method<ept id="p1">](http://msdn.microsoft.com/Library/05212726-cf8a-46fe-83d2-c16ac2abb7d1)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Reads and returns the stored value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic::store Method<ept id="p1">](http://msdn.microsoft.com/Library/84759413-d664-47ef-a1f3-a73c5a62007b)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Uses a specified value to replace the stored value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`Ty`</ph> must be <bpt id="p1">*</bpt>trivially copyable<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That is, using <bpt id="p1">[</bpt>memcpy<ept id="p1">](../c-runtime-library/reference/memcpy-wmemcpy.md)</ept> to copy its bytes must produce a valid <ph id="ph1">`Ty`</ph> object that compares equal to the original object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`compare_exchange_weak`</ph> and <ph id="ph2">`compare_exchange_strong`</ph> member functions use <bpt id="p1">[</bpt>memcmp<ept id="p1">](../c-runtime-library/reference/memcmp-wmemcmp.md)</ept> to determine whether two <ph id="ph3">`Ty`</ph> values are equal.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These functions will not use a <ph id="ph1">`Ty`</ph>-defined <ph id="ph2">`operator==`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The member functions of <ph id="ph1">`atomic`</ph> use <ph id="ph2">`memcpy`</ph> to copy values of type <ph id="ph3">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A partial specialization, <ph id="ph1">`atomic&lt;Ty *&gt;`</ph>, exists for all pointer types.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The specialization enables the addition of an offset to the managed pointer value or the subtraction of an offset from it.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The arithmetic operations take an argument of type <ph id="ph1">`ptrdiff_t`</ph> and adjust that argument according to the size of <ph id="ph2">`Ty`</ph> to be consistent with ordinary address arithmetic.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A specialization exists for every integral type except <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Each specialization provides a rich set of methods for atomic arithmetic and logical operations.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Integral specializations are derived from corresponding <ph id="ph1">`atomic_``integral`</ph> types.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`atomic&lt;unsigned int&gt;`</ph> is derived from <ph id="ph2">`atomic_uint`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atomic</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>atomic&gt;<ept id="p1">](../standard-library/atomic.md)</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>