<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c6d0573a2da8f62f509031a80157e196ba97c49</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\functional.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb4654352d0332d827b3fc1d1ae10e5522eb4927</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d2858370aba32e09fa160cc0db5a680b021c56c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>functional<ph id="ph2">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>functional<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines Standard Library functions that help construct <bpt id="p1">*</bpt>function objects<ept id="p1">*</ept>—also known as functors—and their binders.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A function object is an object of a type that defines <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A function object can be a function pointer, but more typically, the object is used to store additional information that can be accessed during a function call.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Algorithms require two types of function objects: unary and binary.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Unary function objects require one argument, and binary function objects require two arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A function object and function pointers can be passed as a predicate to an algorithm, but function objects are also adaptable and increase the scope, flexibility, and efficiency of the STL.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If, for example, a value needed to be bound to a function before being passed to an algorithm, then a function pointer could not be used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Function adaptors convert function pointers into adaptable function objects that can be bound to a value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The header <ph id="ph1">\&lt;</ph>functional&gt; also contains member function adaptors that allow member functions to be called as adaptable function objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Functions are adaptable if they have nested type declarations specifying their argument and return types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The C++ Standard requires that this adaptability is implemented by having all standard object classes inherit from the unary_function or binary_function base classes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Function objects and their adaptors allow the STL to upgrade existing applications and help integrate the STL into the C++ programming environment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> implementation of the function objects in <ph id="ph2">\&lt;</ph>functional&gt; includes <bpt id="p1">*</bpt>transparent operator functors<ept id="p1">*</ept>, which are specializations of standard function objects and take no template parameters, and perform perfect forwarding of the function arguments and perfect return of the result.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This feature is part of the C++14 Draft Standard specification.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These template specializations do not require that you specify argument types when you invoke arithmetic, comparison, logical, and bitwise operator functors.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can overload arithmetic, comparison, logical, or bitwise operators for your own types, or for heterogeneous combinations of types, and then use the transparent operator functors as function arguments.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if your type <bpt id="p1">*</bpt>MyType<ept id="p1">*</ept> implements <ph id="ph1">`operator&lt;`</ph>, you can call <ph id="ph2">`sort(my_collection.begin(), my_collection.end(), less&lt;&gt;())`</ph> instead of explicitly specifying the type <ph id="ph3">`sort(my_collection.begin(), my_collection.end(), less&lt;MyType&gt;())`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C++11/C++14 Implementation</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following features are added in the Visual C++ implementation of C++11/C++14:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>call signature<ept id="p1">*</ept> is the name of a return type followed by a parenthesized comma-separated list of zero or more argument types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>callable type<ept id="p1">*</ept> is a pointer to function, a pointer to member function, a pointer to member data, or a class type whose objects can appear immediately to the left of a function call operator.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>callable object<ept id="p1">*</ept> is an object of a callable type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>call wrapper type<ept id="p1">*</ept> is a type that holds a callable object and supports a call operation that forwards to that object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>call wrapper<ept id="p1">*</ept> is an object of a call wrapper type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>target object<ept id="p1">*</ept> is the callable object held by a call wrapper object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The pseudo-function <ph id="ph1">`INVOKE(f, t1, t2, ..., tN)`</ph> means one of the following things:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(t1.*f)(t2, ..., tN)`</ph> when <ph id="ph2">`f`</ph> is a pointer to member function of class <ph id="ph3">`T`</ph> and <ph id="ph4">`t1`</ph> is an object of type <ph id="ph5">`T`</ph> or a reference to an object of type <ph id="ph6">`T`</ph> or a reference to an object of a type derived from <ph id="ph7">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((*t1).*f)(t2, ..., tN)`</ph> when <ph id="ph2">`f`</ph> is a pointer to member function of class <ph id="ph3">`T`</ph> and <ph id="ph4">`t1`</ph> is not one of the types described in the previous item.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`t1.*f`</ph> when N == 1 and <ph id="ph2">`f`</ph> is a pointer to member data of a class <ph id="ph3">`T`</ph> and <ph id="ph4">`t1`</ph> is an object of type <ph id="ph5">`T`</ph> or a reference to an object of type <ph id="ph6">`T`</ph> or a reference to an object of a type derived from <ph id="ph7">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(*t1).*f`</ph> when N == 1 and <ph id="ph2">`f`</ph> is a pointer to member data of a class <ph id="ph3">`T`</ph> and <ph id="ph4">`t1`</ph> is not one of the types described in the previous item.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`f(t1, t2, ..., tN)`</ph> in all other cases.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The pseudo-function <ph id="ph1">`INVOKE(f, t1, t2, ..., tN, R)`</ph> means <ph id="ph2">`INVOKE(f, t1, t2, ..., tN)`</ph> implicitly converted to <ph id="ph3">`R`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a call wrapper has a <bpt id="p1">*</bpt>weak result type<ept id="p1">*</ept>, the type of its member type <ph id="ph1">`result_type`</ph> is based on the type <ph id="ph2">`T`</ph> of the target object of the wrapper, as follows:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`T`</ph> is a pointer to function, <ph id="ph2">`result_type`</ph> is a synonym for the return type of <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`T`</ph> is a pointer to member function, <ph id="ph2">`result_type`</ph> is a synonym for the return type of <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`T`</ph> is a class type that has a member type <ph id="ph2">`result_type`</ph>, then <ph id="ph3">`result_type`</ph> is a synonym for <ph id="ph4">`T::result_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Otherwise, there is no member <ph id="ph1">`result_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Every call wrapper has a move constructor and a copy constructor.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>simple call wrapper<ept id="p1">*</ept> is a call wrapper that has an assignment operator and whose copy constructor, move constructor, and assignment operator do not throw exceptions.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>forwarding call wrapper<ept id="p1">*</ept> is a call wrapper that can be called by using an arbitrary argument list and that delivers the arguments to the wrapped callable object as references.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All rvalue arguments are delivered as rvalue references, and lvalue arguments are delivered as lvalue references.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bad_function_call<ept id="p1">](../standard-library/bad-function-call-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A class that describes an exception thrown to indicate that a call to <ph id="ph1">`operator()`</ph> on a <bpt id="p1">[</bpt>function<ept id="p1">](../standard-library/function-class.md)</ept> object failed because the object was empty.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>binary_negate<ept id="p1">](../standard-library/binary-negate-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A template class providing a member function that negates the return value of a specified binary function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>binder1st<ept id="p1">](../standard-library/binder1st-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A template class providing a constructor that converts a binary function object into a unary function object by binding the first argument of the binary function to a specified value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>binder2nd<ept id="p1">](../standard-library/binder2nd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A template class providing a constructor that converts a binary function object into a unary function object by binding the second argument of the binary function to a specified value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_mem_fun_ref_t<ept id="p1">](../standard-library/const-mem-fun-ref-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a const member function that takes no arguments to be called as a unary function object when initialized with a reference argument.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_mem_fun_t<ept id="p1">](../standard-library/const-mem-fun-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a const member function that takes no arguments to be called as a unary function object when initialized with a pointer argument.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_mem_fun1_ref_t<ept id="p1">](../standard-library/const-mem-fun1-ref-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a const member function that takes a single argument to be called as a binary function object when initialized with a reference argument.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_mem_fun1_t<ept id="p1">](../standard-library/const-mem-fun1-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a const member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>function<ept id="p1">](../standard-library/function-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A class that wraps a callable object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>hash<ept id="p1">](../standard-library/hash-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A class that computes a hash code for a value.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_bind_expression<ept id="p1">](../standard-library/is-bind-expression-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A class that tests if a particular type is generated by calling <ph id="ph1">`bind`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_placeholder<ept id="p1">](../standard-library/is-placeholder-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A class that tests if a particular type is a placeholder.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun_ref_t<ept id="p1">](../standard-library/mem-fun-ref-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a <bpt id="p1">**</bpt>non_const<ept id="p1">**</ept> member function that takes no arguments to be called as a unary function object when initialized with a reference argument.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun_t<ept id="p1">](../standard-library/mem-fun-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a <bpt id="p1">**</bpt>non_const<ept id="p1">**</ept> member function that takes no arguments to be called as a unary function object when initialized with a pointer argument.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun1_ref_t<ept id="p1">](../standard-library/mem-fun1-ref-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a <bpt id="p1">**</bpt>non_const<ept id="p1">**</ept> member function that takes a single argument to be called as a binary function object when initialized with a reference argument.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun1_t<ept id="p1">](../standard-library/mem-fun1-t-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An adapter class that allows a <bpt id="p1">**</bpt>non_const<ept id="p1">**</ept> member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointer_to_binary_function<ept id="p1">](../standard-library/pointer-to-binary-function-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Converts a binary function pointer into an adaptable binary function.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointer_to_unary_function<ept id="p1">](../standard-library/pointer-to-unary-function-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Converts a unary function pointer into an adaptable unary function.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reference_wrapper<ept id="p1">](../standard-library/reference-wrapper-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A class that wraps a reference.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>result_of<ept id="p1">](../standard-library/result-of-class2.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A struct that holds the return type of a wrapped callable object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unary_negate<ept id="p1">](../standard-library/unary-negate-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A template class providing a member function that negates the return value of a specified unary function.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bind<ept id="p1">](../standard-library/functional-functions.md#bind_function)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Binds arguments to a callable object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bind1st<ept id="p1">](../standard-library/functional-functions.md#bind1st_function)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A helper template function that creates an adaptor to convert a binary function object into a unary function object by binding the first argument of the binary function to a specified value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bind2nd<ept id="p1">](../standard-library/functional-functions.md#bind2nd_function)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A helper template function that creates an adaptor to convert a binary function object into a unary function object by binding the second argument of the binary function to a specified value.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bit_and<ept id="p1">](../standard-library/functional-functions.md#bit_and_function)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the bitwise logical AND (binary operator&amp;) of the two parameters.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bit_not<ept id="p1">](../standard-library/functional-functions.md#bit_not_function)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns the bitwise logical complement (operator~) of the parameter.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bit_or<ept id="p1">](../standard-library/functional-functions.md#bit_or_function)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns the bitwise logical OR (operator&amp;#124;) of the two parameters.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bit_xor<ept id="p1">](../standard-library/functional-functions.md#bit_xor_function)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the bitwise logical XOR (operator^) of the two parameters.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cref<ept id="p1">](../standard-library/functional-functions.md#cref_function)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Constructs a const <ph id="ph1">`reference_wrapper`</ph> from an argument.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fn<ept id="p1">](../standard-library/functional-functions.md#mem_fn_function)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Generates a simple call wrapper.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun<ept id="p1">](../standard-library/functional-functions.md#mem_fun_function)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Helper template functions used to construct function object adaptors for member functions when initialized with pointer arguments.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mem_fun_ref<ept id="p1">](../standard-library/functional-functions.md#mem_fun_ref_function)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A helper template function used to construct function object adaptors for member functions when initialized with reference arguments.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>not1<ept id="p1">](../standard-library/functional-functions.md#not1_function)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the complement of a unary predicate.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>not2<ept id="p1">](../standard-library/functional-functions.md#not2_function)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns the complement of a binary predicate.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ptr_fun<ept id="p1">](../standard-library/functional-functions.md#ptr_fun_function)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A helper template function used to convert unary and binary function pointers, respectively, into unary and binary adaptable functions.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ref<ept id="p1">](../standard-library/functional-functions.md#ref_function)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`reference_wrapper`</ph> from an argument.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/functional-functions.md#swap_function)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Swaps two <ph id="ph1">`function`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Structs</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>binary_function<ept id="p1">](../standard-library/binary-function-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>An empty base class that defines types that may be inherited by derived class that provides a binary function object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>divides<ept id="p1">](../standard-library/divides-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the arithmetic operation of division on elements of a specified value type.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>equal_to<ept id="p1">](../standard-library/equal-to-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is equal to another value of that type.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>greater<ept id="p1">](../standard-library/greater-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is greater than another value of that type.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>greater_equal<ept id="p1">](../standard-library/greater-equal-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is greater than or equal to another value of that type.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>less<ept id="p1">](../standard-library/less-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is less than another value of that type.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>less_equal<ept id="p1">](../standard-library/less-equal-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is less than or equal to another value of that type.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>logical_and<ept id="p1">](../standard-library/logical-and-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the logical operation of conjunction on elements of a specified value type and tests for the truth or falsity of the result.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>logical_not<ept id="p1">](../standard-library/logical-not-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the logical operation of negation on elements of a specified value type and tests for the truth or falsity of the result.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>logical_or<ept id="p1">](../standard-library/logical-or-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the logical operation of disjunction on elements of a specified value type and tests for the truth or falsity of the result.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>minus<ept id="p1">](../standard-library/minus-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the arithmetic operation of subtraction on elements of a specified value type.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>modulus<ept id="p1">](../standard-library/modulus-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the arithmetic operation of modulus on elements of a specified value type.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multiplies<ept id="p1">](../standard-library/multiplies-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the arithmetic operation of multiplication on elements of a specified value type.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>negate<ept id="p1">](../standard-library/negate-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that returns the negative of an element value.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>not_equal_to<ept id="p1">](../standard-library/not-equal-to-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A binary predicate that tests whether a value of a specified type is not equal to another value of that type.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>plus<ept id="p1">](../standard-library/plus-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The class provides a predefined function object that performs the arithmetic operation of addition on elements of a specified value type.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unary_function<ept id="p1">](../standard-library/unary-function-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An empty base class that defines types that may be inherited by derived class that provides a unary function object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Objects</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_1.._M<ept id="p1">](../standard-library/1-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Placeholders for replaceable arguments.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator==<ept id="p1">](../standard-library/functional-operators.md#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Disallows equality comparison of callable objects.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!=<ept id="p1">](../standard-library/functional-operators.md#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Disallows inequality comparison of callable objects.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>