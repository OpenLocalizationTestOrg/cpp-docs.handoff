<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70a25cca6ac8d56748f9bd1490b19d57a0dc8c3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\source-block-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5bc672db2544865c6ef23e50bec2fda58a6eaa3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0415b4b478ea7d328964c1468bd2cd58f1c6a976</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>source_block Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>source_block Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`source_block`</ph> class is an abstract base class for source-only blocks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The class provides basic link management functionality as well as common error checks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Link registry to be used for holding the target links.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Processor type for message processing.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The iterator to walk the connected targets.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::source_block Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::~source_block Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::accept Method<ept id="p1">](#accept)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`source_block`</ph> object, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::acquire_ref Method<ept id="p1">](#acquire_ref)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Acquires a reference count on this <ph id="ph1">`source_block`</ph> object, to prevent deletion.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::consume Method<ept id="p1">](#consume)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by this <ph id="ph1">`source_block`</ph> object and successfully reserved by the target, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::link_target Method<ept id="p1">](#link_target)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Links a target block to this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::release Method<ept id="p1">](#release)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Releases a previous successful message reservation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::release_ref Method<ept id="p1">](#release_ref)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Releases a reference count on this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::reserve Method<ept id="p1">](#reserve)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::unlink_target Method<ept id="p1">](#unlink_target)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unlinks a target block from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::unlink_targets Method<ept id="p1">](#unlink_targets)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unlinks all target blocks from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>ISource::unlink_targets<ept id="p1">](isource-class.md#unlink_targets)</ept>.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::accept_message Method<ept id="p1">](#accept_message)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, accepts an offered message by the source.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Message blocks should override this method to validate the <ph id="ph1">`_MsgId`</ph> and return a message.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::async_send Method<ept id="p1">](#async_send)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Asynchronously queues up messages and starts a propagation task, if this has not been done already</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::consume_message Method<ept id="p1">](#consume_message)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, consumes a message that was previously reserved.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::enable_batched_processing Method<ept id="p1">](#enable_batched_processing)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Enables batched processing for this block.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::initialize_source Method<ept id="p1">](#initialize_source)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`message_propagator`</ph> within this <ph id="ph2">`source_block`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::link_target_notification Method<ept id="p1">](#link_target_notification)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a new target has been linked to this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::process_input_messages Method<ept id="p1">](#process_input_messages)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Process input messages.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is only useful for propagator blocks, which derive from source_block</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::propagate_output_messages Method<ept id="p1">](#propagate_output_messages)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Propagate messages to targets.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::propagate_to_any_targets Method<ept id="p1">](#propagate_to_any_targets)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, propagates the given message to any or all of the linked targets.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This is the main propagation routine for message blocks.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::release_message Method<ept id="p1">](#release_message)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, releases a previous message reservation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::remove_targets Method<ept id="p1">](#remove_targets)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Removes all target links for this source block.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This should be called from the destructor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::reserve_message Method<ept id="p1">](#reserve_message)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reserves a message previously offered by this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::resume_propagation Method<ept id="p1">](#resume_propagation)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, resumes propagation after a reservation has been released.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::sync_send Method<ept id="p1">](#sync_send)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Synchronously queues up messages and starts a propagation task, if this has not been done already.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::unlink_target_notification Method<ept id="p1">](#unlink_target_notification)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a target has been unlinked from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block::wait_for_outstanding_async_sends Method<ept id="p1">](#wait_for_outstanding_async_sends)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Waits for all asynchronous propagations to complete.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Message blocks should derive from this block to take advantage of link management and synchronization provided by this class.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISource<ept id="p1">](isource-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> agents.h</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="accept"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::accept Method</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`source_block`</ph> object, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the offered <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`accept`</ph> method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accept`</ph> method is called by a target while a message is being offered by this <ph id="ph2">`ISource`</ph> block.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The message pointer returned may be different from the one passed into the <ph id="ph1">`propagate`</ph> method of the <ph id="ph2">`ITarget`</ph> block, if this source decides to make a copy of the message.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="accept_message"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::accept_message Method</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, accepts an offered message by the source.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Message blocks should override this method to validate the <ph id="ph1">`_MsgId`</ph> and return a message.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The runtime object identity of the <ph id="ph1">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A pointer to the message that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To transfer ownership, the original message pointer should be returned.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To maintain ownership, a copy of message payload needs to be made and returned.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="acquire_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::acquire_ref Method</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Acquires a reference count on this <ph id="ph1">`source_block`</ph> object, to prevent deletion.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This method is called by an <ph id="ph1">`ITarget`</ph> object that is being linked to this source during the <ph id="ph2">`link_target`</ph> method.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="async_send"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::async_send Method</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Asynchronously queues up messages and starts a propagation task, if this has not been done already</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`message`</ph> object to asynchronously send.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="consume"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::consume Method</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by this <ph id="ph1">`source_block`</ph> object and successfully reserved by the target, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the reserved <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`consume`</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The method throws a <bpt id="p1">[</bpt>bad_target<ept id="p1">](bad-target-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> does not represent the target that called <ph id="ph2">`reserve`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`consume`</ph> method is similar to <ph id="ph2">`accept`</ph>, but must always be preceded by a call to <ph id="ph3">`reserve`</ph> that returned <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="consume_message"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::consume_message Method</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, consumes a message that was previously reserved.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being consumed.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A pointer to the message that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">`accept`</ph>, but is always preceded by a call to <ph id="ph2">`reserve`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="enable_batched_processing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::enable_batched_processing Method</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Enables batched processing for this block.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="initialize_source"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::initialize_source Method</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`message_propagator`</ph> within this <ph id="ph2">`source_block`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The scheduler to be used for scheduling tasks.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The schedule group to be used for scheduling tasks.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="link_target"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::link_target Method</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Links a target block to this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`ITarget`</ph> block to link to this <ph id="ph2">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="link_target_notification"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::link_target_notification Method</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a new target has been linked to this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="process_input_messages"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::process_input_messages Method</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Process input messages.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This is only useful for propagator blocks, which derive from source_block</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="propagate_output_messages"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::propagate_output_messages Method</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Propagate messages to targets.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="propagate_to_any_targets"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::propagate_to_any_targets Method</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, propagates the given message to any or all of the linked targets.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This is the main propagation routine for message blocks.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A pointer to the message that is to be propagated.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::release Method</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Releases a previous successful message reservation.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the reserved <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`release`</ph> method.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The method throws a <bpt id="p1">[</bpt>bad_target<ept id="p1">](bad-target-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> does not represent the target that called <ph id="ph2">`reserve`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release_message"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::release_message Method</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, releases a previous message reservation.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being released.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::release_ref Method</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Releases a reference count on this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling this method.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This method is called by an <ph id="ph1">`ITarget`</ph> object that is being unlinked from this source.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The source block is allowed to release any resources reserved for the target block.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="remove_targets"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::remove_targets Method</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Removes all target links for this source block.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This should be called from the destructor.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="reserve"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::reserve Method</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the offered <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`reserve`</ph> method.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was successfully reserved, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>After you call <ph id="ph1">`reserve`</ph>, if it succeeds, you must call either <ph id="ph2">`consume`</ph> or <ph id="ph3">`release`</ph> in order to take or give up possession of the message, respectively.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="reserve_message"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::reserve_message Method</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reserves a message previously offered by this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being reserved.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was successfully reserved, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`reserve`</ph> is called, if it returns <ph id="ph2">`true`</ph>, either <ph id="ph3">`consume`</ph> or <ph id="ph4">`release`</ph> must be called to either take or release ownership of the message.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="resume_propagation"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::resume_propagation Method</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, resumes propagation after a reservation has been released.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::source_block Constructor</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::~source_block Destructor</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="sync_send"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::sync_send Method</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Synchronously queues up messages and starts a propagation task, if this has not been done already.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`message`</ph> object to synchronously send.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unlink_target"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::unlink_target Method</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Unlinks a target block from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`ITarget`</ph> block to unlink from this <ph id="ph2">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The method throws an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id="ph1">`_PTarget`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unlink_target_notification"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::unlink_target_notification Method</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a target has been unlinked from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ITarget`</ph> block that was unlinked.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unlink_targets"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::unlink_targets Method</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Unlinks all target blocks from this <ph id="ph1">`source_block`</ph> object.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="wait_for_outstanding_async_sends"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  source_block::wait_for_outstanding_async_sends Method</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Waits for all asynchronous propagations to complete.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ISource Class<ept id="p1">](isource-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>