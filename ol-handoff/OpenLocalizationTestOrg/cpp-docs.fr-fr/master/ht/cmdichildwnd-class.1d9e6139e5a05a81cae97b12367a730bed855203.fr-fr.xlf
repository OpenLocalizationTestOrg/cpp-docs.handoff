<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b29c7ab91b16751ad69342287eee82dd424f4c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmdichildwnd-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">959e014263bfdae0aae405e439fc19e533ba2668</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3670af02c84b4ffbb23ba8d918ec7ebe4209d009</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows multiple document interface (MDI) child window, along with members for managing the window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::CMDIChildWnd</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMDIChildWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::Create</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates the Windows MDI child window associated with the <ph id="ph1">`CMDIChildWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::GetMDIFrame</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the parent MDI frame of the MDI client window.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIActivate</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Activates this MDI child window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIDestroy</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Destroys this MDI child window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIMaximize</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Maximizes this MDI child window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIRestore</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Restores this MDI child window from maximized or minimized size.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::SetHandles</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sets the handles for menu and accelerator resources.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An MDI child window looks much like a typical frame window, except that the MDI child window appears inside an MDI frame window rather than on the desktop.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An MDI child window does not have a menu bar of its own, but instead shares the menu of the MDI frame window.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The framework automatically changes the MDI frame menu to represent the currently active MDI child window.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To create a useful MDI child window for your application, derive a class from <ph id="ph1">`CMDIChildWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add member variables to the derived class to store data specific to your application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>There are three ways to construct an MDI child window:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Directly construct it using <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Directly construct it using <ph id="ph1">`LoadFrame`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indirectly construct it through a document template.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Before you call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph1">`LoadFrame`</ph>, you must construct the frame-window object on the heap using the C++ <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Before calling <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> you can also register a window class with the <bpt id="p2">[</bpt>AfxRegisterWndClass<ept id="p2">](application-information-and-management.md#afxregisterwndclass)</ept> global function to set the icon and class styles for the frame.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function to pass the frame's creation parameters as immediate arguments.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>requires fewer arguments than <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To be accessible by <ph id="ph1">`LoadFrame`</ph>, all these resources must have the same resource ID (for example, <bpt id="p1">**</bpt>IDR_MAINFRAME<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CMDIChildWnd`</ph> object contains views and documents, they are created indirectly by the framework instead of directly by the programmer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDocTemplate`</ph> object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The parameters of the <ph id="ph1">`CDocTemplate`</ph> constructor specify the <ph id="ph2">`CRuntimeClass`</ph> of the three classes involved (document, frame, and view).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRuntimeClass`</ph> object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the MDI Window New command).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A frame-window class derived from <ph id="ph1">`CMDIChildWnd`</ph> must be declared with <ph id="ph2">`DECLARE_DYNCREATE`</ph> in order for the above <ph id="ph3">`RUNTIME_CLASS`</ph> mechanism to work correctly.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMDIChildWnd`</ph> class inherits much of its default implementation from <ph id="ph2">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For a detailed list of these features, please refer to the <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept> class description.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMDIChildWnd`</ph> class has the following additional features:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In conjunction with the <ph id="ph1">`CMultiDocTemplate`</ph> class, multiple <ph id="ph2">`CMDIChildWnd`</ph> objects from the same document template share the same menu, saving Windows system resources.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The currently active MDI child window menu entirely replaces the MDI frame window's menu, and the caption of the currently active MDI child window is added to the MDI frame window's caption.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For further examples of MDI child window functions that are implemented in conjunction with an MDI frame window, see the <ph id="ph1">`CMDIFrameWnd`</ph> class description.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Do not use the C++ <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator to destroy a frame window.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CWnd::DestroyWindow`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFrameWnd`</ph> implementation of <ph id="ph2">`PostNcDestroy`</ph> will delete the C++ object when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the user closes the frame window, the default <ph id="ph1">`OnClose`</ph> handler will call <ph id="ph2">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CMDIChildWnd`</ph>, see <bpt id="p1">[</bpt>Frame Windows<ept id="p1">](../../mfc/frame-windows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CFrameWnd</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::CMDIChildWnd</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call to construct a <ph id="ph1">`CMDIChildWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create the visible window.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIChildWnd::Create<ept id="p1">](#cmdichildwnd__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::Create</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Call this member function to create a Windows MDI child window and attach it to the <ph id="ph1">`CMDIChildWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated character string that names the Windows class (a <bpt id="p1">[</bpt>WNDCLASS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The class name can be any name registered with the <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](http://msdn.microsoft.com/library/62c7d4b1-7a29-4abb-86f7-dec541659db0)</ept> global function.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for a standard <ph id="ph1">`CMDIChildWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated character string that represents the window name.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Used as text for the title bar.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Specifies the window <bpt id="p1">[</bpt>style<ept id="p1">](../../mfc/reference/window-styles.md)</ept> attributes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> style is required.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Contains the size and position of the window.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rectDefault`</ph> value allows Windows to specify the size and position of the new <ph id="ph2">`CMDIChildWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Specifies the window's parent.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the main application window is used.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Specifies a <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The currently active MDI child frame window can determine the caption of the parent frame window.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This feature is disabled by turning off the <bpt id="p1">**</bpt>FWS_ADDTOTITLE<ept id="p1">**</ept> style bit of the child frame window.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The framework calls this member function in response to a user command to create a child window, and the framework uses the <ph id="ph1">`pContext`</ph> parameter to properly connect the child window to the application.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, <ph id="ph1">`pContext`</ph> can be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#7</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#8</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#9</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::GetMDIFrame</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Call this function to return the MDI parent frame.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A pointer to the MDI parent frame window.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The frame returned is two parents removed from the <ph id="ph1">`CMDIChildWnd`</ph> and is the parent of the window of type <bpt id="p1">**</bpt>MDICLIENT<ept id="p1">**</ept> that manages the <ph id="ph2">`CMDIChildWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>GetParent<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getparent)</ept> member function to return the <ph id="ph1">`CMDIChildWnd`</ph> object's immediate <bpt id="p2">**</bpt>MDICLIENT<ept id="p2">**</ept> parent as a temporary <ph id="ph2">`CWnd`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::MDISetMenu<ept id="p1">](../../mfc/reference/cmdiframewnd-class.md#cmdiframewnd__mdisetmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIActivate</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this member function to activate an MDI child window independently of the MDI frame window.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When the frame becomes active, the child window that was last activated will be activated as well.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::GetWindowMenuPopup<ept id="p1">](../../mfc/reference/cmdiframewnd-class.md#cmdiframewnd__getwindowmenupopup)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIDestroy</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Call this member function to destroy an MDI child window.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The member function removes the title of the child window from the frame window and deactivates the child window.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#10</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIMaximize</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Call this member function to maximize an MDI child window.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When a child window is maximized, Windows resizes it to make its client area fill the client area of the frame window.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Windows places the child window's Control menu in the frame's menu bar so that the user can restore or close the child window and adds the title of the child window to the frame-window title.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#11</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::MDIRestore</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Call this member function to restore an MDI child window from maximized or minimized size.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#12</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd::SetHandles</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Sets the handles for menu and accelerator resources.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The handle of a menu resource.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The handle of an accelerator resource.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call this function to set the menu and accelerator resources used by the MDI child window object.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>MFC Sample MDI</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>MFC Sample MDIDOCVW</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>MFC Sample SNAPVW</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>