<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bfcd909105e203926993f479275fdc7f4384d81</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\linux\deploy-run-and-debug-your-linux-project.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32999a826fb9a20418a84a9ebcc18357632c6f12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5815752ab0ee12fbb01462a1d7f2bb0ae22602c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deploy, Run, and Debug Your Linux Project | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Deploy, Run, and Debug Your Project</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Now that the project is created, you will need to connect to your Linux computer, which is where the code will be compiled and debugged.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Set the remote target architecture using the standard dropdown in Visual Studio as shown: <ph id="ph1">![</ph>Remote Architecture<ph id="ph2">](media/architecture.png)</ph></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are several ways to interact with and debug your Linux project.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The traditional Visual Studio features like breakpoints, watch windows, hovering over a variable, etc. will all work as expected, so you may debug as you normally would.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A special Linux Console window can be opened with the <bpt id="p1">**</bpt>Debug &gt; Linux Console<ept id="p1">**</ept> menu item.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linux Console menu</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This console will display any console output from the target computer as well as take input and send it to the target computer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Linux Console window</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Command line arguments can be passed to the executable using the <bpt id="p1">**</bpt>Program Arguments<ept id="p1">**</ept> item in the project's <bpt id="p2">**</bpt>Debugging<ept id="p2">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Program Arguments</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>GDB is used to debug applications running on Linux.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, this can run in two different modes, which can be selected from the <bpt id="p1">**</bpt>Debugging Mode<ept id="p1">**</ept> option in the project's <bpt id="p2">**</bpt>Debugging<ept id="p2">**</ept> property page:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>GDB options</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Selection</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>gdbserver</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>gdb is run locally which connects to gdbserver running on the remote system.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that this is the only mode in which the Linux Console window supports.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>gdb</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>the Visual Studio debugger drives gdb on the remote system, which is more compatible if the local version of gdb is not compatible with the version installed on the target computer</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specific debugger options can be passed to gdb using the <bpt id="p1">**</bpt>Additional Debugger Commands<ept id="p1">**</ept> entry.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you migh twant to ignore SIGILL (illegal instruction) signals.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You could use the <bpt id="p1">**</bpt>handle<ept id="p1">**</ept> command to achieve this.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>by adding the following to the <bpt id="p1">**</bpt>Additional Debugger Commands<ept id="p1">**</ept> entry as shown above:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>