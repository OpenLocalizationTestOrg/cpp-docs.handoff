<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a3883fb71dbf094bcc8126526c4b42edab5cc33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-3-c4996.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c643877685fa6486ceee48d2b1b47f3593fc4841</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b8a86c6091dede68612e57e04995d457849cedf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4996 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4996</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The compiler encountered a deprecated declaration.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This warning or error has several possible meanings.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>occurs when the compiler encounters a function or variable that is marked as <bpt id="p1">[</bpt>deprecated<ept id="p1">](../../cpp/deprecated-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Several functions, member functions, template functions, and global variables in the libraries in Visual Studio are marked as deprecated.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These functions may have a different preferred name, may be insecure or have a more secure variant, or may be obsolete.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The error message may include a suggested replacement for the deprecated function or global variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can turn this warning off with the <bpt id="p1">[</bpt>warning<ept id="p1">](../../preprocessor/warning.md)</ept> pragma or the <bpt id="p2">**</bpt>/wd4996<ept id="p2">**</ept> command line option.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use preprocessor macros to turn off certain classes of deprecation warnings.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name:<ept id="p1">**</ept> new_name<bpt id="p2">**</bpt>. See online help for details.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Some POSIX functions in the CRT have been renamed to conform with C99 and C++03 rules for implementation-defined global function names.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In most cases, a leading underscore was added to the POSIX function name to create a standard conformant name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The compiler issues a deprecation warning for the original function names, and suggests the preferred name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Only the original names are deprecated, not the functions themselves.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To turn off deprecation warnings for these functions, define the preprocessor macro <bpt id="p1">**</bpt>_CRT_NONSTDC_NO_WARNINGS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can define this at the command line by including the option <ph id="ph1">`/D_CRT_NONSTDC_NO_WARNINGS`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To define this macro in Visual Studio, open the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog for your project.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Expand <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, <bpt id="p2">**</bpt>C/C++<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Preprocessor<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Preprocessor Definitions<ept id="p1">**</ept>, add <ph id="ph1">`_CRT_NONSTDC_NO_WARNINGS`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to save, and then rebuild your project.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To define this macro only in specific source files, add the line <ph id="ph1">`#define _CRT_NONSTDC_NO_WARNINGS`</ph> before any line that includes a header file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>This function or variable may be unsafe. Consider using<ept id="p1">**</ept>  safe_version <bpt id="p2">**</bpt>instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS.  See online help for details.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some CRT and Standard C++ Library functions and globals have been deprecated in favor of new, more secure functions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The compiler issues a deprecation warning for these functions, and suggests the preferred function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To turn off deprecation warnings for these functions in the CRT, define <bpt id="p1">**</bpt>_CRT_SECURE_NO_WARNINGS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To turn off warnings about deprecated global variables, define <bpt id="p1">**</bpt>_CRT_SECURE_NO_WARNINGS_GLOBALS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about these deprecated functions and globals, see <bpt id="p1">[</bpt>Security Features in the CRT<ept id="p1">](../../c-runtime-library/security-features-in-the-crt.md)</ept> and <bpt id="p2">[</bpt>Safe Libraries: C++ Standard Library<ept id="p2">](../../standard-library/safe-libraries-cpp-standard-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To disable this warning, use -D_SCL_SECURE_NO_WARNINGS.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See documentation on how to use Visual C++ 'Checked Iterators'</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Certain C++ Standard Library template functions do not check parameters for correctness.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This warning helps you identify the use of these functions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To turn off warnings for these functions, define <bpt id="p1">**</bpt>_SCL_SECURE_NO_WARNINGS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>This function or variable has been superceded by newer library or operating system functionality. Consider using<ept id="p1">**</ept> new_item <bpt id="p2">**</bpt>instead. See online help for details.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Some library functions and global variables are deprecated as obsolete.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These functions and variables may be removed in a future version of the library.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The compiler issues a deprecation warning for these items, and suggests the preferred alternative.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To turn off deprecation warnings for these items, define <bpt id="p1">**</bpt>_CRT_OBSOLETE_NO_WARNINGS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the deprecated function or variable.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Various messages in MFC or ATL code</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>can also occur if you use MFC or ATL functions that were deprecated for security reasons.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To suppress these warnings, see <bpt id="p1">[</bpt>_AFX_SECURE_NO_WARNINGS<ept id="p1">](http://msdn.microsoft.com/Library/97dcfd41-1e56-41d5-bf7e-d240b950134b)</ept> and <bpt id="p2">[</bpt>_ATL_SECURE_NO_WARNINGS<ept id="p2">](http://msdn.microsoft.com/Library/587d29d8-a75a-44a3-bec8-f724087e5e73)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Marshalling errors in CLR code</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>can also occur when you use the marshaling library.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this case C4996 is an error, not a warning.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This error will occur when you use <bpt id="p1">[</bpt>marshal_as<ept id="p1">](../../dotnet/marshal-as.md)</ept> to convert between two data types that require a <bpt id="p2">[</bpt>marshal_context Class<ept id="p2">](../../dotnet/marshal-context-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You will also receive this error when the marshaling library does not support a conversion.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information about the marshaling library, see <bpt id="p1">[</bpt>Overview of Marshaling in C++<ept id="p1">](../../dotnet/overview-of-marshaling-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Examples that generate C4996</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the first example, <ph id="ph1">`C4996`</ph> is generated for the line on which the function is declared and for the line on which the function is used.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following sample generates C4996.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>C4996 can also occur if you do not use a checked iterator when compiling with <ph id="ph1">`_ITERATOR_DEBUG_LEVEL`</ph> defined (set to 1 by default for debug mode builds).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following STL code example generates C4996.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following STL code example generates C4996 as a warning.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Comments are inline.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following sample generates C4996 because the marshaling library requires a context to convert from a <ph id="ph1">`System::String`</ph> to a <ph id="ph2">`const char *`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>