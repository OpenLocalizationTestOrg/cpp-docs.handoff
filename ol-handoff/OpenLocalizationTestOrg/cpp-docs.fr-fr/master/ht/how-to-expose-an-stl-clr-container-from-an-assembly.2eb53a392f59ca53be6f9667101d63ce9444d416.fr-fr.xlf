<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6d1532f1ff1ea2bd13beb3837a716c79511a216</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-expose-an-stl-clr-container-from-an-assembly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1b9c1e54bd9419b61cee3ece71cf8dec19c364b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ecf2f3a1e1de7cd6affe33d10623e569f7ff726</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Expose an STL-CLR Container from an Assembly | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Expose an STL/CLR Container from an Assembly</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>STL/CLR containers such as <ph id="ph1">`list`</ph> and <ph id="ph2">`map`</ph> are implemented as template ref classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because C++ templates are instantiated at compile time, two template classes that have exactly the same signature but are in different assemblies are actually different types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This means that template classes cannot be used across assembly boundaries.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To make cross-assembly sharing possible, STL/CLR containers implement the generic interface &lt;xref:System.Collections.Generic.ICollection%601&gt;.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By using this generic interface, all languages that support generics, including C++, C#, and Visual Basic, can access STL/CLR containers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic shows you how to display the elements of several STL/CLR containers written in a C++ assembly named <ph id="ph1">`StlClrClassLibrary`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We show two assemblies to access <ph id="ph1">`StlClrClassLibrary`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first assembly is written in C++, and the second in C#.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If both assemblies are written in C++, you can access the generic interface of a container by using its <ph id="ph1">`generic_container`</ph> typedef.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you have a container of type <ph id="ph1">`cliext::vector&lt;int&gt;`</ph>, then its generic interface is: <ph id="ph2">`cliext::vector&lt;int&gt;::generic_container`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Similarly, you can get an iterator over the generic interface by using the <ph id="ph1">`generic_iterator`</ph> typedef, as in: <ph id="ph2">`cliext::vector&lt;int&gt;::generic_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Since these typedefs are declared in C++ header files, assemblies written in other languages cannot use them.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, to access the generic interface for <ph id="ph1">`cliext::vector&lt;int&gt;`</ph> in C# or any other .NET language, use <ph id="ph2">`System.Collections.Generic.ICollection&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To iterate over this collection, use a <ph id="ph1">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table lists the generic interface that each STL/CLR container implements:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>STL/CLR container</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Generic interface</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>deque&lt;T</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>hash_map&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>IDictionary&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>hash_multimap&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>IDictionary&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>hash_multiset&lt;T</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>hash_set&lt;T</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>list&lt;T</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>map&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>IDictionary&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>multimap&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>IDictionary&lt;K, V&gt;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>multiset&lt;T</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>set&lt;T</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>vector&lt;T</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ICollection&lt;T</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`queue`</ph>, <ph id="ph2">`priority_queue`</ph>, and <ph id="ph3">`stack`</ph> containers do not support iterators, they do not implement generic interfaces and cannot be accessed cross-assembly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this example, we declare a C++ class that contains private STL/CLR member data.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>We then declare public methods to grant access to the private collections of the class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We do it in two different ways, one for C++ clients and one for other .NET clients.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, we implement the class declared in Example 1.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In order for clients to use this class library, we use the manifest tool <bpt id="p1">**</bpt>mt.exe<ept id="p1">**</ept> to embed the manifest file into the DLL.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For details, see the code comments.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information on the manifest tool and side-by-side assemblies, see <bpt id="p1">[</bpt>Building C/C++ Isolated Applications and Side-by-side Assemblies<ept id="p1">](../build/building-c-cpp-isolated-applications-and-side-by-side-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example 3</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, we create a C++ client that uses the class library created in Examples 1 and 2.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This client uses the <ph id="ph1">`generic_container`</ph> typedefs of the STL/CLR containers to iterate over the containers and to display their contents.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example 4</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this example, we create a C# client that uses the class library created in Examples 1 and 2.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This client uses the &lt;xref:System.Collections.Generic.ICollection%601&gt; methods of the STL/CLR containers to iterate over the containers and to display their contents.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>STL/CLR Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>