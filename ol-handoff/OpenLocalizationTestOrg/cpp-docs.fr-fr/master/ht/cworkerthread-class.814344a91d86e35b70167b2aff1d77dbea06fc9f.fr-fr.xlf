<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca433f95be51a7f5eeb906f3ccba72f5911a08d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cworkerthread-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48f11b25ed4f3f222bfbc607f5194077a75de9a7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9274d371909df38a57792d7b74f4082df3ee262</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWorkerThread Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWorkerThread Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class creates a worker thread or uses an existing one, waits on one or more kernel object handles, and executes a specified client function when one of the handles is signaled.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The class providing the thread creation function, such as <bpt id="p1">[</bpt>CRTThreadTraits<ept id="p1">](../../atl/reference/crtthreadtraits-class.md)</ept> or <bpt id="p2">[</bpt>Win32ThreadTraits<ept id="p2">](../../atl/reference/win32threadtraits-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Protected Structures</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CWorkerThread::CWorkerThread</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The constructor for the worker thread.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CWorkerThread::~CWorkerThread</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The destructor for the worker thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CWorkerThread::AddHandle</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call this method to add a waitable object's handle to the list maintained by the worker thread.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CWorkerThread::AddTimer</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Call this method to add a periodic waitable timer to the list maintained by the worker thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CWorkerThread::GetThreadHandle</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Call this method to get the thread handle of the worker thread.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CWorkerThread::GetThreadId</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Call this method to get the thread ID of the worker thread.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CWorkerThread::Initialize</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Call this method to initialize the worker thread.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CWorkerThread::RemoveHandle</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Call this method to remove a handle from the list of waitable objects.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CWorkerThread::Shutdown</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Call this method to shut down the worker thread.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To use CWorkerThread</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Create an instance of this class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CWorkerThread::Initialize<ept id="p1">](#cworkerthread__initialize)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CWorkerThread::AddHandle<ept id="p1">](#cworkerthread__addhandle)</ept> with the handle of a kernel object and a pointer to an implementation of <bpt id="p2">[</bpt>IWorkerThreadClient<ept id="p2">](../../atl/reference/iworkerthreadclient-interface.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>– or –</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CWorkerThread::AddTimer<ept id="p1">](#cworkerthread__addtimer)</ept> with a pointer to an implementation of <bpt id="p2">[</bpt>IWorkerThreadClient<ept id="p2">](../../atl/reference/iworkerthreadclient-interface.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt>IWorkerThreadClient::Execute<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> to take some action when the handle or timer is signaled.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To remove an object from the list of waitable objects, call <bpt id="p1">[</bpt>CWorkerThread::RemoveHandle<ept id="p1">](#cworkerthread__removehandle)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To terminate the thread, call <bpt id="p1">[</bpt>CWorkerThread::Shutdown<ept id="p1">](#cworkerthread__shutdown)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlutil.h</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CWorkerThread::AddHandle</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Call this method to add a waitable object's handle to the list maintained by the worker thread.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The handle to a waitable object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The pointer to the <bpt id="p1">[</bpt>IWorkerThreadClient<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md)</ept> interface on the object to be called when the handle is signaled.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The parameter to be passed to <bpt id="p1">[</bpt>IWorkerThreadClient::Execute<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> when the handle is signaled.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IWorkerThreadClient::Execute<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> will be called through <ph id="ph1">`pClient`</ph> when the handle, <ph id="ph2">`hObject`</ph>, is signaled.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CWorkerThread::AddTimer</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Call this method to add a periodic waitable timer to the list maintained by the worker thread.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>dwInterval</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies the period of the timer in milliseconds.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The pointer to the <bpt id="p1">[</bpt>IWorkerThreadClient<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md)</ept> interface on the object to be called when the handle is signaled.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The parameter to be passed to <bpt id="p1">[</bpt>IWorkerThreadClient::Execute<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> when the handle is signaled.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[out] Address of the HANDLE variable that, on success, receives the handle to the newly created timer.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IWorkerThreadClient::Execute<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> will be called through <ph id="ph1">`pClient`</ph> when the timer is signaled.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Pass the timer handle from <ph id="ph1">`phTimer`</ph> to <bpt id="p1">[</bpt>CWorkerThread::RemoveHandle<ept id="p1">](#cworkerthread__removehandle)</ept> to close the timer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CWorkerThread::CWorkerThread</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CWorkerThread::~CWorkerThread</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>CWorkerThread::Shutdown<ept id="p1">](#cworkerthread__shutdown)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CWorkerThread::GetThreadHandle</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Call this method to get the thread handle of the worker thread.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the thread handle or NULL if the worker thread has not been initialized.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CWorkerThread::GetThreadId</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Call this method to get the thread ID of the worker thread.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns the thread ID or NULL if the worker thread has not been initialized.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CWorkerThread::Initialize</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Call this method to initialize the worker thread.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>An existing worker thread.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This method should be called to initialize the object after creation or after a call to <bpt id="p1">[</bpt>CWorkerThread::Shutdown<ept id="p1">](#cworkerthread__shutdown)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To have two or more <ph id="ph1">`CWorkerThread`</ph> objects use the same worker thread, initialize one of them without passing any arguments then pass a pointer to that object to the <ph id="ph2">`Initialize`</ph> methods of the others.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The objects initialized using the pointer should be shut down before the object used to initialize them.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWorkerThread::Shutdown<ept id="p1">](#cworkerthread__shutdown)</ept> for information on how that method's behavior changes when initialized using a pointer to an existing object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CWorkerThread::RemoveHandle</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Call this method to remove a handle from the list of waitable objects.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The handle to remove.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When the handle is removed <bpt id="p1">[</bpt>IWorkerThreadClient::CloseHandle<ept id="p1">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__closehandle)</ept> will be called on the associated object that was passed to <bpt id="p2">[</bpt>AddHandle<ept id="p2">](#cworkerthread__addhandle)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If this call fails, <ph id="ph1">`CWorkerThread`</ph> will call the Windows <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724211)</ept> function on the handle.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CWorkerThread::Shutdown</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Call this method to shut down the worker thread.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The time in milliseconds to wait for the worker thread to shut down.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure, such as if the timeout value, <ph id="ph1">`dwWait`</ph>, is exceeded.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To reuse the object, call <bpt id="p1">[</bpt>CWorkerThread::Initialize<ept id="p1">](#cworkerthread__initialize)</ept> after calling this method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Note that calling <bpt id="p1">**</bpt>Shutdown<ept id="p1">**</ept> on an object initialized with a pointer to another <ph id="ph1">`CWorkerThread`</ph> object has no effect and always returns S_OK.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>DefaultThreadTraits</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Multithreading: Creating Worker Threads</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>IWorkerThreadClient Interface</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>