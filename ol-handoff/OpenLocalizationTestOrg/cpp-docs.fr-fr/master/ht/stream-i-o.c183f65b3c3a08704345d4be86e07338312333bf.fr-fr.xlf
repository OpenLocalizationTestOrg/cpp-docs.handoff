<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">610d765b3082039a967699e35e9a28755ebedcea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\stream-i-o.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b130b8960b74ae83690facaa67065762c203d2b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59d3145f8fa3360cdf808fd71a6c098bc39f6553</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Stream I-O | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These functions process data in different sizes and formats, from single characters to large data structures.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They also provide buffering, which can improve performance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default size of a stream buffer is 4K.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These routines affect only buffers created by the run-time library routines, and have no effect on buffers created by the operating system.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Stream I/O Routines</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>.NET Framework equivalent</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>clearerr<ept id="p1">](../c-runtime-library/reference/clearerr.md)</ept>, <bpt id="p2">[</bpt>clearerr_s<ept id="p2">](../c-runtime-library/reference/clearerr-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Clear error indicator for stream</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>fclose</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Close stream</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::Stream::Close<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.io.stream.close.aspx)</ept>, <bpt id="p2">[</bpt>System::IO::BinaryReader::Close<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.io.binaryreader.close.aspx)</ept>, <bpt id="p3">[</bpt>System::IO::BinaryWriter::Close<ept id="p3">](https://msdn.microsoft.com/en-us/library/system.io.binarywriter.close.aspx)</ept>, <bpt id="p4">[</bpt>System::IO::TextReader::Close<ept id="p4">](https://msdn.microsoft.com/en-us/library/system.io.textreader.close.aspx)</ept>, <bpt id="p5">[</bpt>System::IO::TextWriter::Close<ept id="p5">](https://msdn.microsoft.com/en-us/library/system.io.textwriter.close.aspx)</ept>, <bpt id="p6">[</bpt>System::IO::StringReader::Close<ept id="p6">](https://msdn.microsoft.com/en-us/library/system.io.stringreader.close.aspx)</ept>, <bpt id="p7">[</bpt>System::IO::StringWriter::Close<ept id="p7">](https://msdn.microsoft.com/en-us/library/system.io.stringwriter.close.aspx)</ept>, <bpt id="p8">[</bpt>System::IO::StreamReader::Close<ept id="p8">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.close.aspx)</ept>, <bpt id="p9">[</bpt>System::IO::StreamWriter::Close<ept id="p9">](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.close.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>_fcloseall</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Close all open streams except <ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::Stream::Close<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.io.stream.close.aspx)</ept>, <bpt id="p2">[</bpt>System::IO::BinaryReader::Close<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.io.binaryreader.close.aspx)</ept>, <bpt id="p3">[</bpt>System::IO::BinaryWriter::Close<ept id="p3">](https://msdn.microsoft.com/en-us/library/system.io.binarywriter.close.aspx)</ept>, <bpt id="p4">[</bpt>System::IO::TextReader::Close<ept id="p4">](https://msdn.microsoft.com/en-us/library/system.io.textreader.close.aspx)</ept>, <bpt id="p5">[</bpt>System::IO::TextWriter::Close<ept id="p5">](https://msdn.microsoft.com/en-us/library/system.io.textwriter.close.aspx)</ept>, <bpt id="p6">[</bpt>System::IO::StringReader::Close<ept id="p6">](https://msdn.microsoft.com/en-us/library/system.io.stringreader.close.aspx)</ept>, <bpt id="p7">[</bpt>System::IO::StringWriter::Close<ept id="p7">](https://msdn.microsoft.com/en-us/library/system.io.stringwriter.close.aspx)</ept>, <bpt id="p8">[</bpt>System::IO::StreamReader::Close<ept id="p8">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.close.aspx)</ept>, <bpt id="p9">[</bpt>System::IO::StreamWriter::Close<ept id="p9">](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.close.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>_fdopen, wfdopen</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Associate stream with file descriptor of open file</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>feof</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Test for end of file on stream</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Read</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ferror</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Test for error on stream</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>fflush</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Flush stream to buffer or storage device</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Flush</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>fgetc, fgetwc</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Read character from stream (function versions of <ph id="ph1">`getc`</ph> and <ph id="ph2">`getwc`</ph>)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>System::IO::StreamReader::Read</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>_fgetchar, _fgetwchar</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Read character from <ph id="ph1">`stdin`</ph> (function versions of <ph id="ph2">`getchar`</ph> and <ph id="ph3">`getwchar`</ph>)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>System::Console::Read</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>fgetpos</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Get position indicator of stream</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Position</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>fgets, fgetws</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Read string from stream</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::StreamReader::ReadLine<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)</ept>, <bpt id="p2">[</bpt>System::IO::TextReader::ReadBlock<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.io.textreader.readblock.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>_fileno</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Get file descriptor associated with stream</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Handle</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_flushall</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Flush all streams to buffer or storage device</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::FileStream::Flush<ept id="p1">](https://msdn.microsoft.com/en-us/library/2bw4h516.aspx)</ept>, <bpt id="p2">[</bpt>System::IO::StreamWriter::Flush<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.flush.aspx)</ept>, <bpt id="p3">[</bpt>System::IO::TextWriter::Flush<ept id="p3">](https://msdn.microsoft.com/en-us/library/system.io.textwriter.flush.aspx)</ept>, <bpt id="p4">[</bpt>System::IO::BinaryWriter::Flush<ept id="p4">](https://msdn.microsoft.com/en-us/library/system.io.binarywriter.flush.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fopen, _wfopen<ept id="p1">](../c-runtime-library/reference/fopen-wfopen.md)</ept>, <bpt id="p2">[</bpt>fopen_s, _wfopen_s<ept id="p2">](../c-runtime-library/reference/fopen-s-wfopen-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Open stream</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>System::IO::File::Open</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id="p1">](../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>, <bpt id="p2">[</bpt>fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l<ept id="p2">](../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Write formatted data to stream</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>System::IO::StreamWriter::Write</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>fputc, fputwc</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Write a character to a stream (function versions of <ph id="ph1">`putc`</ph> and <ph id="ph2">`putwc`</ph>)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>System::IO::StreamWriter::Write</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>_fputchar, _fputwchar</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Write character to <ph id="ph1">`stdout`</ph> (function versions of <ph id="ph2">`putchar`</ph> and <ph id="ph3">`putwchar`</ph>)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>fputs, fputws</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Write string to stream</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>System::IO::StreamWriter::Write</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>fread</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Read unformatted data from stream</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Read</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>freopen, _wfreopen<ept id="p1">](../c-runtime-library/reference/freopen-wfreopen.md)</ept>, <bpt id="p2">[</bpt>freopen_s, _wfreopen_s<ept id="p2">](../c-runtime-library/reference/freopen-s-wfreopen-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Reassign <ph id="ph1">`FILE`</ph> stream pointer to new file or device</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>System::IO::File::Open</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fscanf, fwscanf<ept id="p1">](../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept>, <bpt id="p2">[</bpt>fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l<ept id="p2">](../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Read formatted data from stream</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::StreamReader::ReadLine<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)</ept>; see also <ph id="ph1">`Parse`</ph> methods, such as <bpt id="p2">[</bpt>System::Double::Parse<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>fseek, _fseeki64</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Move file position to given location</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::IO::FileStream::Position<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)</ept>, <bpt id="p2">[</bpt>System::IO::FileStream::Seek<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.io.filestream.seek.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>fsetpos</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Set position indicator of stream</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Position</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>_fsopen, _wfsopen</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Open stream with file sharing</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ftell, _ftelli64</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Get current file position</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Position</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>fwrite</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Write unformatted data items to stream</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>System::IO::FileStream::Write</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>getc, getwc</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Read character from stream (macro versions of <ph id="ph1">`fgetc`</ph> and <ph id="ph2">`fgetwc`</ph>)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>System::IO::StreamReader::Read</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>getchar, getwchar</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Read character from <ph id="ph1">`stdin`</ph> (macro versions of <ph id="ph2">`fgetchar`</ph> and <ph id="ph3">`fgetwchar`</ph>)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>System::Console::Read</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>_getmaxstdio</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns the number of simultaneously open files permitted at the stream I/O level.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>gets_s, _getws_s</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Read line from</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System::Console::Read</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>_getw</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Read binary <ph id="ph1">`int`</ph> from stream</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id="p1">](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>,<bpt id="p2">[</bpt>printf_s, _printf_s_l, wprintf_s, _wprintf_s_l<ept id="p2">](../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Write formatted data to</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>putc, putwc</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Write character to a stream (macro versions of <ph id="ph1">`fputc`</ph> and <ph id="ph2">`fputwc`</ph>)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>System::IO::StreamWriter::Write</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>putchar, putwchar</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Write character to <ph id="ph1">`stdout`</ph> (macro versions of <ph id="ph2">`fputchar`</ph> and <ph id="ph3">`fputwchar`</ph>)</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>puts, _putws</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Write line to stream</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>_putw</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Write binary <ph id="ph1">`int`</ph> to stream</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>rewind</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Move file position to beginning of stream</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>_rmtmp</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remove temporary files created by</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id="p1">](../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept>,<bpt id="p2">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id="p2">](../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Read formatted data from</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Console::ReadLine<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.console.readline.aspx)</ept>; see also <ph id="ph1">`Parse`</ph> methods, such as <bpt id="p2">[</bpt>System::Double::Parse<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>setbuf</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Control stream buffering</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>_setmaxstdio</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Set a maximum for the number of simultaneously open files at the stream I/O level.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>setvbuf</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Control stream buffering and buffer size</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_snprintf, _snwprintf<ept id="p1">](../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept>, <bpt id="p2">[</bpt>_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l<ept id="p2">](../c-runtime-library/reference/snprintf-s-snprintf-s-l-snwprintf-s-snwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Write formatted data of specified length to string</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_snscanf, _snwscanf<ept id="p1">](../c-runtime-library/reference/snscanf-snscanf-l-snwscanf-snwscanf-l.md)</ept>, <bpt id="p2">[</bpt>_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l<ept id="p2">](../c-runtime-library/reference/snscanf-s-snscanf-s-l-snwscanf-s-snwscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Read formatted data of a specified length from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sprintf, swprintf<ept id="p1">](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept>, <bpt id="p2">[</bpt>sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l<ept id="p2">](../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Write formatted data to string</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>System::String::Format</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sscanf, swscanf<ept id="p1">](../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept>, <bpt id="p2">[</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id="p2">](../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Read formatted data from string</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`Parse`</ph> methods, such as <bpt id="p1">[</bpt>System::Double::Parse<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>_tempnam, _wtempnam</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Generate temporary filename in given directory</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tmpfile<ept id="p1">](../c-runtime-library/reference/tmpfile.md)</ept>, <bpt id="p2">[</bpt>tmpfile_s<ept id="p2">](../c-runtime-library/reference/tmpfile-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Create temporary file</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tmpnam, _wtmpnam<ept id="p1">](../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept>, <bpt id="p2">[</bpt>tmpnam_s, _wtmpnam_s<ept id="p2">](../c-runtime-library/reference/tmpnam-s-wtmpnam-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Generate temporary filename</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>ungetc, ungetwc</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Push character back onto stream</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_vcprintf, _vcwprintf<ept id="p1">](../c-runtime-library/reference/vcprintf-vcprintf-l-vcwprintf-vcwprintf-l.md)</ept>, <bpt id="p2">[</bpt>_vcprintf_s, _vcprintf_s_l, _vcwprintf_s, _vcwprintf_s_l<ept id="p2">](../c-runtime-library/reference/vcprintf-s-vcprintf-s-l-vcwprintf-s-vcwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Write formatted data to the console.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vfprintf, vfwprintf<ept id="p1">](../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)</ept>, <bpt id="p2">[</bpt>vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l<ept id="p2">](../c-runtime-library/reference/vfprintf-s-vfprintf-s-l-vfwprintf-s-vfwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Write formatted data to stream</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vprintf, vwprintf<ept id="p1">](../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)</ept>, <bpt id="p2">[</bpt>vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l<ept id="p2">](../c-runtime-library/reference/vprintf-s-vprintf-s-l-vwprintf-s-vwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Write formatted data to</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_vsnprintf, _vsnwprintf<ept id="p1">](../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept>, <bpt id="p2">[</bpt>vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l<ept id="p2">](../c-runtime-library/reference/vsnprintf-s-vsnprintf-s-vsnprintf-s-l-vsnwprintf-s-vsnwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Write formatted data of specified length to buffer</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vsprintf, vswprintf<ept id="p1">](../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md)</ept>, <bpt id="p2">[</bpt>vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l<ept id="p2">](../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Write formatted data to buffer</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>System::String::Format</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>When a program begins execution, the startup code automatically opens several streams: standard input (pointed to by <ph id="ph1">`stdin`</ph>), standard output (pointed to by <ph id="ph2">`stdout`</ph>), and standard error (pointed to by <ph id="ph3">`stderr`</ph>).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>These streams are directed to the console (keyboard and screen) by default.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`freopen`</ph> to redirect <ph id="ph2">`stdin`</ph>, <ph id="ph3">`stdout`</ph>, or <ph id="ph4">`stderr`</ph> to a disk file or a device.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Files opened using the stream routines are buffered by default.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`stdout`</ph> and <ph id="ph2">`stderr`</ph> functions are flushed whenever they are full or, if you are writing to a character device, after each library call.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If a program terminates abnormally, output buffers may not be flushed, resulting in loss of data.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`fflush`</ph> or <ph id="ph2">`_flushall`</ph> to ensure that the buffer associated with a specified file or all open buffers are flushed to the operating system, which can cache data before writing it to disk.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The commit-to-disk feature ensures that the flushed buffer contents are not lost in the event of a system failure.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>There are two ways to commit buffer contents to disk:</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Link with the file COMMODE.OBJ to set a global commit flag.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The default setting of the global flag is <ph id="ph1">`n`</ph>, for "no-commit."</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Set the mode flag to <ph id="ph1">`c`</ph> with <ph id="ph2">`fopen`</ph> or <ph id="ph3">`_fdopen`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Any file specifically opened with either the <ph id="ph1">`c`</ph> or the <ph id="ph2">`n`</ph> flag behaves according to the flag, regardless of the state of the global commit/no-commit flag.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If your program does not explicitly close a stream, the stream is automatically closed when the program terminates.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>However, you should close a stream when your program finishes with it, as the number of streams that can be open at one time is limited.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>_setmaxstdio<ept id="p1">](../c-runtime-library/reference/setmaxstdio.md)</ept> for information on this limit.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Input can follow output directly only with an intervening call to <ph id="ph1">`fflush`</ph> or to a file-positioning function (<ph id="ph2">`fseek`</ph>, <ph id="ph3">`fsetpos`</ph>, or <ph id="ph4">`rewind`</ph>).</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Output can follow input without an intervening call to a file-positioning function if the input operation encounters the end of the file.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Input and Output</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Run-Time Routines by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>