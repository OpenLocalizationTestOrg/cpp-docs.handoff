<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14b481d59166a2a06fa791c33cac54a323f95cee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\importing-and-exporting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3738c07204871b4b482c056fec0f7f5b6628abdc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7752c75a8cd259bd1158f80d5f1c9f8a4761f58</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Importing and Exporting | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Importing and Exporting</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can import public symbols into an application or export functions from a DLL using two methods:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use a module definition (.def) file when building the DLL</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the keywords <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> or <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept> in a function definition in the main application</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using a .def file</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A module-definition (.def) file is a text file containing one or more module statements that describe various attributes of a DLL.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you do not use <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> or <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept> to export a DLL's functions, the DLL requires a .def file.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use .def files to <bpt id="p1">[</bpt>import into an application<ept id="p1">](../build/importing-using-def-files.md)</ept> or to <bpt id="p2">[</bpt>export from a DLL<ept id="p2">](../build/exporting-from-a-dll-using-def-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using __declspec</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual C++ uses <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept> to replace the <bpt id="p3">**</bpt>__export<ept id="p3">**</ept> keyword previously used in 16-bit versions of Visual C++.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You do not need to use <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> for your code to compile correctly, but doing so allows the compiler to generate better code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The compiler is able to generate better code because it can determine whether a function exists in a DLL or not, which allows the compiler to produce code that skips a level of indirection that would normally be present in a function call that crossed a DLL boundary.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, you must use <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> to import variables used in a DLL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With the proper .def file EXPORTS section, <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> is not required.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> was added to provide an easy way to export functions from an .exe or .dll file without using a .def file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Win32 Portable Executable format is designed to minimize the number of pages that must be touched to fix imports.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To do this, it places all the import addresses for any program in one place called the Import Address Table.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This allows the loader to modify only one or two pages when accessing these imports.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Import into an Application</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Export from a DLL</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DLLs in Visual C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>