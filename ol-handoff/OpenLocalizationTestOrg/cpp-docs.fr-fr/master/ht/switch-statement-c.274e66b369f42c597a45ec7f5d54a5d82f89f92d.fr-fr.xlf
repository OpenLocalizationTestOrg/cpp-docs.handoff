<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f09d9df797d5e3b32e91438bd8127dd15f64412</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\switch-statement-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce7e17015e4748ed0a890e13626702be9e433b97</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08b3d56f32143012494f815478ac601751236727</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>switch Statement (C) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>switch Statement (C)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> and <bpt id="p1">**</bpt>case<ept id="p1">**</ept> statements help control complex conditional and branching operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> statement transfers control to a statement within its body.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>selection-statement<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>switch (<ept id="p1">**</ept> <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> <bpt id="p4">*</bpt>statement<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>labeled-statement<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>case<ept id="p1">**</ept>  <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept>  <bpt id="p3">**</bpt>:<ept id="p3">**</ept>  <bpt id="p4">*</bpt>statement<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>default :<ept id="p1">**</ept>  <bpt id="p2">*</bpt>statement<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Control passes to the statement whose <bpt id="p1">**</bpt>case<ept id="p1">**</ept> <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept> matches the value of <bpt id="p3">**</bpt>switch (<ept id="p3">**</ept> <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> <bpt id="p5">**</bpt>)<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> statement can include any number of <bpt id="p1">**</bpt>case<ept id="p1">**</ept> instances, but no two case constants within the same <ph id="ph2">`switch`</ph> statement can have the same value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Execution of the statement body begins at the selected statement and proceeds until the end of the body or until a <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement transfers control out of the body.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">`switch`</ph> statement usually looks something like this:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>( <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> )</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>declarations</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>case<ept id="p1">**</ept> <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept> <bpt id="p3">**</bpt>:<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>statements executed if the expression equals the</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>value of this constant-expression</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>break;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>default :</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>statements executed if expression does not equal</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>any case constant-expression</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement to end processing of a particular case within the <ph id="ph1">`switch`</ph> statement and to branch to the end of the <ph id="ph2">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Without <bpt id="p1">**</bpt>break<ept id="p1">**</ept>, the program continues to the next case, executing the statements until a <bpt id="p2">**</bpt>break<ept id="p2">**</ept> or the end of the statement is reached.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In some situations, this continuation may be desirable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>default<ept id="p1">**</ept> statement is executed if no <bpt id="p2">**</bpt>case<ept id="p2">**</ept> <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept> is equal to the value of <bpt id="p4">**</bpt>switch (<ept id="p4">**</ept> <bpt id="p5">*</bpt>expression<ept id="p5">*</ept> <bpt id="p6">**</bpt>)<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>default<ept id="p1">**</ept> statement is omitted, and no <bpt id="p2">**</bpt>case<ept id="p2">**</ept> match is found, none of the statements in the <ph id="ph1">`switch`</ph> body are executed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There can be at most one <bpt id="p1">**</bpt>default<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>default<ept id="p1">**</ept> statement need not come at the end; it can appear anywhere in the body of the <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>case<ept id="p1">**</ept> or <bpt id="p2">**</bpt>default<ept id="p2">**</ept> label can only appear inside a <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`switch`</ph> <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> and <bpt id="p2">**</bpt>case<ept id="p2">**</ept> <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept> must be integral.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value of each <bpt id="p1">**</bpt>case<ept id="p1">**</ept> <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept> must be unique within the statement body.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>case<ept id="p1">**</ept> and <bpt id="p2">**</bpt>default<ept id="p2">**</ept> labels of the <ph id="ph1">`switch`</ph> statement body are significant only in the initial test that determines where execution starts in the statement body.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Switch statements can be nested.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Any static variables are initialized before executing into any <ph id="ph1">`switch`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Declarations can appear at the head of the compound statement forming the <ph id="ph1">`switch`</ph> body, but initializations included in the declarations are not performed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> statement transfers control directly to an executable statement within the body, bypassing the lines that contain initializations.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following examples illustrate <ph id="ph1">`switch`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>All three statements of the <ph id="ph1">`switch`</ph> body in this example are executed if <ph id="ph2">`c`</ph> is equal to <ph id="ph3">`'A'`</ph> since a <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement does not appear before the following case.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Execution control is transferred to the first statement (<ph id="ph1">`capa++;`</ph>) and continues in order through the rest of the body.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`c`</ph> is equal to <ph id="ph2">`'a'`</ph>, <ph id="ph3">`lettera`</ph> and <ph id="ph4">`total`</ph> are incremented.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Only <ph id="ph1">`total`</ph> is incremented if <ph id="ph2">`c`</ph> is not equal to <ph id="ph3">`'A'`</ph> or <ph id="ph4">`'a'`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, a <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement follows each statement of the <ph id="ph1">`switch`</ph> body.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement forces an exit from the statement body after one statement is executed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`i`</ph> is equal to –1, only <ph id="ph2">`n`</ph> is incremented.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>break<ept id="p1">**</ept> following the statement <ph id="ph1">`n++;`</ph> causes execution control to pass out of the statement body, bypassing the remaining statements.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Similarly, if <ph id="ph1">`i`</ph> is equal to 0, only <ph id="ph2">`z`</ph> is incremented; if <ph id="ph3">`i`</ph> is equal to 1, only <ph id="ph4">`p`</ph> is incremented.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The final <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement is not strictly necessary, since control passes out of the body at the end of the compound statement, but it is included for consistency.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A single statement can carry multiple <bpt id="p1">**</bpt>case<ept id="p1">**</ept> labels, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this example, if <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> equals any letter between <ph id="ph1">`'a'`</ph> and <ph id="ph2">`'f'`</ph>, the <ph id="ph3">`hexcvt`</ph> function is called.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Microsoft C does not limit the number of case values in a <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The number is limited only by the available memory.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ANSI C requires at least 257 case labels be allowed in a <ph id="ph1">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default for Microsoft C is that the Microsoft extensions are enabled.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Use the /Za compiler option to disable these extensions.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>switch Statement (C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>