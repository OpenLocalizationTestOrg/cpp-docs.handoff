<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">290a207ac837f37caecb28711a6c55a88f4e253b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\open-wopen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ce32f6804f79321af65859408d10deabf6e4431</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e00cab3475c8bf1305641f5b2365e5ce532e818</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_open, _wopen | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_open, _wopen</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Opens a file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These functions are deprecated because more-secure versions are available; see <bpt id="p1">[</bpt>_sopen_s, _wsopen_s<ept id="p1">](../../c-runtime-library/reference/sopen-s-wsopen-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>File name.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The kind of operations allowed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Permission mode.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a file descriptor for the opened file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A return value of -1 indicates an error; in that case <ph id="ph1">`errno`</ph> is set to one of the following values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Tried to open a read-only file for writing, file's sharing mode does not allow the specified operations, or the given path is a directory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_O_EXCL`</ph> flags specified, but <ph id="ph2">`filename`</ph> already exists.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Invalid <ph id="ph1">`oflag`</ph> or <ph id="ph2">`pmode`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No more file descriptors are available (too many files are open).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>File or path not found.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about these and other return codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_open`</ph> function opens the file specified by <ph id="ph2">`filename`</ph> and prepares it for reading or writing, as specified by <ph id="ph3">`oflag`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_open`</ph>; the <ph id="ph2">`filename`</ph> argument to <ph id="ph3">`_wopen`</ph> is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_open`</ph> behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>is an integer expression formed from one or more of the following manifest constants or constant combinations, which are defined in <ph id="ph1">\&lt;</ph>fcntl.h&gt;.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Moves the file pointer to the end of the file before every write operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Opens the file in binary (untranslated) mode.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>fopen<ept id="p1">](../../c-runtime-library/reference/fopen-wfopen.md)</ept> for a description of binary mode.)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creates a file and opens it for writing.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Has no effect if the file specified by <ph id="ph1">`filename`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pmode`</ph> argument is required when <ph id="ph2">`_O_CREAT`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Creates a file as temporary and if possible does not flush to disk.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pmode`</ph> argument is required when <ph id="ph2">`_O_CREAT`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates a file as temporary; the file is deleted when the last file descriptor is closed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pmode`</ph> argument is required when <ph id="ph2">`_O_CREAT`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns an error value if the file specified by <ph id="ph1">`filename`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Applies only when used with <ph id="ph1">`_O_CREAT`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Prevents creation of a shared file descriptor.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies that caching is optimized for, but not restricted to, random access from disk.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Opens a file for reading only.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Cannot be specified with <ph id="ph1">`_O_RDWR`</ph> or <ph id="ph2">`_O_WRONLY`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Opens file for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Cannot be specified with <ph id="ph1">`_O_RDONLY`</ph> or <ph id="ph2">`_O_WRONLY`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies that caching is optimized for, but not restricted to, sequential access from disk.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Opens a file in text (translated) mode.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Text and Binary Mode File I/O<ept id="p1">](../../c-runtime-library/text-and-binary-mode-file-i-o.md)</ept> and <bpt id="p2">[</bpt>fopen<ept id="p2">](../../c-runtime-library/reference/fopen-wfopen.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Opens a file and truncates it to zero length; the file must have write permission.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Cannot be specified with <ph id="ph1">`_O_RDONLY`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>used with <ph id="ph1">`_O_CREAT`</ph> opens an existing file or creates a file.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_O_TRUNC`</ph> flag destroys the contents of the specified file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Opens the file for writing only.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cannot be specified with <ph id="ph1">`_O_RDONLY`</ph> or <ph id="ph2">`_O_RDWR`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Opens the file in Unicode UTF-16 mode.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Opens the file in Unicode UTF-8 mode.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Opens the file in Unicode mode.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To specify the file access mode, you must specify either <ph id="ph1">`_O_RDONLY`</ph>, <ph id="ph2">`_O_RDWR`</ph>, or <ph id="ph3">`_O_WRONLY`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There is no default value for the access mode.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_O_WTEXT`</ph> is used to open a file for reading, <ph id="ph2">`_open`</ph> reads the beginning of the file and checks for a byte order mark (BOM).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If there is a BOM, the file is treated as UTF-8 or UTF-16LE, depending on the BOM.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If no BOM is present, the file is treated as ANSI.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When a file is opened for writing by using <ph id="ph1">`_O_WTEXT`</ph>, UTF-16 is used.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Regardless of any previous setting or byte order mark, if <ph id="ph1">`_O_U8TEXT`</ph> is used, the file is always opened as UTF-8; if <ph id="ph2">`_O_U16TEXT`</ph> is used, the file is always opened as UTF-16.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When a file is opened in Unicode mode by using <ph id="ph1">`_O_WTEXT`</ph>, <ph id="ph2">`_O_U8TEXT`</ph>, or <ph id="ph3">`_O_U16TEXT`</ph>, input functions translate the data that's read from the file into UTF-16 data stored as type <ph id="ph4">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Functions that write to a file opened in Unicode mode expect buffers that contain UTF-16 data stored as type <ph id="ph1">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the file is encoded as UTF-8, then UTF-16 data is translated into UTF-8 when it is written, and the file's UTF-8-encoded content is translated into UTF-16 when it is read.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An attempt to read or write an odd number of bytes in Unicode mode causes a parameter validation error.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To read or write data that's stored in your program as UTF-8, use a text or binary file mode instead of a Unicode mode.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You are responsible for any required encoding translation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_open`</ph> is called with <ph id="ph2">`_O_WRONLY|_O_APPEND`</ph> (append mode) and <ph id="ph3">`_O_WTEXT`</ph>, <ph id="ph4">`_O_U16TEXT`</ph>, or <ph id="ph5">`_O_U8TEXT`</ph>, it first tries to open the file for reading and writing, read the BOM, then reopen it for writing only.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If opening the file for reading and writing fails, it opens the file for writing only and uses the default value for the Unicode mode setting.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When two or more manifest constants are used to form the <ph id="ph1">`oflag`</ph> argument, the constants are combined with the bitwise-OR operator ( <ph id="ph2">`|`</ph> ).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For a discussion of binary and text modes, see <bpt id="p1">[</bpt>Text and Binary Mode File I/O<ept id="p1">](../../c-runtime-library/text-and-binary-mode-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pmode`</ph> argument is required only when <ph id="ph2">`_O_CREAT`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the file already exists, <ph id="ph1">`pmode`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`pmode`</ph> specifies the file permission settings, which are set when the new file is closed the first time.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>applies the current file-permission mask to <ph id="ph1">`pmode`</ph> before the permissions are set.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>_umask<ept id="p1">](../../c-runtime-library/reference/umask.md)</ept>.) <ph id="ph1">`pmode`</ph> is an integer expression that contains one or both of the following manifest constants, which are defined in <ph id="ph2">\&lt;</ph>sys\stat.h&gt;.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Only reading permitted.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Writing permitted.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(In effect, permits reading and writing.)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Reading and writing permitted.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When both constants are given, they are joined with the bitwise-OR operator ( <ph id="ph1">`|`</ph> ).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In Windows, all files are readable; write-only permission is not available.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Therefore, the modes <ph id="ph1">`_S_IWRITE`</ph> and <ph id="ph2">`_S_IREAD`</ph> <ph id="ph3">`|`</ph> <ph id="ph4">`_S_IWRITE`</ph> are equivalent.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If a value other than some combination of <ph id="ph1">`_S_IREAD`</ph> and <ph id="ph2">`_S_IWRITE`</ph> is specified for <ph id="ph3">`pmode`</ph>—even if it would specify a valid <ph id="ph4">`pmode`</ph> in another operating system—or if any value other than the allowed <ph id="ph5">`oflag`</ph> values is specified, the function generates an assertion in Debug mode and invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns -1 and sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Optional header</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>io.h&gt;</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>fcntl.h&gt;, <ph id="ph1">\&lt;</ph>sys\types.h&gt;, <ph id="ph2">\&lt;</ph>sys\stat.h&gt;</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>io.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>fcntl.h&gt;, <ph id="ph1">\&lt;</ph>sys\types.h&gt;, <ph id="ph2">\&lt;</ph>sys\stat.h&gt;</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_wopen`</ph> are Microsoft extensions.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System::IO::File::Open</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Low-Level I/O</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>_chmod, _wchmod</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>_close</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>_creat, _wcreat</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>_dup, _dup2</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>fopen, _wfopen</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>_sopen, _wsopen</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>