<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">336f1f1644f79913d8c9593c3ff1b28053188a79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\netmodule-files-as-linker-input.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d19ad3d5b0ad91befe98a91553d14f8c429b1e14</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dece466206f0b7bbf292065bfd0290346706ea14</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.netmodule Files as Linker Input | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.netmodule Files as Linker Input</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>link.exe now accepts MSIL .obj and .netmodules as input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The output file produced by the linker will be an assembly or a .netmodule with no run-time dependency on any of the .obj or .netmodules that were input to the linker.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.netmodules are created by the Visual C++ compiler with <bpt id="p1">[</bpt>/LN (Create MSIL Module)<ept id="p1">](../../build/reference/ln-create-msil-module.md)</ept> or by the linker with <bpt id="p2">[</bpt>/NOASSEMBLY (Create a MSIL Module)<ept id="p2">](../../build/reference/noassembly-create-a-msil-module.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.objs are always created in a Visual C++ compilation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For other Visual Studio compilers, use the <bpt id="p1">**</bpt>/target:module<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In most cases, you will need to pass to the linker the .obj file from the Visual C++ compilation that created the .netmodule, unless the .netmodule was created with <bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>MSIL .netmodules used as input to the linker must be pure MSIL, which can be produced by the Visual C++ compiler using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Other Visual Studio compilers produce pure MSIL modules by default.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For information on how to invoke the linker from the command line, see <bpt id="p1">[</bpt>Linker Command-Line Syntax<ept id="p1">](../../build/reference/linker-command-line-syntax.md)</ept> and <bpt id="p2">[</bpt>Setting the Path and Environment Variables for Command-Line Builds<ept id="p2">](../../build/setting-the-path-and-environment-variables-for-command-line-builds.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Passing a .netmodule or .dll file to the linker that was compiled by the Visual C++ compiler with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> or with <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept> can result in a linker error.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Choosing the Format of .netmodule Input Files<ept id="p1">](../../build/reference/choosing-the-format-of-netmodule-input-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The linker accepts native .obj files as well as MSIL .obj files compiled with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>/clr:safe<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When passing mixed .objs in the same build, the verifiability of the resulting output file will, by default, be equal to the lowest level of verifiability of the input modules.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, if you pass a safe and pure .obj to the linker, the output file will be pure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/CLRIMAGETYPE (Specify Type of CLR Image)<ept id="p1">](../../build/reference/clrimagetype-specify-type-of-clr-image.md)</ept> lets you specify a lower level of verifiability, if that is what you need.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you currently have an application that is composed of two or more assemblies and you want the application to be contained in one assembly, you must recompile the assemblies and then link the .objs or .netmodules to produce a single assembly.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must specify an entry point using <bpt id="p1">[</bpt>/ENTRY (Entry-Point Symbol)<ept id="p1">](../../build/reference/entry-entry-point-symbol.md)</ept> when creating an executable image.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When linking with an MSIL .obj or .netmodule file, use <bpt id="p1">[</bpt>/LTCG (Link-time Code Generation)<ept id="p1">](../../build/reference/ltcg-link-time-code-generation.md)</ept>, otherwise when the linker encounters the MSIL .obj or .netmodule, it will restart the link with /LTCG.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>MSIL .obj or .netmodule files can also be passed to cl.exe.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Input MSIL .obj or .netmodule files cannot have embedded resources.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A resource is embedded in an output file (module or assembly) with <bpt id="p1">[</bpt>/ASSEMBLYRESOURCE (Embed a Managed Resource)<ept id="p1">](../../build/reference/assemblyresource-embed-a-managed-resource.md)</ept> linker option or with the <bpt id="p2">**</bpt>/resource<ept id="p2">**</ept> compiler option in other Visual Studio compilers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When performing MSIL linking, and if you do not also specify <bpt id="p1">[</bpt>/LTCG (Link-time Code Generation)<ept id="p1">](../../build/reference/ltcg-link-time-code-generation.md)</ept>, you will see an informational message reporting that the link is restarting.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This message can be ignored, but to improve linker performance with MSIL linking, explicitly specify <bpt id="p1">**</bpt>/LTCG<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In C++ code the catch block of a corresponding try will be invoked for a non System exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, by default, the CLR wraps non System exceptions with &lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When an assembly is created from Visual C++ and non Visual C++ modules and you want a catch block in C++ code to be invoked from its corresponding try clause when the try block throws a non System exception, you must add the</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>[assembly:System::Runtime::CompilerServices::RuntimeCompatibility(WrapNonExceptionThrows=false)] attribute to the source code for the non C++ modules.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By changing the Boolean value of the WrapNonExceptionThrows attribute, you modify the ability of the Visual C++ code to catch a non System exception.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>LINK Input Files</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Linker Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>