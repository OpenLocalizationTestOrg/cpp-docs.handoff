<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2d61e41e70fe4822ebf081a8f52d33ff885abc3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\handlers-for-standard-windows-messages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a36467e2743ed382feaf164008efa12f12875a9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7938ba7bcd9b5f5a0b10fc38cadab152045a1f30</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Handlers for Standard Windows Messages | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Handlers for Standard Windows Messages</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Default handlers for standard Windows messages (<bpt id="p1">**</bpt>WM_<ept id="p1">**</ept>) are predefined in class <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The class library bases names for these handlers on the message name.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, the handler for the <ph id="ph1">`WM_PAINT`</ph> message is declared in <ph id="ph2">`CWnd`</ph> as:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> keyword suggests the effect of the C++ <bpt id="p2">**</bpt>virtual<ept id="p2">**</ept> keyword by distinguishing the handlers from other <ph id="ph1">`CWnd`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Note, however, that these functions are not actually virtual; they are instead implemented through message maps.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Message maps depend solely on standard preprocessor macros, not on any extensions to the C++ language.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> keyword resolves to white space after preprocessing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To override a handler defined in a base class, simply define a function with the same prototype in your derived class and to make a message-map entry for the handler.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Your handler "overrides" any handler of the same name in any of your class's base classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In some cases, your handler should call the overridden handler in the base class so the base class(es) and Windows can operate on the message.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Where you call the base-class handler in your override depends on the circumstances.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Sometimes you must call the base-class handler first and sometimes last.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Sometimes you call the base-class handler conditionally, if you choose not to handle the message yourself.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Sometimes you should call the base-class handler, then conditionally execute your own handler code, depending on the value or state returned by the base-class handler.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is not safe to modify the arguments passed into a handler if you intend to pass them to a base-class handler.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, you might be tempted to modify the <ph id="ph1">`nChar`</ph> argument of the <ph id="ph2">`OnChar`</ph> handler (to convert to uppercase, for example).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This behavior is fairly obscure, but if you need to accomplish this effect, use the <ph id="ph1">`CWnd`</ph> member function <bpt id="p1">**</bpt>SendMessage<ept id="p1">**</ept> instead.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>How do you determine the proper way to override a given message When the Properties window writes the skeleton of the handler function for a given message — an <ph id="ph1">`OnCreate`</ph> handler for <ph id="ph2">`WM_CREATE`</ph>, for example — it sketches in the form of the recommended overridden member function.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example recommends that the handler first call the base-class handler and proceed only on condition that it does not return –1.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#3</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By convention, the names of these handlers begin with the prefix "On."</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some of these handlers take no arguments, while others take several.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Some also have a return type other than <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default handlers for all <bpt id="p1">**</bpt>WM_<ept id="p1">**</ept> messages are documented in the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept> as member functions of class <ph id="ph1">`CWnd`</ph> whose names begin with "On."</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The member function declarations in <ph id="ph1">`CWnd`</ph> are prefixed with <bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Declaring Message Handler Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>