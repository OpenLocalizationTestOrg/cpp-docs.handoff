<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">652c136bd3f0398263a8f473ab648211ee814089</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\string-manipulation-crt.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7463fe6c19d197094628b355a03603bc49add24d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8090a0deab323121535cc980a8eb0d6bdbc01780</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Manipulation (CRT) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Manipulation (CRT)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These routines operate on null-terminated single-byte character, wide-character, and multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use the buffer-manipulation routines, described in <bpt id="p1">[</bpt>Buffer Manipulation<ept id="p1">](../c-runtime-library/buffer-manipulation.md)</ept>, to work with character arrays that do not end with a null character.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>String-Manipulation Routines</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Framework equivalent</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id="p1">](../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>, <bpt id="p2">[</bpt>_stricoll, _wcsicoll, _mbsicoll, _stricoll_l, _wcsicoll_l, _mbsicoll_l<ept id="p2">](../c-runtime-library/reference/stricoll-wcsicoll-mbsicoll-stricoll-l-wcsicoll-l-mbsicoll-l.md)</ept>, <bpt id="p3">[</bpt>_strncoll, _wcsncoll, _mbsncoll, _strncoll_l, _wcsncoll_l, _mbsncoll_l<ept id="p3">](../c-runtime-library/reference/strncoll-wcsncoll-mbsncoll-strncoll-l-wcsncoll-l-mbsncoll-l.md)</ept>, <bpt id="p4">[</bpt>_strnicoll, _wcsnicoll, _mbsnicoll, _strnicoll_l, _wcsnicoll_l, _mbsnicoll_l<ept id="p4">](../c-runtime-library/reference/strnicoll-wcsnicoll-mbsnicoll-strnicoll-l-wcsnicoll-l-mbsnicoll-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compare two character strings using code page information (<ph id="ph1">`_mbsicoll`</ph> and <ph id="ph2">`_mbsnicoll`</ph> are case-insensitive)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>_strdec, _wcsdec, _mbsdec, _mbsdec_l</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Move string pointer back one character</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>_strinc, _wcsinc, _mbsinc, _mbsinc_l</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Advance string pointer by one character</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_mbsnbcat, _mbsnbcat_l<ept id="p1">](../c-runtime-library/reference/mbsnbcat-mbsnbcat-l.md)</ept>, <bpt id="p2">[</bpt>_mbsnbcat_s, _mbsnbcat_s_l<ept id="p2">](../c-runtime-library/reference/mbsnbcat-s-mbsnbcat-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Append, at most, first <ph id="ph1">`n`</ph> bytes of one character string to another</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>_mbsnbcmp, _mbsnbcmp_l</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compare first <ph id="ph1">`n`</ph> bytes of two character strings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_strncnt, _wcsncnt, _mbsnbcnt, _mbsnbcnt_l, _mbsnccnt, _mbsnccnt_l</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Return number of character bytes within supplied character count</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_mbsnbcpy, _mbsnbcpy_l<ept id="p1">](../c-runtime-library/reference/mbsnbcpy-mbsnbcpy-l.md)</ept>, <bpt id="p2">[</bpt>_mbsnbcpy_s, _mbsnbcpy_s_l<ept id="p2">](../c-runtime-library/reference/mbsnbcpy-s-mbsnbcpy-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Copy <ph id="ph1">`n`</ph> bytes of string</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>_mbsnbicmp, _mbsnbicmp_l</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compare <ph id="ph1">`n`</ph> bytes of two character strings, ignoring case</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>_mbsnbset, _mbsnbset_l</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Set first <ph id="ph1">`n`</ph> bytes of character string to specified character</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>_strncnt, _wcsncnt, _mbsnbcnt, _mbsnbcnt_l, _mbsnccnt, _mbsnccnt_l</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Return number of characters within supplied byte count</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>_strnextc, _wcsnextc, _mbsnextc, _mbsnextc_l</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Find next character in string</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>_strninc, _wcsninc, _mbsninc, _mbsninc_l</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Advance string pointer by <ph id="ph1">`n`</ph> characters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>_strspnp, _wcsspnp, _mbsspnp, _mbsspnp_l</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Return pointer to first character in given string that is not in another given string</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>_scprintf, _scprintf_l, _scwprintf, _scwprintf_l</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Return the number of characters in a formatted string</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_snscanf, _snscanf_l, _snwscanf, _snwscanf_l<ept id="p1">](../c-runtime-library/reference/snscanf-snscanf-l-snwscanf-snwscanf-l.md)</ept>, <bpt id="p2">[</bpt>_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l<ept id="p2">](../c-runtime-library/reference/snscanf-s-snscanf-s-l-snwscanf-s-snwscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Read formatted data of a specified length from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id="p1">](../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept>, <bpt id="p2">[</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id="p2">](../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Read formatted data of a specified length from the standard input stream.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id="ph1">\_</ph>_swprintf_l<ept id="p1">](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept>, <bpt id="p2">[</bpt>sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l<ept id="p2">](../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)</ept>, <bpt id="p3">[</bpt>_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l<ept id="p3">](../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Write formatted data to a string</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>System::String::Format</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strcat, wcscat, _mbscat<ept id="p1">](../c-runtime-library/reference/strcat-wcscat-mbscat.md)</ept>, <bpt id="p2">[</bpt>strcat_s, wcscat_s, _mbscat_s<ept id="p2">](../c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Append one string to another</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>System::String::Concat</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>strchr, wcschr, _mbschr, _mbschr_l</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Find first occurrence of specified character in string</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>System::String::IndexOf</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>strcmp, wcscmp, _mbscmp</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Compare two strings</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>System::String::CompareOrdinal</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id="p1">](../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>, <bpt id="p2">[</bpt>_stricoll, _wcsicoll, _mbsicoll, _stricoll_l, _wcsicoll_l, _mbsicoll_l<ept id="p2">](../c-runtime-library/reference/stricoll-wcsicoll-mbsicoll-stricoll-l-wcsicoll-l-mbsicoll-l.md)</ept>, <bpt id="p3">[</bpt>_strncoll, _wcsncoll, _mbsncoll, _strncoll_l, _wcsncoll_l, _mbsncoll_l<ept id="p3">](../c-runtime-library/reference/strncoll-wcsncoll-mbsncoll-strncoll-l-wcsncoll-l-mbsncoll-l.md)</ept>, <bpt id="p4">[</bpt>_strnicoll, _wcsnicoll, _mbsnicoll, _strnicoll_l, _wcsnicoll_l, _mbsnicoll_l<ept id="p4">](../c-runtime-library/reference/strnicoll-wcsnicoll-mbsnicoll-strnicoll-l-wcsnicoll-l-mbsnicoll-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compare two strings using current locale code page information (<ph id="ph1">`_stricoll`</ph>, <ph id="ph2">`_wcsicoll`</ph>, <ph id="ph3">`_strnicoll`</ph>, and <ph id="ph4">`_wcsnicoll`</ph> are case-insensitive)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strcpy, wcscpy, _mbscpy<ept id="p1">](../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)</ept>, <bpt id="p2">[</bpt>strcpy_s, wcscpy_s, _mbscpy_s<ept id="p2">](../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Copy one string to another</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>System::String::Copy</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>strcspn, wcscspn, _mbscspn, _mbscspn_l</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Find first occurrence of character from specified character set in string</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System::String::IndexOfAny</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_strdup, _wcsdup, _mbsdup<ept id="p1">](../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)</ept>, <bpt id="p2">[</bpt>_strdup_dbg, _wcsdup_dbg<ept id="p2">](../c-runtime-library/reference/strdup-dbg-wcsdup-dbg.md)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Duplicate string</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System::String::Clone</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strerror, _strerror, _wcserror, <ph id="ph1">\_</ph>_wcserror<ept id="p1">](../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md)</ept>, <bpt id="p2">[</bpt>strerror_s, _strerror_s, _wcserror_s, <ph id="ph2">\_</ph>_wcserror_s<ept id="p2">](../c-runtime-library/reference/strerror-s-strerror-s-wcserror-s-wcserror-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Map error number to message string</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>System::Exception::Message</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>strftime, wcsftime, _strftime_l, _wcsftime_l</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Format date-and-time string</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Compare two strings without regard to case</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strlen, wcslen, _mbslen, _mbslen_l, _mbstrlen, _mbstrlen_l<ept id="p1">](../c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l.md)</ept>, <bpt id="p2">[</bpt>strnlen, strnlen_s, wcsnlen, wcsnlen_s, _mbsnlen, _mbsnlen_l, _mbstrnlen, _mbstrnlen_l<ept id="p2">](../c-runtime-library/reference/strnlen-strnlen-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Find length of string</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>System::String::Length</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l<ept id="p1">](../c-runtime-library/reference/strlwr-wcslwr-mbslwr-strlwr-l-wcslwr-l-mbslwr-l.md)</ept>, <bpt id="p2">[</bpt>_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l<ept id="p2">](../c-runtime-library/reference/strlwr-s-strlwr-s-l-mbslwr-s-mbslwr-s-l-wcslwr-s-wcslwr-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Convert string to lowercase</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>System::String::ToLower</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l<ept id="p1">](../c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l.md)</ept>, <bpt id="p2">[</bpt>strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l<ept id="p2">](../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Append characters of string</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>System::String::Concat</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>strncmp, wcsncmp, _mbsncmp, _mbsncmp_l</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Compare characters of two strings</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l<ept id="p1">](../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)</ept>, <bpt id="p2">[</bpt>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l<ept id="p2">](../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Copy characters of one string to another</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>System::String::Copy</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Compare characters of two strings without regard to case</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>_strnset, _strnset_l, _wcsnset, _wcsnset_l, _mbsnset, _mbsnset_l</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Set first <ph id="ph1">`n`</ph> characters of string to specified character</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>System::String::Replace</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>strpbrk, wcspbrk, _mbspbrk, _mbspbrk_l</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Find first occurrence of character from one string in another string</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>System::String::IndexOfAny</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>strrchr, wcsrchr, _mbsrchr, _mbsrchr_l</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Find last occurrence of given character in string</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>System::String::LastIndexOf</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>_strrev, _wcsrev, _mbsrev, _mbsrev_l</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Reverse string</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Set all characters of string to specified character</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>strspn, wcsspn, _mbsspn, _mbsspn_l</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Find first occurrence in a string of a character not found in another string</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>strstr, wcsstr, _mbsstr, _mbsstr_l</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Find first occurrence of specified string in another string</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>System::String::IndexOf</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>strtok, _strtok_l, wcstok, _wcstok_l, _mbstok, _mbstok_l<ept id="p1">](../c-runtime-library/reference/strtok-strtok-l-wcstok-wcstok-l-mbstok-mbstok-l.md)</ept>, <bpt id="p2">[</bpt>strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l<ept id="p2">](../c-runtime-library/reference/strtok-s-strtok-s-l-wcstok-s-wcstok-s-l-mbstok-s-mbstok-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Find next token in string</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_strupr, _strupr_l, _mbsupr, _mbsupr_l, _wcsupr_l, _wcsupr<ept id="p1">](../c-runtime-library/reference/strupr-strupr-l-mbsupr-mbsupr-l-wcsupr-l-wcsupr.md)</ept>, <bpt id="p2">[</bpt>_strupr_s, _strupr_s_l, _mbsupr_s, _mbsupr_s_l, _wcsupr_s, _wcsupr_s_l<ept id="p2">](../c-runtime-library/reference/strupr-s-strupr-s-l-mbsupr-s-mbsupr-s-l-wcsupr-s-wcsupr-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Convert string to uppercase</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>System::String::ToUpper</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Transform string into collated form based on locale-specific information</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, <ph id="ph1">\_</ph>_vswprintf_l<ept id="p1">](../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md)</ept>, <bpt id="p2">[</bpt>vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l<ept id="p2">](../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)</ept>, <bpt id="p3">[</bpt>_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l<ept id="p3">](../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Write formatted output using a pointer to a list of arguments</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>System::String::Format</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vsnprintf, _vsnprintf, _vsnprintf_l, _vsnwprintf, _vsnwprintf_l<ept id="p1">](../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept>, <bpt id="p2">[</bpt>vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l<ept id="p2">](../c-runtime-library/reference/vsnprintf-s-vsnprintf-s-vsnprintf-s-l-vsnwprintf-s-vsnwprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Write formatted output using a pointer to a list of arguments</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>System::String::Format</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Run-Time Routines by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>