<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbc83d4acb6d33fd4fc501971347b6fe11c91da3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmultilock-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba8fd5cfceda99e1763beb97e143a02eccca67dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfbc2dbefc83c287dbc88d657280a50e4ffdc2c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMultiLock Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMultiLock Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents the access-control mechanism used in controlling access to resources in a multithreaded program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMultiLock::CMultiLock</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMultiLock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMultiLock::IsLocked</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines if a specific synchronization object in the array is locked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMultiLock::Lock</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Waits on the array of synchronization objects.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CMultiLock::Unlock</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases any owned synchronization objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>does not have a base class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To use the synchronization classes <bpt id="p1">[</bpt>CSemaphore<ept id="p1">](../../mfc/reference/csemaphore-class.md)</ept>, <bpt id="p2">[</bpt>CMutex<ept id="p2">](../../mfc/reference/cmutex-class.md)</ept>, and <bpt id="p3">[</bpt>CEvent<ept id="p3">](../../mfc/reference/cevent-class.md)</ept>, you can create either a <bpt id="p4">**</bpt>CMultiLock<ept id="p4">**</ept> or <bpt id="p5">[</bpt>CSingleLock<ept id="p5">](../../mfc/reference/csinglelock-class.md)</ept> object to wait on and release the synchronization object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> when there are multiple objects that you could use at a particular time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CSingleLock`</ph> when you only need to wait on one object at a time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To use a <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> object, first create an array of the synchronization objects that you wish to wait on.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Next, call the <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> object's constructor inside a member function in the controlled resource's class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Then call the <bpt id="p1">[</bpt>Lock<ept id="p1">](#cmultilock__lock)</ept> member function to determine if a resource is available (signaled).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If one is, continue with the remainder of the member function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If no resource is available, either wait for a specified amount of time for a resource to be released, or return failure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After use of a resource is complete, either call the <bpt id="p1">[</bpt>Unlock<ept id="p1">](#cmultilock__unlock)</ept> function if the <bpt id="p2">**</bpt>CMultiLock<ept id="p2">**</ept> object is to be used again, or allow the <bpt id="p3">**</bpt>CMultiLock<ept id="p3">**</ept> object to be destroyed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> objects are most useful when a thread has a large number of <ph id="ph1">`CEvent`</ph> objects it can respond to.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create an array containing all the <ph id="ph1">`CEvent`</ph> pointers, and call <ph id="ph2">`Lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This will cause the thread to wait until one of the events is signaled.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information on how to use <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> objects, see the article <bpt id="p2">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p2">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxmt.h</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CMultiLock::CMultiLock</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Array of pointers to the synchronization objects to be waited on.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Number of objects in <ph id="ph1">`ppObjects`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Must be greater than 0.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies whether to initially attempt to access any of the supplied objects.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This function is called after creating the array of synchronization objects to be waited on.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It is usually called from within the thread that must wait for one of the synchronization objects to become available.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CMultiLock::IsLocked</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Determines if the specified object is nonsignaled (unavailable).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>dwItem</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The index in the array of objects corresponding to the object whose state is being queried.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified object is locked; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CMultiLock::Lock</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Call this function to gain access to one or more of the resources controlled by the synchronization objects supplied to the <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>dwTimeOut</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specifies the amount of time to wait for the synchronization object to be available (signaled).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>INFINITE<ept id="p1">**</ept>, <ph id="ph1">`Lock`</ph> will wait until the object is signaled before returning.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies whether all objects waited on must become signaled at the same time before returning.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph1">`Lock`</ph> will return when any one of the objects waited on is signaled.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies other conditions that are allowed to abort the wait.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For a full list of the available options for this parameter, see <bpt id="p1">[</bpt>MsgWaitForMultipleObjects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684242)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Lock`</ph> fails, it returns – 1.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If successful, it returns one of the following values:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Between <bpt id="p1">**</bpt>WAIT_OBJECT_0<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WAIT_OBJECT_0<ept id="p2">**</ept> + (number of objects – 1)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, all objects are signaled (available).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the return value – <bpt id="p2">**</bpt>WAIT_OBJECT_0<ept id="p2">**</ept> is the index in the array of objects of the object that is signaled (available).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WAIT_OBJECT_0<ept id="p1">**</ept> + (number of objects)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An event specified in <ph id="ph1">`dwWakeMask`</ph> is available in the thread's input queue.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Between <bpt id="p1">**</bpt>WAIT_ABANDONED_0<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WAIT_ABANDONED_0<ept id="p2">**</ept> + (number of objects – 1)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, all objects are signaled, and at least one of the objects is an abandoned mutex object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the return value – <bpt id="p2">**</bpt>WAIT_ABANDONED_0<ept id="p2">**</ept> is the index in the array of objects of the abandoned mutex object that satisfied the wait.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>WAIT_TIMEOUT</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The timeout interval specified in <bpt id="p1">*</bpt>dwTimeOut<ept id="p1">*</ept> expired without the wait succeeding.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph2">`Lock`</ph> will return successfully as soon as all the synchronization objects become signaled simultaneously.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bWaitForAll`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph2">`Lock`</ph> will return as soon as one or more of the synchronization objects becomes signaled.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Lock`</ph> is not able to return immediately, it will wait for no more than the number of milliseconds specified in the <bpt id="p1">*</bpt>dwTimeOut<ept id="p1">*</ept> parameter before returning.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>dwTimeOut<ept id="p1">*</ept> is <bpt id="p2">**</bpt>INFINITE<ept id="p2">**</ept>, <ph id="ph1">`Lock`</ph> will not return until access to an object is gained or a condition specified in <ph id="ph2">`dwWakeMask`</ph> was met.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Lock`</ph> was able to acquire a synchronization object, it will return successfully; if not, it will return failure.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CMultiLock::Unlock</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Releases the synchronization object owned by <ph id="ph1">`CMultiLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Number of reference counts to release.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Must be greater than 0.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If the specified amount would cause the object's count to exceed its maximum, the count is not changed and the function returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Points to a variable to receive the previous count for the synchronization object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the previous count is not returned.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Nonzero if the function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This function is called by <ph id="ph1">`CMultiLock`</ph>'s destructor.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The first form of <ph id="ph1">`Unlock`</ph> tries to unlock the synchronization object managed by <ph id="ph2">`CMultiLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The second form of <ph id="ph1">`Unlock`</ph> tries to unlock the <ph id="ph2">`CSemaphore`</ph> objects owned by <ph id="ph3">`CMultiLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CMultiLock`</ph> does not own any locked <ph id="ph2">`CSemaphore`</ph> object, the function returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>; otherwise, it returns <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`lpPrevCount`</ph> are exactly the same as the parameters of <bpt id="p1">[</bpt>CSingleLock::Unlock<ept id="p1">](../../mfc/reference/csinglelock-class.md#csinglelock__unlock)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The second form of <ph id="ph1">`Unlock`</ph> is rarely applicable to multilock situations.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>