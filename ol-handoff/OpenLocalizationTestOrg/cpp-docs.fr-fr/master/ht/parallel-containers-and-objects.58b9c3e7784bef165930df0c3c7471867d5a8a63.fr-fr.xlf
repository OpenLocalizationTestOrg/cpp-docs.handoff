<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a173c1bfce2247a31d40732dd824369e47aaec0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\parallel-containers-and-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92e362f4ed7d36b0c83d8c974ff1ccb3cf476bae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1042999e52e31f97c6335b3e92792fd8371419c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parallel Containers and Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parallel Containers and Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Parallel Patterns Library (PPL) includes several containers and objects that provide thread-safe access to their elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>concurrent container<ept id="p1">*</ept> provides concurrency-safe access to the most important operations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The functionality of these containers resembles those that are provided by the Standard Template Library (STL).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>concurrency::concurrent_vector<ept id="p1">](../../parallel/concrt/reference/concurrent-vector-class.md)</ept> class resembles the <bpt id="p2">[</bpt>std::vector<ept id="p2">](../../standard-library/vector-class.md)</ept> class, except that the <ph id="ph1">`concurrent_vector`</ph> class lets you append elements in parallel.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use concurrent containers when you have parallel code that requires both read and write access to the same container.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>concurrent object<ept id="p1">*</ept> is shared concurrently among components.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A process that computes the state of a concurrent object in parallel produces the same result as another process that computes the same state serially.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::combinable<ept id="p1">](../../parallel/concrt/reference/combinable-class.md)</ept> class is one example of a concurrent object type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable`</ph> class lets you perform computations in parallel, and then combine those computations into a final result.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use concurrent objects when you would otherwise use a synchronization mechanism, for example, a mutex, to synchronize access to a shared variable or resource.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This topic describes the following parallel containers and objects in detail.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Concurrent containers:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>concurrent_vector Class</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_vector and vector</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Exception Safety</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>concurrent_queue Class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_queue and queue</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Iterator Support</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_map Class</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_unordered_map and unordered_map</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multimap Class</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_set Class</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multiset Class</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Concurrent objects:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>combinable Class</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>concurrent_vector Class</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::concurrent_vector<ept id="p1">](../../parallel/concrt/reference/concurrent-vector-class.md)</ept> class is a sequence container class that, just like the <bpt id="p2">[</bpt>std::vector<ept id="p2">](../../standard-library/vector-class.md)</ept> class, lets you randomly access its elements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class enables concurrency-safe append and element access operations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Append operations do not invalidate existing pointers or iterators.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Iterator access and traversal operations are also concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_vector and vector</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class closely resembles the <ph id="ph2">`vector`</ph> class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The complexity of append, element access, and iterator access operations on a <ph id="ph1">`concurrent_vector`</ph> object are the same as for a <ph id="ph2">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following points illustrate where <ph id="ph1">`concurrent_vector`</ph> differs from <ph id="ph2">`vector`</ph>:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Append, element access, iterator access, and iterator traversal operations on a <ph id="ph1">`concurrent_vector`</ph> object are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can add elements only to the end of a <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class does not provide the <ph id="ph2">`insert`</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`concurrent_vector`</ph> object does not use <bpt id="p1">[</bpt>move semantics<ept id="p1">](../../cpp/rvalue-reference-declarator-amp-amp.md)</ept> when you append to it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class does not provide the <ph id="ph2">`erase`</ph> or <ph id="ph3">`pop_back`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">`vector`</ph>, use the <bpt id="p1">[</bpt>clear<ept id="p1">](reference/concurrent-vector-class.md#clear)</ept> method to remove all elements from a <ph id="ph2">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class does not store its elements contiguously in memory.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot use the <ph id="ph1">`concurrent_vector`</ph> class in all the ways that you can use an array.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, for a variable named <ph id="ph1">`v`</ph> of type <ph id="ph2">`concurrent_vector`</ph>, the expression <ph id="ph3">`&amp;v[0]+2`</ph> produces undefined behavior.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class defines the <bpt id="p1">[</bpt>grow_by<ept id="p1">](reference/concurrent-vector-class.md#grow_by)</ept> and <bpt id="p2">[</bpt>grow_to_at_least<ept id="p2">](reference/concurrent-vector-class.md#grow_to_at_least)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These methods resemble the <bpt id="p1">[</bpt>resize<ept id="p1">](reference/concurrent-vector-class.md#resize)</ept> method, except that they are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`concurrent_vector`</ph> object does not relocate its elements when you append to it or resize it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This enables existing pointers and iterators to remain valid during concurrent operations.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The runtime does not define a specialized version of <ph id="ph1">`concurrent_vector`</ph> for type <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All methods that append to or increase the size of a <ph id="ph1">`concurrent_vector`</ph> object, or access an element in a <ph id="ph2">`concurrent_vector`</ph> object, are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The exception to this rule is the <ph id="ph1">`resize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following table shows the common <ph id="ph1">`concurrent_vector`</ph> methods and operators that are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>at<ept id="p1">](reference/concurrent-vector-class.md#at)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>end<ept id="p2">](reference/concurrent-vector-class.md#end)</ept><ph id="ph2">|</ph><bpt id="p3">[</bpt>operator&amp;#91;&amp;#93;<ept id="p3">](reference/concurrent-vector-class.md#operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>begin<ept id="p1">](reference/concurrent-vector-class.md#begin)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>front<ept id="p2">](reference/concurrent-vector-class.md#front)</ept><ph id="ph2">|</ph><bpt id="p3">[</bpt>push_back<ept id="p3">](reference/concurrent-vector-class.md#push_back)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>back<ept id="p1">](reference/concurrent-vector-class.md#back)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>grow_by<ept id="p2">](reference/concurrent-vector-class.md#grow_by)</ept><ph id="ph2">|</ph><bpt id="p3">[</bpt>rbegin<ept id="p3">](reference/concurrent-vector-class.md#rbegin)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>capacity<ept id="p1">](reference/concurrent-vector-class.md#capacity)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>grow_to_at_least<ept id="p2">](reference/concurrent-vector-class.md#grow_to_at_least)</ept><ph id="ph2">|</ph><bpt id="p3">[</bpt>rend<ept id="p3">](reference/concurrent-vector-class.md#rend)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>empty<ept id="p1">](reference/concurrent-vector-class.md#empty)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>max_size<ept id="p2">](reference/concurrent-vector-class.md#max_size)</ept><ph id="ph2">|</ph><bpt id="p3">[</bpt>size<ept id="p3">](reference/concurrent-vector-class.md#size)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Operations that the runtime provides for compatibility with the STL, for example, <ph id="ph1">`reserve`</ph>, are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following table shows the common methods and operators that are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assign<ept id="p1">](reference/concurrent-vector-class.md#assign)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>reserve<ept id="p2">](reference/concurrent-vector-class.md#reserve)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>clear<ept id="p1">](reference/concurrent-vector-class.md#clear)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>resize<ept id="p2">](reference/concurrent-vector-class.md#resize)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](reference/concurrent-vector-class.md#operator_eq)</ept><ph id="ph1">|</ph><bpt id="p2">[</bpt>shrink_to_fit<ept id="p2">](reference/concurrent-vector-class.md#shrink_to_fit)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Operations that modify the value of existing elements are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use a synchronization object such as a <bpt id="p1">[</bpt>reader_writer_lock<ept id="p1">](../../parallel/concrt/reference/reader-writer-lock-class.md)</ept> object to synchronize concurrent read and write operations to the same data element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about synchronization objects, see <bpt id="p1">[</bpt>Synchronization Data Structures<ept id="p1">](../../parallel/concrt/synchronization-data-structures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you convert existing code that uses <ph id="ph1">`vector`</ph> to use <ph id="ph2">`concurrent_vector`</ph>, concurrent operations can cause the behavior of your application to change.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, consider the following program that concurrently performs two tasks on a <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The first task appends additional elements to a <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The second task computes the sum of all elements in the same object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>concrt-vector-safety#1</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`end`</ph> method is concurrency-safe, a concurrent call to the <bpt id="p1">[</bpt>push_back<ept id="p1">](reference/concurrent-vector-class.md#push_back)</ept> method causes the value that is returned by <ph id="ph2">`end`</ph> to change.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The number of elements that the iterator traverses is indeterminate.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Therefore, this program can produce a different result each time that you run it.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Exception Safety</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If a growth or assignment operation throws an exception, the state of the <ph id="ph1">`concurrent_vector`</ph> object becomes invalid.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The behavior of a <ph id="ph1">`concurrent_vector`</ph> object that is in an invalid state is undefined unless stated otherwise.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, the destructor always frees the memory that the object allocates, even if the object is in an invalid state.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The data type of the vector elements, <ph id="ph1">`T`</ph>, must meet the following requirements.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Otherwise, the behavior of the <ph id="ph1">`concurrent_vector`</ph> class is undefined.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The destructor must not throw.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the default or copy constructor throws, the destructor must not be declared by using the <ph id="ph1">`virtual`</ph> keyword and it must work correctly with zero-initialized memory.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>concurrent_queue Class</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::concurrent_queue<ept id="p1">](../../parallel/concrt/reference/concurrent-queue-class.md)</ept> class, just like the <bpt id="p2">[</bpt>std::queue<ept id="p2">](../../standard-library/queue-class.md)</ept> class, lets you access its front and back elements.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class enables concurrency-safe enqueue and dequeue operations.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class also provides iterator support that is not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_queue and queue</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class closely resembles the <ph id="ph2">`queue`</ph> class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following points illustrate where <ph id="ph1">`concurrent_queue`</ph> differs from <ph id="ph2">`queue`</ph>:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Enqueue and dequeue operations on a <ph id="ph1">`concurrent_queue`</ph> object are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class provides iterator support that is not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class does not provide the <ph id="ph2">`front`</ph> or <ph id="ph3">`pop`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class replaces these methods by defining the <bpt id="p1">[</bpt>try_pop<ept id="p1">](reference/concurrent-queue-class.md#try_pop)</ept> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class does not provide the <ph id="ph2">`back`</ph> method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot reference the end of the queue.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class provides the <bpt id="p1">[</bpt>unsafe_size<ept id="p1">](reference/concurrent-queue-class.md#unsafe_size)</ept> method instead of the <ph id="ph2">`size`</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unsafe_size`</ph> method is not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>All methods that enqueue to or dequeue from a <ph id="ph1">`concurrent_queue`</ph> object are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following table shows the common <ph id="ph1">`concurrent_queue`</ph> methods and operators that are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>empty</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>push</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>get_allocator</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>try_pop</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`empty`</ph> method is concurrency-safe, a concurrent operation may cause the queue to grow or shrink before the <ph id="ph2">`empty`</ph> method returns.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following table shows the common methods and operators that are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>unsafe_end</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>unsafe_begin</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>unsafe_size</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Iterator Support</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> provides iterators that are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>We recommend that you use these iterators for debugging only.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`concurrent_queue`</ph> iterator traverses elements in the forward direction only.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following table shows the operators that each iterator supports.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>operator++</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Advances to next item in the queue.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This operator is overloaded to provide both pre-increment and post-increment semantics.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Retrieves a reference to the current item.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>operator-&gt;</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the current item.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_map Class</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>HYPERLINK "file:///C:<ph id="ph1">\\</ph>\Users<ph id="ph2">\\</ph>\thompet<ph id="ph3">\\</ph>\AppData<ph id="ph4">\\</ph>\Local<ph id="ph5">\\</ph>\Temp<ph id="ph6">\\</ph>\DxEditor<ph id="ph7">\\</ph>\DduePreview<ph id="ph8">\\</ph>\Default<ph id="ph9">\\</ph>\798d7037-df37-4310-858b-6f590bbf6ebf<ph id="ph10">\\</ph>\HTM<ph id="ph11">\\</ph>\html<ph id="ph12">\\</ph>\a217b4ac-af2b-4d41-94eb-09a75ee28622" concurrency::concurrent_unordered_map<ept id="p1">](../../parallel/concrt/reference/concurrent-unordered-map-class.md)</ept> class is an associative container class that, just like the <bpt id="p2">[</bpt>std::unordered_map<ept id="p2">](../../standard-library/unordered-map-class.md)</ept> class, controls a varying-length sequence of elements of type <bpt id="p3">[</bpt>std::pair<ph id="ph13">\&lt;</ph>const Key, Ty&gt;<ept id="p3">](../../standard-library/pair-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Think of an unordered map as a dictionary that you can add a key and value pair to or look up a value by key.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This class is useful when you have multiple threads or tasks that have to concurrently access a shared container, insert into it, or update it.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example shows the basic structure for using <ph id="ph1">`concurrent_unordered_map`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This example inserts character keys in the range ['a', 'i'].</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Because the order of operations is undetermined, the final value for each key is also undetermined.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>However, it is safe to perform the insertions in parallel.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>concrt-unordered-map-structure#1</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For an example that uses <ph id="ph1">`concurrent_unordered_map`</ph> to perform a map and reduce operation in parallel, see <bpt id="p1">[</bpt>How to: Perform Map and Reduce Operations in Parallel<ept id="p1">](../../parallel/concrt/how-to-perform-map-and-reduce-operations-in-parallel.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Differences Between concurrent_unordered_map and unordered_map</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_map`</ph> class closely resembles the <ph id="ph2">`unordered_map`</ph> class.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The following points illustrate where <ph id="ph1">`concurrent_unordered_map`</ph> differs from <ph id="ph2">`unordered_map`</ph>:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`erase`</ph>, <ph id="ph2">`bucket`</ph>, <ph id="ph3">`bucket_count`</ph>, and <ph id="ph4">`bucket_size`</ph> methods are named <ph id="ph5">`unsafe_erase`</ph>, <ph id="ph6">`unsafe_bucket`</ph>, <ph id="ph7">`unsafe_bucket_count`</ph>, and <ph id="ph8">`unsafe_bucket_size`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unsafe_`</ph> naming convention indicates that these methods are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information about concurrency safety, see <bpt id="p1">[</bpt>Concurrency-Safe Operations<ept id="p1">](#map-safety)</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Insert operations do not invalidate existing pointers or iterators, nor do they change the order of items that already exist in the map.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Insert and traverse operations can occur concurrently.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>supports forward iteration only.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Insertion does not invalidate or update the iterators that are returned by <ph id="ph1">`equal_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Insertion can append unequal items to the end of the range.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The begin iterator points to an equal item.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To help avoid deadlock, no method of <ph id="ph1">`concurrent_unordered_map`</ph> holds a lock when it calls the memory allocator, hash functions, or other user-defined code.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Also, you must ensure that the hash function always evaluates equal keys to the same value.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The best hash functions distribute keys uniformly across the hash code space.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Concurrency-Safe Operations</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_map`</ph> class enables concurrency-safe insert and element-access operations.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Insert operations do not invalidate existing pointers or iterators.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Iterator access and traversal operations are also concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following table shows the commonly used <ph id="ph1">`concurrent_unordered_map`</ph> methods and operators that are concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>at</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>key_eq</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>operator&amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>insert</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`count`</ph> method can be called safely from concurrently running threads, different threads can receive different results if a new value is simultaneously inserted into the container.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following table shows the commonly used methods and operators that are not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In addition to these methods, any method that begins with <ph id="ph1">`unsafe_`</ph> is also not concurrency-safe.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multimap Class</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::concurrent_unordered_multimap<ept id="p1">](../../parallel/concrt/reference/concurrent-unordered-multimap-class.md)</ept> class closely resembles the <ph id="ph1">`concurrent_unordered_map`</ph> class except that it allows for multiple values to map to the same key.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>It also differs from <ph id="ph1">`concurrent_unordered_map`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrent_unordered_multimap::insert<ept id="p1">](reference/concurrent-unordered-multimap-class.md#insert)</ept> method returns an iterator instead of <ph id="ph1">`std::pair&lt;iterator, bool&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_multimap`</ph> class does not provide <ph id="ph2">`operator[]`</ph> nor the <ph id="ph3">`at`</ph> method.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following example shows the basic structure for using <ph id="ph1">`concurrent_unordered_multimap`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This example inserts character keys in the range ['a', 'i'].</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>enables a key to have multiple values.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>concrt-unordered-multimap-structure#1</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_set Class</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::concurrent_unordered_set<ept id="p1">](../../parallel/concrt/reference/concurrent-unordered-set-class.md)</ept> class closely resembles the <ph id="ph1">`concurrent_unordered_map`</ph> class except that it manages values instead of key and value pairs.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_set`</ph> class does not provide <ph id="ph2">`operator[]`</ph> nor the <ph id="ph3">`at`</ph> method.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The following example shows the basic structure for using <ph id="ph1">`concurrent_unordered_set`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This example inserts character values in the range ['a', 'i'].</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>It is safe to perform the insertions in parallel.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>concrt-unordered-set#1</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multiset Class</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::concurrent_unordered_multiset<ept id="p1">](../../parallel/concrt/reference/concurrent-unordered-multiset-class.md)</ept> class closely resembles the <ph id="ph1">`concurrent_unordered_set`</ph> class except that it allows for duplicate values.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>It also differs from <ph id="ph1">`concurrent_unordered_set`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrent_unordered_multiset::insert<ept id="p1">](reference/concurrent-unordered-multiset-class.md#insert)</ept> method returns an iterator instead of <ph id="ph1">`std::pair&lt;iterator, bool&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_multiset`</ph> class does not provide <ph id="ph2">`operator[]`</ph> nor the <ph id="ph3">`at`</ph> method.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The following example shows the basic structure for using <ph id="ph1">`concurrent_unordered_multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This example inserts character values in the range ['a', 'i'].</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>enables a value to occur multiple times.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>concrt-unordered-multiset#1</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>combinable Class</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::combinable<ept id="p1">](../../parallel/concrt/reference/combinable-class.md)</ept> class provides reusable, thread-local storage that lets you perform fine-grained computations and then merge those computations into a final result.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You can think of a <ph id="ph1">`combinable`</ph> object as a reduction variable.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable`</ph> class is useful when you have a resource that is shared among several threads or tasks.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable`</ph> class helps you eliminate shared state by providing access to shared resources in a lock-free manner.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Therefore, this class provides an alternative to using a synchronization mechanism, for example, a mutex, to synchronize access to shared data from multiple threads.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following table shows some of the important methods of the <ph id="ph1">`combinable`</ph> class.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more information about all the <ph id="ph1">`combinable`</ph> class methods, see <bpt id="p1">[</bpt>combinable Class<ept id="p1">](../../parallel/concrt/reference/combinable-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>local</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Retrieves a reference to the local variable that is associated with the current thread context.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Removes all thread-local variables from the <ph id="ph1">`combinable`</ph> object.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>combine</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>combine_each</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Uses the provided combine function to generate a final value from the set of all thread-local computations.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable`</ph> class is a template class that is parameterized on the final merged result.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If you call the default constructor, the <ph id="ph1">`T`</ph> template parameter type must have a default constructor and a copy constructor.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`T`</ph> template parameter type does not have a default constructor, call the overloaded version of the constructor that takes an initialization function as its parameter.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>You can store additional data in a <ph id="ph1">`combinable`</ph> object after you call the <bpt id="p1">[</bpt>combine<ept id="p1">](reference/combinable-class.md#combine)</ept> or <bpt id="p2">[</bpt>combine_each<ept id="p2">](reference/combinable-class.md#combine_each)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>You can also call the <ph id="ph1">`combine`</ph> and <ph id="ph2">`combine_each`</ph> methods multiple times.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If no local value in a <ph id="ph1">`combinable`</ph> object changes, the <ph id="ph2">`combine`</ph> and <ph id="ph3">`combine_each`</ph> methods produce the same result every time that they are called.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For examples about how to use the <ph id="ph1">`combinable`</ph> class, see the following topics:</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Improve Performance</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Combine Sets</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>How to: Use Parallel Containers to Increase Efficiency</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Shows how to use parallel containers to efficiently store and access data in parallel.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Improve Performance</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Shows how to use the <ph id="ph1">`combinable`</ph> class to eliminate shared state, and thereby improve performance.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Combine Sets</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Shows how to use a <ph id="ph1">`combine`</ph> function to merge thread-local sets of data.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parallel Patterns Library (PPL)</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Describes the PPL, which provides an imperative programming model that promotes scalability and ease-of-use for developing concurrent applications.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>concurrent_vector Class</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>concurrent_queue Class</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_map Class</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multimap Class</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_set Class</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_multiset Class</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>combinable Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>