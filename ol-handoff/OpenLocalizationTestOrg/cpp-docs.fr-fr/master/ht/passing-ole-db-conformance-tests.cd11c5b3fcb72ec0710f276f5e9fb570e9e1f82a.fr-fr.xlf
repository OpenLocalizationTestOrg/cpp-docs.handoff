<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5654d19dd6e2397a2855a19ef7de34bc0cde6061</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\passing-ole-db-conformance-tests.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15d71a3555ae8b33d0ebcfe33b26061dd950a872</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52432442dd1d21cbf622fcbe341d51ed0b0a7fd3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Passing OLE DB Conformance Tests | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Passing OLE DB Conformance Tests</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To make providers more consistent, the Data Access SDK provides a set of OLE DB conformance tests.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The tests check all aspects of your provider and give you reasonable assurance that your provider functions as expected.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can find the OLE DB conformance tests on the Microsoft Data Access SDK.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section focuses on things you should do to pass the conformance tests.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information about running the OLE DB conformance tests, see the SDK.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Running the Conformance Tests</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Visual C++ 6.0, the OLE DB provider templates added a number of hooking functions to allow you to check values and properties.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Most of these functions were added in response to the conformance tests.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You need to add several validation functions for your provider to pass the OLE DB conformance tests.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This provider requires two validation routines.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The first routine, <ph id="ph1">`CRowsetImpl::ValidateCommandID`</ph>, is part of your rowset class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is called during the creation of the rowset by the provider templates.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The sample uses this routine to tell consumers that it does not support indexes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The first call is to <ph id="ph1">`CRowsetImpl::ValidateCommandID`</ph> (note that the provider uses the <bpt id="p1">**</bpt>_RowsetBaseClass<ept id="p1">**</ept> typedef added in the interface map for <ph id="ph2">`CMyProviderRowset`</ph> in <bpt id="p2">[</bpt>Provider Support for Bookmarks<ept id="p2">](../../data/oledb/provider-support-for-bookmarks.md)</ept>, so you do not have to type that long line of template arguments).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Next, return <bpt id="p1">**</bpt>DB_E_NOINDEX<ept id="p1">**</ept> if the index parameter is not <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> (this indicates the consumer wants to use an index on us).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about command IDs, see the OLE DB specification and look for <bpt id="p1">**</bpt>IOpenRowset::OpenRowset<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code is the <bpt id="p1">**</bpt>ValidateCommandID<ept id="p1">**</ept> validation routine:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The provider templates call the <ph id="ph1">`OnPropertyChanged`</ph> method whenever someone changes a property on the <bpt id="p1">**</bpt>DBPROPSET_ROWSET<ept id="p1">**</ept> group.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you want to handle properties for other groups, you add them to the appropriate object (that is, <bpt id="p1">**</bpt>DBPROPSET_SESSION<ept id="p1">**</ept> checks go in the <ph id="ph1">`CMyProviderSession`</ph> class).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code first checks to see whether the property is linked to another.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the property is being chained, it sets the <bpt id="p1">**</bpt>DBPROP_BOOKMARKS<ept id="p1">**</ept> property to True.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Appendix C of the OLE DB specification contains information about properties.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This information also tells you whether the property is chained to another one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You might also want to add the <ph id="ph1">`IsValidValue`</ph> routine to your code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The templates call <ph id="ph1">`IsValidValue`</ph> when attempting to set a property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You would override this method if you require additional processing when setting a property value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can have one of these methods for each property set.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Threading Issues</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By default, the OLE DB Provider Wizard in the ATL OLE DB Provider Wizard generates code for the provider to run in an apartment model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you attempt to run this code with the conformance tests, you initially get failures.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is because Ltm.exe, the tool used to run the OLE DB conformance tests, defaults to free threaded.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The OLE DB Provider Wizard code defaults to apartment model for performance and ease of use.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To correct this problem, you can either change LTM or change the provider.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To change LTM to run in apartment threaded mode</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>On the LTM main menu, click <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Options<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> tab, change the threading model from <bpt id="p2">**</bpt>Free Threaded<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Apartment Threaded<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To change your provider to run in free threaded mode:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In your provider project, search for all instances of <ph id="ph1">`CComSingleThreadModel`</ph> and replace it with <ph id="ph2">`CComMultiThreadModel`</ph>, which should be in your data source, session, and rowset headers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In your .rgs file, change the threading model from <bpt id="p1">**</bpt>Apartment<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Both<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Follow correct programming rules for free threaded programming (that is, lock on writes).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Advanced Provider Techniques</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>