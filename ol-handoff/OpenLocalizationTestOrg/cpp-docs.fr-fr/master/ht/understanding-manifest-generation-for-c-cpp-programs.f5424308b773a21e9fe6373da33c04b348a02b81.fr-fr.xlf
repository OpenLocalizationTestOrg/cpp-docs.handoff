<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56ea5cf710414c088609ff129c68fa957f2f39c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\understanding-manifest-generation-for-c-cpp-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34120c12791b4ac058e6c2da7ccbe3be1914ab8d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6a3777bbbfd4e07ba2d83e7b47cc20060a2085e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding Manifest Generation for C-C++ Programs | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Manifest Generation for C/C++ Programs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>manifest<ept id="p1">](http://msdn.microsoft.com/library/aa375365)</ept> is an XML document that can be an external XML file or a resource embedded inside an application or an assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The manifest of an <bpt id="p1">[</bpt>isolated application<ept id="p1">](http://msdn.microsoft.com/library/aa375190)</ept> is used to manage the names and versions of shared side-by-side assemblies to which the application should bind at run time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The manifest of a side-by-side assembly specifies its dependencies on names, versions, resources, and other assemblies.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are two ways to create a manifest for an isolated application or a side-by-side assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>First, the author of the assembly can manually create a manifest file following rules and naming requirements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Alternatively, if a program only depends on <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> assemblies such as CRT, MFC, ATL or others, then a manifest can be generated automatically by the linker.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The headers of <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> libraries contain assembly information, and when the libraries are included in application code, this assembly information is used by the linker to form a manifest for the final binary.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The linker does not embed the manifest file inside the binary, and can only generate the manifest as an external file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Having a manifest as an external file may not work for all scenarios.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, it is recommended that private assemblies have embedded manifests.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In command line builds such as those that use nmake to build code, a manifest can be embedded using the manifest tool; for more information see <bpt id="p1">[</bpt>Manifest Generation at the Command Line<ept id="p1">](../build/manifest-generation-at-the-command-line.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When building in <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph>, a manifest can be embedded by setting a property for the manifest tool in the <bpt id="p1">**</bpt>Project Properties<ept id="p1">**</ept> dialog; see <bpt id="p2">[</bpt>Manifest Generation in Visual Studio<ept id="p2">](../build/manifest-generation-in-visual-studio.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Concepts of Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Building C/C++ Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>