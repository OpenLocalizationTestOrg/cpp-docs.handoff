<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90056762887ef7a1a0b7673c0680b38772916355</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\porting\visual-cpp-change-history-2003-2015.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">481651e3fb886f26173065b46e15466e2fb11521</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5a65eb8a5dd088bf5fa8662abb3988064fec934</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual C++ change history 2003 - 2015 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual C++ change history 2003 - 2015</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you upgrade to a new version of the Visual C++ compiler, you might encounter compilation and/or runtime errors in code that previously compiled and ran correctly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Changes in the new version that cause such problems are known as <bpt id="p1">*</bpt>breaking changes<ept id="p1">*</ept>, and typically they're required by modifications in the C++ language standard, function signatures, or the layout of objects in memory.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To avoid run-time errors that are difficult to detect and diagnose, we recommend that you never statically link to binaries that were compiled by using different versions of the compiler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Also, when you upgrade an EXE or DLL project, make sure to upgrade the libraries that it links to.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you're using CRT (C Runtime) or STL (Standard Template Library) types, don't pass them between binaries (including DLLs) that were compiled by using different versions of the compiler.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Potential Errors Passing CRT Objects Across DLL Boundaries<ept id="p1">](../c-runtime-library/potential-errors-passing-crt-objects-across-dll-boundaries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We further recommend that you never write code that depends on a particular layout for an object that is not a COM interface or a POD object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you do write such code, then you must ensure that it works after you upgrade.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Portability At ABI Boundaries<ept id="p1">](../cpp/portability-at-abi-boundaries-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Additionally, ongoing improvements to compiler conformance can sometimes change how the compiler understands your existing source code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When this happens, you might encounter new or different errors during your build, or even behavioral differences in code that previously built and seemed to run correctly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Although these are not breaking changes like the ones discussed in this document, source code changes might be needed to resolve these issues.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This article describes all the breaking changes going back to Visual Studio 2003, and in this article the terms "new behavior" or "now" refer to Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The terms "old behavior" and "before" refer to Visual Studio 2013 and earlier releases.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C Runtime (CRT) Library Breaking Changes</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Standard C++ and Standard Template Library (STL) Breaking Changes</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>MFC and ATL Breaking Changes</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime Breaking Changes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Visual C++ 2015 Conformance Changes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C Runtime Library (CRT)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>General Changes</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Refactored binaries<ept id="p1">**</ept> The CRT Library  has been refactored into a two different binaries, a Universal CRT (ucrtbase), which contains most of the standard functionality, and a VC Runtime Library (vcruntime140), which contains the compiler-related functionality, such as exception handling, and intrinsics.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are using the default project settings, then this change does not impact you since the linker will use the new default libraries automatically.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you have set the project's <bpt id="p1">**</bpt>Linker<ept id="p1">**</ept> property <bpt id="p2">**</bpt>Ignore All Default Libraries<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Yes<ept id="p3">**</ept> or you are using the /NODEFAULTLIB linker option on the command line, then you must update your list of libraries (in the <bpt id="p4">**</bpt>Additional Dependencies<ept id="p4">**</ept> property) to include the new, refactored libraries.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Replace the old CRT library (libcmt.lib, libcmtd.lib, msvcrt.lib, msvcrtd.lib) with the equivalent refactored libraries.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For each of the two refactored libraries, there are static (.lib) and dynamic (.dll) versions, and release (with no suffix) and debug versions (with the "d" suffix).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The dynamic versions have an import library that you link with.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The two refactored libraries are Universal CRT, specifically ucrtbase.dll or .lib, ucrtbased.dll or .lib, and the VC runtime library, libvcruntime.lib, libvcruntime.dll, libvcruntimed.lib, and libvcruntimed.dll.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CRT Library Features<ept id="p1">](../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>locale.h&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>localeconv<ept id="p1">**</ept> The <bpt id="p2">[</bpt>localeconv<ept id="p2">](../c-runtime-library/reference/localeconv.md)</ept> function declared in locale.h now works correctly when <bpt id="p3">[</bpt>per-thread locale<ept id="p3">](../parallel/multithreading-and-locales.md)</ept> is enabled.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In previous versions of the library, this function would return the lconv data for the global locale, not the thread's locale.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you use per thread locale, you should check your use of localeconv to see if your code assumes that the lconv data returned is for the global locale and modify it appropriately.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>math.h&gt;</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C++ overloads of math library functions<ept id="p1">**</ept> In previous versions, <ph id="ph1">\&lt;</ph>math.h&gt; defined some, but not all, of the C++ overloads for the math library functions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>cmath&gt; defined the remaining overloads, so to get all of the overloads, one needed to include the <ph id="ph1">\&lt;</ph>cmath&gt; header.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This led to problems with function overload resolution in code that only included <ph id="ph1">\&lt;</ph>math.h&gt;.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Now, all C++ overloads have been removed from <ph id="ph1">\&lt;</ph>math.h&gt; and are now present only in <ph id="ph2">\&lt;</ph>cmath&gt;.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To resolve errors, include <ph id="ph1">&lt;cmath&gt;</ph> to get the declarations of the functions that were removed from <ph id="ph2">\&lt;</ph>math.h&gt;.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following table lists the functions that were moved.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Functions that were moved:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>double abs(double) and float abs(float)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>double pow(double, int), float pow(float, float), float pow(float, int), long double pow(long double, long double), long double pow(long double, int)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>float and long double versions of floating point functions acos, acosh, asin, asinh, atan, atanh, atan2, cbrt, ceil, copysign, cos, cosh, erf, erfc, exp, exp2, expm1, fabs, fdim, floor, fma, fmax, fmin, fmod, frexp, hypot, ilogb, ldexp, lgamma, llrint, llround, log, log10, log1p, log2, lrint, lround, modf, nearbyint, nextafter, nexttoward, remainder, remquo, rint, round, scalbln, scalbn, sin, sinh, sqrt, tan, tanh, tgamma, trunc</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you have code that uses abs with a floating point type that only includes the math.h header, the floating point versions will no longer be available, so the call, even with a floating point argument, now resolves to abs(int).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This produces the error:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The fix for this warning is to replace the call to abs with a floating point version of abs, such as fabs for a double argument or fabsf for a float argument, or include the cmath header and continue to use abs.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Floating point conformance<ept id="p1">**</ept> Many changes to the math library have been made to improve conformance to the IEEE-754 and C11 Annex F specifications with respect to special case inputs such as NaNs and infinities.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, quiet NaN inputs, which were often treated as errors in previous versions of the library, are no longer treated as errors.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IEEE 754 Standard<ept id="p1">](http://grouper.ieee.org/groups/754)</ept> and Annex F of the <bpt id="p2">[</bpt>C11 Standard<ept id="p2">](http://www.iso-9899.info/wiki/The_Standard)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These changes won't cause compile-time errors, but might cause programs to behave differently and more correctly according to the standard.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FLT_ROUNDS<ept id="p1">**</ept> In Visual Studio 2013, the FLT_ROUNDS macro expanded to a constant expression, which was incorrect because the rounding mode is configurable at runtime, for example, by calling fesetround.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The FLT_ROUNDS macro is now dynamic and correctly reflects the current rounding mode.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>new&gt; and <ph id="ph1">\&lt;</ph>new.h&gt;</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>new and delete<ept id="p1">**</ept> In previous versions of the library, the implementation-defined operator new and delete functions were exported from the runtime library DLL (for example, msvcr120.dll).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>These operator functions are now always statically linked into your binaries, even when using the runtime library DLLs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is not a breaking change for native or mixed code (/clr), however for code compiled as <bpt id="p1">[</bpt>/clr:pure<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, this might cause your code to fail to compile.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you compile code as /clr:pure, you may need to add #include <ph id="ph1">\&lt;</ph>new&gt; or #include <ph id="ph2">\&lt;</ph>new.h&gt; to work around build errors due to this change.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Note that /clr:pure is deprecated in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph> and might be removed in future releases.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>process.h&gt;</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_beginthread and _beginthreadex<ept id="p1">**</ept> The <bpt id="p2">[</bpt>_beginthread<ept id="p2">](../c-runtime-library/reference/beginthread-beginthreadex.md)</ept> and <bpt id="p3">[</bpt>_beginthreadex<ept id="p3">](../c-runtime-library/reference/beginthread-beginthreadex.md)</ept> functions now hold a reference to the module in which the thread procedure is defined for the duration of the thread.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This helps to ensure that modules are not unloaded until a thread has run to completion.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>stdarg.h&gt;</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>va_start and reference types<ept id="p1">**</ept> When compiling C++ code, <bpt id="p2">[</bpt>va_start<ept id="p2">](../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept> now validates at compile-time that the argument passed to it is not of reference type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Reference-type arguments are prohibited by the C++ Standard.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; and <ph id="ph1">\&lt;</ph>conio.h&gt;</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The printf and scanf family of functions are now defined inline.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The definitions of all of the printf and scanf functions have been moved inline into <ph id="ph1">\&lt;</ph>stdio.h&gt;, <ph id="ph2">\&lt;</ph>conio.h&gt;, and other CRT headers.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is a breaking change that leads to a linker error (LNK2019, unresolved external symbol) for any programs that declared these functions locally without including the appropriate CRT headers.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If possible, you should update the code to include the CRT headers (that is, add #include <ph id="ph1">\&lt;</ph>stdio.h&gt;) and the inline functions, but if you do not want to modify your code to include these header files, an alternative solution is to add an additional library to your linker input, legacy_stdio_definitions.lib.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To add this library to your linker input in the IDE, open the context menu for the project node, choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, then in the <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> dialog box, choose <bpt id="p3">**</bpt>Linker<ept id="p3">**</ept>, and edit the <bpt id="p4">**</bpt>Linker Input<ept id="p4">**</ept> to add legacy_stdio_definitions.lib to the semi-colon-separated list.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If your project links with static libraries that were compiled with a release of Visual C++ earlier than 2015, the linker might report an unresolved external symbol.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These errors might reference internal stdio definitions for _iob, _iob_func, or related imports for certain stdio functions in the form of _imp<ph id="ph1">\_</ph>*.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Microsoft recommends that you recompile all static libraries with the latest version of the Visual C++ compiler and libraries when you upgrade a project.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the library is a third-party library for which source is not available, you should either request an updated binary from the third party or encapsulate your usage of that library into a separate DLL that you compile with the older version of the Visual C++ compiler and libraries.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you are linking with Windows SDK 8.1 or earlier, you might encounter these unresolved external symbol errors.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In that case, you should resolve the error by adding legacy_stdio_definitions.lib to the linker input as described previously.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To troubleshoot unresolved symbol errors, you can try using <bpt id="p1">[</bpt>dumpbin.exe<ept id="p1">](../build/reference/dumpbin-reference.md)</ept> to examine the symbols defined in a binary.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Try the following command line to view symbols defined in a library.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>gets and _getws<ept id="p1">**</ept> The <bpt id="p2">[</bpt>gets<ept id="p2">](../c-runtime-library/gets-getws.md)</ept> and <bpt id="p3">[</bpt>_getws<ept id="p3">](../c-runtime-library/gets-getws.md)</ept> functions have been removed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The gets function was removed from the C Standard Library in C11 because it cannot be used securely.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The _getws function was a Microsoft extension that was equivalent to gets but for wide strings.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>As alternatives to these functions, consider use of <bpt id="p1">[</bpt>fgets<ept id="p1">](../c-runtime-library/reference/fgets-fgetws.md)</ept>, <bpt id="p2">[</bpt>fgetws<ept id="p2">](../c-runtime-library/reference/fgets-fgetws.md)</ept>, <bpt id="p3">[</bpt>gets_s<ept id="p3">](../c-runtime-library/reference/gets-s-getws-s.md)</ept>, and <bpt id="p4">[</bpt>_getws_s<ept id="p4">](../c-runtime-library/reference/gets-s-getws-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_cgets and _cgetws<ept id="p1">**</ept> The <bpt id="p2">[</bpt>_cgets<ept id="p2">](../c-runtime-library/cgets-cgetws.md)</ept> and <bpt id="p3">[</bpt>_cgetws<ept id="p3">](../c-runtime-library/cgets-cgetws.md)</ept> functions have been removed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As alternatives to these functions, consider use of <bpt id="p1">[</bpt>_cgets_s<ept id="p1">](../c-runtime-library/reference/cgets-s-cgetws-s.md)</ept> and <bpt id="p2">[</bpt>_cgetws_s<ept id="p2">](../c-runtime-library/reference/cgets-s-cgetws-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Infinity and NaN Formatting<ept id="p1">**</ept> In previous versions, infinities and NaNs would be formatted using a set of Visual C++-specific sentinel strings.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Infinity: 1.#INF</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Quiet NaN: 1.#QNAN</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Signaling NaN: 1.#SNAN</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indefinite NaN: 1.#IND</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Any of these may have been prefixed by a sign and may have been formatted slightly differently depending on field width and precision (sometimes with unusual effects, e.g. printf("%.2f\n", INFINITY) would print 1.#J because the #INF would be "rounded" to a precision of 2 digits).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>C99 introduced new requirements on how infinities and NaNs are to be formatted.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The Visual C++ implementation now conforms to these requirements.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The new strings are as follows:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Infinity: inf</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Quiet NaN: nan</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Signaling NaN: nan(snan)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Indefinite NaN:nan(ind)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Any of these may be prefixed by a sign.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If a capital format specifier is used (%F instead of %f) then the strings are printed in capital letters (INF instead of inf), as is required.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>scanf<ept id="p1">](../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> functions have been modified to parse these new strings, so these strings will round-trip through printf and scanf.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Floating point formatting and parsing<ept id="p1">**</ept> New floating point formatting and parsing algorithms have been introduced to improve correctness.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This change affects the <bpt id="p1">[</bpt>printf<ept id="p1">](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> and <bpt id="p2">[</bpt>scanf<ept id="p2">](../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept> families of functions, as well as functions like <bpt id="p3">[</bpt>strtod<ept id="p3">](../c-runtime-library/reference/strtod-strtod-l-wcstod-wcstod-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The old formatting algorithms would generate only a limited number of digits, then would fill the remaining decimal places with zero.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is usually good enough to generate strings that will round-trip back to the original floating point value, but it's not great if you want the exact value (or the closest decimal representation thereof).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The new formatting algorithms generate as many digits as are required to represent the value (or to fill the specified precision).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>As an example of the improvement; consider the results when printing a large power of two:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The old parsing algorithms would consider only up to 17 significant digits from the input string and would discard the rest of the digits.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This is sufficient to generate a very close approximation of the value represented by the string, and the result is usually very close to the correctly rounded result.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The new implementation considers all present digits and produces the correctly rounded result for all inputs (up to 768 digits in length).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In addition, these functions now respect the rounding mode (controllable via fesetround).</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This is a potentially breaking behavior change because these functions might output different results.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The new results are always more correct than the old results.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hexadecimal and infinity/NaN floating point parsing<ept id="p1">**</ept> The floating point parsing algorithms will now parse hexadecimal floating point strings (such as those generated by the %a and %A printf format specifiers) and all infinity and NaN strings that are generated by the printf functions, as described above.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>%A and %a zero padding<ept id="p1">**</ept> The %a and %A format specifiers format a floating point number as a hexadecimal mantissa and binary exponent.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In previous versions, the printf functions would incorrectly zero-pad strings.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, printf("%07.0a\n", 1.0) would print 00x1p+0, where it should print 0x01p+0.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This has been fixed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>%A and %a precision<ept id="p1">**</ept> The default precision of the %A and %a format specifiers was 6 in previous versions of the library.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default precision is now 13 for conformance with the C Standard.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This is a runtime behavior change in the output of any function that uses a format string with %A or %a.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the old behavior, the output using the %A specifier might be "1.1A2B3Cp+111".</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Now the output for the same value is "1.1A2B3C4D5E6F7p+111".</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>To get the old behavior, you can specify the precision, for example, %.6A.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Precision Specification<ept id="p1">](../c-runtime-library/precision-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>%F specifier<ept id="p1">**</ept> The %F format/conversion specifier is now supported.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It is functionally equivalent to the %f format specifier, except that infinities and NaNs are formatted using capital letters.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In previous versions, the implementation used to parse F and N as length modifiers.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This behavior dated back to the age of segmented address spaces: these length modifiers were used to indicate far and near pointers, respectively, as in %Fp or %Ns.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This behavior has been removed.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If %F is encountered, it is now treated as the %F format specifier; if %N is encountered, it is now treated as an invalid parameter.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exponent formatting<ept id="p1">**</ept> The %e and %E format specifiers format a floating point number as a decimal mantissa and exponent.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The %g and %G format specifiers also format numbers in this form in some cases.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In previous versions, the CRT would always generate strings with three-digit exponents.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For example, printf("%e\n", 1.0) would print 1.000000e+000.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This was incorrect: C requires that if the exponent is representable using only one or two digits, then only two digits are to be printed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2005 a global conformance switch was added: <bpt id="p1">[</bpt>_set_output_format<ept id="p1">](../c-runtime-library/set-output-format.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A program could call this function with the argument _TWO_DIGIT_EXPONENT, to enable conforming exponent printing.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The default behavior has been changed to the standards-conforming exponent printing mode.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Format string validation<ept id="p1">**</ept> In previous versions, the printf and scanf functions would silently accept many invalid format strings, sometimes with unusual effects.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, %hlhlhld would be treated as %d.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>All invalid format strings are now treated as invalid parameters.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>fopen mode string validation</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In previous versions, the fopen family of functions silently accepted some invalid mode strings (e.g. r+b+).</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Invalid mode strings are now detected and treated as invalid parameters.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>_O_U8TEXT mode</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_setmode<ept id="p1">](../c-runtime-library/reference/setmode.md)</ept> function now correctly reports the mode for streams opened in_O_U8TEXT mode.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In previous versions of the library, it would report such streams as being opened in _O_WTEXT.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This is a breaking change if your code interprets the _O_WTEXT mode for streams where the encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If your application doesn't support UTF_8, consider adding support for this increasingly common encoding.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>snprintf and vsnprintf<ept id="p1">**</ept> The <bpt id="p2">[</bpt>snprintf<ept id="p2">](../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept> and <bpt id="p3">[</bpt>vsnprintf<ept id="p3">](../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept> functions are now implemented.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Older code often provided definitions macro versions of these functions because they were not implemented by the CRT library, but these are no longer needed in newer versions.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>snprintf<ept id="p1">](../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept> or <bpt id="p2">[</bpt>vsnprintf<ept id="p2">](../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept> is defined as a macro before including <ph id="ph1">\&lt;</ph>stdio.h&gt;, compilation now fails with an error that indicates where the macro was defined.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Normally, the fix to this problem is to delete any declarations of snprintf or vsnprintf in user code.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>tmpnam Generates Usable File Names<ept id="p1">**</ept> In previous versions, the tmpnam and tmpnam_s functions generated file names in the root of the drive (such as \sd3c.).</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>These functions now generate usable file name paths in a temporary directory.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FILE Encapsulation<ept id="p1">**</ept> In previous versions, the FILE type was completely defined in <ph id="ph1">\&lt;</ph>stdio.h&gt;, so it was possible for user code to reach into a FILE and modify its internals.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The stdio library has been changed to hide implementation details.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>As part of this, FILE as defined in <ph id="ph1">\&lt;</ph>stdio.h&gt; is now an opaque type and its members are inaccessible from outside of the CRT itself.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_outp and _inp<ept id="p1">**</ept> The functions <bpt id="p2">[</bpt>_outp<ept id="p2">](../c-runtime-library/outp-outpw-outpd.md)</ept>, <bpt id="p3">[</bpt>_outpw<ept id="p3">](../c-runtime-library/outp-outpw-outpd.md)</ept>, <bpt id="p4">[</bpt>_outpd<ept id="p4">](../c-runtime-library/outp-outpw-outpd.md)</ept>, <bpt id="p5">[</bpt>_inp<ept id="p5">](../c-runtime-library/inp-inpw-inpd.md)</ept>, <bpt id="p6">[</bpt>_inpw<ept id="p6">](../c-runtime-library/inp-inpw-inpd.md)</ept>, and <bpt id="p7">[</bpt>_inpd<ept id="p7">](../c-runtime-library/inp-inpw-inpd.md)</ept> have been removed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;, <ph id="ph1">\&lt;</ph>malloc.h&gt;, and <ph id="ph2">\&lt;</ph>sys/stat.h&gt;</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>strtof and wcstof<ept id="p1">**</ept> The strtof and wcstof functions failed to set errno to ERANGE when the value was not representable as a float.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This has been fixed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>(Note that this error was specific to these two functions; the strtod, wcstod, strtold, and wcstold functions were unaffected.) This is a runtime breaking change.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Aligned allocation functions<ept id="p1">**</ept> In previous versions, the aligned allocation functions (_aligned_malloc, _aligned_offset_malloc, etc.) would silently accept requests for a block with an alignment of 0.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The requested alignment must be a power of two, which zero is not.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This has been fixed, and a requested alignment of 0 is now treated as an invalid parameter.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This is a runtime breaking change.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Heap functions<ept id="p1">**</ept> The _heapadd, _heapset, and _heapused functions have been removed.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>These functions have been nonfunctional since the CRT was updated to use the Windows heap.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>smallheap<ept id="p1">**</ept> The smalheap link option has been removed.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Link Options<ept id="p1">](../c-runtime-library/link-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>wcstok<ept id="p1">**</ept> The signature of the wcstok function has been changed to match what is required by the C Standard.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>In previous versions of the library, the signature of this function was:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>It used an internal, per-thread context to track state across calls, as is done for strtok.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The function now has the signature wchar_t* wcstok(wchar_t<ph id="ph1">\*</ph>, wchar_t const<ph id="ph2">\*</ph>, wchar_t<ph id="ph3">\*\*</ph>), and requires the caller to pass the context as a third argument to the function.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A new _wcstok function has been added with the old signature to ease porting.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>When compiling C++ code, there is also an inline overload of wcstok that has the old signature.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This overload is declared as deprecated.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In C code, you may define_CRT_NON_CONFORMING_WCSTOK to cause _wcstok to be used in place of wcstok.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>time.h&gt;</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>clock<ept id="p1">**</ept> In previous versions, the <bpt id="p2">[</bpt>clock<ept id="p2">](../c-runtime-library/reference/clock.md)</ept> function was implemented using the Windows API <bpt id="p3">[</bpt>GetSystemTimeAsFileTime<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms724397.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>With this implementation, the clock function was sensitive to the system time, and was thus not necessarily monotonic.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The clock function has been reimplemented in terms of <bpt id="p1">[</bpt>QueryPerformanceCounter<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms644904.aspx)</ept> and is now monotonic.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fstat and _utime<ept id="p1">**</ept> In previous versions, the <bpt id="p2">[</bpt>_stat<ept id="p2">](../c-runtime-library/reference/stat-functions.md)</ept>, <bpt id="p3">[</bpt>fstat<ept id="p3">](../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)</ept>, and <bpt id="p4">[</bpt>_utime<ept id="p4">](../c-runtime-library/reference/utime-utime32-utime64-wutime-wutime32-wutime64.md)</ept> functions handle daylight savings time incorrectly.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Prior to Visual Studio 2013, all of these functions incorrectly adjusted standard time times as if they were in daylight time.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2013, the problem was fixed in the _stat family of functions, but the similar problems in the fstat and _utime families of functions were not fixed.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This led to problems due to the inconsistency between the functions.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The fstat and _utime families of functions have now been fixed, so all of these functions now handle daylight savings time correctly and consistently.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>asctime<ept id="p1">**</ept> In previous versions, the <bpt id="p2">[</bpt>asctime<ept id="p2">](../c-runtime-library/reference/asctime-wasctime.md)</ept> function would pad single-digit days with a leading zero, for example: Fri Jun 06 08:00:00 2014.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The specification requires that such days be padded with a leading space, e.g. Fri Jun  6 08:00:00 2014.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This has been fixed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>strftime and wcsftime<ept id="p1">**</ept> The strftime and wcsftime functions now support the %C, %D, %e, %F, %g, %G, %h, %n, %r, %R, %t, %T, %u, and %V format specifiers.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Additionally, the E and O modifiers are parsed but ignored.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The %c format specifier is specified as producing an "appropriate date and time representation" for the current locale.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In the C locale, this representation is required to be the same as %a %b %e %T %Y.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This is the same form as is produced by asctime.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In previous versions, the %c format specifier incorrectly formatted times using a MM/DD/YY HH:MM:SS representation.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This has been fixed.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>timespec and TIME_UTC<ept id="p1">**</ept> The <ph id="ph1">\&lt;</ph>time.h&gt; header now defines the timespec type and the timespec_get function from the C11 Standard.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In addition, the TIME_UTC macro, for use with the timespec_get function, is now defined.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This is a breaking change for code that has a conflicting definition for any of these.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLOCKS_PER_SEC<ept id="p1">**</ept> The CLOCKS_PER_SEC macro now expands to an integer of type clock_t, as required by the C language.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Standard Template Library</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>To enable new optimizations and debugging checks, the Visual Studio implementation of the C++ Standard Library intentionally breaks binary compatibility from one version to the next.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Therefore, when the C++ Standard Library is used, object files and static libraries that are compiled by using different versions can't be mixed in one binary (EXE or DLL), and C++ Standard Library objects can't be passed between binaries that are compiled by using different versions.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Such mixing emits linker errors about _MSC_VER mismatches.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>(_MSC_VER is the macro that contains the compiler's major version—for example, 1800 for Visual Studio 2013.) This check cannot detect DLL mixing, and cannot detect mixing that involves Visual C++ 2008 or earlier.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>STL include files<ept id="p1">**</ept> Some changes have been made to the include structure in the STL headers.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>STL headers are allowed to include each other in unspecified ways.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>In general, you should write your code so that it carefully includes all of the headers that it needs according to the C++ standard and doesn't rely on which STL headers include which other STL headers.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This makes code portable across versions and platforms.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>At least two header changes in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph> affect user code.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>First, <ph id="ph1">\&lt;</ph>string&gt; no longer includes <ph id="ph2">\&lt;</ph>iterator&gt;.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Second, <ph id="ph1">\&lt;</ph>tuple&gt; now declares std::array without including all of <ph id="ph2">\&lt;</ph>array&gt;, which can break code through the following combination of code constructs: your code has a variable named "array", and you have a using-directive "using namespace std;", and you include an STL header (such as <ph id="ph3">\&lt;</ph>functional&gt;) that includes <ph id="ph4">\&lt;</ph>tuple&gt;, which now declares std::array.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>steady_clock<ept id="p1">**</ept> The <ph id="ph1">\&lt;</ph>chrono&gt; implementation of <bpt id="p2">[</bpt>steady_clock<ept id="p2">](../standard-library/steady-clock-struct.md)</ept> has changed to meet the C++ Standard requirements for steadiness and monotonicity.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>steady_clock is now based on <bpt id="p1">[</bpt>QueryPerformanceCounter<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms644904.aspx)</ept> and high_resolution_clock is now a typedef for steady_clock.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>As a result, in Visual C++ steady_clock::time_point is now a typedef for chrono::time_point&lt;steady_clock&gt;; however, this is not necessarily the case for other implementations.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>allocators and const<ept id="p1">**</ept> We now require allocator equality/inequality comparisons to accept const arguments on both sides.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If your allocators define these operators as follows:</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>You should update these to declare them as const members.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const elements<ept id="p1">**</ept> The C++ standard has always forbidden containers of const elements (such as vector<ph id="ph1">\&lt;</ph>const T&gt; or set<ph id="ph2">\&lt;</ph>const T&gt;).</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Visual C++ 2013 and earlier accepted such containers.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>In the current version, such containers fail to compile.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>std::allocator::deallocate<ept id="p1">**</ept> In Visual C++ 2013 and earlier, std::allocator::deallocate(p, n) ignored the argument passed in for n.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The C++ standard has always required that n be equal to the value passed as the first argument to the invocation of allocate which returned p.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>However, in the current version, the value of n is inspected.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Code that passes arguments for n that differ from what the standard requires might crash at runtime.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>hash_map and hash_set<ept id="p1">**</ept> The non-standard header files hash_map and hash_set are deprecated in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph> and will be removed in a future release.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Use unordered_map and unordered_set instead.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>comparators and operator()<ept id="p1">**</ept> Associative containers (the <ph id="ph1">\&lt;</ph>map&gt; family) now require their comparators to have const-callable function call operators.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The following code in a comparator class declaration now fails to compile:</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>To resolve this error, change the function declaration to:</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>type traits<ept id="p1">**</ept> The old names for type traits from an earlier version of the C++ draft standard have been removed.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>These were changed in C++11 and have been updated to the C++11 values in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The following table shows the old and new names.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Old name</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>New name</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>add_reference</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>add_lvalue_reference</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>has_default_constructor</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>is_default_constructible</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>has_copy_constructor</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>is_copy_constructible</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>has_move_constructor</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>is_move_constructible</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>has_nothrow_constructor</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>is_nothrow_default_constructible</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>has_nothrow_default_constructor</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>is_nothrow_default_constructible</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>has_nothrow_copy</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_constructible</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>has_nothrow_copy_constructor</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_constructible</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>has_nothrow_move_constructor</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>is_nothrow_move_constructible</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>has_nothrow_assign</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_assignable</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>has_nothrow_copy_assign</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>is_nothrow_copy_assignable</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>has_nothrow_move_assign</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>is_nothrow_move_assignable</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>has_trivial_constructor</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>is_trivially_default_constructible</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>has_trivial_default_constructor</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>is_trivially_default_constructible</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>has_trivial_copy</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>is_trivially_copy_constructible</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>has_trivial_move_constructor</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>is_trivially_move_constructible</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>has_trivial_assign</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>is_trivially_copy_assignable</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>has_trivial_move_assign</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>is_trivially_move_assignable</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>has_trivial_destructor</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>is_trivially_destructible</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>launch::any and launch::sync policies<ept id="p1">**</ept> The nonstandard launch::any and launch::sync policies were removed.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Instead, for launch::any, use launch:async &amp;#124; launch:deferred.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>For launch::sync, use launch::deferred.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>launch Enumeration<ept id="p1">](../standard-library/future-enums.md#launch_enumeration)</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>MFC and ATL</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Microsoft Foundation Classes (MFC)<ept id="p1">**</ept> is no longer included in a "Typical" install of Visual Studio because of its large size.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>To install MFC, choose the Custom install option in Visual Studio 2015 setup.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If you already have Visual Studio 2015 installed, you can install MFC by re-running Visual Studio setup, choosing the Custom install option, and choosing Microsoft Foundation Classes.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>You can re-run Visual Studio setup from the Control Panel, Programs and Features, or from the installation media.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The Visual C++ Redistributable Package still includes this library.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Yield macro from Windows.h conflicting with concurrency::Context::Yield<ept id="p1">**</ept> The Concurrency Runtime previously used #undef to undefine the Yield macro to avoid conflicts between the Yield macro defined in Windows.h h and the concurrency::Context::Yield function.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This #undef has been removed and a new non-conflicting equivalent API call <bpt id="p1">[</bpt>concurrency::Context::YieldExecution<ept id="p1">](../parallel/concrt/reference/context-class.md#context__yieldexecution_method)</ept> has been added.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>To work around conflicts with Yield, you can either update your code to call the YieldExecution function instead, or surround the Yield function name with parentheses at call sites, as in the following example:</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Compiler Conformance Improvements in Visual C++ 2015</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>When upgrading code from previous versions, you might also encounter compiler errors that are due to conformance improvements made in Visual C++ 2015.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>These improvements do not break binary compatibility from earlier versions of Visual C++, but they can produce compiler errors where none were emitted before.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Visual C++ What's New 2003 through 2015<ept id="p1">](../porting/visual-cpp-what-s-new-2003-through-2015.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2015, ongoing improvements to compiler conformance can sometimes change how the compiler understands your existing source code.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>When this happens, you might encounter new or different errors during your build, or even behavioral differences in code that previously built and seemed to run correctly.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Fortunately, these differences  have little or no impact on most of your source code and when source code or other changes are needed to address these differences,  fixes are usually small and straight-forward.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>We've included many examples of previously-acceptable source code that might need to be changed <bpt id="p1">*</bpt>(before)<ept id="p1">*</ept> and the fixes to correct them <bpt id="p2">*</bpt>(after)<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Although these differences can affect your source code or other build artifacts, they don't affect binary compatibility between updates to Visual C++ versions.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A more-severe kind of change, the  <bpt id="p1">*</bpt>breaking change<ept id="p1">*</ept> can affect binary compatibility, but these kinds of binary compatibility breaks only occur between major versions of Visual C++.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>For example, between Visual C++ 2013 and Visual C++ 2015.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For information on the breaking changes that occurred between Visual C++ 2013 and Visual C++ 2015, see <bpt id="p1">[</bpt>Visual C++ 2015 Conformance Changes<ept id="p1">](#VC_2015)</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Visual C++ 2015</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 1</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 2</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 3</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Visual C++ 2015</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>/Zc:forScope- option</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The compiler option <bpt id="p1">**</bpt>/Zc:forScope-<ept id="p1">**</ept> is deprecated and will be removed in a future release.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The option was usually used in order to allow nonstandard code that uses loop variables after the point where, according to the standard, they should have gone out of scope.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>It was only necessary when you are compiling with the /Za option, since without /Za, using a for loop variable after the end of the loop is always allowed.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If you don't care about standards conformance (for example, if your code isn't meant to portable to other compilers), you could turn off the /Za option (or set the Disable Language Extensions property to No).</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If you do care about writing portable, standards-compliant code, you should rewrite your code so that it conforms to the standard by moving the declaration of such variables to a point outside the loop.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>/Zg compiler option</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The /Zg compiler option (Generate Function Prototypes) is no longer available.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>This compiler option was previously deprecated.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>You can no longer run unit tests with C++/CLI from the command-line with mstest.exe.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Instead, use vstest.console.exe.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>VSTest.Console.exe command-line options<ept id="p1">](/devops-test-docs/test/vstest-console-exe-command-line-options)</ept>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>mutable keyword</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mutable`</ph> storage class specifier is no longer allowed in places where previously it compiled without error.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Now, the compiler gives error C2071 (illegal storage class).</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>According to the standard, the mutable specifier can be applied only to names of class data members, and cannot be applied to names declared const or static, and cannot be applied to reference members.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>For example, consider the following code:</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Previous versions of the Visual C++ compiler accepted this, but now the compiler gives the following error:</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To fix the error, simply remove the redundant mutable keyword.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>char_16_t and char32_t</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>You can no longer use <ph id="ph1">`char16_t`</ph> or <ph id="ph2">`char32_t`</ph> as aliases in a typedef, because these types are now treated as built-in.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>It was common for users and library authors to define char16_t and char32_t as aliases of uint16_t and uint32_t, respectively.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To update your code, remove the typedef declarations and rename any other identifiers that collide with these names.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Non-type template parameters</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Certain code that involves non-type template parameters is now correctly checked for type compatibility when you provide explicit template arguments.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>For example, the following code compiled without error in previous versions of Visual C++.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The current compiler correctly gives an error, because the template parameter type doesn't match the template argument (the parameter is a pointer to a const member, but the function f is non-const):</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To address this error in your code, make sure that the type of the template argument you use matches the declared type of the template parameter.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>__declspec(align)</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The compiler no longer accepts <ph id="ph1">`__declspec(align)`</ph> on functions.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>This was always ignored, but now it produces a compiler error.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>To fix this problem, remove <ph id="ph1">`__declspec(align)`</ph> from the function declaration.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Since it had no effect, removing it does not change anything.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>There are a couple of changes to exception handling.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>First, exception objects have to be either copyable or movable.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The following code compiled in <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, but does not compile in <ph id="ph2">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The problem is that the copy constructor is private, so the object cannot be copied as happens in the normal course of handling an exception.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The same applies when the copy constructor is declared <ph id="ph1">`explicit`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>To update your code, make sure that the copy constructor for your exception object is public and not marked <ph id="ph1">`explicit`</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Catching an exception by value also requires the exception object to be copyable.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The following code compiled in <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, but does not compile in <ph id="ph2">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>You can fix this issue by changing the parameter type for the <ph id="ph1">`catch`</ph> to a reference.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>String literals followed by macros</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The compiler now supports user defined literals.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>As a consequence, string literals followed by macros without any intervening whitespace are interpreted as user-defined literals, which might produce errors or unexpected results.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>For example, in previous compilers the following code compiled successfully:</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The compiler interpreted this as a string literal "hello" followed by a macro, which is expanded "there", and then the two string literals were concatenated into one.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>, the compiler interprets this as a user-defined literal, but since there is no matching user-defined literal _x defined, it gives an error.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To fix this problem, add a space between the string literal and the macro.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Adjacent string literals</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Similarly to the previous, due to related changes in string parsing, adjacent string literals (either wide or narrow character string literals) without any whitespace were interpreted as a single concatenated string in previous releases of Visaul C++.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>, you must now add whitespace between the two strings.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>For example, the following code must be changed:</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Simply add a space in between the two strings.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Placement new and delete</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>A change has been made to the delete operator in order to bring it into conformance with C++14 standard.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Details of the standards change can be found at <bpt id="p1">[</bpt>C++ Sized Deallocation<ept id="p1">](http://isocpp.org/files/papers/n3778.html)</ept>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The changes add a form of the global delete operator that takes a size parameter.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The breaking change is that if you were previously using an operator delete with the same signature (to correspond with a placement new operator), you will receive a compiler error (C2956, which occurs at the point where the placement new is used, since that's the position in code where the compiler tries to identify an appropriate matching delete operator).</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`void operator delete(void *, size_t)`</ph> was a placement delete operator corresponding to the placement new function "void <ph id="ph2">\*</ph> operator new(size_t, size_t)" in C++11.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>With C++14 sized deallocation, this delete function is now a <bpt id="p1">*</bpt>usual deallocation function<ept id="p1">*</ept> (global delete operator).</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The standard requires that if the use of a placement new looks up a corresponding delete function and finds a usual deallocation function, the program is ill-formed.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>For example, suppose your code defines both a placement new and a placement delete:</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The problem occurs because of the match in function signatures between a placement delete operator you've defined, and the new global sized delete operator.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Consider whether you can use a different type other than size_t for any placement new and delete operators.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Note that the type of the size_t typedef is compiler-dependent; it is a typedef for unsigned int in Visual C++.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A good solution is to use an enumerated type such as this:</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Then, change your definition of placement new and delete to use this type as the second argument instead of size_t.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>You’ll also need to update the calls to placement new to pass the new type (for example, by using <ph id="ph1">`static_cast&lt;my_type&gt;`</ph> to convert from the integer value) and update the definition of new and delete to cast back to the integer type.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>You don’t need to use an enum for this; a class type with a size_t member would also work.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>An alternative solution is that you might be able to eliminate the placement new altogether.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If your code uses placement new to implement a memory pool where the placement argument is the size of the object being allocated or deleted, then sized deallocation feature might be suitable to replace your own custom memory pool code, and you can get rid of the placement functions and just use your own two-argument delete operator instead of the placement functions.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If you don't want to update your code immediately, you can revert to the old behavior by using the compiler option /Zc:sizedDealloc-.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If you use this option, the two-argument delete functions don’t exist and won't cause a conflict with your placement delete operator.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Union data members</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Data members of unions can no longer have reference types.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The following code compiled successfully in <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, but produces an error in <ph id="ph2">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The preceding code produces the following errors:</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To address this issue, change reference types either to a pointer or a value.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Changing the type to a pointer requires changes in the code that uses the union field.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Changing the code to a value would change the data stored in the union, which affects other fields since fields in union types share the same memory.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Depending on the size of the value, it might also change the size of the union.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Anonymous unions are now more conformant to the standard.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler generated an explicit constructor and destructor for anonymous unions.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>These are deleted in <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The preceding code generates the following error in <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>To resolve this issue, provide your own definitions of the constructor and/or destructor.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Unions with anonymous structs</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>In order to conform with the standard, the runtime behavior has changed for members of anonymous structures in unions.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The constructor for anonymous structure members in a union is no longer implicitly called when such a union is created.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Also, the destructor for anonymous structure members in a union is no longer implicitly called when the union goes out of scope.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Consider the following code, in which a union U contains an anonymous structure that contains a member which is a named structure S that has a destructor.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph>, the constructor for S is called when the union is created, and the destructor for S is called when the stack for function f is cleaned up.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>But in <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>, the constructor and destructor are not called.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The compiler gives a warning about this behavior change.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>To restore the original behavior, give the anonymous structure a name.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The runtime behavior of non-anonymous structures is the same, regardless of the compiler version.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Alternatively, try moving the constructor and destructor code into new functions, and add calls to these functions from the constructor and destructor for the union.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Template resolution</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Changes have been made to name resolution for templates.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>In C++, when considering candidates for the resolution of a name, it can be the case that one or more names under consideration as potential matches produces an invalid template instantiation.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>These invalid instantiations do not normally cause compiler errors, a principle which is known as SFINAE (Substitution Failure Is Not An Error).</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Now, if SFINAE requires the compiler to instantiate the specialization of a class template, then any errors that occur during this process are compiler errors.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>In previous versions, the compiler would ignore such errors.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For example, consider the following code:</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>If you compile with the current compiler, you get the following error:</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>This is because at the point of the first invocation of the is_base_of the class 'D' has not yet been defined.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>In this case, the fix is not to use such type traits until the class has been defined.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If you move the definitions of B and D to the beginning of the code file, the error is resolved.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>If the definitions are in header files, check the order of the include statements for the header files to make sure that any class definitions are compiled before the problematic templates are used.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Copy constructors</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>In both <ph id="ph1">[!INCLUDE[vs_dev12](../atl-mfc-shared/includes/vs_dev12_md.md)]</ph> and <ph id="ph2">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>, the compiler generates a copy constructor for a class if that class has a user-defined move constructor but no user-defined copy constructor.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>In Dev14, this implicitly generated copy constructor is also marked "= delete".</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 1</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Private virtual base classes and indirect inheritance</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler allowed a derived class to call member functions of its <bpt id="p1">*</bpt>indirectly-derived<ept id="p1">*</ept><ph id="ph1">`private virtual`</ph> base classes.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>This old behavior was incorrect and does not conform to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The compiler no longer accepts code written in this way and issues compiler error C2280 as a result.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>-or -</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Overloaded operator new and operator delete</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler allowed non-member <ph id="ph1">`operator new`</ph> and non-member <ph id="ph2">`operator delete`</ph> to be declared static, and to be declared in namespaces other than the global namespace.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>This old behavior created a risk that the program would not call the <ph id="ph1">`new`</ph> or <ph id="ph2">`delete`</ph> operator implementation that the programmer intended, resulting in silent bad runtime behavior.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The compiler no longer accepts code written in this way and issues compiler error C2323 instead.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Additionally, although the compiler doesn't give a specific diagnostic, inline operator new is considered ill-formed.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt><bpt id="p2">*</bpt>Calling 'operator <ept id="p2">*</ept>type<ept id="p1">*</ept>()' (user-defined conversion) on non-class types**</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler allowed 'operator <bpt id="p1">*</bpt>type<ept id="p1">*</ept>()' to be called on non-class types while silently ignoring it.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>This old behavior created a risk of silent bad code generation, resulting in unpredictable runtime behavior.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The compiler no longer accepts code written in this way and issues compiler error C2228 instead.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Redundant typename in elaborated type specifiers</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler allowed <ph id="ph1">`typename`</ph> in an elaborated type specifiers; code written in this way is semantically incorrect.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The compiler no longer accepts code written in this way and issues compiler error C3406 instead.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Type deduction of arrays from an initializer list</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not support type deduction of arrays from an initializer list.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The compiler now supports this form of type deduction and, as a result, calls to function templates using initializer lists might now be ambiguous or a different overload might be chosen than in previous versions of the compiler.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>To resolve these issues, the program must now explicitly specify the overload that the programmer intended.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>When this new behavior causes overload resolution to consider an additional candidate that is equally as good as the historic candidate, the call becomes ambiguous and the compiler issues compiler error C2668 as a result.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Example 1: Ambiguous call to overloaded function (before)</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Example 1: ambiguous call to overloaded function (after)</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>When this new behavior causes overload resolution to consider an additional candidate that is a better match than the historic candidate, the call resolves unambiguously to the new candidate, causing a change in program behavior that is probably different than the programmer intended.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Example 2: change in overload resolution (before)</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Example 2: change in overload resolution (after)</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Restoration of switch statement warnings</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>A Previous version of the compiler removed previously-existing warnings related to <ph id="ph1">`switch`</ph> statements; these warnings have now been restored.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The compiler now issues the restored warnings, and warnings related to specific cases (including the default case) are now issued on the line containing the offending case, rather than on the last line of the switch statement.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>As a result of now issuing those warnings on different lines than in the past, warnings previously suppressed by using <ph id="ph1">`#pragma warning(disable:####)`</ph> may no longer be suppressed as intended.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>To suppress these warnings as intended, it might be necessary to move the <ph id="ph1">`#pragma warning(disable:####)`</ph> directive to a line above the first potentially-offending case.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The following are the restored warnings.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Example of C4063 (before)</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Example of C4063 (after)</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Examples of the other restored warnings are provided in their documentation.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#include: use of parent-directory specifier '..' in pathname<ept id="p1">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not detect the use of the parent-directory specifier '..'</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>in the pathname of  <ph id="ph1">`#include`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Code written in this way is usually intended to include headers that exist outside of the project by incorrectly using project-relative paths.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>This old behavior created a risk that the program could be compiled by including a different source file than the programmer intended, or that these relative paths would not be portable to other build environments.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The compiler now detects and notifies the programmer of code written in this way and issues an optional compiler warning C4464, if enabled.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Additionally, although the compiler does not give a specific diagnostic, we also recommend that the parent-directory specifier ".." should note be used to specify your project's include directories.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#pragma optimize() extends past end of header file<ept id="p1">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not detect changes to  optimization flag settings that escape a header file included within a translation unit.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The compiler now detects and notifies the programmer of code written in this way and issues an optional compiler warning C4426 at the location of the offending <ph id="ph1">`#include`</ph>, if enabled.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>This warning is only issued if the changes conflict with the optimization flags set by command-line arguments to the compiler.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Mismatched #pragma warning(push)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>#pragma warning(pop)<ept id="p2">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not detect <ph id="ph1">`#pragma warning(push)`</ph> state changes being paired with <ph id="ph2">`#pragma warning(pop)`</ph> state changes in a different source file, which is rarely intended.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>This old behavior created a risk that the program would be compiled with a different set of warnings enabled than the programmer intended, possibly resulting in silent bad runtime behavior.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The compiler now detects and notifies the programmer of code written in this way and issues an optional compiler warning C5031 at the location of the matching <ph id="ph1">`#pragma warning(pop)`</ph>, if enabled.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>This warning includes a note referencing the location of the corresponding #pragma warning(push).</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Though uncommon, code written in this way is sometimes intentional.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Code written in this way is sensitive to changes in <ph id="ph1">`#include`</ph> order; when possible, we recommend that source code files manage warning state in a self-contained way.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unmatched #pragma warning(push)<ept id="p1">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not detect unmatched <ph id="ph1">`#pragma warning(push)`</ph> state changes at the end of a translation unit.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The compiler now detects and notifies the programmer of code written in this way and issues an optional compiler warning C5032 at the location of the unmatched #pragma warning(push), if enabled.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>This warning is only issued if there are no compilation errors in the translation unit.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Additional warnings might be issued as a result of improved #pragma warning state tracking</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler tracked #pragma warning state changes insufficiently well to issue all intended warnings.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>This behavior created a risk that certain warnings would be effectively suppressed in circumstances different than the programmer intended.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The compiler now tracks #pragma warning state more robustly -- especially related to #pragma warning state changes inside of templates -- and optionally issues new warnings C5031 and C5032 which are intended to help the programmer locate unintended uses of <ph id="ph1">`#pragma warning(push)`</ph> and <ph id="ph2">`#pragma warning(pop)`</ph>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>As a result of improved #pragma warning state change tracking, warnings formerly incorrectly suppressed or warnings related to issues formerly misdiagnosed might now be issued.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Improved identification of unreachable code</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>C++ Standard Library changes and improved ability to inline function calls over previous versions of the compiler might allow the compiler to prove that certain code is now unreachable.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>This new behavior can result in new and more-frequently issued instances of warning C4720.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>In many cases, this warning might only be issued when compiling with optimizations enabled, since optimizations may inline more function calls, eliminate redundant code, or otherwise make it possible to determine that certain code is unreachable.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>We have observed that new instances of warning C4720 have frequently occurred in try/catch blocks, especially in relation to use of <bpt id="p1">[</bpt>std::find<ept id="p1">](assetId:///std::find?qualifyHint=False&amp;autoUpgrade=True)</ept>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 2</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Additional warnings and errors might be issued as a result of partial support for expression SFINAE</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not parse certain kinds of expressions inside <ph id="ph1">`decltype`</ph> specifiers due to lack of  support for expression SFINAE.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This old behavior was incorrect and does not conform to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The compiler now parses these expressions and has partial support for expression SFINAE due to  ongoing conformance improvements.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>As a result, the compiler now issues warnings and errors found in  expressions that previous versions of the compiler did not parse.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>When this new behavior parses a <ph id="ph1">`decltype`</ph> expression that includes a type that has not yet been declared, the compiler issues compiler error C2039 as a result.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Example 1:  use of an undeclared type (before)</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Example 1 (after)</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>When this new behavior parses a <ph id="ph1">`decltype`</ph> expression that is missing a necessary use of the <ph id="ph2">`typename`</ph> keyword to specify that a dependent name is a type, the compiler issues  compiler warning C4346 together with compiler error C2923.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Example 2: dependent name is not a type (before)</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Example 2 (after)</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>member variables prevent implicitly defined constructors and assignment operators</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler allowed a class that has <ph id="ph1">`volatile`</ph> member variables to have default copy/move constructors and default copy/move assignment operators automatically generated.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>This old behavior was incorrect and does not conform to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The compiler now considers a class that has volatile member variables to have non-trivial construction and assignment operators which prevents default implementations of these operators from being automatically generated.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>When such a class is a member of a union (or an anonymous union inside of a class), the copy/move constructors and copy/move assignment operators of the union (or the class containing the unonymous union) will be implicitly defined as deleted.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Attempting to construct or copy the union (or class containing the anonymous union) without explicitly defining them is an error and the compiler  issues compiler error C2280 as a result.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Static member functions do not support cv-qualifiers.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Previous versions of Visual C++ 2015 allowed static member functions to have cv-qualifiers.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>This behavior is due to a regression in Visual C++ 2015 and Visual C++ 2015 Update 1; Visual C++ 2013 and previous versions of Visual C++ reject code written in this way.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The behavior of Visual C++ 2015 and Visual C++ 2015 Update 1 is incorrect and does not conform to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 Update 2 rejects code written in this way and issues compiler error C2511 instead.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Example(after)</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Forward declaration of enum is not allowed in WinRT code<ept id="p1">**</ept> (affects /ZW only)</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Code compiled for the Windows Runtime (WinRT) doesn't allow <ph id="ph1">`enum`</ph> types to be forward declared, similarly to when managed C++ code is compiled for the .Net Framework using the /clr compiler switch.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>This behavior is ensures that the size of an enumeration is always known and can be correctly projected to the WinRT type system.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The compiler rejects code written in this way and  issues compiler error C2599 together with compiler error C3197.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Overloaded non-member operator new and operator delete may not be declared inline<ept id="p1">**</ept> (Level 1 (/W1) on-by-default)</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler do not issue a warning when non-member operator new and operator delete functions are declared inline.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Code written in this way is ill-formed (no diagnostic required) and can cause memory issues  resulting from mismatched new and delete operators (especially when used together with sized deallocation) that can be difficult to diagnose.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The compiler now issues compiler warning C4595 to help identify code written in this way.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Fixing code that's written in this way might require that the operator definitions be moved out of a header file and into a corresponding source file.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Conformance Improvements in Update 3</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>std::is_convertable now detects self-assignment<ept id="p1">**</ept>  (standard library)</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Previous versions of the <ph id="ph1">`std::is_convertable`</ph> type-trait did not correctly detect self-assignment of a class type when its copy constructor is deleted or private.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Now, <ph id="ph1">`std::is_convertable&lt;&gt;::value`</ph> is correctly set to <ph id="ph2">`false`</ph> when applied to a class type with a deleted or private copy constructor.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>There is no compiler diagnostic associated with this change.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>In previous versions of Visual C++, the static assertions at the bottom of this example pass because <ph id="ph1">`std::is_convertable&lt;&gt;::value`</ph> was incorrectly set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Now, <ph id="ph1">`std::is_convertable&lt;&gt;::value`</ph> is correctly set to <ph id="ph2">`false`</ph>, causing the static assertions to fail.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Defaulted or deleted trivial copy and move constructors respect access specifiers</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler did not check the access specifier of defaulted or deleted trivial copy and move constructors before allowing them to be called.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>This old behavior was incorrect and does not conform to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>In some cases, this old  behavior created a risk of silent bad code generation, resulting in unpredictable runtime behavior.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The compiler now checks the access specifier  of defaulted or deleted trivial copy and move constructors to determine whether it can be called, and if not, issues compiler warning C2248 as a result.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Deprecation of attributed ATL code support<ept id="p1">**</ept> (Level 1 (/W1) on-by-default)</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler supported attributed ATL code.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>As the next phase of removing support for attributed ATL code that <bpt id="p1">[</bpt>began in Visual C++ 2008<ept id="p1">](https://msdn.microsoft.com/library/bb384632\(v=vs.90\).aspx)</ept>, attributed ATL code has been deprecated.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The compiler now issues compiler warning C4467 to help identify this kind of deprecated code.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>If you want to continue using attributed ATL code until support is removed from the compiler, you can disable this warning by passing the <ph id="ph1">`/Wv:18`</ph> or <ph id="ph2">`/wd:4467`</ph> command line arguments to the compiler, or by adding  <ph id="ph3">`#pragma warning(disable:4467)`</ph> in your source code.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Example 1 (before)</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Example 1 (after)</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Sometimes you might need or want to create an IDL file to avoid the use deprecated ATL attributes, as in the example code below</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Example 2 (before)</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>First, create the *.idl file; the vc140.idl generated file can be used to obtain an <ph id="ph1">\*</ph>.idl file containing the interfaces and annotations.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Next, add a MIDL step to your build to make sure that the C++ interface definitions are generated.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Example 2 IDL (after)</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Then, use ATL directly in the implementation file, as in the example code below.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Example 2  Implementation (after)</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precompiled header (PCH) files and mismatched #include directives<ept id="p1">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler accepted mismatched <ph id="ph1">`#include`</ph> directives in source files between <ph id="ph2">`-Yc`</ph> and <ph id="ph3">`-Yu`</ph> compilations when using precompiled header (PCH)  files.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Code written in this way is no longer accepted by the compiler.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The compiler now issues compiler warning CC4598 to help identify mismatched <ph id="ph1">`#include`</ph> directives when using PCH files.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Example (before):</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>X.cpp (-Ycc.h)</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Z.cpp (-Yuc.h)</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>X.cpp (-Ycc.h)</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Z.cpp (-Yuc.h)</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precompiled header (PCH) files and mismatched include directories<ept id="p1">**</ept> (only affects /Wall /WX)</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Previous versions of the compiler accepted mismatched include directory (<ph id="ph1">`-I`</ph>) command line arguments to the compiler between <ph id="ph2">`-Yc`</ph> and <ph id="ph3">`-Yu`</ph> compilations when using precompiled header (PCH)  files.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Code written in this way is no longer accepted by the compiler.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The compiler now issues compiler warning CC4599 to help identify mismatched include directory (<ph id="ph1">`-I`</ph>) command line arguments when using PCH files.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Example (before)</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Example (after)</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Visual C++ 2013 Conformance Changes</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The final keyword now generates an unresolved symbol error where it would have compiled previously:</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>In earlier versions, an error wasn't issued because the call was a virtual call; nevertheless, the program would crash at runtime.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Now, a linker error is issued because the class is known to be final.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>In this example, to fix the error, you would link against the obj that contains the definition of S2::f.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>When you use friend functions in namespaces, you must re-declare the friend function before you refer to it or you will get an error because the compiler now conforms to the ISO C++ Standard.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>For example, this no longer compiles:</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>To correct this code, declare the friend function:</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The C++ Standard does not allow explicit specialization in a class.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Although Visual C++ allows it in some cases, in cases such as the following example, an error is now generated because the compiler doesn't consider the second function to be a specialization of the first one.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>To correct this code, modify the second function:</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Visual C++ no longer tries to disambiguate the two functions in the following example, and now emits an error:</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>To correct this code, clarify the call:</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Before the compiler was made compliant with ISO C++11, the following code would have compiled and caused x to resolve to type int:</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>This code now resolves x to a type of std::initializer_list<ph id="ph1">\&lt;</ph>int&gt; and causes an error on the next line that tries to assign x to type int.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>(There is no conversion by default.) To correct this code, use int to replace auto:</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Aggregate initialization is no longer allowed when the type of the right-hand value does not match the type of the left-hand value that's being initialized, and an error is issued because the ISO C++11 Standard requires uniform initialization to work without narrowing conversions.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Previously, if a narrowing conversion was available, a <bpt id="p1">[</bpt>Compiler Warning (level 4) C4242<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-4-c4242.md)</ept> warning would have been issued instead of an error.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>To correct this code, add an explicit narrowing conversion:</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The following initialization is no longer allowed:</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>To correct this code, use either of these forms:</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Name lookup has changed.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The following code is resolved differently in Visual C++ in Visual Studio 2012 and Visual C++ in Visual Studio 2013:</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>In Visual C++ in Visual Studio 2012, the E1 in expression E1::b resolved to ::E1 in the global scope.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>In Visual C++ in Visual Studio 2013, E1 in expression E1::b resolves to the typedef E2 definition in main() and has type ::E2.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Object layout has changed.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>On x64, the object layout of a class may change from previous releases.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>If it has a virtual function but it doesn’t have a base class that has a virtual function, the object model of the compiler inserts a pointer to a virtual function table after the data member layout.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>This means the layout may not be optimal in all cases.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>In previous releases, an optimization for x64 would try to improve the layout for you, but because it failed to work correctly in complex code situations, it was removed in Visual C++ in Visual Studio 2013.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>For example, consider this code:</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>In Visual C++ in Visual Studio 2013, the result of sizeof(S2) on x64 is 48, but in previous releases, it evaluates to 32.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>To make this evaluate to 32 in Visual C++ in Visual Studio 2013 for x64, add a dummy base class that has a virtual function:</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>To find places in your code that an earlier release would have tried to optimize, use a compiler from that release together with the /W3 compiler option and turn on Warning 4370.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>On Visual C++ compilers before Visual C++ in Visual Studio 2013, this code outputs this message: warning C4370: 'S2' : layout of class has changed from a previous version of the compiler due to better packing</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The x86 compiler has the same sub-optimal layout issue in all versions of Visual C++.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>For example, if this code is compiled for x86:</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The result of sizeof(S) is 24.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>However, this can be reduced to 16 if you use the workaround just mentioned for x64:</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Visual C++ in Visual Studio 2013 detects mismatches in _ITERATOR_DEBUG_LEVEL, which was implemented in Visual C++ 2010, and RuntimeLibrary mismatches.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>These occur when compiler options /MT (static release), /MTd (static debug), /MD (dynamic release), and /MDd (dynamic debug) are mixed.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>If your code acknowledges the previous release's simulated alias templates, you have to change it.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>For example, instead of allocator_traits<ph id="ph1">\&lt;</ph>A&gt;::rebind_alloc<ph id="ph2">\&lt;</ph>U&gt;::other, now you have to say allocator_traits<ph id="ph3">\&lt;</ph>A&gt;::rebind_alloc<ph id="ph4">\&lt;</ph>U&gt;.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Although ratio_add<ph id="ph1">\&lt;</ph>R1, R2&gt;::type is no longer necessary and we now recommend that you say ratio_add<ph id="ph2">\&lt;</ph>R1, R2&gt;, the former will still compile because ratio<ph id="ph3">\&lt;</ph>N, D&gt; is required to have a "type" typedef for a reduced ratio, which will be the same type if it's already reduced.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>You must use #include <ph id="ph1">\&lt;</ph>algorithm&gt; when you call std::min() or std::max().</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>If your existing code uses the previous release’s simulated scoped enums—traditional unscoped enums wrapped in namespaces—you have to change it.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>For example, if you referred to the type std::future_status::future_status, now you have to say std::future_status.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>However, most code is unaffected—for example, std::future_status::ready still compiles.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>explicit operator bool() is stricter than operator unspecified-bool-type().</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>explicit operator bool() permits explicit conversions to bool—for example, given shared_ptr<ph id="ph1">\&lt;</ph>X&gt; sp, both static_cast<ph id="ph2">\&lt;</ph>bool&gt;(sp) and bool b(sp) are valid—and Boolean-testable "contextual conversions" to bool—for example, if (sp), !sp, sp &amp;&amp; whatever.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>However, explicit operator bool() forbids implicit conversions to bool, so you can't say bool b = sp; and given a bool return type, you can't say return sp.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Now that real variadic templates are implemented, _VARIADIC_MAX and related macros have no effect.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>If you're still defining _VARIADIC_MAX, it is just ignored.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>If you acknowledged our macro machinery intended to support simulated variadic templates in any other way, you have to change your code.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>In addition to ordinary keywords, STL headers now forbid the macro-izing of the context-sensitive keywords "override" and "final".</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>reference_wrapper/ref()/cref() now forbid binding to temporary objects.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>random&gt; now strictly enforces its compile-time preconditions.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Various STL type traits have the precondition "T shall be a complete type".</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Although the compiler now enforces this more strictly, it may not enforce it in all situations.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>(Because STL precondition violations trigger undefined behavior, the Standard doesn't guarantee enforcement.)</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The STL does not support /clr:oldSyntax.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The C++11 specification for common_type&lt;&gt; had unexpected and undesired consequences; in particular, it makes common_type<ph id="ph1">\&lt;</ph>int, int&gt;::type return int&amp;&amp;.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Therefore, Visual C++ implements the Proposed Resolution for Library Working Group issue 2141, which makes common_type<ph id="ph1">\&lt;</ph>int, int=""&gt;::type return int.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>As a side-effect of this change, the identity case no longer works (common_type<ph id="ph1">\&lt;</ph>T&gt; does not always result in type T).</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>This complies with the Proposed Resolution, but it breaks any code that relied on the previous behavior.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>If you require an identity type trait, don't use the non-standard std::identity that's defined in &lt;type_traits&gt;                 because it won't work for <ph id="ph1">\&lt;</ph>void&gt;                 .</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Instead, implement your own identity type trait to suit your needs.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>MFC and ATL</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>MFC MBCS Library is no longer included in Visual Studio because Unicode is so popular and use of MBCS is significantly reduced.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>This change also keeps MFC more closely aligned with the Windows SDK itself, because many of the new controls and messages are Unicode-only.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>However, if you must continue to use the MFC MBCS library, you can download it from the MSDN Download Center.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The Visual C++ Redistributable Package still includes this library.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Accessibility for the MFC ribbon is changed.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Instead of a one-level architecture, there is now a hierarchical architecture.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>You can still use the old behavior by calling CRibbonBar::EnableSingleLevelAccessibilityMode().</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>CDatabase::GetConnect method is removed.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>To improve security, the connection string is now stored encrypted and is decrypted only as needed; it cannot be returned as plain text.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>The string can be obtained by using the CDatabase::Dump method.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Signature of CWnd::OnPowerBroadcast is changed.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The signature of this message handler is changed to take an LPARAM as the second parameter.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Signatures are changed to accommodate message handlers.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>The parameter lists of the following functions have been changed to use newly added ON_WM_* message handlers:</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>CWnd::OnDisplayChange changed to (UINT, int, int) instead of (WPARAM, LPARAM) so that the new ON_WM_DISPLAYCHANGE macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnDDEInitiate changed to (CWnd*, UINT, UNIT) instead of (WPARAM, LPARAM) so that the new ON_WM_DDE_INITIATE macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnDDEExecute changed to (CWnd*, HANDLE) instead of (WPARAM, LPARAM) so that the new ON_WM_DDE_EXECUTE macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnDDETerminate changed to (CWnd*) as the parameter instead of (WPARAM, LPARAM) so that the new ON_WM_DDE_TERMINATE macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>CMFCMaskedEdit::OnCut changed to no parameters instead of (WPARAM, LPARAM) so that the new ON_WM_CUT macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>CMFCMaskedEdit::OnClear changed to no parameters instead of (WPARAM, LPARAM) so that the new ON_WM_CLEAR macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>CMFCMaskedEdit::OnPaste changed to no parameters instead of (WPARAM, LPARAM) so that the new ON_WM_PASTE macro can be used in the message map.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>ifdefs in the MFC header files are removed.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Numerous #ifdefs in the MFC header files related to unsupported versions of Windows (WINVER <ph id="ph1">&amp;lt;</ph> 0x0501) are removed.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>ATL DLL (atl120.dll) is removed.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>ATL is now provided as headers and a static library (atls.lib).</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Atlsd.lib, atlsn.lib, and atlsnd.lib are removed.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Atls.lib no longer has character-set dependencies or code that's specific for debug/release.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Because it works the same for Unicode/ANSI and debug/release, only one version of the library is required.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>ATL/MFC Trace tool is removed together with the ATL DLL, and the tracing mechanism is simplified.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The CTraceCategory constructor now takes one parameter (the category name), and the TRACE macros call the CRT debug reporting functions.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Visual C++ 2012 Breaking Changes</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The /Yl compiler option has changed.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>By default, the compiler uses this option, which can lead to LNK2011 errors under certain conditions.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/Yl (Inject PCH Reference for Debug Library)<ept id="p1">](../build/reference/yl-inject-pch-reference-for-debug-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>In code that's compiled by using /clr, the enum class keyword defines a C++11 enum, not a common language runtime (CLR) enum.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>To define a CLR enum, you must be explicit about its accessibility.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Use the template keyword to explicitly disambiguate a dependent name (C++ Language Standard compliance).</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>In the following example, the highlighted template keyword is mandatory to resolve the ambiguity.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Name Resolution for Dependent Types<ept id="p1">](../cpp/name-resolution-for-dependent-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Constant expression of type float is no longer allowed as a template argument, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Code that's compiled by using the /GS command-line option and that has an off-by-one vulnerability may lead to process termination at                 runtime, as shown in the following pseudocode example.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The default architecture for x86 builds is changed to SSE2; therefore, the compiler may emit SSE instructions, and will use the XMM                 registers to perform floating-point calculations.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>If you want to revert to previous behavior, then use the /arch:IA32 compiler flag to specify the                 architecture as IA32.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The compiler may issue warnings <bpt id="p1">[</bpt>Compiler Warning (level 4) C4703<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-4-c4703.md)</ept> and C4701 where previously it did not.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>The compiler applies stronger checks for use of                 uninitialized local variables of pointer type.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>When the new linker flag /HIGHENTROPYVA is specified, Windows 8 typically causes memory allocations to return a 64-bit address.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>(Prior to Windows 8, such allocations more often returned addresses that were less than 2 GB.)  This may expose pointer truncation bugs in existing code.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>By default, this switch is on.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>To disable this behavior, specify /HIGHENTROPYVA:NO.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The managed compiler (Visual Basic/C#) also supports /HIGHENTROPYVA for managed builds.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>However, in this case,                 the /HIGHENTROPYVAswitch is off by default.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>IDE</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Although we recommend that you do not create Windows Forms applications in C++/CLI, maintenance of existing C++/CLI UI applications is supported.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>If you have to create a Windows Forms application, or any other .NET UI application, use C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Use C++/CLI for interoperability purposes only.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Parallel Patterns Library and Concurrency Runtime Library</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The SchedulerType enumeration of UmsThreadDefault is deprecated.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Specification of UmsThreadDefault produces a deprecated warning, and internally maps back to the ThreadScheduler.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Following a breaking change between the C++98/03 and C++11 standards, using explicit template arguments to call make_pair()—as inmake_pair<ph id="ph1">\&lt;</ph>int, int&gt;(x, y)—typically does not compile in Visual C++ in Visual Studio 2012.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>The solution is to always call make_pair()without explicit template arguments—as in make_pair(x, y).</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Providing explicit template arguments defeats the purpose of the function.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>If you require precise control over the resulting type, use pair instead of make_pair—as in pair<ph id="ph1">\&lt;</ph>short, short&gt;(int1, int2).</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Another breaking change between the C++98/03 and C++11 standards: When A is implicitly convertible to B and B is implicitly convertible to C, but A is not implicitly convertible to C, C++98/03 and Visual C++ 2010 permitted pair<ph id="ph1">\&lt;</ph>A, X&gt; to be converted (implicitly or explicitly) to pair<ph id="ph2">\&lt;</ph>C, X&gt;.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>(The other type, X, is not of interest here, and this is not specific to the first type in the pair.) Because C++11 and Visual C++ in Visual Studio 2012 detect that A is not implicitly convertible to C, they remove the pair conversion from overload resolution.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>This is a positive change for many scenarios.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>For example, overloading func(const pair<ph id="ph1">\&lt;</ph>int, int&gt;&amp;) and func(const pair<ph id="ph2">\&lt;</ph>string, string&gt;&amp;), and calling func() with pair<ph id="ph3">\&lt;</ph>const char *, const char <ph id="ph4">\*</ph>&gt; will compile with this change.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>However, this change breaks code that relied on aggressive pair conversions.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Such code can typically be fixed by performing one part of the conversion explicitly—for example, by passing make_pair(static_cast<ph id="ph1">\&lt;</ph>B&gt;(a), x) to a function that expects pair<ph id="ph2">\&lt;</ph>C, X&gt;.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Visual C++ 2010 simulated variadic templates—for example, make_shared<ph id="ph1">\&lt;</ph>T&gt;(arg1, arg2, argN)—up to a limit of 10 arguments, by stamping out overloads and specializations with preprocessor machinery.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>In Visual C++ in Visual Studio 2012, this limit is reduced to 5 arguments to improve compile times and compiler memory consumption for the majority of users.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>However, you can set the previous limit by explicitly defining _VARIADIC_MAX as 10, project-wide.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>C++11 17.6.4.3.1 [macro.names]/2 forbids macro-izing keywords when C++ Standard Library headers are included.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>The headers now emit compiler errors if they detect macro-ized keywords.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>(Defining _ALLOW_KEYWORD_MACROS allows such code to compile, but we strongly discourage that usage.) As an exception, macro-ized new is permitted by default, because the headers comprehensively defend themselves by using #pragma push_macro("new")/#undef new/#pragma pop_macro("new").</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Defining _ENFORCE_BAN_OF_MACRO_NEW does exactly what its name implies.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>To implement various optimizations and debugging checks, the C++ Standard Library implementation intentionally breaks binary compatibility among versions of Visual Studio (2005, 2008, 2010, 2012).</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>When the C++ Standard Library is used, this forbids the mixing of object files and static libraries that are compiled by using different versions into one binary (EXE or DLL), and forbids the passing of C++ Standard Library objects between binaries that are compiled by using different versions.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The mixing of object files and static libraries (using the C++ Standard Library) that were compiled by using Visual C++ 2010 with those that were compiled by using Visual C++ in Visual Studio 2012 emits linker errors about _MSC_VER mismatch, where _MSC_VER is the macro that contains the compiler's major version (1700 for Visual C++ in Visual Studio 2012).</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>This check cannot detect DLL mixing, and cannot detect mixing that involves Visual C++ 2008 or earlier.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>In addition to detecting _ITERATOR_DEBUG_LEVEL mismatches, which was implemented in Visual C++ 2010, Visual C++ in Visual Studio 2012 detects Runtime Library mismatches.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>These occur when the compiler options /MT (static release), /MTd (static debug), /MD (dynamic release), and /MDd (dynamic debug) are mixed.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">\&lt;</ph>(), operator&gt;(), operator<ph id="ph2">\&lt;</ph>=(), and operator&gt;=() were previously available for the std::unordered_map andstdext::hash_map families of containers, although their implementations were not actually useful.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>These non-standard operators have been removed in Visual C++ in Visual Studio 2012.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Additionally, the implementation of operator==() and operator!=() for thestd::unordered_map family has been extended to cover the stdext::hash_map family.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>(We recommend that you avoid the use of thestdext::hash_map family in new code.)</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>C++11 22.4.1.4 [locale.codecvt] specifies that codecvt::length() and codecvt::do_length() should take modifiable stateT&amp;parameters, but Visual C++ 2010 took const stateT&amp;.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Visual C++ in Visual Studio 2012 takes stateT&amp; as mandated by the standard.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>This difference is significant for anyone who is attempting to override the virtual function do_length().</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>CRT</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>The C Runtime (CRT) heap, which is used for new and malloc(), is no longer private.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The CRT now uses the process heap.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>This means that the heap is not destroyed when a DLL is unloaded, so DLLs that link statically to the CRT must ensure memory that's allocated by the DLL code is cleaned up before it’s unloaded.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>The iscsymf() function asserts with negative values.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The threadlocaleinfostruct struct has changed to accommodate the changes to locale functions.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>CRT functions that have corresponding intrinsics such as memxxx(), strxxx() are removed from intrin.h.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>If you included intrin.h only for these functions, you must now include the corresponding CRT headers.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>MFC and ATL</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Removed Fusion support (afxcomctl32.h); therefore, all methods that are defined in afxcomctl32.h have been removed.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Header files afxcomctl32.h and afxcomctl32.inl have been deleted.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Changed the name of CDockablePane::RemoveFromDefaultPaneDividier to CDockablePane::RemoveFromDefaultPaneDivider.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Changed the signature of CFileDialog::SetDefExt to use LPCTSTR; therefore, Unicode builds are affected.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Removed obsolete ATL tracing categories.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Changed the signature of CBasePane::MoveWindow to take a const CRect.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Changed the signature of CMFCEditBrowseCtrl::EnableBrowseButton.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Removed m_fntTabs and m_fntTabsBold from CMFCBaseTabCtrl.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Added a parameter to the CMFCRibbonStatusBarPane constructors.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>(It is a default parameter, and so it is not source-breaking.)</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Added a parameter to the CMFCRibbonCommandsListBox constructor.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>(It is a default parameter, and so it is not source-breaking.)</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Removed the AFXTrackMouse API (and related timer proc).</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Use the Win32 TrackMouseEvent API instead.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Added a parameter to the CFolderPickerDialog constructor.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>(It is a default parameter, and so it is not source-breaking.)</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>CFileStatus structure size changed: The m_attribute member changed from BYTE to DWORD (to match the value that's returned fromGetFileAttributes).</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>CRichEditCtrl and CRichEditView use MSFTEDIT_CLASS (RichEdit 4.1 control) instead of RICHEDIT_CLASS (RichEdit 3.0 control) in Unicode builds.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Removed AFX_GLOBAL_DATA::IsWindowsThemingDrawParentBackground because it is always TRUE on Windows Vista, Windows 7, and Windows 8.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Removed AFX_GLOBAL_DATA::IsWindowsLayerSupportAvailable because it is always TRUE on Windows Vista, Windows 7, and Windows 8.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Removed AFX_GLOBAL_DATA::DwmExtendFrameIntoClientArea.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Call Windows API directly on Windows Vista, Windows 7, and Windows 8.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Removed AFX_GLOBAL_DATA::DwmDefWindowProc.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Call Windows API directly on Windows Vista, Windows 7, and Windows 8.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Renamed AFX_GLOBAL_DATA::DwmIsCompositionEnabled to IsDwmCompositionEnabled to eliminate name collision.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Changed identifiers for a number of MFC internal timers and moved the definitions to afxres.h (AFX_TIMER_ID_*).</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Changed the signature of OnExitSizeMove method to agree with the ON_WM_EXITSIZEMOVE macro:</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>CFrameWndEx</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>CMDIFrameWndEx</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>CPaneFrameWnd</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Changed the name and signature of OnDWMCompositionChanged to agree with the ON_WM_DWMCOMPOSITIONCHANGED macro:</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>CFrameWndEx</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>CMDIFrameWndEx</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>CPaneFrameWnd</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Changed the signature of OnMouseLeave method to agree with the ON_WM_MOUSELEAVE macro:</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>CMFCCaptionBar</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>CMFCColorBar</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>CMFCHeaderCtrl</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>CMFCProperySheetListBox</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>CMFCRibbonBar</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>CMFCRibbonPanelMenuBar</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>CMFCRibbonRichEditCtrl</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>CMFCSpinButtonCtrl</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>CMFCToolBar ReplaceThisText</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>CMFCToolBarComboBoxEdit</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditCtrl</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>CMFCAutoHideBar</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Changed the signature of OnPowerBroadcast to agree with the ON_WM_POWERBROADCAST macro:</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>CFrameWndEx</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>CMDIFrameWndEx</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Changed the signature of OnStyleChanged to agree with the ON_WM_STYLECHANGED macro:</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>CMFCListCtrl</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>CMFCStatusBar</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Renamed the internal method FontFamalyProcFonts to FontFamilyProcFonts.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Removed numerous global static CString objects to eliminate memory leaks in some situations (replaced with #defines), and the following class member variables:</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>CKeyBoardManager::m_strDelimiter</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatChar</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatShort</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatLong</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatUShort</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatULong</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatFloat</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormatDouble</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>CMFCToolBarImages::m_strPngResType</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>CMFCPropertyGridProperty::m_strFormat</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Changed the signature of CKeyboardManager::ShowAllAccelerators and removed the accelerator delimiter parameter.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Added CPropertyPage::GetParentSheet, and in the CPropertyPage class, call it instead of GetParent to get the correct parent sheet window, which may be the parent or a grandparent window to CPropertyPage.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>You might have to change your code to call GetParentSheet instead ofGetParent.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Fixed unbalanced #pragma warning(push) in ATLBASE.H, which caused warnings to be disabled incorrectly.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Those warnings are now enabled correctly after ATLBASE.H has been parsed.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Moved D2D-related methods from AFX_GLOBAL_DATA to _AFX_D2D_STATE:</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>GetDirectD2dFactory</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>GetWriteFactory</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>GetWICFactory</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>InitD2D</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>ReleaseD2DRefs</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>IsD2DInitialized</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>D2D1MakeRotateMatrix</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Instead of calling, for example, afxGlobalData.IsD2DInitialized, call AfxGetD2DState-&gt;IsD2DInitialized.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Removed obsolete ATL*.CPP files from the \atlmfc\include\ folder.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Moved afxGlobalData initialization to on-demand instead of at CRT initialization time, to satisfy DLLMain requirements.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Added the RemoveButtonByIndex method to the CMFCOutlookBarPane class.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Corrected CMFCCmdUsageCount::IsFreqeuntlyUsedCmd to IsFrequentlyUsedCmd.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Corrected several instances of RestoreOriginalstate to RestoreOriginalState (CMFCToolBar, CMFCMenuBar, CMFCOutlookBarPane).</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Removed unused methods from CDockablePane: SetCaptionStyle, IsDrawCaption, IsHideDisabledButtons, GetRecentSiblingPaneInfo, andCanAdjustLayout.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Removed CDockablePane static member variables m_bCaptionText and m_bHideDisabledButtons.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Added an override DeleteString method to CMFCFontComboBox.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Removed unused methods from CPane: GetMinLength and IsLastPaneOnLastRow.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Renamed CPane::GetDockSiteRow(CDockingPanesRow *) to CPane::SetDockSiteRow.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Visual C++ 2010 Breaking Changes</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>The auto keyword has a new default meaning.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Because use of the old meaning is rare, most applications will not be affected by this change.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>The new static_assert keyword is introduced, which will cause a name conflict if there is already an identifier by that name in your code.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Support for the new lambda notation excludes support for coding an unquoted GUID in an IDL uuid attribute.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4 introduces the concept of corrupted state exceptions, which are exceptions that leave a process in an unrecoverable                 corrupted state.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>By default, you cannot catch a corrupted state exception, even with the /EHa compiler option that catches all other exceptions.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>To explicitly catch a corrupted state exception, use __try-<ph id="ph1">\_</ph>_except statements.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Or, apply the [HandledProcessCorruptedStateExceptions]attribute                 to enable a function to catch corrupted state exceptions.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>This change affects primarily system programmers who might have to catch a corrupted                 state exception.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The eight exceptions are STATUS_ACCESS_VIOLATION, STATUS_STACK_OVERFLOW, EXCEPTION_ILLEGAL_INSTRUCTION,                 EXCEPTION_IN_PAGE_ERROR, EXCEPTION_INVALID_DISPOSITION, EXCEPTION_NONCONTINUABLE_EXCEPTION, EXCEPTION_PRIV_INSTRUCTION, STATUS_UNWIND_CONSOLIDATE.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>For more information about these exceptions, see the <bpt id="p1">[</bpt>GetExceptionCode<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/desktop/ms679356.aspx)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The revised /GS compiler option guards against buffer overruns more comprehensively than in earlier versions.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>This version might insert additional security checks in the stack that might decrease performance.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Use the new __declspec(safebuffers) keyword to instruct the compiler to not insert security checks for a particular function.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>If you compile with both the /GL (Whole Program Optimization) and /clr (Common Language Runtime Compilation) compiler options, the /GLoption is ignored.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>This change was made because the combination of compiler options provided little benefit.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>As a result of this change, the performance of the build is improved.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>By default, support for trigraphs is disabled in Visual C++ 2010 .</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Use the /Zc:trigraphs compiler option to enable trigraphs support.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>A trigraph consists of two consecutive question marks ("??") followed by a unique third character.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>The compiler replaces a trigraph with a corresponding punctuation character.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>For example, the compiler replaces the "??=" trigraph with the '#' character.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Use trigraphs in C source files that use a character set that does not contain convenient graphic representations for some punctuation characters.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The linker no longer supports optimizing for Windows 98.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The /OPT (Optimizations) option produces a compile time error if you specify/OPT:WIN98 or /OPT:NOWIN98.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The default compiler options that are specified by the RuntimeLibrary and DebugInformationFormat build system properties have been changed.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>By default, these build properties are specified in projects that are created by Visual C++ releases 7.0 through 10.0.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>If you migrate a project that was created by Visual C++ 6.0, consider whether to specify a value for these properties.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2010, RuntimeLibrary = MultiThreaded (/MD) and DebugInformationFormat = ProgramDatabase (/Zi).</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>In Visual C++ 9.0,RuntimeLibrary = MultiThreaded (/MT) and DebugInformationFormat = Disabled.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>CLR</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>The Microsoft C# and Visual Basic compilers can now produce a no primary interop assembly (no-PIA).</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>A no-PIA assembly can use COM types without the deployment of the relevant primary interop assembly (PIA).</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>When consuming no-PIA assemblies produced by Visual C# or Visual Basic, you must reference the PIA assembly on the compile command before you reference any no-PIA assembly that uses the library.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Visual C++ Projects and MSBuild</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Visual C++ projects are now based on the MSBuild tool.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Consequently, project files use a new XML file format and a .vcxproj file suffix.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Visual C++ 2010 automatically converts project files from earlier versions of Visual Studio to the new file format.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>An existing project is affected if it depends on the previous build tool, VCBUILD.exe, or project file suffix, .vcproj.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>In earlier releases, Visual C++ supported the late evaluation of property sheets.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>For example, a parent property sheet could import a child property sheet, and the parent could use a variable defined in the child to define other variables.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Late evaluation enabled the parent to use the child variable even before the child property sheet was imported.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2010, a project sheet variable cannot be used before it is defined because MSBuild supports only early evaluation.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>IDE</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The application termination dialog box no longer ends an application.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>In previous releases, when the abort() or terminate() function closed the                 retail build of an application, the C Run-Time Library displayed an application termination message in a console window or dialog box.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>The message said in part, "This                 application has requested the Runtime to terminate it in an unusual way.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Please contact the application's support team for more information."</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>The application termination message was redundant because Windows subsequently displayed the current termination handler, which was usually the Windows Error Reporting                 (Dr. Watson) dialog box or the Visual Studio debugger.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Starting in Visual Studio 2010, the C Run-Time Library does not display the message.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Furthermore, the runtime                 prevents the application from ending before a debugger starts.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>This is a breaking change only if you depend on the previous behavior of the application termination                 message.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Specifically for Visual Studio 2010, IntelliSense does not work for C++/CLI code or attributes, Find All References does not work for local                 variables, and Code Model does not retrieve type names from imported assemblies or resolve types to their fully qualified names.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The SafeInt class is included in Visual C++ and is no longer in a separate download.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>This is a breaking change only if you have developed a class that is also named "SafeInt".</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The libraries deployment model no longer uses manifests to find a particular version of a dynamic link library.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Instead, the name of each dynamic link library contains its version number, and you use that name to locate the library.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>In previous versions of Visual Studio, you could rebuild the run time libraries.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Visual C++ 2010 no longer supports building your own copies of the C run time library files.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\&lt;</ph>iterator&gt;                 header is no longer included automatically by many other header files.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Instead, include that header explicitly if you require support                 for the standalone iterators defined in the An existing project is affected if it depends on the previous build tool, VCBUILD.exe, or project file suffix,                  .vcproj.interator&gt; header.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">\&lt;</ph>algorithm&gt;                 header, the checked_* and unchecked_<ph id="ph2">\*</ph> functions are removed.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>And in the <ph id="ph1">\&lt;</ph>iterator&gt;&gt; header, the                  checked_iteratorclass is removed, and the unchecked_array_iterator class has been added.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The CComPtr::CComPtr(int) constructor is removed.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>That constructor allowed a CComPtr object to be constructed from the NULL macro, but was unnecessary and allowed nonsensical constructions from non-zero integers.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>A CComPtr can still be constructed from NULL, which is defined as 0, but will fail if constructed from an integer other than literal 0.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>use nullptr instead.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>The following ctype member functions were removed: ctype::_Do_narrow_s, ctype::_Do_widen_s, ctype::_narrow_s, ctype::_widen_s.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>If an application uses one of these member functions, you must replace it with the corresponding non-secure version: ctype::do_narrow,ctype::do_widen, ctype::narrow, ctype::widen.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>CRT, MFC, and ATL Libraries</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Support has been removed for users to build the CRT, MFC, and ATL libraries.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>For example, an appropriate nmake file is not provided.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>However, users still have access to the source code for these libraries.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>And a document that describes the MSBuild options that Microsoft uses to build these                 libraries will probably be posted in a Visual C++ Team Blog.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>MFC support for IA64 has been removed.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>However, support for the CRT and ATL on IA64 is still provided.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Ordinals are no longer reused in MFC module-definition (.def) files.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>This change means ordinals will not be different between minor versions, and binary compatibility for service packs and quick fix engineering releases will be improved.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>A new virtual function was added to the CDocTemplate class.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>This new virtual function is <bpt id="p1">[</bpt>CDocTemplate Class<ept id="p1">](../mfc/reference/cdoctemplate-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>The previous version of OpenDocumentFile had two parameters.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>The new version has three parameters.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>To support the restart manager, any class derived from CDocTemplate must implement the version that has three parameters.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>The new parameter is bAddToMRU.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Macros and Environment Variables</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>The environment variable __MSVCRT_HEAP_SELECT is no longer supported.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>This environment variable is removed and there is no replacement.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Microsoft Macro Assembler Reference</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Several directives were removed from the Microsoft Macro Assembler Reference compiler.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>The removed directives are .186, .286, .286P, .287,.8086, .8087, and .NO87.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>Visual C++ 2008 Breaking Changes</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>The Windows 95, Windows 98, Windows ME, and Windows NT platforms are no longer supported.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>These operating systems have been removed from the list of targeted platforms.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>The compiler no longer supports multiple attributes that were directly associated with ATL Server.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>The following attributes are no longer supported:</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>perf_counter</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>perf_object</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>perfmon</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>request_handler</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>soap_handler</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>soap_header</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>soap_method</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>tag_name</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Visual C++ Projects</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>When upgrading projects from previous versions of Visual Studio, you might have to modify the WINVER and _WIN32_WINNT macros so that they are greater than or equal to 0x0500.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Beginning with Visual Studio 2008, the new project wizard does not have an option to create a C++ SQL Server project.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>SQL Server projects created by using an earlier version of Visual Studio will still compile and work correctly.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>The Windows API header file Winable.h has been removed.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Include Winuser.h instead.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The Windows API library Rpcndr.lib has been removed.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Link with rpcrt4.lib instead.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>CRT</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Support for Windows 95, Windows 98, Windows Millennium Edition, and Windows NT 4.0 has been removed.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>The following global variables have been removed:</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>_osplatform</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>_osver</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>_winmajor</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>_winminor</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>_winver</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The following functions have been removed.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Use the Windows API functions GetVersion or GetVersionEx instead:</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>_get_osplatform</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>_get_osver</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>_get_winmajor</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>_get_winminor</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>_get_winver</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>The syntax for SAL Annotations has changed.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SAL Annotations<ept id="p1">](../c-runtime-library/sal-annotations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>The IEEE filter now supports the SSE 4.1 instruction set.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_fpieee_flt<ept id="p1">](../c-runtime-library/reference/fpieee-flt.md)</ept>_fpieee_flt.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>The C Run-Time Libraries that ship with Visual Studio are no longer dependent on the system DLL msvcrt.dll.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Support for Windows 95, Windows 98, Windows Millennium Edition, and Windows NT 4.0 has been removed.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>When compiling in debug mode with _HAS_ITERATOR_DEBUGGING defined, an application will now assert when an iterator attempts to increment or decrement past the bounds of the underlying container.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>The member variable c of the stack Class is now declared protected.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>Previously, this member variable was declared public.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>The behavior of money_get::do_get has changed.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Previously, when parsing a monetary amount with more fraction digits than are called for by frac_digits, do_get used to consume them all.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Now, do_get stops parsing after consuming at most frac_digits characters.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>ATL</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>ATL cannot be built without a dependency on CRT.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>In earlier versions of Visual Studio, you could use #define ATL_MIN_CRT to make an ATL project minimally dependent on CRT.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2008, all ATL projects are minimally dependent on CRT regardless of whether ATL_MIN_CRT is defined.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>The ATL Server codebase has been released as a shared source project on CodePlex and is not installed as part of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Data encoding and decoding classes from atlenc.h and utility functions and classes from atlutil.h and atlpath.h have been kept and are now part of the ATL library.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Several files associated with ATL Server are no longer part of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Some functions are no longer included in the DLL.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>They are still located in the import library.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>This will not affect code that uses the functions statically.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>It will affect only the code that uses these functions dynamically.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The macros PROP_ENTRY and PROP_ENTRY_EX have been deprecated and replaced with the macros PROP_ENTRY_TYPE andPROP_ENTRY_TYPE_EX for security reasons.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>ATL/MFC Shared Classes</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>ATL cannot be built without a dependency on CRT.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>In earlier versions of Visual Studio, you could use #define ATL_MIN_CRT to make an ATL project minimally dependent on CRT.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2008, all ATL projects are minimally dependent on CRT regardless of whether ATL_MIN_CRT is defined.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>The ATL Server codebase has been released as a shared source project on CodePlex and is not installed as part of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>Data encoding and decoding classes from atlenc.h and utility functions and classes from atlutil.h and atlpath.h have been kept and are now part of the ATL library.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Several files associated with ATL Server are no longer part of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Some functions are no longer included in the DLL.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>They are still located in the import library.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>This will not affect code that uses the functions statically.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>It will affect only the code that uses these functions dynamically.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>MFC</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>CTime Class The CTime class now accepts dates starting from 1/1/1900 C.E.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>instead of 1/1/1970 C.E.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Tab order of controls in MFC dialogs The correct tab order of multiple controls in an MFC dialog is disturbed if an MFC ActiveX control is inserted in the tab order.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>This change corrects that problem.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>For example, create an MFC dialog application that has an ActiveX control and several edit controls.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Position the ActiveX control in the middle of the tab order of the edit controls.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Start the application, click an edit control whose tab order is after the ActiveX control, then tab.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Prior to this change, the focus went to the edit control following the ActiveX control instead of the next edit control in the tab order.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>CFileDialog Class   Custom templates for the CFileDialog class cannot be automatically ported to Windows Vista.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>They are still usable, but will not have the additional functionality or looks of Windows Vista style dialogs.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>CWnd ClassandCFrameWnd Class    The CWnd::GetMenuBarInfo method was removed.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>The CFrameWnd::GetMenuBarInfo method is now a non-virtual method.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>For more information, see GetMenuBarInfo Functionin the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>MFC ISAPI support  MFC no longer supports building applications with the Internet Server Application Programming Interface (ISAPI).</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>If you want to build an ISAPI application, call the ISAPI extensions directly.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Deprecated ANSI APIs    The ANSI versions of several MFC methods are deprecated.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Use the Unicode versions of those methods in your future applications.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>For more information, see Build Requirements for Windows Vista Common Controls.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>Visual C++ 2005 Breaking Changes</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>CRT</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Many functions have been deprecated.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>See Deprecated CRT Functions.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Many functions now validate their parameters, halting execution if given invalid parameters.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>This may break code that passes invalid parameters and relies on the function ignoring them or just returning an error code.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>See Parameter Validation.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>The file descriptor value -2 is now used to indicate that stdout and stderr are not available for output, as for example in a Windows application that has no console window.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>The previous value used was -1.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_fileno<ept id="p1">](../c-runtime-library/reference/fileno.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>The single-threaded CRT libraries, libc.lib and libcd.lib, have been removed.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Use the multi-threaded CRT libraries.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>The /ML compiler flag is no longer supported.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>Non-locking versions of some functions have been added in cases where the performance difference between the multithreaded code and the single-threaded code is potentially significant.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>The overload of pow, double pow(int, int), was removed to better conform with the standard.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>The %n format specifier is no longer supported by default in any of the printf family of functions because it is inherently insecure.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>The default behavior if %n is encountered is to invoke the invalid parameter handler.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>To enable %n support, use _set_printf_count_output (also see_get_printf_count_output).</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>sprintf now prints the negative sign of a signed zero.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>swprintf has been changed to conform with the Standard; it now requires a size parameter.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>The form of swprintf without a size parameter has been deprecated.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>_set_security_error_handler has been removed.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>Remove any calls to that function; the default handler is a much safer way of dealing with security errors.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>time_t is now a 64-bit value (unless _USE_32BIT_TIME_T is defined).</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>The _spawn, _wspawn Functions now leave errno untouched on success, as specified by the C Standard.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>RTC now uses wide characters by default.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Floating-point control word support functions have been deprecated for applications compiled with /CLR or /CLR:PURE.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The affected functions are _clear87, _clearfp, _control87, _controlfp, _fpreset, _status87, _statusfp.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>You can disable the deprecation warning by defining _CRT_MANAGED_FP_NO_DEPRECATE, but the use of these functions in managed code is unpredictable and unsupported.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Some functions now return const pointers.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>The old, non-const behavior can be reinstated by defining _CONST_RETURN.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>The affected functions are</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>memchr, wmemchr</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>strchr, wcschr, _mbschr, _mbschr_l</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>strpbrk, wcspbrk, _mbspbrk, _mbspbrk_l</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>strrchr, wcsrchr, _mbsrchr, _mbsrchr_l</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>strstr, wcsstr, _mbsstr, _mbsstr_l</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>When linking with Setargv.obj or Wsetargv.obj, it is no longer possible to suppress the expansion of a wildcard character on the command line by enclosing it in double quotes.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Expanding Wildcard Arguments<ept id="p1">](../c-language/expanding-wildcard-arguments.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Standard Library (2005)</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The exception class (located in the <ph id="ph1">\&lt;</ph>exception&gt; header) has been moved to the std namespace.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>In previous versions, this class was in the global namespace.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>To resolve any errors indicating that the exception class cannot be found, add the following using statement to your code:                 using namespace std;</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>When calling valarray::resize(), the contents of the valarray will be lost and will be replaced by default values.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>The resize() method is intended to reinitialize the valarray rather than grow it dynamically like a vector.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Debug Iterators: Applications built with a debug version of the C-Runtime Library and which use iterators incorrectly might begin to see asserts at runtime.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>To disable these asserts, you must define _HAS_ITERATOR_DEBUGGING to 0.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Debug Iterator Support<ept id="p1">](../standard-library/debug-iterator-support.md)</ept></source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Visual C++ .NET 2003 Breaking Changes</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Compiler</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Closing parentheses now required for the defined preprocessor directive (C2004).</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Explicit specializations no longer find template parameters from primary template (<bpt id="p1">[</bpt>Compiler Error C2146<ept id="p1">](../error-messages/compiler-errors-1/compiler-error-c2146.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>A protected member (n) can only be accessed through a member function of a class (B) that inherits from the class (A) of which it (n) is a member (<bpt id="p1">[</bpt>Compiler Error C2247<ept id="p1">](../error-messages/compiler-errors-1/compiler-error-c2247.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Improved accessibility checks in compiler now detect inaccessible base classes (<bpt id="p1">[</bpt>Compiler Error C2248<ept id="p1">](../error-messages/compiler-errors-1/compiler-error-c2248.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>An exception cannot be caught if the destructor and/or copy constructor is inaccessible (C2316).</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Default arguments on pointers to functions no longer allowed (<bpt id="p1">[</bpt>Compiler Error C2383<ept id="p1">](../error-messages/compiler-errors-1/compiler-error-c2383.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>A static data member cannot be initialized via derived class (<bpt id="p1">[</bpt>Compiler Error C2477<ept id="p1">](../error-messages/compiler-errors-1/compiler-error-c2477.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>The initialization of a typedef is not allowed by the standard and now generates a compiler error (<bpt id="p1">[</bpt>Compiler Error C2513<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2513.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>bool is now a proper type (<bpt id="p1">[</bpt>Compiler Error C2632<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2632.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>A UDC can now create ambiguity with overloaded operators (<bpt id="p1">[</bpt>C2666<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2666.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>More expressions are now considered valid null pointer constants (<bpt id="p1">[</bpt>Compiler Error C2668<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2668.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>template&lt;&gt; is now required in places where the compiler would previously imply it (<bpt id="p1">[</bpt>Compiler Error C2768<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2768.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>The expilicit specialization of a member function ourside the class is not valid if the function has already been explicitly specialized via a template class specialization (<bpt id="p1">[</bpt>Compiler Error C2910<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2910.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Floating point non-type template parameters are no longer allowed (<bpt id="p1">[</bpt>Compiler Error C2993<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c2993.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Class templates are not allowed as template type arguments (C3206).</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>Friend function names are no longer introduced into containing namespace (<bpt id="p1">[</bpt>Compiler Error C3767<ept id="p1">](../error-messages/compiler-errors-2/compiler-error-c3767.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>The compiler will no longer accept extra commas in a macro (C4002).</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>An object of POD type constructed with an initializer of the form () will be default-initialized (C4345).</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>typename is now required if a dependent name is to be treated as a type (<bpt id="p1">[</bpt>Compiler Warning (level 1) C4346<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-1-c4346.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Functions that were incorrectly considered template specializations are no longer considered so (C4347).</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>Static data members cannot be initialized via derived class (C4356).</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>A class template specialization needs to be defined before it was used in a return type (<bpt id="p1">[</bpt>Compiler Warning (level 3) C4686<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-3-c4686.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>The compiler now reports unreachable code (C4702).</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>What's New for Visual C++ in Visual Studio</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>