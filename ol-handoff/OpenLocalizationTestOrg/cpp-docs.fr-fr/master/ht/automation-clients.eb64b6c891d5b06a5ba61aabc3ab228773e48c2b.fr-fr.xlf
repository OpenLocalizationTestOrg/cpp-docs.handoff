<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7597f43d1a70c35c184e1e197e9eca96222454f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\automation-clients.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43f06f7125777fc49f3c70e79800f600db8a6000</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a41c04869a032bfdb74001440084d048667ecc6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automation Clients | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Automation Clients</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Automation makes it possible for your application to manipulate objects implemented in another application, or to expose objects so they can be manipulated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An Automation client is an application that can manipulate exposed objects belonging to another application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The application that exposes the objects is called the Automation server.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The client manipulates the server application's objects by accessing those objects' properties and functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Types of Automation Clients</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are two types of Automation clients:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Clients that dynamically (at run time) acquire information about the properties and operations of the server.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Clients that possess static information (provided at compile time) that specifies the properties and operations of the server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Clients of the first kind acquire information about the server's methods and properties by querying the OLE system's <ph id="ph1">`IDispatch`</ph> mechanism.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Although it is adequate to use for dynamic clients, <ph id="ph1">`IDispatch`</ph> is difficult to use for static clients, where the objects being driven must be known at compile time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For static bound clients, the Microsoft Foundation classes provide the <bpt id="p1">[</bpt>COleDispatchDriver<ept id="p1">](../mfc/reference/coledispatchdriver-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Static bound clients use a proxy class that is statically linked with the client application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This class provides a type-safe C++ encapsulation of the server application's properties and operations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`COleDispatchDriver`</ph> provides the principal support for the client side of Automation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`Add New Item`</ph> dialog box, you create a class derived from <ph id="ph2">`COleDispatchDriver`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You then specify the type-library file describing the properties and functions of the server application's object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Add Item dialog box reads this file and creates the <ph id="ph1">`COleDispatchDriver`</ph>-derived class, with member functions that your application can call to access the server application's objects in C++ in a type-safe manner.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Additional functionality inherited from <ph id="ph1">`COleDispatchDriver`</ph> simplifies the process of calling the proper Automation server.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Handling Events in Automation Clients</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want to handle events in your automation client, you need to add a sink interface.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>MFC provides wizard support to add sink interfaces for ActiveX controls, but not support for other COM servers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information on how to add a sink interface in an MFC client for source interfaces described by COM servers, see HOWTO: Create a Sink Interface in MFC-Based COM Client (KB 181845) at <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;181845<ept id="p1">](http://support.microsoft.com/default.aspxscid=kb;en-us;181845)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Automation Clients: Using Type Libraries</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Automation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>MFC Application Wizard</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>