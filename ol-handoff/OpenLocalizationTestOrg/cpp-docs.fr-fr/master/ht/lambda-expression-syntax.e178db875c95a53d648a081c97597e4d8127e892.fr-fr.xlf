<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38fcd3c7f75b470a9aaa3ee49c5c454e882302b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\lambda-expression-syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf011e53cf3f9fc3d4a3993fb981ea5ab60550a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98e2849dd3176dda6a15549e3651a0aff042ec2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article demonstrates the syntax and structural elements of lambda expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a description of lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../cpp/lambda-expressions-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Function Objects vs. Lambdas</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you write code, you probably use function pointers and function objects to solve problems and perform calculations, especially when you use <bpt id="p1">[</bpt>STL algorithms<ept id="p1">](../cpp/algorithms-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Function pointers and function objects each have advantages and disadvantagesâ€”for example, function pointers have minimal syntactic overhead but do not retain state within a scope, and function objects can maintain state but require the syntactic overhead of a class definition.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A lambda combines the benefits of function pointers and function objects and avoids their disadvantages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Like a function objects, a lambda is flexible and can maintain state, but unlike a function object, its compact syntax doesn't require an explicit class definition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By using lambdas, you can write code that's less cumbersome and less prone to errors than the code for an equivalent function object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following examples compare the use of a lambda to the use of a function object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first example uses a lambda to print to the console whether each element in a <ph id="ph1">`vector`</ph> object is even or odd.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The second example uses a function object to accomplish the same task.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example 1: Using a Lambda</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example passes a lambda to the <ph id="ph1">`for_each`</ph> function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The lambda prints a result that states whether each element in a <ph id="ph1">`vector`</ph> object is even or odd.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the example, the third argument to the <ph id="ph1">`for_each`</ph> function is a lambda.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[&amp;evenCount]`</ph> part specifies the capture clause of the expression, <ph id="ph2">`(int n)`</ph> specifies the parameter list, and remaining part specifies the body of the expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example 2: Using a Function Object</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sometimes a lambda would be too unwieldy to extend much further than the previous example.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The next example uses a function object instead of a lambda, together with the <ph id="ph1">`for_each`</ph> function, to produce the same results as Example 1.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Both examples store the count of even numbers in a <ph id="ph1">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To maintain the state of the operation, the <ph id="ph1">`FunctorClass`</ph> class stores the <ph id="ph2">`m_evenCount`</ph> variable by reference as a member variable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To perform the operation, <ph id="ph1">`FunctorClass`</ph> implements the function-call operator, <ph id="ph2">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler generates code that is comparable in size and performance to the lambda code in Example 1.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a basic problem like the one in this article, the simpler lambda design is probably better than the function-object design.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, if you think that the functionality might require significant expansion in the future, then use a function object design so that code maintenance will be easier.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`operator()`</ph>, see <bpt id="p1">[</bpt>Function Call<ept id="p1">](../cpp/function-call-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`for_each`</ph> function, see <bpt id="p1">[</bpt>for_each<ept id="p1">](http://msdn.microsoft.com/Library/8cb2ae72-bef6-488b-b011-0475c0787e33)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Examples of Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>generate</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>generate_n</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>for_each</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Exception Specifications (throw)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4297</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Microsoft-Specific Modifiers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>