<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f06fb6bbc667be97267bb0a84564e6a36c837528</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\istreambuf-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">352290f88c50f103f50d7b0a29787981d9d74779</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7e2edce95d587b2563d9b2009f3fff813ae9966</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class istreambuf_iterator describes an input iterator object that extracts character elements from an input stream buffer, which it accesses through an object it stores, of type pointer to <ph id="ph1">`basic_streambuf`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the istreambuf_iterator.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the istreambuf_iterator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`char_traits`\&lt;</ph> <bpt id="p1">*</bpt>CharType&gt;.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The istreambuf_iterator class must satisfy the requirements for an input iterator.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>After constructing or incrementing an object of class istreambuf_iterator with a non-null stored pointer, the object effectively attempts to extract and store an object of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> from the associated input stream.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The extraction may be delayed, however, until the object is actually dereferenced or copied.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the extraction fails, the object effectively replaces the stored pointer with a null pointer, thus making an end-of-sequence indicator.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Constructs an <ph id="ph1">`istreambuf_iterator`</ph> that is initialized to read characters from the input stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>int_type</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A type that provides an integer type for an <ph id="ph1">`istreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>istream_type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`istream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>streambuf_type</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`istreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the <ph id="ph1">`istream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>equal</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Tests for equality between two input stream buffer iterators.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The dereferencing operator returns the next character in the stream.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>operator++</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>operator-&gt;</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the value of a member, if any.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::char_type</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the <ph id="ph1">`ostreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::equal</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Tests for equivalence between two input stream buffer iterators.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The iterator for which to check for equality.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if both <ph id="ph1">`istreambuf_iterator`</ph>s are end-of-stream iterators or if neither is an end-of-stream iterator; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A range is defined by the <ph id="ph1">`istreambuf_iterator`</ph> to the current position and the end-of-stream iterator, but since all non-end-of stream iterators are equivalent under the <bpt id="p1">**</bpt>equal<ept id="p1">**</ept> member function, it is not possible to define any subranges using <ph id="ph2">`istreambuf_iterator`</ph>s.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators have the same semantics.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::int_type</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A type that provides an integer type for an <ph id="ph1">`istreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">**</bpt>Traits::int_type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::istream_type</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`istreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`basic_istream`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>istreambuf_iterator<ept id="p1">](#istreambuf_iterator__istreambuf_iterator)</ept> for an example of how to declare and use <ph id="ph1">`istream_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::istreambuf_iterator</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Constructs an istreambuf_iterator that is initialized to read characters from the input stream.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The input stream buffer to which the <ph id="ph1">`istreambuf_iterator`</ph> is being attached.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The input stream to which the <ph id="ph1">`istreambuf_iterator`</ph> is being attached.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the input stream-buffer pointer with <ph id="ph1">`strbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the input stream-buffer pointer with <ph id="ph1">`_Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>, and then eventually attempts to extract and store an object of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The dereferencing operator returns the next character in the stream.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The next character in the stream.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`istreambuf_iterator`</ph> or a reference to an <ph id="ph2">`istreambuf_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The first operator eventually attempts to extract and store an object of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> from the associated input stream.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The second operator makes a copy of the object, increments the object, and then returns the copy.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::operator-</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns the value of a member, if any.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The operator returns <bpt id="p1">**</bpt><ph id="ph1">&amp;\*\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::streambuf_type</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the istreambuf_iterator.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`basic_streambuf`\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>istreambuf_iterator<ept id="p1">](#istreambuf_iterator__istreambuf_iterator)</ept> for an example of how to declare and use <bpt id="p2">**</bpt>istreambuf_type<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>istreambuf_iterator::traits_type</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the <ph id="ph1">`istream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>iterator Struct</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>