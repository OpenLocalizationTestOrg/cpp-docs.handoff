<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8ba56bf910f9f13ee7d7514047039831b48da2b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\using-explicit-pinvoke-in-cpp-dllimport-attribute.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5648c5b4e89062feb59d39f5443a534f0dfb2857</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1875d093fd417023595a5279bb513fccf94985b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Explicit PInvoke in C++ (DllImport Attribute) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Explicit PInvoke in C++ (DllImport Attribute)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides explicit Platform Invoke (or PInvoke) features with the <ph id="ph1">`Dllimport`</ph> attribute to allow managed applications to call unmanaged functions packaged inside DLLs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Explicit PInvoke is required for situations where unmanaged APIs are packaged as DLLs and the source code is not available.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Calling Win32 functions, for example, requires PInvoke.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Otherwise, use implicit P{Invoke; see <bpt id="p1">[</bpt>Using C++ Interop (Implicit PInvoke)<ept id="p1">](../dotnet/using-cpp-interop-implicit-pinvoke.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>PInvoke works by using &lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This attribute, which takes the name of the DLL as its first argument, is placed before a function declaration for each DLL entry point that will be used.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The signature of the function must match the name of a function exported by the DLL (but some type conversion can be performed implicitly by defining the <ph id="ph1">`DllImport`</ph> declarations in terms of managed types.)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The result is a managed entry point for each native DLL function that contains the necessary transition code (or thunk) and simple data conversions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Managed functions can then call into the DLL through these entry points.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The code inserted into a module as the result of PInvoke is entirely managed and explicit PInvoke is supported for <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>/clr:safe<ept id="p3">**</ept> compilations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id="p1">](../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Calling Native Functions from Managed Code</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>How to: Call Native DLLs from Managed Code Using PInvoke</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to: Marshal Strings Using PInvoke</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How to: Marshal Structures Using PInvoke</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>How to: Marshal Arrays Using PInvoke</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>How to: Marshal Function Pointers Using PInvoke</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How to: Marshal Embedded Pointers Using PInvoke</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling Native Functions from Managed Code</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>