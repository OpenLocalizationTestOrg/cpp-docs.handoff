<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7bfa20e720268fd42d6ee2da6d5471adbbb2977</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\how-catch-blocks-are-evaluated-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecb55c800289fb2dbe9200291b19016b86b395b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bd32d3ce7ef583e21b5140df786eb6949d0d304</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How Catch Blocks are Evaluated (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How Catch Blocks are Evaluated (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C++ enables you to throw exceptions of any type, although in general it is recommended to throw types that are derived from std::exception.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A C++ exception can be caught by a <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler that specifies the same type as the thrown exception, or by a handler that can catch any type of exception.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the type of thrown exception is a class, which also has a base class (or classes), it can be caught by handlers that accept base classes of the exception's type, as well as references to bases of the exception's type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Note that when an exception is caught by a reference, it is bound to the actual thrown exception object; otherwise, it is a copy (much the same as an argument to a function).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When an exception is thrown, it may be caught by the following types of <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handlers:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A handler that can accept any type (using the ellipsis syntax).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A handler that accepts the same type as the exception object; because it is a copy, <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph> modifiers are ignored.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A handler that accepts a reference to the same type as the exception object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A handler that accepts a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph> form of the same type as the exception object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A handler that accepts a base class of the same type as the exception object; since it is a copy, <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph> modifiers are ignored.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler for a base class must not precede the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> handler for the derived class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A handler that accepts a reference to a base class of the same type as the exception object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A handler that accepts a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph> form of a base class of the same type as the exception object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A handler that accepts a pointer to which a thrown pointer object can be converted via standard pointer conversion rules.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The order in which <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handlers appear is significant, because handlers for a given <bpt id="p2">**</bpt>try<ept id="p2">**</ept> block are examined in order of their appearance.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, it is an error to place the handler for a base class before the handler for a derived class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>After a matching <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler is found, subsequent handlers are not examined.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As a result, an ellipsis <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler must be the last handler for its <bpt id="p2">**</bpt>try<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, the ellipsis <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> handler is the only handler that is examined.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>