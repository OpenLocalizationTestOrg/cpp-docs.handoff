<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">384fb752b67e2a5b3addf2a6594b07a32e69753b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\ide\hint-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0c018d9232a2e8a58077cb9a3dd2443ae3b5c64</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23caa692b105eb567eadd98b5248ea55708e0f65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Hint Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Hint Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>hint file<ept id="p1">*</ept> helps the Visual Studio integrated development environment (IDE) interpret Visual C++ identifiers, such as the names of functions and macros.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you open a Visual C++ project, the IDE's <bpt id="p1">*</bpt>parsing system<ept id="p1">*</ept> analyzes the code in each source file in the project and gathers information about every identifier.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Then the IDE uses that information to support features such as the <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> browser and the <bpt id="p2">**</bpt>Navigation Bar<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The parsing system, which is introduced in <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, understands C/C++ syntax but can misinterpret a statement that contains a macro.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The statement can be misinterpreted if the macro causes the source code to be syntactically incorrect as written.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The statement can become syntactically correct when the source code is compiled and the preprocesser replaces the <bpt id="p1">[</bpt>macro identifier<ept id="p1">](../preprocessor/hash-define-directive-c-cpp.md)</ept> with its definition.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The parsing system works without having to build the project because it uses hint files to interpret macros.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, a browsing feature such as <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> is immediately available.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A hint file contains user-customizable <bpt id="p1">*</bpt>hints<ept id="p1">*</ept>, which have the same syntax as C/C++ macro definitions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Visual C++ includes a built-in hint file that is sufficient for most projects, but you can create your own hint files to improve the way Visual Studio handles identifiers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you modify or add a hint file, you must delete the .sdf file and/or VC.db file in the solution in order for the changes to take effect.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Scenario</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Assume that the following code is in a source file that you examine with the <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> browser.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`STDMETHOD`</ph> macro declares a method named <ph id="ph2">`myMethod`</ph> that takes one parameter and returns a pointer to an <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following macro definitions are in a separate header file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The parsing system cannot interpret the source code because a function named STDMETHOD appears to be declared, and that declaration is syntactically incorrect because it has two parameter lists.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The parsing system does not open the header file to discover the definitions for the <ph id="ph1">`STDMETHOD`</ph>, <ph id="ph2">`STDMETHODCALLTYPE`</ph>, and <ph id="ph3">`HRESULT`</ph> macros.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the parsing system cannot interpret the <ph id="ph1">`STDMETHOD`</ph> macro, it ignores the whole statement and then continues parsing.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The parsing system does not use header files because your project might depend on one or more important header files.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If any header file changes, the parsing system might have to reexamine all of the header files in your project, which slows down the performance of the IDE.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, the parsing system uses hints that specify how to handle the <ph id="ph1">`STDMETHOD`</ph>, <ph id="ph2">`STDMETHODCALLTYPE`</ph>, and <ph id="ph3">`HRESULT`</ph> macros.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>How do you know that you need a hint?</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>And if you need a hint, what kind should you create?</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One sign that a hint is needed is if the view of an identifier in <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> is inconsistent with the view in the <bpt id="p2">**</bpt>Editor<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> might not display a class member that you know exists, or the name of the member is incorrect.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about the types of hints that solve common problems, see the What Macros Require A Hint? section later in this topic.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Architecture</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Hint files pertain to physical directories, not the logical directories depicted in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do not have to add a hint file to your project for the hint file to have an effect.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The parsing system uses hint files only when it parses source files.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Every hint file is named <bpt id="p1">**</bpt>cpp.hint<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Therefore, many directories can contain a hint file but only one hint file can occur in a particular directory.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Your project can be affected by zero or more hint files.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If there are no hint files, the parsing system uses error recovery techniques to ignore indecipherable source code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Otherwise, the parsing system uses the following strategy to find and gather hints.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Search Order</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The parsing system searches directories for hint files in the following order.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The directory that contains the installation package for Visual C++ (<bpt id="p1">**</bpt>vcpackages<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This directory contains a built-in hint file that describes symbols in frequently used system files, such as <bpt id="p1">**</bpt>windows.h<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Consequently, your project automatically inherits most of the hints that it needs.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The path from the root directory of a source file to the directory that contains the source file itself.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In a typical Visual C++ project, the root directory contains the solution or project file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The exception to this rule is if a <bpt id="p1">*</bpt>stop file<ept id="p1">*</ept> is in the path to the source file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A stop file provides additional control over the search order and is any file that is named <bpt id="p1">**</bpt>cpp.stop<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Instead of starting from the root directory, the parsing system searches from the directory that contains the stop file to the directory that contains the source file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In a typical project, you do not need a stop file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Hint Gathering</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A hint file contains zero or more <bpt id="p1">*</bpt>hints<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A hint is defined or deleted just like a C/C++ macro.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>That is, the <ph id="ph1">`#define`</ph> preprocessor directive creates or redefines a hint, and the <ph id="ph2">`#undef`</ph> directive deletes a hint.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The parsing system opens each hint file in the search order described earlier, accumulates each file's hints into a set of <bpt id="p1">*</bpt>effective hints<ept id="p1">*</ept>, and then uses the effective hints to interpret the identifiers in your code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The parsing system uses the following rules to accumulate hints.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the new hint specifies a name that is not already defined, the new hint adds the name to the effective hints.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the new hint specifies a name that is already defined, the new hint redefines the existing hint.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the new hint is an <ph id="ph1">`#undef`</ph> directive that specifies an existing effective hint, the new hint deletes the existing hint.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The first rule means that effective hints are inherited from previously opened hint files.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The last two rules mean that hints that occur later in the search order can override hints that occurred earlier.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, you can override any previous hints if you create a hint file in the directory that contains a source file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For a depiction of how hints are gathered, see the <ph id="ph1">`Example`</ph> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Hints are created and deleted with the same syntax as the preprocessor directives that create and delete macros.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In fact, the parsing system uses the C/C++ preprocessor to evaluate the hints.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information about the preprocessor directives, see <bpt id="p1">[</bpt>#define Directive (C/C++)<ept id="p1">](../preprocessor/hash-define-directive-c-cpp.md)</ept> and <bpt id="p2">[</bpt>#undef Directive (C/C++)<ept id="p2">](../preprocessor/hash-undef-directive-c-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The only unusual syntax elements are the <ph id="ph1">`@&lt;`</ph>, <ph id="ph2">`@=`</ph>, and <ph id="ph3">`@&gt;`</ph> replacement strings.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>These are hint-file specific replacement strings that are used with only <bpt id="p1">*</bpt>map<ept id="p1">*</ept> macros.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A map is a set of macros that relate data, functions, or events to other data, functions, or event handlers.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`MFC`</ph> uses maps to create <bpt id="p1">[</bpt>message maps<ept id="p1">](../mfc/reference/message-maps-mfc.md)</ept>, and <ph id="ph2">`ATL`</ph> uses maps to create <bpt id="p2">[</bpt>object maps<ept id="p2">](../atl/reference/object-map-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The hint-file specific replacement strings indicate the starting, intermediate, and ending elements of a map.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Only the name of a map macro is significant.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Therefore, each replacement string intentionally hides the implementation of the macro.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Hints use the following syntax.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hint-name<ept id="p1">*</ept> <bpt id="p2">*</bpt>replacement-string<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hint-name<ept id="p1">*</ept> <ph id="ph1">`(`</ph> <bpt id="p2">*</bpt>parameter<ept id="p2">*</ept>, ...<ph id="ph2">`)`</ph><bpt id="p3">*</bpt>replacement-string<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A preprocesser directive that defines a new hint or redefines an existing hint.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>After the directive, the preprocessor replaces each occurrence of <bpt id="p1">*</bpt>hint-name<ept id="p1">*</ept> in source code with <bpt id="p2">*</bpt>replacement-string<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The second syntax form defines a function-like hint.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If a function-like hint occurs in source code, the preprocessor first replaces each occurrence of <bpt id="p1">*</bpt>parameter<ept id="p1">*</ept> in <bpt id="p2">*</bpt>replacement-string<ept id="p2">*</ept> with the corresponding argument in source code, and then replaces <bpt id="p3">*</bpt>hint-name<ept id="p3">*</ept> with <bpt id="p4">*</bpt>replacement-string<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A hint-file specific <bpt id="p1">*</bpt>replacement-string<ept id="p1">*</ept> that indicates the start of a set of map elements.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A hint-file specific <bpt id="p1">*</bpt>replacement-string<ept id="p1">*</ept> that indicates an intermediate map element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A map can have multiple map elements.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A hint-file specific <bpt id="p1">*</bpt>replacement-string<ept id="p1">*</ept> that indicates the end of a set of map elements.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>hint-name</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The preprocessor directive that deletes an existing hint.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The name of the hint is provided by the <bpt id="p1">*</bpt>hint-name<ept id="p1">*</ept> identifier.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>comment</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A single line comment.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>comment</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A multiline comment.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>What Macros Require A Hint?</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Certain types of macros can interfere with the parsing system.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This section describes the types of macros that can cause a problem, and the type of hint you can create to solve that problem.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Disruptive Macros</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Some macros cause the parsing system to misinterpret source code, but can be ignored without impairing your browsing experience.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, the Source Code Annotation Language (<bpt id="p1">[</bpt>SAL<ept id="p1">](../c-runtime-library/sal-annotations.md)</ept>) macros resolve to C++ attributes that help you find programming bugs.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you want to ignore SAL annotations as you browse code, you might want to create a hint file that hides the annotation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the following source code, the parameter type for the <ph id="ph1">`FormatWindowClassName()`</ph> function is <ph id="ph2">`PXSTR`</ph>, and the parameter name is <ph id="ph3">`szBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, the parsing system mistakes the <ph id="ph1">`_Pre_notnull_`</ph> and <ph id="ph2">`_Post_z_`</ph> SAL annotations for either the parameter type or the parameter name.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Source Code:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Strategy:<ept id="p1">**</ept> Null definition</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The strategy in this situation is to treat the SAL annotations as if they did not exist.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To do this, specify a hint whose replacement string is null.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Consequently, the parsing system ignores the annotations, and the <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept> browser does not display them.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(Visual C++ includes a built-in hint file that hides SAL annotation.)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Hint file:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Concealed C/C++ Language Elements</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A typical reason that the parsing system misinterprets source code is if a macro hides a C/C++ <bpt id="p1">[</bpt>punctuator<ept id="p1">](../cpp/punctuators-cpp.md)</ept> or <bpt id="p2">[</bpt>keyword<ept id="p2">](../cpp/keywords-cpp.md)</ept> token.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>That is, a macro might contain half of a pair of punctuators, such as <ph id="ph1">`&lt;&gt;`</ph>, <ph id="ph2">`[]`</ph>, <ph id="ph3">`{}`</ph>, and <ph id="ph4">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the following source code, the <ph id="ph1">`START_NAMESPACE`</ph> macro hides an unpaired left brace (<ph id="ph2">`{`</ph>).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Source Code:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Strategy:<ept id="p1">**</ept> Direct copy</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If the semantics of a macro are critical to the browsing experience, create a hint that is identical to the macro.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The parsing system resolves the macro to the definition in the hint file.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Note that if the macro in the source file contains other macros, those macros are interpreted only if they are already in the set of effective hints.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Hint File:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Maps</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A map consists of macros that designate a starting element, ending element, and zero or more intermediate elements.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The parsing system misinterprets maps because each map macro hides C/C++ language elements, and the syntax of a complete C/C++ statement is distributed across many separate macros.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following source code defines the <ph id="ph1">`BEGIN_CATEGORY_MAP`</ph>, <ph id="ph2">`IMPLEMENTED_CATEGORY`</ph>, and <ph id="ph3">`END_CATEGORY_MAP`</ph> macros.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Source Code:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Strategy:<ept id="p1">**</ept> Identify map elements</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specify hints for the start, middle (if any), and end elements of a map.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Use the special map replacement strings, <ph id="ph1">`@&lt;`</ph>, <ph id="ph2">`@=`</ph>, and <ph id="ph3">`@&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`Syntax`</ph> section in this topic.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Hint File:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Composite Macros</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Composite macros contain one or more of the types of macro that confuse the parsing system.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The following source code contains the <ph id="ph1">`START_NAMESPACE`</ph> macro, which specifies the start of a namespace scope, and the <ph id="ph2">`BEGIN_CATEGORY_MAP`</ph> macro, which specifies the start of a map.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Source Code:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Strategy:<ept id="p1">**</ept> Direct copy</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Create hints for the <ph id="ph1">`START_NAMESPACE`</ph> and <ph id="ph2">`BEGIN_CATEGORY_MAP`</ph> macros, and then create a hint for the <ph id="ph3">`NSandMAP`</ph> macro that is the same as shown earlier for the source code.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Alternatively, if a composite macro consists of only disruptive macros and white space, you can define a hint whose replacement string is a null definition.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this example, assume <ph id="ph1">`START_NAMESPACE`</ph> already has a hint as described in this topic in the <ph id="ph2">`Concealed C/C++ Language Elements`</ph> subheading.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>And assume <ph id="ph1">`BEGIN_CATEGORY_MAP`</ph> has a hint as described earlier in <ph id="ph2">`Maps`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Hint File:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Inconvenient Macros</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Some macros can be interpreted by the parsing system, but the source code is difficult to read because the macro is long or complex.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For the sake of readability, you can provide a hint that simplifies the display of the macro.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Source Code:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Strategy:<ept id="p1">**</ept> Simplification</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Create a hint that displays a simpler macro definition.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Hint File:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The following example illustrates how hints are accumulated from hint files.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Stop files are not used in this example.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The following illustration depicts some of the physical directories in a Visual C++ project.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Hint files are in the <ph id="ph1">`vcpackages`</ph>, <ph id="ph2">`Debug`</ph>, <ph id="ph3">`A1`</ph>, and <ph id="ph4">`A2`</ph> directories.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Hint File Directories</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Common and project&amp;#45;specific hint file directories.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Directories and Hint File Contents</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The following list shows the directories in this project that contain hint files, and the contents of those hint files.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Only some of the many hints in the <ph id="ph1">`vcpackages`</ph> directory hint file are listed.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>vcpackages</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Debug</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A1</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A2</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Effective Hints</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following table lists the effective hints for the source files in this project.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Source File: A1_A2_B.cpp</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Effective hints:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The following notes apply to the preceding list.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The effective hints are from the <ph id="ph1">`vcpackages`</ph>, <ph id="ph2">`Debug`</ph>, <ph id="ph3">`A1`</ph>, and <ph id="ph4">`A2`</ph> directories.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>#undef<ept id="p1">**</ept> directive in the <ph id="ph1">`Debug`</ph> hint file removed the <ph id="ph2">`#define _In_`</ph> hint in the <ph id="ph3">`vcpackages`</ph> directory hint file.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hint file in the <ph id="ph1">`A1`</ph> directory redefines <ph id="ph2">`START_NAMESPACE`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#undef`</ph> hint in the <ph id="ph2">`A2`</ph> directory removed the hints for <ph id="ph3">`OBRACE`</ph> and <ph id="ph4">`CBRACE`</ph> in the <ph id="ph5">`Debug`</ph> directory hint file.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>File Types Created for Visual C++ Projects</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Creating and Controlling Environment Windows</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>define Directive (C/C++)</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>undef Directive (C/C++)</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>SAL Annotations</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Message Maps</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Message Map Macros</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Object Map Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>