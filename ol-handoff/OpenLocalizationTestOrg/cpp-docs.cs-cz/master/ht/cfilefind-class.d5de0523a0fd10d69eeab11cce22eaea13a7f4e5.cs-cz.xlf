<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e877b4f7137bf982c000edcb5839b7109897a70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cfilefind-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01746c939f0605230242b32307a12059f522f7c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d2a4d202e05145baa5fa75052cddf0ec6a4f9c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CFileFind Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CFileFind Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Performs local file searches and is the base class for <bpt id="p1">[</bpt>CGopherFileFind<ept id="p1">](../../mfc/reference/cgopherfilefind-class.md)</ept> and <bpt id="p2">[</bpt>CFtpFileFind<ept id="p2">](../../mfc/reference/cftpfilefind-class.md)</ept>, which perform Internet file searches.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CFileFind::CFileFind</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CFileFind`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CFileFind::Close</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes the search request.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CFileFind::FindFile</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Searches a directory for a specified file name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CFileFind::FindNextFile</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Continues a file search from a previous call to <bpt id="p1">[</bpt>FindFile<ept id="p1">](#cfilefind__findfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CFileFind::GetCreationTime</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the time the file was created.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileName</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the name, including the extension, of the found file</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFilePath</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets the whole path of the found file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the title of the found file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The title does not include the extension.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileURL</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the URL, including the file path, of the found file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLastAccessTime</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets the time that the file was last accessed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLastWriteTime</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the time the file was last changed and saved.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLength</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the length of the found file, in bytes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CFileFind::GetRoot</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets the root directory of the found file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CFileFind::IsArchived</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Determines if the found file is archived.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CFileFind::IsCompressed</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines if the found file is compressed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CFileFind::IsDirectory</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Determines if the found file is a directory.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CFileFind::IsDots</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Determines if the name of the found file has the name "." or "..", indicating that is actually a directory.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CFileFind::IsHidden</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Determines if the found file is hidden.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CFileFind::IsNormal</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Determines if the found file is normal (in other words, has no other attributes).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CFileFind::IsReadOnly</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Determines if the found file is read-only.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CFileFind::IsSystem</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Determines if the found file is a system file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CFileFind::IsTemporary</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Determines if the found file is temporary.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CFileFind::MatchesMask</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Indicates the desired file attributes of the file to be found.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CFileFind::CloseContext</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Closes the file specified by the current search handle.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Protected Data Members</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CFileFind::m_pTM</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>includes member functions that begin a search, locate a file, and return the title, name, or path of the file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For Internet searches, the member function <bpt id="p1">[</bpt>GetFileURL<ept id="p1">](#cfilefind__getfileurl)</ept> returns the file's URL.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>is the base class for two other MFC classes designed to search particular server types: <ph id="ph1">`CGopherFileFind`</ph> works specifically with gopher servers, and <ph id="ph2">`CFtpFileFind`</ph> works specifically with FTP servers.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Together, these three classes provide a seamless mechanism for the client to find files, regardless of the server protocol, the file type, or location, on either a local machine or a remote server.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following code will enumerate all the files in the current directory, printing the name of each file:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#31</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To keep the example simple, this code uses the standard C++ library <ph id="ph1">`cout`</ph> class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cout`</ph> line could be replaced with a call to <ph id="ph2">`CListBox::AddString`</ph>, for example, in a program with a graphical user interface.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information about how to use <ph id="ph1">`CFileFind`</ph> and the other WinInet classes, see the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CFileFind::CFileFind</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This member function is called when a <ph id="ph1">`CFileFind`</ph> object is constructed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CFileFind::Close</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this member function to end the search, reset the context, and release all resources.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>, you do not have to create a new <ph id="ph1">`CFileFind`</ph> instance before calling <bpt id="p2">[</bpt>FindFile<ept id="p2">](#cfilefind__findfile)</ept> to begin a new search.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CFileFind::CloseContext</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Closes the file specified by the current search handle.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Closes the file specified by the current value of the search handle.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Override this function to change the default behavior.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You must call the <bpt id="p1">[</bpt>FindFile<ept id="p1">](#cfilefind__findfile)</ept> or <bpt id="p2">[</bpt>FindNextFile<ept id="p2">](#cfilefind__findnextfile)</ept> functions at least once to retrieve a valid search handle.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FindFile<ept id="p1">**</ept> and <ph id="ph1">`FindNextFile`</ph> functions use the search handle to locate files with names that match a given name.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CFileFind::FindFile</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Call this member function to open a file search.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the file to find.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <ph id="ph1">`pstrName`</ph>, <bpt id="p2">**</bpt>FindFile<ept id="p2">**</ept> does a wildcard (*.<ph id="ph2">\*</ph>) search.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>dwUnused</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Reserved to make <bpt id="p1">**</bpt>FindFile<ept id="p1">**</ept> polymorphic with derived classes.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Must be 0.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To get extended error information, call the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>FindFile<ept id="p1">**</ept> to begin the file search, call <bpt id="p2">[</bpt>FindNextFile<ept id="p2">](#cfilefind__findnextfile)</ept> to retrieve subsequent files.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You must call <ph id="ph1">`FindNextFile`</ph> at least once before calling any of the following attribute member functions:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>GetCreationTime</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>GetFileName</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>GetFileTitle</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>GetFilePath</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>GetFileURL</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>GetLastAccessTime</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>GetLastWriteTime</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>GetLength</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>GetRoot</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>IsArchived</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>IsCompressed</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>IsDirectory</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>IsDots</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>IsHidden</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>IsNormal</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>IsReadOnly</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>IsSystem</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>IsTemporary</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>MatchesMask</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::IsDirectory<ept id="p1">](#cfilefind__isdirectory)</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CFileFind::FindNextFile</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Call this member function to continue a file search from a previous call to <bpt id="p1">[</bpt>FindFile<ept id="p1">](#cfilefind__findfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Nonzero if there are more files; zero if the file found is the last one in the directory or if an error occurred.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To get extended error information, call the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the file found is the last file in the directory, or if no matching files can be found, the <ph id="ph1">`GetLastError`</ph> function returns ERROR_NO_MORE_FILES.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You must call <ph id="ph1">`FindNextFile`</ph> at least once before calling any of the following attribute member functions:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>GetCreationTime</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>GetFileName</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>GetFileTitle</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>GetFilePath</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>GetFileURL</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>GetLastAccessTime</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>GetLastWriteTime</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>GetLength</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>GetRoot</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>IsArchived</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>IsCompressed</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>IsDirectory</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>IsDots</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>IsHidden</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>IsNormal</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>IsReadOnly</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>IsSystem</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>IsTemporary</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>MatchesMask</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>wraps the Win32 function <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa364428)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::IsDirectory<ept id="p1">](#cfilefind__isdirectory)</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CFileFind::GetCreationTime</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Call this member function to get the time the specified file was created.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>FILETIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure containing the time the file was created.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CTime<ept id="p1">](../../atl-mfc-shared/reference/ctime-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 if unsuccessful.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>returns 0 only if <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> has never been called on this <ph id="ph1">`CFileFind`</ph> object.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetCreationTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Not all file systems use the same semantics to implement the time stamp returned by this function.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This function may return the same value returned by other time stamp functions if the underlying file system or server does not support keeping the time attribute.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Win32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure for information about time formats.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>On some operation systems, the returned time is in the time zone local to the machine were the file is located.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>See the Win32 <bpt id="p1">[</bpt>FileTimeToLocalFileTime<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724277)</ept> API for more information.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileName</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Call this member function to get the name of the found file.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The name of the most-recently-found file.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling GetFileName.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>is one of three <ph id="ph1">`CFileFind`</ph> member functions that return some form of the file name.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following list describes the three and how they vary:</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>returns the file name, including the extension.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileName`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file name <ph id="ph3">`myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFilePath<ept id="p1">](#cfilefind__getfilepath)</ept> returns the entire path for the file.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFilePath`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file path <ph id="ph3">`c:\myhtml\myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](#cfilefind__getfiletitle)</ept> returns the file name, excluding the file extension.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileTitle`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file title <ph id="ph3">`myfile`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#32</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFilePath</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Call this member function to get the full path of the specified file.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The path of the specified file.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetFilePath`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>is one of three <ph id="ph1">`CFileFind`</ph> member functions that return some form of the file name.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The following list describes the three and how they vary:</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfilefind__getfilename)</ept> returns the file name, including the extension.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileName`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file name <ph id="ph3">`myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>returns the entire path for the file.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFilePath`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file path <ph id="ph3">`c:\myhtml\myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFileTitle<ept id="p1">](#cfilefind__getfiletitle)</ept> returns the file name, excluding the file extension.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileTitle`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file title <ph id="ph3">`myfile`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileTitle</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Call this member function to get the title of the found file.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The title of the file.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetFileTitle`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>is one of three <ph id="ph1">`CFileFind`</ph> member functions that return some form of the file name.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The following list describes the three and how they vary:</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFileName<ept id="p1">](#cfilefind__getfilename)</ept> returns the file name, including the extension.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileName`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file name <ph id="ph3">`myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFilePath<ept id="p1">](#cfilefind__getfilepath)</ept> returns the entire path for the file.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFilePath`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file path <ph id="ph3">`c:\myhtml\myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>returns the file name, excluding the file extension.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileTitle`</ph> to generate a user message about the file <ph id="ph2">`c:\myhtml\myfile.txt`</ph> returns the file title <ph id="ph3">`myfile`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>CFileFind::GetFileURL</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the specified URL.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The complete URL.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetFileURL`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>is similar to the member function <bpt id="p1">[</bpt>GetFilePath<ept id="p1">](#cfilefind__getfilepath)</ept>, except that it returns the URL in the form <ph id="ph1">`file://path`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example, calling <ph id="ph1">`GetFileURL`</ph> to get the complete URL for <ph id="ph2">`myfile.txt`</ph> returns the URL <ph id="ph3">`file://c:\myhtml\myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLastAccessTime</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Call this member function to get the time that the specified file was last accessed.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CTime<ept id="p1">](../../atl-mfc-shared/reference/ctime-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>FILETIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure containing the time the file was last accessed.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 if unsuccessful.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>returns 0 only if <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> has never been called on this <ph id="ph1">`CFileFind`</ph> object.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetLastAccessTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Not all file systems use the same semantics to implement the time stamp returned by this function.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This function may return the same value returned by other time stamp functions if the underlying file system or server does not support keeping the time attribute.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Win32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure for information about time formats.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>On some operation systems, the returned time is in the time zone local to the machine were the file is located.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>See the Win32 <bpt id="p1">[</bpt>FileTimeToLocalFileTime<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724277)</ept> API for more information.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLastWriteTime</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Call this member function to get the last time the file was changed.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>FILETIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure containing the time the file was last written to.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CTime<ept id="p1">](../../atl-mfc-shared/reference/ctime-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 if unsuccessful.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>returns 0 only if <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> has never been called on this <ph id="ph1">`CFileFind`</ph> object.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetLastWriteTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Not all file systems use the same semantics to implement the time stamp returned by this function.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This function may return the same value returned by other time stamp functions if the underlying file system or server does not support keeping the time attribute.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Win32_Find_Data<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure for information about time formats.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>On some operation systems, the returned time is in the time zone local to the machine were the file is located.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>See the Win32 <bpt id="p1">[</bpt>FileTimeToLocalFileTime<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724277)</ept> API for more information.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>CFileFind::GetLength</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Call this member function to get the length of the found file, in bytes.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The length of the found file, in bytes.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetLength`</ph>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>uses the Win32 structure <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> to get and return the value of the file size, in bytes.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>As of MFC 7.0, <ph id="ph1">`GetLength`</ph> supports 64-bit integer types.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Previously existing code built with this newer version of the library may result in truncation warnings.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#33</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>CFileFind::GetRoot</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Call this member function to get the root of the found file.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The root of the active search.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`GetRoot`</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This member function returns the drive specifier and path name used to start a search.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For example, calling <bpt id="p1">[</bpt>FindFile<ept id="p1">](#cfilefind__findfile)</ept> with <ph id="ph1">`*.dat`</ph> results in <ph id="ph2">`GetRoot`</ph> returning an empty string.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Passing a path, such as <ph id="ph1">`c:\windows\system\*.dll`</ph>, to <bpt id="p1">**</bpt>FindFile<ept id="p1">**</ept> results <ph id="ph2">`GetRoot`</ph> returning <ph id="ph3">`c:\windows\system\`</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetFileName<ept id="p1">](#cfilefind__getfilename)</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>CFileFind::IsArchived</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is archived.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Applications mark an archive file, which is to be backed up or removed, with FILE_ATTRIBUTE_ARCHIVE, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsArchived`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CFileFind::IsCompressed</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is compressed.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A compressed file is marked with FILE_ATTRIBUTE_COMPRESSED, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>For a file, this attribute indicates that all of the data in the file is compressed.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For a directory, this attribute indicates that compression is the default for newly created files and subdirectories.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsCompressed`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>CFileFind::IsDirectory</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is a directory.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A file that is a directory is marked with FILE_ATTRIBUTE_DIRECTORY a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsDirectory`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>This small program recurses every directory on the C:\ drive and prints the name of the directory.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#34</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>CFileFind::IsDots</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Call this member function to test for the current directory and parent directory markers while iterating through files.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Nonzero if the found file has the name "." or "..", which indicates that the found file is actually a directory.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Otherwise 0.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsDots`</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::IsDirectory<ept id="p1">](#cfilefind__isdirectory)</ept>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CFileFind::IsHidden</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is hidden.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Hidden files, which are marked with FILE_ATTRIBUTE_HIDDEN, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>A hidden file is not included in an ordinary directory listing.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsHidden`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>CFileFind::IsNormal</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is a normal file.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Files marked with FILE_ATTRIBUTE_NORMAL, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A normal file has no other attributes set.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>All other file attributes override this attribute.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsNormal`</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>CFileFind::IsReadOnly</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is read-only.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>A read-only file is marked with FILE_ATTRIBUTE_READONLY, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Applications can read such a file, but they cannot write to it or delete it.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsReadOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>CFileFind::IsSystem</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is a system file.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>A system file is marked with FILE_ATTRIBUTE_SYSTEM, , a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A system file is part of, or is used exclusively by, the operating system.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsSystem`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>CFileFind::IsTemporary</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the found file is a temporary file.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A temporary file is marked with FILE_ATTRIBUTE_TEMPORARY, a file attribute identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>A temporary file is used for temporary storage.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Applications should write to the file only if absolutely necessary.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Most of the file's data remains in memory without being flushed to the media because the file will soon be deleted.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`IsTemporary`</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>See the member function <bpt id="p1">[</bpt>MatchesMask<ept id="p1">](#cfilefind__matchesmask)</ept> for a complete list of file attributes.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CFileFind::GetLength<ept id="p1">](#cfilefind__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>CFileFind::m_pTM</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>CFileFind::MatchesMask</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Call this member function to test the file attributes on the found file.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Specifies one or more file attributes, identified in the <bpt id="p1">[</bpt>WIN32_FIND_DATA<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365740)</ept> structure, for the found file.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>To search for multiple attributes, use the bitwise OR (&amp;#124;) operator.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Any combination of the following attributes is acceptable:</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_ARCHIVE   The file is an archive file.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Applications use this attribute to mark files for backup or removal.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_COMPRESSED   The file or directory is compressed.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>For a file, this means that all of the data in the file is compressed.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>For a directory, this means that compression is the default for newly created files and subdirectories.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_DIRECTORY   The file is a directory.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_NORMAL   The file has no other attributes set.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This attribute is valid only if used alone.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>All other file attributes override this attribute.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_HIDDEN   The file is hidden.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>It is not to be included in an ordinary directory listing.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_READONLY   The file is read only.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Applications can read the file but cannot write to it or delete it.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_SYSTEM   The file is part of or is used exclusively by the operating system.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>FILE_ATTRIBUTE_TEMPORARY   The file is being used for temporary storage.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Applications should write to the file only if absolutely necessary.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Most of the file's data remains in memory without being flushed to the media because the file will soon be deleted.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>To get extended error information, call the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>FindNextFile<ept id="p1">](#cfilefind__findnextfile)</ept> at least once before calling <ph id="ph1">`MatchesMask`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#35</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>CFtpFileFind Class</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>CGopherFileFind Class</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>CInternetFile Class</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>CGopherFile Class</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>CHttpFile Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>