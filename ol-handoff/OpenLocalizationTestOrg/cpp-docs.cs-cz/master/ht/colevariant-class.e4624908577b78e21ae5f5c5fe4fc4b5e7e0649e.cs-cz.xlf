<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ec4328f50a7917c32e3d5169ed8413cded943ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\colevariant-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd62650e56f4c81b22d66c8dc569cea082482c58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52a4ed2db3a0724e523b9fddc9da890c245b5c46</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleVariant Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleVariant Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> data type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>COleVariant::COleVariant</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>COleVariant::Attach</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> to a <ph id="ph1">`COleVariant`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>COleVariant::ChangeType</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Changes the variant type of this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>COleVariant::Clear</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Clears this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>COleVariant::Detach</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Detaches a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> from a <ph id="ph1">`COleVariant`</ph> and returns the <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>COleVariant::GetByteArrayFromVariantArray</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves a byte array from an existing variant array.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>COleVariant::SetString</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Sets the string to a particular type, typically ANSI.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>COleVariant::operator LPCVARIANT</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`COleVariant`</ph> value into an <ph id="ph2">`LPCVARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>COleVariant::operator LPVARIANT</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`COleVariant`</ph> object into an <ph id="ph2">`LPVARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>COleVariant::operator =</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Copies a <ph id="ph1">`COleVariant`</ph> value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>COleVariant::operator ==</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">`COleVariant`</ph> values.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>COleVariant::operator <ph id="ph1">&amp;lt;&amp;lt;</ph>,</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Outputs a <ph id="ph1">`COleVariant`</ph> value to <ph id="ph2">`CArchive`</ph> or <ph id="ph3">`CDumpContext`</ph> and inputs a <ph id="ph4">`COleVariant`</ph> object from <ph id="ph5">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This data type is used in OLE automation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Specifically, the <bpt id="p1">[</bpt>DISPPARAMS<ept id="p1">](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b)</ept> structure contains a pointer to an array of <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept> structures.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>DISPPARAMS<ept id="p1">**</ept> structure is used to pass parameters to <bpt id="p2">[</bpt>IDispatch::Invoke<ept id="p2">](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This class is derived from the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This means you can pass a <ph id="ph1">`COleVariant`</ph> in a parameter that calls for a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> and that the data members of the <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept> structure are accessible data members of <ph id="ph2">`COleVariant`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The two related MFC classes <bpt id="p1">[</bpt>COleCurrency<ept id="p1">](../../mfc/reference/colecurrency-class.md)</ept> and <bpt id="p2">[</bpt>COleDateTime<ept id="p2">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> encapsulate the variant data types <bpt id="p3">**</bpt>CURRENCY<ept id="p3">**</ept> ( <ph id="ph1">`VT_CY`</ph>) and <bpt id="p4">**</bpt>DATE<ept id="p4">**</ept> ( <ph id="ph2">`VT_DATE`</ph>).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleVariant`</ph> class is used extensively in the DAO classes; see these classes for typical usage of this class, for example <bpt id="p1">[</bpt>CDaoQueryDef<ept id="p1">](../../mfc/reference/cdaoquerydef-class.md)</ept> and <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id="p2">[</bpt>CURRENCY<ept id="p2">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept>, <bpt id="p3">[</bpt>DISPPARAMS<ept id="p3">](http://msdn.microsoft.com/en-us/a16e5a21-766e-4287-b039-13429aa78f8b)</ept>, and <bpt id="p4">[</bpt>IDispatch::Invoke<ept id="p4">](http://msdn.microsoft.com/en-us/964ade8e-9d8a-4d32-bd47-aa678912a54d)</ept> entries in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">`COleVariant`</ph> class and its use in OLE automation, see "Passing Parameters in OLE Automation" in the article <bpt id="p1">[</bpt>Automation<ept id="p1">](../../mfc/automation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdisp.h</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>COleVariant::Attach</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Call this function to attach the given <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object to the current <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An existing <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> object to be attached to the current <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This function sets the <bpt id="p1">[</bpt>VARTYPE<ept id="p1">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> of <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept> to <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> and <bpt id="p2">[</bpt>VARTYPE<ept id="p2">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> entries in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>COleVariant::COleVariant</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`COleVariant`</ph> or <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> object to be copied into the new <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> object that will be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A null-terminated string to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VARTYPE`</ph> for the new <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A numerical value to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VARTYPE`</ph> for the new <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleCurrency<ept id="p1">](../../mfc/reference/colecurrency-class.md)</ept> object to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A numerical value to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CByteArray<ept id="p1">](../../mfc/reference/cbytearray-class.md)</ept> object to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CLongBinary<ept id="p1">](../../mfc/reference/clongbinary-class.md)</ept> object to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>ITEMIDLIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773321)</ept> structure to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>All these constructors create new <ph id="ph1">`COleVariant`</ph> objects initialized to the specified value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A brief description of each of these constructors follows.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant( )<ept id="p1">**</ept> Creates an empty <ph id="ph1">`COleVariant`</ph> object, <ph id="ph2">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies an existing <bpt id="p4">**</bpt>VARIANT<ept id="p4">**</ept> or <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The variant type is retained.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`pSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies an existing <bpt id="p3">**</bpt>VARIANT<ept id="p3">**</ept> or <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The variant type is retained.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`lpszSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a string into the new object, <ph id="ph2">`VT_BSTR`</ph> (UNICODE).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`lpszSrc`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies a string into the new object.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`vtSrc`</ph> must be <ph id="ph2">`VT_BSTR`</ph> (UNICODE) or <ph id="ph3">`VT_BSTRT`</ph> (ANSI).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`strSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a string into the new object, <bpt id="p3">**</bpt>VT_BSTR<ept id="p3">**</ept> (UNICODE).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`nSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies an 8-bit integer into the new object, <ph id="ph2">`VT_UI1`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`nSrc`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies a 16-bit integer (or Boolean value) into the new object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`vtSrc`</ph> must be <ph id="ph2">`VT_I2`</ph> or <ph id="ph3">`VT_BOOL`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`lSrc`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`vtSrc`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies a 32-bit integer (or <ph id="ph3">`SCODE`</ph> value) into the new object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`vtSrc`</ph> must be <ph id="ph2">`VT_I4`</ph>, <ph id="ph3">`VT_ERROR`</ph>, or <ph id="ph4">`VT_BOOL`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`curSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">**</bpt>COleCurrency<ept id="p3">**</ept> value into the new object, <ph id="ph2">`VT_CY`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`fltSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a 32-bit floating-point value into the new object, <ph id="ph2">`VT_R4`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`dblSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a 64-bit floating-point value into the new object, <ph id="ph2">`VT_R8`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`timeSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <ph id="ph2">`COleDateTime`</ph> value into the new object, <ph id="ph3">`VT_DATE`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`arrSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <ph id="ph2">`CByteArray`</ph> object into the new object, <ph id="ph3">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleVariant(<ept id="p1">**</ept> <ph id="ph1">`lbSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <ph id="ph2">`CLongBinary`</ph> object into the new object, <ph id="ph3">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`SCODE`</ph>, see <bpt id="p1">[</bpt>Structure of COM Error Codes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms690088)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>COleVariant::ChangeType</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Converts the type of variant value in this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>VARTYPE<ept id="p1">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> for this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object to be converted.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If this value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, this <ph id="ph1">`COleVariant`</ph> object is used as the source for the conversion.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id="p2">[</bpt>VARTYPE<ept id="p2">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept>, and <bpt id="p3">[</bpt>VariantChangeType<ept id="p3">](http://msdn.microsoft.com/en-us/48a51e32-95d7-4eeb-8106-f5043ffa2fd1)</ept> entries in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>COleVariant::Clear</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Clears the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This sets the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> for this object to <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleVariant`</ph> destructor calls this function.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`VARIANT`</ph>, <ph id="ph2">`VARTYPE`</ph>, and <ph id="ph3">`VariantClear`</ph> entries in the <ph id="ph4">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>COleVariant::Detach</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Detaches the underlying <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> object from this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This function sets the <bpt id="p1">[</bpt>VARTYPE<ept id="p1">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> for this <ph id="ph1">`COleVariant`</ph> object to <ph id="ph2">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Detach<ept id="p1">**</ept>, it is the caller's responsibility to call <bpt id="p2">**</bpt>VariantClear<ept id="p2">**</ept> on the resulting <bpt id="p3">**</bpt>VARIANT<ept id="p3">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept>, <bpt id="p2">[</bpt>VARTYPE<ept id="p2">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept>, and <bpt id="p3">[</bpt>VariantClear<ept id="p3">](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835)</ept> entries in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>COleVariant::GetByteArrayFromVariantArray</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Retrieves a byte array from an existing variant array</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A reference to an existing <bpt id="p1">[</bpt>CByteArray<ept id="p1">](../../mfc/reference/cbytearray-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>COleVariant::operator LPCVARIANT</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This casting operator returns a <ph id="ph1">`VARIANT`</ph> structure whose value is copied from this <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>COleVariant::operator LPVARIANT</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Call this casting operator to access the underlying <ph id="ph1">`VARIANT`</ph> structure for this <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Changing the value in the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure accessed by the pointer returned by this function will change the value of this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>COleVariant::operator =</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>These overloaded assignment operators copy the source value into this <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A brief description of each operator follows:</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies an existing <bpt id="p4">**</bpt>VARIANT<ept id="p4">**</ept> or <ph id="ph1">`COleVariant`</ph> object into this object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`pSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies the <bpt id="p3">**</bpt>VARIANT<ept id="p3">**</ept> object accessed by <ph id="ph2">`pSrc`</ph> into this object.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`lpszSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a null-terminated string into this object and sets the <bpt id="p3">**</bpt>VARTYPE<ept id="p3">**</ept> to <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`strSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">[</bpt>CString<ept id="p3">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object into this object and sets the <bpt id="p4">**</bpt>VARTYPE<ept id="p4">**</ept> to <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`nSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies an 8- or 16-bit integer value into this object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSrc`</ph> is an 8-bit value, the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of this is set to <ph id="ph2">`VT_UI1`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSrc`</ph> is a 16-bit value and the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of this is <ph id="ph2">`VT_BOOL`</ph>, it is kept; otherwise, it is set to <ph id="ph3">`VT_I2`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`lSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a 32-bit integer value into this object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of this is <ph id="ph1">`VT_ERROR`</ph>, it is kept; otherwise, it is set to <ph id="ph2">`VT_I4`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`curSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">[</bpt>COleCurrency<ept id="p3">](../../mfc/reference/colecurrency-class.md)</ept> object into this object and sets the <bpt id="p4">**</bpt>VARTYPE<ept id="p4">**</ept> to <ph id="ph2">`VT_CY`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`fltSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a 32-bit floating-point value into this object and sets the <bpt id="p3">**</bpt>VARTYPE<ept id="p3">**</ept> to <ph id="ph2">`VT_R4`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`dblSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a 64-bit floating-point value into this object and sets the <bpt id="p3">**</bpt>VARTYPE<ept id="p3">**</ept> to <ph id="ph2">`VT_R8`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`dateSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">[</bpt>COleDateTime<ept id="p3">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> object into this object and sets the <bpt id="p4">**</bpt>VARTYPE<ept id="p4">**</ept> to <ph id="ph2">`VT_DATE`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`arrSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">[</bpt>CByteArray<ept id="p3">](../../mfc/reference/cbytearray-class.md)</ept> object into this <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`lbSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies a <bpt id="p3">[</bpt>CLongBinary<ept id="p3">](../../mfc/reference/clongbinary-class.md)</ept> object into this <ph id="ph2">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>VARIANT<ept id="p1">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> and <bpt id="p2">[</bpt>VARTYPE<ept id="p2">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> entries in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>COleVariant::operator ==</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This operator compares two variant values and returns nonzero if they are equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>COleVariant::operator <ph id="ph1">&amp;lt;&amp;lt;</ph>,</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Outputs a <ph id="ph1">`COleVariant`</ph> value to <ph id="ph2">`CArchive`</ph> or <bpt id="p1">**</bpt>CdumpContext<ept id="p1">**</ept> and inputs a <ph id="ph3">`COleVariant`</ph> object from <ph id="ph4">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleVariant`</ph> insertion ( <bpt id="p1">**</bpt><ph id="ph2">&lt;\&lt;</ph><ept id="p1">**</ept>) operator supports diagnostic dumping and storing to an archive.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The extraction ( <bpt id="p1">**</bpt><ph id="ph1">&gt;&gt;</ph><ept id="p1">**</ept>) operator supports loading from an archive.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>COleVariant::SetString</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Sets the string to a particular type.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A null-terminated string to be copied into the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>VtSrc</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> for the new <ph id="ph1">`COleVariant`</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`vtSrc`</ph> must be <ph id="ph2">`VT_BSTR`</ph> (UNICODE) or <ph id="ph3">`VT_BSTRT`</ph> (ANSI).</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>is typically used to set strings to ANSI, since the default for the <bpt id="p1">[</bpt>COleVariant::COleVariant<ept id="p1">](#colevariant__colevariant)</ept> constructor with a string or string pointer parameter and no <bpt id="p2">**</bpt>VARTYPE<ept id="p2">**</ept> is UNICODE.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A DAO recordset in a non-UNICODE build expects strings to be ANSI.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Thus, for DAO functions that use <ph id="ph1">`COleVariant`</ph> objects, if you are not creating a UNICODE recordset, you must use the <bpt id="p1">**</bpt>COleVariant::COleVariant(<ept id="p1">**</ept> <ph id="ph2">`lpszSrc`</ph><bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph3">`vtSrc`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> form of constructor with <ph id="ph4">`vtSrc`</ph> set to <ph id="ph5">`VT_BSTRT`</ph> (ANSI) or use <ph id="ph6">`SetString`</ph> with <ph id="ph7">`vtSrc`</ph> set to <ph id="ph8">`VT_BSTRT`</ph> to make ANSI strings.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`CDaoRecordset`</ph> functions <bpt id="p1">[</bpt>CDaoRecordset::Seek<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__seek)</ept> and <bpt id="p2">[</bpt>CDaoRecordset::SetFieldValue<ept id="p2">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__setfieldvalue)</ept> use <ph id="ph2">`COleVariant`</ph> objects as parameters.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>These objects must be ANSI if the DAO recordset is not UNICODE.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>