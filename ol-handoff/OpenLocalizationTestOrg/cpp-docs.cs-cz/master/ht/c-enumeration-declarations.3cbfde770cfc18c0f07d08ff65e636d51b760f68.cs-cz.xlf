<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e1999db88f5086911377a94acdca04dd985e360</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-enumeration-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18e53e394744695895017a6bfe441c5ecbd1fcb6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">237b5c6b019a73f6953b2840b3a7c9f59048ce1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Enumeration Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Enumeration Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An enumeration consists of a set of named integer constants.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An enumeration type declaration gives the name of the (optional) enumeration tag and defines the set of named integer identifiers (called the "enumeration set," "enumerator constants," "enumerators," or "members").</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A variable with enumeration type stores one of the values of the enumeration set defined by that type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Variables of <ph id="ph1">`enum`</ph> type can be used in indexing expressions and as operands of all arithmetic and relational operators.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Enumerations provide an alternative to the <ph id="ph1">`#define`</ph> preprocessor directive with the advantages that the values can be generated for you and obey normal scoping rules.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In ANSI C, the expressions that define the value of an enumerator constant always have <ph id="ph1">`int`</ph> type; thus, the storage associated with an enumeration variable is the storage required for a single <ph id="ph2">`int`</ph> value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An enumeration constant or a value of enumerated type can be used anywhere the C language permits an integer expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>enum-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>enum<ept id="p1">**</ept>  <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept> opt<bpt id="p3">**</bpt>{<ept id="p3">**</ept> <bpt id="p4">*</bpt>enumerator-list<ept id="p4">*</ept> <bpt id="p5">**</bpt>}<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>enum<ept id="p1">**</ept>  <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> names the enumeration type defined by <bpt id="p2">*</bpt>enumerator-list<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This identifier is often called the "tag" of the enumeration specified by the list.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type specifier of the form</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>declares <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> to be the tag of the enumeration specified by the <bpt id="p2">*</bpt>enumerator-list<ept id="p2">*</ept> nonterminal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept> defines the "enumerator content."</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept> is described in detail below.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the declaration of a tag is visible, subsequent declarations that use the tag but omit <bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept> specify the previously declared enumerated type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The tag must refer to a defined enumeration type, and that enumeration type must be in current scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Since the enumeration type is defined elsewhere, the <bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept> does not appear in this declaration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declarations of types derived from enumerations and <ph id="ph1">`typedef`</ph> declarations for enumeration types can use the enumeration tag before the enumeration type is defined.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>enumerator</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>enumerator-list<ept id="p1">*</ept> <bpt id="p2">**</bpt>,<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>enumeration-constant</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept> in an <bpt id="p2">*</bpt>enumeration-list<ept id="p2">*</ept> names a value of the enumeration set.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By default, the first <bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept> is associated with the value 0.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The next <bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept> in the list is associated with the value of ( <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept> + 1 ), unless you explicitly associate it with another value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of an <bpt id="p1">*</bpt>enumeration-constant<ept id="p1">*</ept> is equivalent to its value.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">*</bpt>enumeration-constant = constant-expression<ept id="p1">*</ept> to override the default sequence of values.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Thus, if <bpt id="p1">*</bpt>enumeration-constant = constant-expression<ept id="p1">*</ept> appears in the <bpt id="p2">*</bpt>enumerator-list<ept id="p2">*</ept>, the <bpt id="p3">*</bpt>enumeration-constant<ept id="p3">*</ept> is associated with the value given by <bpt id="p4">*</bpt>constant-expression<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> must have <ph id="ph1">`int`</ph> type and can be negative.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following rules apply to the members of an enumeration set:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An enumeration set can contain duplicate constant values.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, you could associate the value 0 with two different identifiers, perhaps named <ph id="ph1">`null`</ph> and <ph id="ph2">`zero`</ph>, in the same set.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The identifiers in the enumeration list must be distinct from other identifiers in the same scope with the same visibility, including ordinary variable names and identifiers in other enumeration lists.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Enumeration tags obey the normal scoping rules.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>They must be distinct from other enumeration, structure, and union tags with the same visibility.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These examples illustrate enumeration declarations:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The value 0 is associated with <ph id="ph1">`saturday`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The identifier <ph id="ph1">`sunday`</ph> is explicitly set to 0.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The remaining identifiers are given the values 1 through 5 by default.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this example, a value from the set <ph id="ph1">`DAY`</ph> is assigned to the variable <ph id="ph2">`today`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note that the name of the enumeration constant is used to assign the value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Since the <ph id="ph1">`DAY`</ph> enumeration type was previously declared, only the enumeration tag <ph id="ph2">`DAY`</ph> is necessary.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To explicitly assign an integer value to a variable of an enumerated data type, use a type cast:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This cast is recommended in C but is not required.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This declaration can also be specified as</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>or as</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An example that uses these variables might look like this:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Unnamed enumerator data types can also be declared.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The name of the data type is omitted, but variables can be declared.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`response`</ph> is a variable of the type defined:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>