<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc26022737e887d8f291b1b9c08f21aea219b27e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\scheduler-instances.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86b4730ed7d5b036dc1f35fe184c22a0c2e644fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3e22a17fbb1af7204ae26778e4575e289d6497f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scheduler Instances | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Scheduler Instances</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes the role of scheduler instances in the Concurrency Runtime and how to use the <bpt id="p1">[</bpt>concurrency::Scheduler<ept id="p1">](../../parallel/concrt/reference/scheduler-class.md)</ept> and <bpt id="p2">[</bpt>concurrency::CurrentScheduler<ept id="p2">](../../parallel/concrt/reference/currentscheduler-class.md)</ept> classes to create and manage scheduler instances.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Scheduler instances are useful when you want to associate explicit scheduling policies with specific types of workloads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you can create one scheduler instance to run some tasks at an elevated thread priority and use the default scheduler to run other tasks at the normal thread priority.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id="p2">[</bpt>Asynchronous Agents Library<ept id="p2">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Scheduler and CurrentScheduler Classes</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Managing the Lifetime of a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Scheduler and CurrentScheduler Classes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Task Scheduler enables applications to use one or more <bpt id="p1">*</bpt>scheduler instances<ept id="p1">*</ept> to schedule work.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Scheduler<ept id="p1">](../../parallel/concrt/reference/scheduler-class.md)</ept> class represents a scheduler instance and encapsulates the functionality that is related to scheduling tasks.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A thread that is attached to a scheduler is known as an <bpt id="p1">*</bpt>execution context<ept id="p1">*</ept>, or just <bpt id="p2">*</bpt>context<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One scheduler can be active on the current context at any time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The active scheduler is also known as the <bpt id="p1">*</bpt>current scheduler<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime uses the <bpt id="p1">[</bpt>concurrency::CurrentScheduler<ept id="p1">](../../parallel/concrt/reference/currentscheduler-class.md)</ept> class to provide access to the current scheduler.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The current scheduler for one context can differ from the current scheduler for another context.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The runtime does not provide a process-level representation of the current scheduler.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Typically, the <ph id="ph1">`CurrentScheduler`</ph> class is used to access the current scheduler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> class is useful when you need to manage a scheduler that is not the current one.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following sections describe how to create and manage a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For a complete example that illustrates these tasks, see <bpt id="p1">[</bpt>How to: Manage a Scheduler Instance<ept id="p1">](../../parallel/concrt/how-to-manage-a-scheduler-instance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creating a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are these three ways to create a <ph id="ph1">`Scheduler`</ph> object:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If no scheduler exists, the runtime creates a default scheduler for you when you use runtime functionality, for example, a parallel algorithm, to perform work.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default scheduler becomes the current scheduler for the context that initiates the parallel work.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::CurrentScheduler::Create<ept id="p1">](reference/currentscheduler-class.md#create)</ept> method creates a <ph id="ph1">`Scheduler`</ph> object that uses a specific policy and associates that scheduler with the current context.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Scheduler::Create<ept id="p1">](reference/scheduler-class.md#create)</ept> method creates a <ph id="ph1">`Scheduler`</ph> object that uses a specific policy, but does not associate it with the current context.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Allowing the runtime to create a default scheduler enables all concurrent tasks to share the same scheduler.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically, the functionality that is provided by the <bpt id="p1">[</bpt>Parallel Patterns Library<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> (PPL) or the <bpt id="p2">[</bpt>Asynchronous Agents Library<ept id="p2">](../../parallel/concrt/asynchronous-agents-library.md)</ept> is used to perform parallel work.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, you do not have to work directly with the scheduler to control its policy or lifetime.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you use the PPL or the Agents Library, the runtime creates the default scheduler if it does not exist and makes it the current scheduler for each context.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you create a scheduler and set it as the current scheduler, then the runtime uses that scheduler to schedule tasks.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Create additional scheduler instances only when you require a specific scheduling policy.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information about the policies that are associated with a scheduler, see <bpt id="p1">[</bpt>Scheduler Policies<ept id="p1">](../../parallel/concrt/scheduler-policies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Managing the Lifetime of a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The runtime uses a reference-counting mechanism to control the lifetime of <ph id="ph1">`Scheduler`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`CurrentScheduler::Create`</ph> method or the <ph id="ph2">`Scheduler::Create`</ph> method to create a <ph id="ph3">`Scheduler`</ph> object, the runtime sets the initial reference count of that scheduler to one.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The runtime increments the reference count when you call the <bpt id="p1">[</bpt>concurrency::Scheduler::Attach<ept id="p1">](reference/scheduler-class.md#attach)</ept> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler::Attach`</ph> method associates the <ph id="ph2">`Scheduler`</ph> object together with the current context.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This makes it the current scheduler.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`CurrentScheduler::Create`</ph> method, the runtime both creates a <ph id="ph2">`Scheduler`</ph> object and attaches it to the current context (and sets the reference count to one).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>concurrency::Scheduler::Reference<ept id="p1">](reference/scheduler-class.md#reference)</ept> method to increment the reference count of a <ph id="ph1">`Scheduler`</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The runtime decrements the reference count when you call the <bpt id="p1">[</bpt>concurrency::CurrentScheduler::Detach<ept id="p1">](reference/currentscheduler-class.md#detach)</ept> method to detach the current scheduler, or call the <bpt id="p2">[</bpt>concurrency::Scheduler::Release<ept id="p2">](reference/scheduler-class.md#release)</ept> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the reference count reaches zero, the runtime destroys the <ph id="ph1">`Scheduler`</ph> object after all scheduled tasks finish.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A running task is allowed to increment the reference count of the current scheduler.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Therefore, if the reference count reaches zero and a task increments the reference count, the runtime does not destroy the <ph id="ph1">`Scheduler`</ph> object until the reference count again reaches zero and all tasks finish.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The runtime maintains an internal stack of <ph id="ph1">`Scheduler`</ph> objects for each context.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`Scheduler::Attach`</ph> or <ph id="ph2">`CurrentScheduler::Create`</ph> method, the runtime pushes that <ph id="ph3">`Scheduler`</ph> object onto the stack for the current context.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This makes it the current scheduler.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`CurrentScheduler::Detach`</ph>, the runtime pops the current scheduler from the stack for current context and sets the previous one as the current scheduler.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The runtime provides several ways to manage the lifetime of a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following table shows the appropriate method that releases or detaches the scheduler from the current context for each method that creates or attaches a scheduler to the current context.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Create or attach method</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Release or detach method</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling the inappropriate release or detach method produces unspecified behavior in the runtime.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When you use functionality, for example, the PPL, that causes the runtime to create the default scheduler for you, do not release or detach this scheduler.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The runtime manages the lifetime of any scheduler that it creates.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because the runtime does not destroy a <ph id="ph1">`Scheduler`</ph> object before all tasks have finished, you can use the <bpt id="p1">[</bpt>concurrency::Scheduler::RegisterShutdownEvent<ept id="p1">](reference/scheduler-class.md#registershutdownevent)</ept> method or the <bpt id="p2">[</bpt>concurrency::CurrentScheduler::RegisterShutdownEvent<ept id="p2">](reference/currentscheduler-class.md#registershutdownevent)</ept> method to receive a notification when a <ph id="ph2">`Scheduler`</ph> object is destroyed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This is useful when you must wait for every task that is scheduled by a <ph id="ph1">`Scheduler`</ph> object to finish.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Methods and Features</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This section summarizes the important methods of the <ph id="ph1">`CurrentScheduler`</ph> and <ph id="ph2">`Scheduler`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Think of the <ph id="ph1">`CurrentScheduler`</ph> class as a helper for creating a scheduler for use on the current context.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> class lets you control a scheduler that belongs to another context.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following table shows the important methods that are defined by the <ph id="ph1">`CurrentScheduler`</ph> class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create<ept id="p1">](reference/currentscheduler-class.md#create)</ept>|Creates a <ph id="ph1">`Scheduler`</ph> object that uses the specified policy and associates it with the current context.|</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get<ept id="p1">](reference/currentscheduler-class.md#get)</ept>|Retrieves a pointer to the <ph id="ph1">`Scheduler`</ph> object that is associated with the current context.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method does not increment the reference count of the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Detach<ept id="p1">](reference/currentscheduler-class.md#detach)</ept>|Detaches the current scheduler from the current context and sets the previous one as the current scheduler.|</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>RegisterShutdownEvent<ept id="p1">](reference/currentscheduler-class.md#registershutdownevent)</ept>|Registers an event that the runtime sets when the current scheduler is destroyed.|</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateScheduleGroup<ept id="p1">](reference/currentscheduler-class.md#createschedulegroup)</ept>|Creates a <bpt id="p2">[</bpt>concurrency::ScheduleGroup<ept id="p2">](../../parallel/concrt/reference/schedulegroup-class.md)</ept> object in the current scheduler.|</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ScheduleTask<ept id="p1">](reference/currentscheduler-class.md#scheduletask)</ept>|Adds a lightweight task to the scheduling queue of the current scheduler.|</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetPolicy<ept id="p1">](reference/currentscheduler-class.md#getpolicy)</ept>|Retrieves a copy of the policy that is associated with the current scheduler.|</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following table shows the important methods that are defined by the <ph id="ph1">`Scheduler`</ph> class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create<ept id="p1">](reference/scheduler-class.md#create)</ept>|Creates a <ph id="ph1">`Scheduler`</ph> object that uses the specified policy.|</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attach<ept id="p1">](reference/scheduler-class.md#attach)</ept>|Associates the <ph id="ph1">`Scheduler`</ph> object together with the current context.|</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](reference/scheduler-class.md#reference)</ept>|Increments the reference counter of the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Release<ept id="p1">](reference/scheduler-class.md#release)</ept>|Decrements the reference counter of the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>RegisterShutdownEvent<ept id="p1">](reference/scheduler-class.md#registershutdownevent)</ept>|Registers an event that the runtime sets when the <ph id="ph1">`Scheduler`</ph> object is destroyed.|</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateScheduleGroup<ept id="p1">](reference/scheduler-class.md#createschedulegroup)</ept>|Creates a <bpt id="p2">[</bpt>concurrency::ScheduleGroup<ept id="p2">](../../parallel/concrt/reference/schedulegroup-class.md)</ept> object in the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ScheduleTask<ept id="p1">](reference/scheduler-class.md#scheduletask)</ept>|Schedules a lightweight task from the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetPolicy<ept id="p1">](reference/scheduler-class.md#getpolicy)</ept>|Retrieves a copy of the policy that is associated with the <ph id="ph1">`Scheduler`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetDefaultSchedulerPolicy<ept id="p1">](reference/scheduler-class.md#setdefaultschedulerpolicy)</ept>|Sets the policy for the runtime to use when it creates the default scheduler.|</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ResetDefaultSchedulerPolicy<ept id="p1">](reference/scheduler-class.md#resetdefaultschedulerpolicy)</ept>|Restores the default policy to the one that was active before the call to <ph id="ph1">`SetDefaultSchedulerPolicy`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the default scheduler is created after this call, the runtime uses default policy settings to create the scheduler.|</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For basic examples of how to create and manage a scheduler instance, see <bpt id="p1">[</bpt>How to: Manage a Scheduler Instance<ept id="p1">](../../parallel/concrt/how-to-manage-a-scheduler-instance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>How to: Manage a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Scheduler Policies</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Schedule Groups</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>