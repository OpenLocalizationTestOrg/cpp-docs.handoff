<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bec4a70739b46289fc1add0b85b32902b460d413</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-subclassing-a-windows-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cea4c0b4b517df522ec471bc71420a706e0e6cd7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6775cc0387fdfd992f1306177bd8f4e4e2b765ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Subclassing a Windows Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Subclassing a Windows Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the process for subclassing a common Windows control to create an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Subclassing an existing Windows control is a quick way to develop an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The new control will have the abilities of the subclassed Windows control, such as painting and responding to mouse clicks.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The MFC ActiveX controls sample <bpt id="p1">[</bpt>BUTTON<ept id="p1">](../visual-cpp-samples.md)</ept> is an example of subclassing a Windows control.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To subclass a Windows control, complete the following tasks:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Override the IsSubclassedControl and PreCreateWindow member functions of COleControl</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Modify the OnDraw member function</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Handle any ActiveX control messages (OCM) reflected to the control</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Much of this work is done for you by the ActiveX Control Wizard if you select control to be subclassed using the <bpt id="p1">**</bpt>Select Parent Window Class<ept id="p1">**</ept> drop-down list on the <bpt id="p2">**</bpt>Control Settings<ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See Knowledge Base article Q243454 for more information on subclassing a control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Overriding IsSubclassedControl and PreCreateWindow</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To override <ph id="ph1">`PreCreateWindow`</ph> and <ph id="ph2">`IsSubclassedControl`</ph>, add the following lines of code to the <ph id="ph3">`protected`</ph> section of the control class declaration:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#1</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the control implementation file (.CPP), add the following lines of code to implement the two overridden functions:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#2</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Notice that, in this example, the Windows button control is specified in <ph id="ph1">`PreCreateWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, any standard Windows controls can be subclassed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information on standard Windows controls, see <bpt id="p1">[</bpt>Controls<ept id="p1">](../mfc/controls-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When subclassing a Windows control, you may want to specify particular window style (<bpt id="p1">**</bpt>WS_<ept id="p1">**</ept>) or extended window style (<bpt id="p2">**</bpt>WS_EX_<ept id="p2">**</ept>) flags to be used in creating the control's window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can set values for these parameters in the <ph id="ph1">`PreCreateWindow`</ph> member function by modifying the <bpt id="p1">**</bpt>cs.style<ept id="p1">**</ept> and the <bpt id="p2">**</bpt>cs.dwExStyle<ept id="p2">**</ept> structure fields.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Modifications to these fields should be made using an <ph id="ph1">`OR`</ph> operation, to preserve the default flags that are set by class <ph id="ph2">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if the control is subclassing the BUTTON control and you want the control to appear as a check box, insert the following line of code into the implementation of <ph id="ph1">`CSampleCtrl::PreCreateWindow`</ph>, before the return statement:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#3</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This operation adds the <bpt id="p1">**</bpt>BS_CHECKBOX<ept id="p1">**</ept> style flag, while leaving the default style flag (<bpt id="p2">**</bpt>WS_CHILD<ept id="p2">**</ept>) of class <ph id="ph1">`COleControl`</ph> intact.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Modifying the OnDraw Member Function</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you want your subclassed control to keep the same appearance as the corresponding Windows control, the <ph id="ph1">`OnDraw`</ph> member function for the control should contain only a call to the <ph id="ph2">`DoSuperclassPaint`</ph> member function, as in the following example:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#4</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoSuperclassPaint`</ph> member function, implemented by <ph id="ph2">`COleControl`</ph>, uses the window procedure of the Windows control to draw the control in the specified device context, within the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This makes the control visible even when it is not active.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoSuperclassPaint`</ph> member function will work only with those control types that allow a device context to be passed as the <bpt id="p1">**</bpt>wParam<ept id="p1">**</ept> of a <ph id="ph2">`WM_PAINT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This includes some of the standard Windows controls, such as <bpt id="p1">**</bpt>SCROLLBAR<ept id="p1">**</ept> and <bpt id="p2">**</bpt>BUTTON<ept id="p2">**</ept>, and all the common controls.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For controls that do not support this behavior, you will have to provide your own code to properly display an inactive control.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Handling Reflected Window Messages</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows controls typically send certain window messages to their parent window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Some of these messages, such as <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept>, provide notification of an action by the user.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Others, such as <ph id="ph1">`WM_CTLCOLOR`</ph>, are used to obtain information from the parent window.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An ActiveX control usually communicates with the parent window by other means.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Notifications are communicated by firing events (sending event notifications), and information about the control container is obtained by accessing the container's ambient properties.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because these communication techniques exist, ActiveX control containers are not expected to process any window messages sent by the control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To prevent the container from receiving the window messages sent by a subclassed Windows control, <ph id="ph1">`COleControl`</ph> creates an extra window to serve as the control's parent.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This extra window, called a "reflector," is created only for an ActiveX control that subclasses a Windows control and has the same size and position as the control window.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The reflector window intercepts certain window messages and sends them back to the control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The control, in its window procedure, can then process these reflected messages by taking actions appropriate for an ActiveX control (for example, firing an event).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Reflected Window Message IDs<ept id="p1">](../mfc/reflected-window-message-ids.md)</ept> for a list of intercepted windows messages and their corresponding reflected messages.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An ActiveX control container may be designed to perform message reflection itself, eliminating the need for <ph id="ph1">`COleControl`</ph> to create the reflector window and reducing the run-time overhead for a subclassed Windows control.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>detects whether the container supports this capability by checking for a MessageReflect ambient property with a value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To handle a reflected window message, add an entry to the control message map and implement a handler function.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because reflected messages are not part of the standard set of messages defined by Windows, Class View does not support adding such message handlers.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, it is not difficult to add a handler manually.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To add a message handler for a reflected window message manually do the following:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the control class .H file, declare a handler function.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The function should have a return type of <bpt id="p1">**</bpt>LRESULT<ept id="p1">**</ept> and two parameters, with types <bpt id="p2">**</bpt>WPARAM<ept id="p2">**</ept> and <bpt id="p3">**</bpt>LPARAM<ept id="p3">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#5</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#6</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the control class .CPP file, add an <ph id="ph1">`ON_MESSAGE`</ph> entry to the message map.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The parameters of this entry should be the message identifier and the name of the handler function.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxSub#7</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Also in the .CPP file, implement the <bpt id="p1">**</bpt>OnOcmCommand<ept id="p1">**</ept> member function to process the reflected message.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>wParam<ept id="p1">**</ept> and <bpt id="p2">**</bpt>lParam<ept id="p2">**</ept> parameters are the same as those of the original window message.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For an example of how reflected messages are processed, refer to the MFC ActiveX controls sample <bpt id="p1">[</bpt>BUTTON<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It demonstrates an <bpt id="p1">**</bpt>OnOcmCommand<ept id="p1">**</ept> handler that detects the <bpt id="p2">**</bpt>BN_CLICKED<ept id="p2">**</ept> notification code and responds by firing (sending) a Click event.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>