<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c0b1c866fadeb04ff783595f96becf7c5d99560</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-string-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bddbe4e9fd5f0919f7d6113a9291ebee05d50860</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d19a23060c465c1fe4ed4a21a68eb59506fbbe8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_string Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_string Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The sequences controlled by an object of template class <ph id="ph1">`basic_string`</ph> are the Standard C++ string class and are usually referred to as strings, but they should not be confused with the null-terminated C-style strings used throughout the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Standard C++ string is a container that enables the use of strings as normal types, such as comparison and concatenation operations, iterators, STL algorithms, and copying and assigning with class allocator managed memory.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you need to convert a Standard C++ string to a null-terminated C-style string, use the <bpt id="p1">[</bpt>basic_string::c_str<ept id="p1">](#basic_string__c_str)</ept> member.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The data type of a single character to be stored in the string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Standard C++ Library provides specializations of this template class, with the type definitions <bpt id="p1">[</bpt>string<ept id="p1">](../standard-library/string-typedefs.md#string)</ept> for elements of type <ph id="ph1">`char`</ph>, <bpt id="p2">[</bpt>wstring<ept id="p2">](../standard-library/string-typedefs.md#wstring)</ept>, for <ph id="ph2">`wchar_t`</ph>, <bpt id="p3">[</bpt>u16string<ept id="p3">](../standard-library/string-typedefs.md#u16string)</ept> for <ph id="ph3">`char16_t`</ph>, and <bpt id="p4">[</bpt>u32string<ept id="p4">](../standard-library/string-typedefs.md#u32string)</ept> for <ph id="ph4">`char32_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Various important properties of the <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> elements in a basic_string specialization are described by the class <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`char_traits`&lt; `CharType`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type that represents the stored allocator object that encapsulates details about the string's allocation and deallocation of memory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>allocator<ept id="p1">**</ept><ph id="ph1">&lt; `CharType`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>basic_string</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Constructs a string that is empty or initialized by specific characters or that is a copy of all or part of some other string object or C-string.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A type that represents the <ph id="ph1">`allocator`</ph> class for a string object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>const_iterator</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can access and read a <ph id="ph1">`const`</ph> element in the string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>const_pointer</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <ph id="ph1">`const`</ph> element in a string.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>const_reference</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <ph id="ph1">`const`</ph> element stored in a string for reading and performing <ph id="ph2">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read any <ph id="ph1">`const`</ph> element in the string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>difference_type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two iterators that refer to elements within the same string.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>iterator</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify any element in a string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>npos</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An unsigned integral value initialized to â€“1 that indicates either "not found" or "all remaining characters" when a search function fails.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a character element in a string or character array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a string.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>reverse_iterator</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read or modify an element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>size_type</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An unsigned integral type for the number of elements in a string.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A type for the character traits of the elements stored in a string.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>value_type</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A type that represents the type of characters stored in a string.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>append</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Adds characters to the end of a string.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>assign</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Assigns new character values to the contents of a string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>at</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at a specified location in the string.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>back</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>begin</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in the string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>c_str</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Converts the contents of a string as a C-style, null-terminated, string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>capacity</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns the largest number of elements that could be stored in a string without increasing the memory allocation of the string.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>cbegin</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in the string.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>cend</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Erases all elements of a string.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>compare</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Compares a string with a specified string to determine if the two strings are equal or if one is lexicographically less than the other.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>copy</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Copies at most a specified number of characters from an indexed position in a source string to a target character array.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Deprecated.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>basic_string::_Copy_s<ept id="p1">](#basic_string___copy_s)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>crbegin</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the first element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>crend</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>_Copy_s</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Copies at most a specified number of characters from an indexed position in a source string to a target character array.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>data</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Converts the contents of a string into an array of characters.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>empty</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Tests whether the string contains characters.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>end</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a string.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>erase</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a string from a specified position.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>find</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Searches a string in a forward direction for the first occurrence of a substring that matches a specified sequence of characters.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>find_first_not_of</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Searches through a string for the first character that is not any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>find_first_of</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Searches through a string for the first character that matches any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>find_last_not_of</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Searches through a string for the last character that is not any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>find_last_of</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Searches through a string for the last character that is an element of a specified string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>front</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a string.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>get_allocator</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns a copy of the <ph id="ph1">`allocator`</ph> object used to construct the string.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>insert</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements or a range of elements into the string at a specified position.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>length</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the current number of elements in a string.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>max_size</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of characters a string could contain.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>pop_back</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Erases the last element of the string.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>push_back</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the string.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>rbegin</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>rend</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points just beyond the last element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>replace</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Replaces elements in a string at a specified position with specified characters or characters copied from other ranges or strings or C-strings.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>reserve</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Sets the capacity of the string to a number at least as great as a specified number.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>resize</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a string, appending or erasing elements as required.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>rfind</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Searches a string in a backward direction for the first occurrence of a substring that matches a specified sequence of characters.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>shrink_to_fit</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Discards the excess capacity of the string.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>size</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the current number of elements in a string.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>substr</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Copies a substring of at most some number of characters from a string beginning from a specified position.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Exchange the contents of two strings.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>operator+=</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Appends characters to a string.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Assigns new character values to the contents of a string.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>operator&amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Provides a reference to the character with a specified index in a string.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If a function is asked to generate a sequence longer than <bpt id="p1">[</bpt>max_size<ept id="p1">](#basic_string__max_size)</ept> elements, the function reports a length error by throwing an object of type <bpt id="p2">[</bpt>length_error<ept id="p2">](../standard-library/length-error-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>References, pointers, and iterators that designate elements of the controlled sequence can become invalid after any call to a function that alters the controlled sequence, or after the first call to a non- <bpt id="p1">**</bpt>const<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>string&gt;</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>basic_string::allocator_type</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A type that represents the allocator class for a string object.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Allocator<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>basic_string::append</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Adds characters to the end of a string.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The C-string to be appended.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The string whose characters are to be appended.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The index of the part of the source string supplying the characters to be appended.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The number of characters to be appended, at most, from the source string.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The character value to be appended.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element in the range to be appended.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the position of the one beyond the last element in the range to be appended.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A reference to the string object that is being appended with the characters passed by the member function.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Characters may be appended to a string using the <bpt id="p1">[</bpt>operator+=<ept id="p1">](#basic_string__operator_add_eq)</ept> or the member functions <bpt id="p2">**</bpt>append<ept id="p2">**</ept> or <bpt id="p3">[</bpt>push_back<ept id="p3">](#basic_string__push_back)</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>appends single-argument values while the multiple-argument <bpt id="p1">**</bpt>append<ept id="p1">**</ept> member function allows a specific part of a string to be specified for adding.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>basic_string::assign</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Assigns new character values to the contents of a string.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A pointer to the characters of the C-string to be assigned to the target string.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The number of characters to be appended, at most, from the source string.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The source string whose characters are to be assigned to the target string.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The character value to be assigned.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the first character in the range of the source string to be assigned to the target range.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the one beyond the last character in the range of the source string to be assigned to the target range.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The position at which new characters will start to be assigned.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A reference to the string object that is being assigned new characters by the member function.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The strings can be assigned new character values.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The new value can be either a string and C-string or a single character.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>operator=<ept id="p1">](#basic_string__operator_eq)</ept> may be used if the new value can be described by a single parameter; otherwise the member function <bpt id="p2">**</bpt>assign<ept id="p2">**</ept>, which has multiple parameters, can be used to specify which part of the string is to be assigned to a target string.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>basic_string::at</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Provides a reference to the character with a specified index in a string.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The index of the position of the element to be referenced.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A reference to the character of the string at the position specified by the parameter index.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The first element of the string has an index of zero and the following elements are indexed consecutively by the positive integers, so that a string of length <bpt id="p1">*</bpt>n<ept id="p1">*</ept> has an <bpt id="p2">*</bpt>n<ept id="p2">*</ept>th element indexed by the number <bpt id="p3">*</bpt>n â€“<ept id="p3">*</ept> 1.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The member <bpt id="p1">[</bpt>operator&amp;#91;&amp;#93;<ept id="p1">](#basic_string__operator_at)</ept> is faster than the member function <bpt id="p2">**</bpt>at<ept id="p2">**</ept> for providing read and write access to the elements of a string.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The member <ph id="ph1">`operator[]`</ph> does not check whether the index passed as a parameter is valid but the member function <bpt id="p1">**</bpt>at<ept id="p1">**</ept> does and so should be used if the validity is not certain.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>An invalid index, which is an index less that zero or greater than or equal to the size of the string, passed to the member function <bpt id="p1">**</bpt>at<ept id="p1">**</ept> throws an <bpt id="p2">[</bpt>out_of_range Class<ept id="p2">](../standard-library/out-of-range-class.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>An invalid index passed to the <ph id="ph1">`operator[]`</ph> results in undefined behavior, but the index equal to the length of the string is a valid index for const strings and the operator returns the null-character when passed this index.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The reference returned may be invalidated by string reallocations or modifications for the non- <bpt id="p1">**</bpt>const<ept id="p1">**</ept> strings.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>basic_string::back</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element in the string.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A reference to the last element of the string, which must be non-empty.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>basic_string::basic_string</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Constructs a string that is empty, initialized by specific characters, or is a copy of all or part of another string object or C style (null-terminated) string.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The C-string whose characters are to be used to initialize the <ph id="ph1">`string`</ph> being constructed.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This value cannot be a null pointer.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The storage allocator class for the string object being constructed.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The number of characters to be initialized.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The string to initialize the string being constructed.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The index of a character in a string that is the first to be used to initialize character values for the string being constructed.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The character value to be copied into the string being constructed.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the first element in the source range to be inserted.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the position of the one beyond the last element in the source range to be inserted.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A reference to the string object that is being constructed by the constructors.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>All constructors store an <bpt id="p1">[</bpt>basic_string::allocator_type<ept id="p1">](#basic_string__allocator_type)</ept> and initialize the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The allocator object is the argument <ph id="ph1">`al`</ph>, if present.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For the copy constructor, it is <ph id="ph1">`right.`</ph><bpt id="p1">[</bpt>basic_string::get_allocator<ept id="p1">](#basic_string__get_allocator)</ept><ph id="ph2">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Otherwise, it is <ph id="ph1">`Alloc()`</ph>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The controlled sequence is initialized to a copy of the operand sequence specified by the remaining operands.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A constructor without an operand sequence specifies an empty initial controlled sequence.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`InputIterator`</ph> is an integer type in a template constructor, the operand sequence _F <ph id="ph2">`irst,  last`</ph> behaves the same as <ph id="ph3">`(size_type) first, (value_type) last`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>basic_string::begin</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in the string.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A random-access iterator that addresses the first element of the sequence or just beyond the end of an empty sequence.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>basic_string::c_str</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Converts the contents of a string as a C-style, null-terminated string.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A pointer to the C-style version of the invoking string.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The pointer value is not valid after calling a non-const function, including the destructor, in the basic_string class on the object.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Objects of type string belonging to the C++ template class basic_string<ph id="ph1">\&lt;</ph>char&gt; are not necessarily null terminated.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The null character ' \0 ' is used as a special character in a C-string to mark the end of the string but has no special meaning in an object of type string and may be a part of the string just like any other character.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>There is an automatic conversion from const <bpt id="p1">**</bpt>char<ph id="ph1">\*</ph><ept id="p1">**</ept> into strings, but the string class does not provide for automatic conversions from C-style strings to objects of type <bpt id="p2">**</bpt>basic_string<ph id="ph2">\&lt;</ph>char&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The returned C-style string should not be modified, as this could invalidate the pointer to the string, or deleted, as the string has a limited lifetime and is owned by the class string.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>basic_string::capacity</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns the largest number of elements that could be stored in a string without increasing the memory allocation of the string.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The size of storage currently allocated in memory to hold the string.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The member function returns the storage currently allocated to hold the controlled sequence, a value at least as large as <bpt id="p1">[</bpt>size<ept id="p1">](#basic_string__size)</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>basic_string::cbegin</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the first element in the range.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id="ph2">`cbegin() == cend()`</ph>).</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`cbegin`</ph>, the elements in the range cannot be modified.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`begin()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`begin()`</ph> and <ph id="ph4">`cbegin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>basic_string::cend</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> random-access iterator that points just beyond the end of the range.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>is used to test whether an iterator has passed the end of its range.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`end()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`end()`</ph> and <ph id="ph4">`cend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`cend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>basic_string::clear</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Erases all elements of a string.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The string on which the member function is called will be empty.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>basic_string::compare</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Performs a case sensitive comparison with a specified string to determine if the two strings are equal or if one is lexicographically less than the other.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The string that is to be compared to the operand string.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The index of the operand string at which the comparison begins.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The maximum number of characters from the operand string to be compared.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The maximum number of characters from the parameter string to be compared.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The index of the parameter string at which the comparison begins.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The maximum number of characters from the parameter string to be compared.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The C-string to be compared to the operand string.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A negative value if the operand string is less than the parameter string; zero if the two strings are equal; or a positive value if the operand string is greater than the parameter string.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>compare<ept id="p1">**</ept> member functions compare either all or part of the parameter and operand strings depending on which in used.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The comparison performed is case sensitive.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>basic_string::const_iterator</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can access and read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the string.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_iterator`</ph> cannot be used to modify the value of a character and is used to iterate through a string in a forward direction.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#basic_string__begin)</ept> for an example of how to declare and use <ph id="ph1">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>basic_string::const_pointer</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a string.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">**</bpt>allocator_type::const_pointer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <ph id="ph1">`char`</ph>*.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Pointers that are declared const must be initialized when they are declared.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Const pointers always point to the same memory location and may point to constant or nonconstant data.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>basic_string::const_reference</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element stored in a string for reading and performing <bpt id="p2">**</bpt>const<ept id="p2">**</ept> operations.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reference`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">**</bpt>allocator_type::const_reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For string <bpt id="p1">**</bpt>type<ept id="p1">**</ept>, it is equivalent to const <bpt id="p2">**</bpt>char&amp;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>at<ept id="p1">](#basic_string__at)</ept> for an example of how to declare and use <ph id="ph1">`const_reference`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>basic_string::const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can read any <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the string.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reverse_iterator`</ph> cannot modify the value of a character and is used to iterate through a string in reverse.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#basic_string__rbegin)</ept> for an example of how to declare and use <ph id="ph1">`const_reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>basic_string::copy</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Copies at most a specified number of characters from an indexed position in a source string to a target character array.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Consider using <bpt id="p1">[</bpt>basic_string::_Copy_s<ept id="p1">](#basic_string___copy_s)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The target character array to which the elements are to be copied.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>_</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The number of characters to be copied, at most, from the source string.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The beginning position in the source string from which copies are to be made.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The number of characters actually copied.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A null character is not appended to the end of the copy.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>basic_string::crbegin</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the first element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>A reverse iterator that points just beyond the end of the string.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The position designates the beginning of the reverse string.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>basic_string::crend</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A const reverse iterator that addresses the location succeeding the last element in a reversed string (the location that had preceded the first element in the unreversed string).</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>basic_string::_Copy_s</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Copies at most a specified number of characters from an indexed position in a source string to a target character array.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The target character array to which the elements are to be copied.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The size of <ph id="ph1">` dest`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>_</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The number of characters to be copied, at most, from the source string.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The beginning position in the source string from which copies are to be made.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The number of characters actually copied.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>A null character is not appended to the end of the copy.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>basic_string::data</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Converts the contents of a string into an array of characters.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>A pointer to the first element of the array containing the contents of the string, or, for an empty array, a non-null pointer that cannot be dereferenced.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Objects of type string belonging to the C++ template class basic_string <ph id="ph1">\&lt;</ph>char&gt; are not necessarily null terminated.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The return type for <bpt id="p1">**</bpt>data<ept id="p1">**</ept> is not a valid C-string, because no null character gets appended.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The null character ' \0 ' is used as a special character in a C-string to mark the end of the string, but has no special meaning in an object of type string and may be a part of the string object just like any other character.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>There is an automatic conversion from const <bpt id="p1">**</bpt>char<ph id="ph1">\*</ph><ept id="p1">**</ept> into strings, but the string class does not provide for automatic conversions from C-style strings to objects of type <bpt id="p2">**</bpt>basic_string <ph id="ph2">\&lt;</ph>char&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The returned string should not be modified, because this could invalidate the pointer to the string, or deleted, because the string has a limited lifetime and is owned by the class string.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>basic_string::difference_type</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two iterators that refer to elements within the same string.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The signed integer type describes an object that can represent the difference between the addresses of any two elements in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <bpt id="p2">**</bpt>ptrdiff_t<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>basic_string::empty</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Tests whether the string contains characters or not.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object contains no characters; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if it has at least one character.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The member function is equivalent to <bpt id="p1">[</bpt>size<ept id="p1">](#basic_string__size)</ept> == 0.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>basic_string::end</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a string.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Returns a random-access iterator that addresses the location succeeding the last element in a string.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>end<ept id="p1">**</ept> is often used to test whether an iterator has reached the end of its string.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The value returned by <bpt id="p1">**</bpt>end<ept id="p1">**</ept> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>end<ept id="p1">**</ept> is assigned to a <ph id="ph1">`const_iterator`</ph>, the string object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>end<ept id="p1">**</ept> is assigned to an <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>, the string object can be modified.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>basic_string::erase</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a string from a specified position.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>An iterator addressing the position of the first element in the range to be erased.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>An iterator addressing the position one past the last element in the range to be erased.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>An iterator addressing the position of the element in the string to be erased.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The index of the first character in the string to be removed.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The number of elements that will be removed if there are as many in the range of the string beginning with <bpt id="p1">*</bpt>_Pos<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For the first two member functions, an iterator addressing the first character after the last character removed by the member function.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>For the third member function, a reference to the string object from which the elements have been erased.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The third member function returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>basic_string::find</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Searches a string in a forward direction for the first occurrence of a substring that matches a specified sequence of characters.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to begin.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The index of the first character of the substring searched for when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>basic_string::find_first_not_of</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Searches through a string for the first character that is not an element of a specified string.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to begin.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The index of the first character of the substring searched for when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>basic_string::find_first_of</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Searches through a string for the first character that matches any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to begin.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The index of the first character of the substring searched for when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>basic_string::find_last_not_of</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Searches through a string for the last character that is not any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to finish.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The index of the first character of the substring searched for when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>basic_string::find_last_of</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Searches through a string for the last character that matches any element of a specified string.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to finish.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The index of the last character of the substring searched for when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>basic_string::front</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a string.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>A reference to the first element of the string, which must be non-empty.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>basic_string::get_allocator</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator object used to construct the string.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The allocator used by the string.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The member function returns the stored allocator object.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Allocators for the string class specify how the class manages storage.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The default allocators supplied with container classes are sufficient for most programming needs.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Writing and using your own allocator class is an advanced C++ topic.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>basic_string::insert</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements or a range of elements into the string at a specified position.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>_P0</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The index of the position behind the point of insertion the new characters.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The C-string to be wholly or partly inserted into the string.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The number of characters to be inserted.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The string to be wholly or partly inserted into the target string.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The index of the part of the source string supplying the characters to be appended.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The character value of the elements to be inserted.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>An iterator addressing the position behind which a character is to be inserted.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the first element in the source range to be inserted.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>An input iterator, const_pointer, or const_iterator addressing the position of the one beyond the last element in the source range to be inserted.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Either a reference to the string object that is being assigned new characters by the member function or, in the case of individual character insertions, an iterator addressing the position of the character inserted, or none, depending on the particular member function.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>basic_string::iterator</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>A type that provides a random-access iterator that can access and read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the string.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> can be used to modify the value of a character and is used to iterate through a string in a forward direction.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#basic_string__begin)</ept> for an example of how to declare and use <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>basic_string::length</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Returns the current number of elements in a string.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The member function is the same as <bpt id="p1">[</bpt>size<ept id="p1">](#basic_string__size)</ept>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>basic_string::max_size</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of characters a string could contain.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The maximum number of characters a string could contain.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A exception of type <bpt id="p1">[</bpt>length_error Class<ept id="p1">](../standard-library/length-error-class.md)</ept> is thrown when an operation produces a string with a length greater than the maximum size.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>basic_string::npos</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>An unsigned integral value initialized to â€“1 that indicates either "not found" or "all remaining characters" when a search function fails.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>When the return value is to be checked for the <ph id="ph1">`npos`</ph> value, it might not work unless the return value is of type <bpt id="p1">[</bpt>size_type<ept id="p1">](#basic_string__size_type)</ept> and not either <ph id="ph2">`int`</ph> or <ph id="ph3">`unsigned`</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>find<ept id="p1">](#basic_string__find)</ept> for an example of how to declare and use <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>basic_string::operator+=</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Appends characters to a string.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The character to be appended.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The characters of the C-string to be appended.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The characters of the string to be appended.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>A reference to the string object that is being appended with the characters passed by the member function.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Characters may be appended to a string using the <ph id="ph1">`operator+=`</ph> or the member functions <bpt id="p1">[</bpt>append<ept id="p1">](#basic_string__append)</ept> or <bpt id="p2">[</bpt>push_back<ept id="p2">](#basic_string__push_back)</ept>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`operator+=`</ph> appends single-argument values while the multiple argument append member function allows a specific part of a string to be specified for adding.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>basic_string::operator=</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Assigns new character values to the contents of a string.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The character value to be assigned.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A pointer to the characters of the C-string to be assigned to the target string.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The source string whose characters are to be assigned to the target string.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>A reference to the string object that is being assigned new characters by the member function.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The strings may be assigned new character values.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The new value may be either a string and C-string or a single character.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`operator=`</ph> may be used if the new value can be described by a single parameter, otherwise the member function <bpt id="p1">[</bpt>assign<ept id="p1">](#basic_string__assign)</ept>, which has multiple parameters, may be used to specify which part of the string is to be assigned to a target string.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>basic_string::operator[]</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Provides a reference to the character with a specified index in a string.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The index of the position of the element to be referenced.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>A reference to the character of the string at the position specified by the parameter index.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The first element of the string has an index of zero, and the following elements are indexed consecutively by the positive integers, so that a string of length <bpt id="p1">*</bpt>n<ept id="p1">*</ept> has an <bpt id="p2">*</bpt>n<ept id="p2">*</ept>th element indexed by the number <bpt id="p3">*</bpt>n<ept id="p3">*</ept> - 1.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>is faster than the member function <bpt id="p1">[</bpt>at<ept id="p1">](#basic_string__at)</ept> for providing read and write access to the elements of a string.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>does not check whether the index passed as a parameter is valid, but the member function <bpt id="p1">**</bpt>at<ept id="p1">**</ept> does and so should be used in the validity is not certain.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>An invalid index (an index less that zero or greater than or equal to the size of the string) passed to the member function <bpt id="p1">**</bpt>at<ept id="p1">**</ept> throws an <bpt id="p2">[</bpt>out_of_range Class<ept id="p2">](../standard-library/out-of-range-class.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>An invalid index passed to <ph id="ph1">`operator[]`</ph> results in undefined behavior, but the index equal to the length of the string is a valid index for const strings and the operator returns the null character when passed this index.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The reference returned may be invalidated by string reallocations or modifications for the non- <bpt id="p1">**</bpt>const<ept id="p1">**</ept> strings.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the string.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>basic_string::pointer</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a character element in a string or character array.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">**</bpt>allocator_type::pointer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <bpt id="p2">**</bpt>char<ph id="ph1">\*</ph><ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>basic_string::pop_back</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Erases the last element of the string.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>This member function effectively calls <ph id="ph1">`erase(size() - 1)`</ph> to erase the last element of the sequence, which must be non-empty.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>basic_string::push_back</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the string.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The character to be added to the end of the string.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The member function effectively calls <bpt id="p1">[</bpt>insert<ept id="p1">](#basic_string__insert)</ept>( <bpt id="p2">[</bpt>end<ept id="p2">](#basic_string__end)</ept>, _ <bpt id="p3">*</bpt>Ch<ept id="p3">*</ept> ).</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>basic_string::rbegin</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Returns a random-access iterator to the first element in a reversed string, addressing what would be the last element in the corresponding unreversed string.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>is used with a reversed string just as <bpt id="p1">[</bpt>begin<ept id="p1">](#basic_string__begin)</ept> is used with a string.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, the string object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, the string object can be modified.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>can be used to initialize an iteration through a string backwards.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>basic_string::reference</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a string.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>reference<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">**</bpt>allocator_type::reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <bpt id="p2">**</bpt>chr&amp;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>at<ept id="p1">](#basic_string__at)</ept> for an example of how to declare and use <bpt id="p2">**</bpt>reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>basic_string::rend</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>A reverse random-access iterator that addresses the location succeeding the last element in a reversed string.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>is used with a reversed string just as <bpt id="p1">[</bpt>end<ept id="p1">](#basic_string__end)</ept> is used with a string.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, the string object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, the string object can be modified.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>can be used to test whether a reverse iterator has reached the end of its string.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`rend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>basic_string::replace</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Replaces elements in a string at a specified position with specified characters or characters copied from other ranges or strings or C-strings.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The string that is to be a source of characters for the operand string.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The index of the operand string at which the replacement begins.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to be replaced in the operand string.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>_Pos2</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>The index of the parameter string at which the copying begins.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to be used from the parameter C-string.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The C-string that is to be a source of characters for the operand string.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The character to be copied into the operand string.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>first0*</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>An iterator addressing the first character to be removed in the operand string.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>last0*</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>An iterator addressing the last character to be removed in the operand string.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>An iterator, const_pointer, or const_iterator addressing the first character to be copied in the parameter string.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>An iterator, const_pointer, or const_iterator addressing the last character to be copied in the parameter string.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The number of times <ph id="ph1">`_Ch`</ph> is copied into the operand string.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The operand string with the replacement made.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>basic_string::reserve</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Sets the capacity of the string to a number at least as great as a specified number.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The number of characters for which memory is being reserved.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Having sufficient capacity is important because reallocations is a time-consuming process and invalidates all references, pointers, and iterators that refer to characters in a string.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The concept of capacity for objects of type strings is the same as for objects of type vector.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Unlike vector, the member function <bpt id="p1">**</bpt>reserve<ept id="p1">**</ept> may be called to shrink the capacity of an object.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The request is nonbinding and may or may not happen.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>As the default value for the parameter is zero, a call of <bpt id="p1">**</bpt>reserve<ept id="p1">**</ept> is a non-binding request to shrink the capacity of the string to fit the number of characters currently in the string.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The capacity is never reduced below the current number of characters.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`reserve`</ph> is the only possible way to shrink the capacity of a string.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>However, as noted above, this request is nonbinding and may not happen.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>basic_string::resize</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a string, appending or erasing elements as required.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The new size of the string.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The value that appended characters are initialized with if additional elements are required.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>If the resulting size exceeds the maximum number of characters, the form throws <ph id="ph1">`length_error`</ph>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>basic_string::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a string.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`reverse_iterator`</ph> can be used to modify the value of a character and is used to iterate through a string in reverse.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#basic_string__rbegin)</ept> for an example of how to declare and use <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>basic_string::rfind</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Searches a string in a backward direction for the first occurrence of a substring that matches a specified sequence of characters.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The character value for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Index of the position at which the search is to begin.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The number of characters, counting forward from the first character, in the C-string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The string for which the member function is to search.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The index of the last occurrence, when searched backwards, of the first character of the substring when successful; otherwise <ph id="ph1">`npos`</ph>.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>basic_string::shrink_to_fit</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Discards the excess capacity of the string.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>This member function eliminates any unneeded storage in the container.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>basic_string::size</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Returns the current number of elements in a string.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>The length of the string.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>basic_string::size_type</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>An unsigned integer type that can represent the number of elements and indices in a string.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>allocator_type::size_type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <bpt id="p2">**</bpt>size_t<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>basic_string::substr</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Copies a substring of at most some number of characters from a string beginning from a specified position.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>An index locating the element at the position from which the copy of the string is made, with a default value of 0.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The number of characters that are to be copied if they are present.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>A substring object that is a copy of elements of the string operand beginning at the position specified by the first argument.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>basic_string::swap</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Exchange the contents of two strings.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>The source string whose elements are to be exchanged with those in the destination string.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>If the strings being swapped have the same allocator object, the <ph id="ph1">`swap`</ph> member function:</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Occurs in constant time.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Throws no exceptions.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Invalidates no references, pointers, or iterators that designate elements in the two strings.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Otherwise, it performs a number of element assignments and constructor calls proportional to the number of elements in the two controlled sequences.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>basic_string::traits_type</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>A type for the character traits of the elements stored in a string.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the second template parameter <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>For type <bpt id="p1">**</bpt>string<ept id="p1">**</ept>, it is equivalent to <bpt id="p2">**</bpt>char_traits<ph id="ph1">\&lt;</ph>char&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>copy<ept id="p1">](../standard-library/char-traits-struct.md#char_traits__copy)</ept> for an example of how to declare and use <ph id="ph1">`traits_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>basic_string::value_type</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>A type that represents the type of characters stored in a string.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>traits_type::char_type<ept id="p1">**</ept> and is equivalent to <ph id="ph1">`char`</ph> for objects of type <bpt id="p2">**</bpt>string<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>string&gt;</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>