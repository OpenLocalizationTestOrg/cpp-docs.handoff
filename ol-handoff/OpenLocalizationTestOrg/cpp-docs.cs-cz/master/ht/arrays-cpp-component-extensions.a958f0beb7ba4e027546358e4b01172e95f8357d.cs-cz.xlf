<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e5a8d1bc3ad48d5ac034aba31d4c8830d276135</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\arrays-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b5c2439a1c2f590cc56c3062c729e60e6136548</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ffbd347e12b6adee29882742e70c47698669178</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Arrays (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Arrays (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Platform::Array&lt;T&gt;`</ph> type in <ph id="ph2">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph>, or the <ph id="ph3">`array`</ph> keyword in <ph id="ph4">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph>, declares an array of a specified type and initial value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Platforms</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The array must be declared by using the handle-to-object (^) modifier after the closing angle bracket (&gt;) in the declaration.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The number of elements of the array is not part of the type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One array variable can refer to arrays of different sizes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike standard C++, subscripting is not a synonym for pointer arithmetic and is not commutative.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about arrays, see:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to: Use Arrays in C++/CLI</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Variable Argument Lists (...) (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Arrays are members of the <ph id="ph1">`Platform`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Arrays can be only one-dimensional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The first example of the syntax uses the <ph id="ph1">`ref new`</ph> aggregate keyword to allocate an array.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The second example declares a local array.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiers<ept id="p1">*</ept> [optional]</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One or more of these storage class specifiers: <bpt id="p1">[</bpt>mutable<ept id="p1">](../cpp/mutable-data-members-cpp.md)</ept>, <bpt id="p2">[</bpt>volatile<ept id="p2">](../cpp/volatile-cpp.md)</ept>, <bpt id="p3">[</bpt>const<ept id="p3">](../cpp/const-cpp.md)</ept>, <bpt id="p4">[</bpt>extern<ept id="p4">](../cpp/using-extern-to-specify-linkage.md)</ept>, <bpt id="p5">[</bpt>static<ept id="p5">](../cpp/static-members-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type of the array variable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Valid types are <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> classes and fundamental types, ref classes and structs, value classes and structs, and native pointers (<ph id="ph2">`type``*`</ph>).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>[optional]</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Must be 1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the array variable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type of the values that initialize the array.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Typically, <ph id="ph1">`array-type`</ph> and <ph id="ph2">`initialization-type`</ph> are the same type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, the types can be different if there is a conversion from <ph id="ph1">`initialization-type`</ph> to <ph id="ph2">`array-type`</ph>â€”for example, if <ph id="ph3">`initialization-type`</ph> is derived from <ph id="ph4">`array-type`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>[optional]</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A comma-delimited list of values in curly brackets that initialize the elements of the array.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`rank-size-list`</ph> were <ph id="ph2">`(3)`</ph>, which declares a one-dimensional array of 3 elements, <ph id="ph3">`initialization list`</ph> could be <ph id="ph4">`{1,2,3}`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can detect at compile time whether a type is a reference-counted array with <ph id="ph1">`__is_ref_array(``type``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiler Support for Type Traits<ept id="p1">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example creates a one-dimensional array that has 100 elements.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first example of the syntax uses the <ph id="ph1">`gcnew`</ph> keyword to allocate an array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The second example declares a local array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiers<ept id="p1">*</ept> [optional]</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>One or more of these storage class specifiers: <bpt id="p1">[</bpt>mutable<ept id="p1">](../cpp/mutable-data-members-cpp.md)</ept>, <bpt id="p2">[</bpt>volatile<ept id="p2">](../cpp/volatile-cpp.md)</ept>, <bpt id="p3">[</bpt>const<ept id="p3">](../cpp/const-cpp.md)</ept>, <bpt id="p4">[</bpt>extern<ept id="p4">](../cpp/using-extern-to-specify-linkage.md)</ept>, <bpt id="p5">[</bpt>static<ept id="p5">](../cpp/static-members-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type of the array variable.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Valid types are <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> classes and fundamental types, ref classes and structs, value classes and structs, native pointers (<ph id="ph2">`type``*`</ph>), and native POD (plain old data) types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[optional]</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The default is 1; the maximum is 32.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each dimension of the array is itself an array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The name of the array variable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type of the values that initialize the array.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Typically, <ph id="ph1">`array-type`</ph> and <ph id="ph2">`initialization-type`</ph> are the same type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, the types can be different if there is a conversion from <ph id="ph1">`initialization-type`</ph> to <ph id="ph2">`array-type`</ph>â€”for example, if <ph id="ph3">`initialization-type`</ph> is derived from <ph id="ph4">`array-type`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A comma-delimited list of the size of each dimension in the array.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Alternatively, if the <ph id="ph1">`initialization-list`</ph> parameter is specified, the compiler can deduce the size of each dimension and <ph id="ph2">`rank-size-list`</ph> can be omitted.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>[optional]</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A comma-delimited list of values in curly brackets that initialize the elements of the array.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Or a comma-delimited list of nested <bpt id="p1">*</bpt>initialization-list<ept id="p1">*</ept> items that initialize the elements in a multi-dimensional array.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`rank-size-list`</ph> were <ph id="ph2">`(3)`</ph>, which declares a one-dimensional array of 3 elements, <ph id="ph3">`initialization list`</ph> could be <ph id="ph4">`{1,2,3}`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`rank-size-list`</ph> were <ph id="ph2">`(3,2,4)`</ph>, which declares a three-dimensional array of 3 elements in the first dimension, 2 elements in the second, and 4 elements in the third, <ph id="ph3">`initialization-list`</ph> could be <ph id="ph4">`{{1,2,3},{0,0},{-5,10,-21,99}}`</ph>.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>is in the <bpt id="p1">[</bpt>Platform, default, and cli Namespaces<ept id="p1">](../windows/platform-default-and-cli-namespaces-cpp-component-extensions.md)</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Like standard C++, the indices of an array are zero-based, and an array is subscripted by using square brackets ([]).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Unlike standard C++, the indices of a multi-dimensional array are specified in a list of indices for each dimension instead of a set of square-bracket ([]) operators for each dimension.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept>[<bpt id="p2">*</bpt>index1<ept id="p2">*</ept>, <bpt id="p3">*</bpt>index2<ept id="p3">*</ept>] instead of <bpt id="p4">*</bpt>identifier<ept id="p4">*</ept>[<bpt id="p5">*</bpt>index1<ept id="p5">*</ept>][ <bpt id="p6">*</bpt>index2<ept id="p6">*</ept>].</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>All managed arrays inherit from <ph id="ph1">`System::Array`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Any method or property of <ph id="ph1">`System::Array`</ph> can be applied directly to the array variable.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When you allocate an array whose element type is pointer-to a managed class, the elements are 0-initialized.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you allocate an array whose element type is a value type <ph id="ph1">`V`</ph>, the default constructor for <ph id="ph2">`V`</ph> is applied to each array element.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Framework Equivalents to C++ Native Types (C++/CLI)<ept id="p1">](../dotnet/dotnet-framework-equivalents-to-cpp-native-types-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>At compile time, you can detect whether a type is a common language runtime (CLR) array with<ph id="ph1">`__is_ref_array(``type``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiler Support for Type Traits<ept id="p1">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example creates a one-dimensional array that has 100 elements, and a three-dimensional array that has 3 elements in the first dimension, 5 elements in the second, and 6 elements in the third.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>