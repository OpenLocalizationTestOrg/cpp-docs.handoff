<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae615c66e3508ed22d9497f819316daeb711fdad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\aggregation-and-class-factory-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe363c380a550c05a4e523f51daeb771b231073d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13c2ce956b1e56bf716a6e7e716132bd8c210a33</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Aggregation and Class Factory Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Aggregation and Class Factory Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These macros provide ways of controlling aggregation and of declaring class factories.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>DECLARE_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Declares that your object can be aggregated (the default).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Declares the class factory to be <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept>, the ATL default class factory.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_EX</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declares your class factory object to be the class factory.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY2</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactory2<ept id="p1">](../../atl/reference/ccomclassfactory2-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_AUTO_THREAD</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactoryAutoThread<ept id="p1">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_SINGLETON</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactorySingleton<ept id="p1">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>DECLARE_GET_CONTROLLING_UNKNOWN</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Declares a virtual <ph id="ph1">`GetControllingUnknown`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>DECLARE_NOT_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Declares that your object cannot be aggregated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DECLARE_ONLY_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Declares that your object must be aggregated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>DECLARE_POLY_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Checks the value of the outer unknown and declares your object aggregatable or not aggregatable, as appropriate.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DECLARE_PROTECT_FINAL_CONSTRUCT</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Protects the outer object from deletion during construction of an inner object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>DECLARE_VIEW_STATUS</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">**</bpt>VIEWSTATUS<ept id="p1">**</ept> flags to the container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>DECLARE_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies that your object can be aggregated.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>[in] The name of the class you are defining as aggregatable.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> contains this macro to specify the default aggregation model.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To override this default, specify either the <bpt id="p1">[</bpt>DECLARE_NOT_AGGREGATABLE<ept id="p1">](#declare_not_aggregatable)</ept> or <bpt id="p2">[</bpt>DECLARE_ONLY_AGGREGATABLE<ept id="p2">](#declare_only_aggregatable)</ept> macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#121</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> uses this macro to declare the default class factory for your object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#55</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CComClassFactory Class</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This class implements the <bpt id="p1">[</bpt>IClassFactory<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>implements the <bpt id="p1">[</bpt>IClassFactory<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IClassFactory<ept id="p1">**</ept> must be implemented for every class that you register in the system registry and to which you assign a CLSID.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ATL objects normally acquire a class factory by deriving from <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This class includes the macro <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY<ept id="p1">](#declare_classfactory)</ept>, which declares <ph id="ph1">`CComClassFactory`</ph> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To override this default, specify one of the <ph id="ph1">`DECLARE_CLASSFACTORY`</ph><bpt id="p1">*</bpt>XXX<ept id="p1">*</ept> macros in your class definition.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY_EX<ept id="p1">](#declare_classfactory_ex)</ept> macro uses the specified class for the class factory:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#8</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The above class definition specifies that <bpt id="p1">**</bpt>CMyClassFactory<ept id="p1">**</ept> will be used as the object's default class factory.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMyClassFactory<ept id="p1">**</ept> must derive from <ph id="ph1">`CComClassFactory`</ph> and override <ph id="ph2">`CreateInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>ATL provides three other macros that declare a class factory:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_CLASSFACTORY2<ept id="p1">](#declare_classfactory2)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id="p2">[</bpt>CComClassFactory2<ept id="p2">](../../atl/reference/ccomclassfactory2-class.md)</ept>, which controls creation through a license.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_CLASSFACTORY_AUTO_THREAD<ept id="p1">](#declare_classfactory_auto_thread)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id="p2">[</bpt>CComClassFactoryAutoThread<ept id="p2">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept>, which creates objects in multiple apartments.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_CLASSFACTORY_SINGLETON<ept id="p1">](#declare_classfactory_singleton)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id="p2">[</bpt>CComClassFactorySingleton<ept id="p2">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept>, which constructs a single <bpt id="p3">[</bpt>CComObjectGlobal<ept id="p3">](../../atl/reference/ccomobjectglobal-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_EX</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declares <ph id="ph1">`cf`</ph> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>[in] The name of the class that implements your class factory object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cf`</ph> parameter must derive from <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept> and override the <ph id="ph2">`CreateInstance`</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id="p2">[</bpt>DECLARE_CLASSFACTORY<ept id="p2">](#declare_classfactory)</ept> macro, which specifies <ph id="ph1">`CComClassFactory`</ph> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, by including the <ph id="ph1">`DECLARE_CLASSFACTORY_EX`</ph> macro in your object's class definition, you override this default.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#8</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY2</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactory2<ept id="p1">](../../atl/reference/ccomclassfactory2-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>lic</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>[in] A class that implements <ph id="ph1">`VerifyLicenseKey`</ph>, <ph id="ph2">`GetLicenseKey`</ph>, and <ph id="ph3">`IsLicenseValid`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id="p2">[</bpt>DECLARE_CLASSFACTORY<ept id="p2">](#declare_classfactory)</ept> macro, which specifies <bpt id="p3">[</bpt>CComClassFactory<ept id="p3">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, by including the <ph id="ph1">`DECLARE_CLASSFACTORY2`</ph> macro in your object's class definition, you override this default.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#2</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CComClassFactory2 Class</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This class implements the <bpt id="p1">[</bpt>IClassFactory2<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>license</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A class that implements the following static functions:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>static BOOL VerifyLicenseKey( BSTR<ept id="p1">**</ept> <ph id="ph1">`bstr`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>static BOOL GetLicenseKey( DWORD<ept id="p1">**</ept> <ph id="ph1">`dwReserved`</ph> <bpt id="p2">**</bpt>, BSTR<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pBstr`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>static BOOL IsLicenseValid( );</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>implements the <bpt id="p1">[</bpt>IClassFactory2<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface, which is an extension of <bpt id="p2">[</bpt>IClassFactory<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IClassFactory2<ept id="p1">**</ept> controls object creation through a license.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A class factory executing on a licensed machine can provide a run-time license key.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This license key allows an application to instantiate objects when a full machine license does not exist.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ATL objects normally acquire a class factory by deriving from <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This class includes the macro <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY<ept id="p1">](#declare_classfactory)</ept>, which declares <bpt id="p2">[</bpt>CComClassFactory<ept id="p2">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`CComClassFactory2`</ph>, specify the <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY2<ept id="p1">](#declare_classfactory2)</ept> macro in your object's class definition.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#2</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMyLicense<ept id="p1">**</ept>, the template parameter to <ph id="ph1">`CComClassFactory2`</ph>, must implement the static functions <ph id="ph2">`VerifyLicenseKey`</ph>, <ph id="ph3">`GetLicenseKey`</ph>, and <ph id="ph4">`IsLicenseValid`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following is an example of a simple license class:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#3</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>derives from both <bpt id="p1">**</bpt>CComClassFactory2Base<ept id="p1">**</ept> and <bpt id="p2">*</bpt>license<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CComClassFactory2Base<ept id="p1">**</ept>, in turn, derives from <bpt id="p2">**</bpt>IClassFactory2<ept id="p2">**</ept> and <bpt id="p3">**</bpt>CComObjectRootEx<ph id="ph1">\&lt;</ph> CComGlobalsThreadModel &gt;<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_AUTO_THREAD</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactoryAutoThread<ept id="p1">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id="p2">[</bpt>DECLARE_CLASSFACTORY<ept id="p2">](#declare_classfactory)</ept> macro, which specifies <bpt id="p3">[</bpt>CComClassFactory<ept id="p3">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, by including the <ph id="ph1">`DECLARE_CLASSFACTORY_AUTO_THREAD`</ph> macro in your object's class definition, you override this default.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you create objects in multiple apartments (in an out-of-proc server), add <ph id="ph1">`DECLARE_CLASSFACTORY_AUTO_THREAD`</ph> to your class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#9</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CComClassFactoryAutoThread Class</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This class implements the <bpt id="p1">[</bpt>IClassFactory<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface, and allows objects to be created in multiple apartments.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>is similar to <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept>, but allows objects to be created in multiple apartments.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To take advantage of this support, derive your EXE module from <bpt id="p1">[</bpt>CComAutoThreadModule<ept id="p1">](../../atl/reference/ccomautothreadmodule-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>ATL objects normally acquire a class factory by deriving from <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This class includes the macro <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY<ept id="p1">](#declare_classfactory)</ept>, which declares <bpt id="p2">[</bpt>CComClassFactory<ept id="p2">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`CComClassFactoryAutoThread`</ph>, specify the <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY_AUTO_THREAD<ept id="p1">](#declare_classfactory_auto_thread)</ept> macro in your object's class definition.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#9</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>DECLARE_CLASSFACTORY_SINGLETON</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Declares <bpt id="p1">[</bpt>CComClassFactorySingleton<ept id="p1">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept> to be the class factory.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>[in] The name of your class object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id="p2">[</bpt>DECLARE_CLASSFACTORY<ept id="p2">](#declare_classfactory)</ept> macro, which specifies <bpt id="p3">[</bpt>CComClassFactory<ept id="p3">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, by including the <ph id="ph1">`DECLARE_CLASSFACTORY_SINGLETON`</ph> macro in your object's class definition, you override this default.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#10</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CComClassFactorySingleton Class</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This class derives from <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept> and uses <bpt id="p2">[</bpt>CComObjectGlobal<ept id="p2">](../../atl/reference/ccomobjectglobal-class.md)</ept> to construct a single object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Your class.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>derives from <bpt id="p1">[</bpt>CComClassFactory<ept id="p1">](../../atl/reference/ccomclassfactory-class.md)</ept> and uses <bpt id="p2">[</bpt>CComObjectGlobal<ept id="p2">](../../atl/reference/ccomobjectglobal-class.md)</ept> to construct a single object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Each call to the <ph id="ph1">`CreateInstance`</ph> method simply queries this object for an interface pointer.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>ATL objects normally acquire a class factory by deriving from <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This class includes the macro <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY<ept id="p1">](#declare_classfactory)</ept>, which declares <ph id="ph1">`CComClassFactory`</ph> as the default class factory.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`CComClassFactorySingleton`</ph>, specify the <bpt id="p1">[</bpt>DECLARE_CLASSFACTORY_SINGLETON<ept id="p1">](#declare_classfactory_singleton)</ept> macro in your object's class definition.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#10</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>DECLARE_GET_CONTROLLING_UNKNOWN</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Declares a virtual function <ph id="ph1">`GetControllingUnknown`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Add this macro to your object if you get the compiler error message that <ph id="ph1">`GetControllingUnknown`</ph> is undefined (for example, in <bpt id="p1">**</bpt>CComAggregateCreator<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>DECLARE_NOT_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Specifies that your object cannot be aggregated.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>[in] The name of the class object you are defining as not aggregatable.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>causes <ph id="ph1">`CreateInstance`</ph> to return an error ( <bpt id="p1">**</bpt>CLASS_E_NOAGGREGATION<ept id="p1">**</ept>) if an attempt is made to aggregate onto your object.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> contains the <bpt id="p2">[</bpt>DECLARE_AGGREGATABLE<ept id="p2">](#declare_aggregatable)</ept> macro, which specifies that your object can be aggregated.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To override this default behavior, include <ph id="ph1">`DECLARE_NOT_AGGREGATABLE`</ph> in your class definition.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#121</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>DECLARE_ONLY_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Specifies that your object must be aggregated.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>[in] The name of the class object you are defining as only aggregatable.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>causes an error ( <bpt id="p1">**</bpt>E_FAIL<ept id="p1">**</ept>) if an attempt is made to <bpt id="p2">**</bpt>CoCreate<ept id="p2">**</ept> your object as nonaggregated object.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept> contains the <bpt id="p2">[</bpt>DECLARE_AGGREGATABLE<ept id="p2">](#declare_aggregatable)</ept> macro, which specifies that your object can be aggregated.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To override this default behavior, include <ph id="ph1">`DECLARE_ONLY_AGGREGATABLE`</ph> in your class definition.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#125</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>DECLARE_POLY_AGGREGATABLE</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Specifies that an instance of <bpt id="p1">**</bpt>CComPolyObject <ph id="ph1">\&lt;</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>x<ept id="p2">*</ept> <bpt id="p3">**</bpt><ph id="ph2">&gt;</ph><ept id="p3">**</ept> is created when your object is created.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>[in] The name of the class object you are defining as aggregatable or not aggregatable.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>During creation, the value of the outer unknown is checked.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> is implemented for a nonaggregated object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If the outer unknown is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> is implemented for an aggregated object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The advantage of using <ph id="ph1">`DECLARE_POLY_AGGREGATABLE`</ph> is that you avoid having both <ph id="ph2">`CComAggObject`</ph> and <ph id="ph3">`CComObject`</ph> in your module to handle the aggregated and nonaggregated cases.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A single <ph id="ph1">`CComPolyObject`</ph> object handles both cases.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This means only one copy of the vtable and one copy of the functions exist in your module.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If your vtable is large, this can substantially decrease your module size.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>However, if your vtable is small, using <ph id="ph1">`CComPolyObject`</ph> can result in a slightly larger module size because it is not optimized for an aggregated or nonaggregated object, as are <ph id="ph2">`CComAggObject`</ph> and <ph id="ph3">`CComObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DECLARE_POLY_AGGREGATABLE`</ph> macro is automatically declared in your object if you use the ATL Control Wizard to create a full control.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>DECLARE_PROTECT_FINAL_CONSTRUCT</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Protects your object from being deleted if (during <bpt id="p1">[</bpt>FinalConstruct<ept id="p1">](ccomobjectrootex-class.md#ccomobjectrootex__finalconstruct)</ept>) the internal aggregated object increments the reference count then decrements the count to 0.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>DECLARE_VIEW_STATUS</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Place this macro in an ATL ActiveX control's control class to specify the <bpt id="p1">**</bpt>VIEWSTATUS<ept id="p1">**</ept> flags to the container.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>VIEWSTATUS<ept id="p1">**</ept> flags.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>VIEWSTATUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687201)</ept> for a list of flags.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#126</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>