<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1d5b96d836ce633d73b4641988373cc8fd743bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\event-maps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e012fbfdb7f4d98669df663dc45ab419e83e764</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4168bdb4e7163bcb0fb24a29834197c29cc1c907</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Event Maps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Event Maps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Whenever a control wishes to notify its container that some action (determined by the control developer) has happened (such as a keystroke, mouse click, or a change to the control's state) it calls an event-firing function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This function notifies the control container that some important action has occurred by firing the related event.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library offers a programming model optimized for firing events.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this model, "event maps" are used to designate which functions fire which events for a particular control.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Event maps contain one macro for each event.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, an event map that fires a stock Click event might look like this:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NVC_MFCAxCtl#16</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EVENT_STOCK_CLICK<ept id="p1">**</ept> macro indicates that the control will fire a stock Click event every time it detects a mouse click.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a more detailed listing of other stock events, see the article <bpt id="p1">[</bpt>ActiveX Controls: Events<ept id="p1">](../../mfc/mfc-activex-controls-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Macros are also available to indicate custom events.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although event-map macros are important, you generally do not insert them directly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is because the Properties window automatically creates event-map entries in your source files when you use it to associate event-firing functions with events.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any time you want to edit or add an event-map entry, you can use the Properties window.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To support event maps, MFC provides the following macros:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Event Map Declaration and Demarcation</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>DECLARE_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Declares that an event map will be used in a class to map events to event-firing functions (must be used in the class declaration).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>BEGIN_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Begins the definition of an event map (must be used in the class implementation).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>END_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Ends the definition of an event map (must be used in the class implementation).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Event Mapping Macros</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>EVENT_CUSTOM</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Indicates which event-firing function will fire the specified event.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>EVENT_CUSTOM_ID</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates which event-firing function will fire the specified event, with a designated dispatch ID.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Message Mapping Macros</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ON_OLEVERB</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Indicates a custom verb handled by the OLE control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>ON_STDOLEVERB</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Overrides a standard verb mapping of the OLE control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>DECLARE_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`COleControl`</ph>-derived class in your program can provide an event map to specify the events your control will fire.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`DECLARE_EVENT_MAP`</ph> macro at the end of your class declaration.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Then, in the .cpp file that defines the member functions for the class, use the <ph id="ph1">`BEGIN_EVENT_MAP`</ph> macro, macro entries for each of the control's events, and the <ph id="ph2">`END_EVENT_MAP`</ph> macro to declare the end of the event list.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information on event maps, see the article <bpt id="p1">[</bpt>ActiveX Controls: Events<ept id="p1">](../../mfc/mfc-activex-controls-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>BEGIN_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Begins the definition of your event map.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the name of the control class whose event map this is.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specifies the name of the base class of <ph id="ph1">`theClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the implementation (.cpp) file that defines the member functions for your class, start the event map with the <ph id="ph1">`BEGIN_EVENT_MAP`</ph> macro, then add macro entries for each of your events, and complete the event map with the <ph id="ph2">`END_EVENT_MAP`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information on event maps and the <ph id="ph1">`BEGIN_EVENT_MAP`</ph> macro, see the article <bpt id="p1">[</bpt>ActiveX Controls: Events<ept id="p1">](../../mfc/mfc-activex-controls-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>END_EVENT_MAP</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`END_EVENT_MAP`</ph> macro to end the definition of your event map.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>EVENT_CUSTOM</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Defines an event-map entry for a custom event.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The name of the event.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The name of the event firing function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A space-separated list of one or more constants specifying the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> parameter is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces (not commas) specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#13</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the <bpt id="p1">**</bpt>IFontDisp<ept id="p1">**</ept> interface of an OLE font object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants and their meanings are as follows:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameter type</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>VTS_I2</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>VTS_I4</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>VTS_R4</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>VTS_R8</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>VTS_COLOR</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>OLE_COLOR</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>VTS_CY</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CURRENCY</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>VTS_DATE</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>DATE</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>VTS_BSTR</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>const char</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>VTS_DISPATCH</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>VTS_FONT</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>IFontDispatch</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>VTS_HANDLE</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>VTS_SCODE</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>VTS_BOOL</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>BOOL</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>VTS_VARIANT</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>const VARIANT</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>VTS_PVARIANT</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>VARIANT</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>VTS_UNKNOWN</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>VTS_OPTEXCLUSIVE</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>OLE_OPTEXCLUSIVE</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>VTS_PICTURE</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>IPictureDisp</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>VTS_TRISTATE</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>OLE_TRISTATE</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>VTS_XPOS_PIXELS</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>OLE_XPOS_PIXELS</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>VTS_YPOS_PIXELS</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>OLE_YPOS_PIXELS</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>VTS_XSIZE_PIXELS</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>OLE_XSIZE_PIXELS</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>VTS_YSIZE_PIXELS</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>OLE_YSIZE_PIXELS</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>VTS_XPOS_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>OLE_XPOS_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>VTS_YPOS_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>OLE_YPOS_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>VTS_XSIZE_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>OLE_XSIZE_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>VTS_YSIZE_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>OLE_YSIZE_HIMETRIC</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Additional variant constants have been defined for all variant types, with the exception of <bpt id="p1">**</bpt>VTS_FONT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>VTS_PICTURE<ept id="p2">**</ept>, that provide a pointer to the variant data constant.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>These constants are named using the <bpt id="p1">**</bpt>VTS_P<ept id="p1">**</ept><ph id="ph1">`constantname`</ph> convention.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>VTS_PCOLOR<ept id="p1">**</ept> is a pointer to a <bpt id="p2">**</bpt>VTS_COLOR<ept id="p2">**</ept> constant.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>EVENT_CUSTOM_ID</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Defines an event firing function for a custom event belonging to the dispatch ID specified by <ph id="ph1">`dispid`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The name of the event.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The dispatch ID used by the control when firing the event.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The name of the event firing function.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A variable list of parameters passed to the control container when the event is fired.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces, not commas, specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#13</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the <bpt id="p1">**</bpt>IFontDisp<ept id="p1">**</ept> interface of an OLE font object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants, see <bpt id="p2">[</bpt>EVENT_CUSTOM<ept id="p2">](#event_custom)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>ON_OLEVERB</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This macro defines a message map entry that maps a custom verb to a specific member function of your control.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>idsVerbName</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The string resource ID of the verb's name.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The function called by the framework when the verb is invoked.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The resource editor can be used to create custom verb names that are added to your string table.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The function prototype for <ph id="ph1">`memberFxn`</ph> is:</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`lpMsg`</ph>, <ph id="ph2">`hWndParent`</ph>, and <ph id="ph3">`lpRect`</ph> parameters are taken from the corresponding parameters of the <bpt id="p1">**</bpt>IOleObject::DoVerb<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>ON_STDOLEVERB</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Use this macro to override the default behavior of a standard verb.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The standard verb index for the verb being overridden.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The function called by the framework when the verb is invoked.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The standard verb index is of the form <bpt id="p1">**</bpt>OLEIVERB_<ept id="p1">**</ept>, followed by an action.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`OLEIVERB_HIDE`</ph>, and <ph id="ph2">`OLEIVERB_UIACTIVATE`</ph> are some examples of standard verbs.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ON_OLEVERB<ept id="p1">](#on_oleverb)</ept> for a description of the function prototype to be used as the <ph id="ph1">`memberFxn`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>