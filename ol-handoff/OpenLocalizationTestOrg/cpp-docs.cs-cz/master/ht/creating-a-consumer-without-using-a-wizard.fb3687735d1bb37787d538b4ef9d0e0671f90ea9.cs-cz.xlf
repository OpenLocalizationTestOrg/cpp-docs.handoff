<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35bfed639313b9ef61f07ff71c8b7f614bb80f37</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\creating-a-consumer-without-using-a-wizard.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf9c6ede49b4c103d7b25afba7099cd28fc182df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a228d61bf3c41bb17442dbd11a56b9e5d51dc7d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a Consumer Without Using a Wizard | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a Consumer Without Using a Wizard</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example assumes that you are adding OLE DB consumer support to an existing ATL project.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you want to add OLE DB consumer support to an MFC application, you should run the MFC Application Wizard, which creates all the support necessary and invokes MFC routines necessary to execute the application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To add OLE DB consumer support without using the ATL OLE DB Consumer Wizard:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In your Stdafx.h file, append the following <ph id="ph1">`#include`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Programmatically, a consumer typically performs the following sequence of operations:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a user record class that binds columns to local variables.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`CMyTableNameAccessor`</ph> is the user record class (see <bpt id="p1">[</bpt>User Records<ept id="p1">](../../data/oledb/user-records.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This class contains the column map and parameter map.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declare a data member in the user record class for each field you specify in your column map; for each of these data members, also declare a status data member and a length data member.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Field Status Data Members in Wizard-Generated Accessors<ept id="p1">](../../data/oledb/field-status-data-members-in-wizard-generated-accessors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you write your own consumer, the data variables must come before the status and length variables.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instantiate a data source and a session.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Decide what type of accessor and rowset to use and then instantiate a rowset using <bpt id="p1">[</bpt>CCommand<ept id="p1">](../../data/oledb/ccommand-class.md)</ept> or <bpt id="p2">[</bpt>CTable<ept id="p2">](../../data/oledb/ctable-class.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>CoInitialize<ept id="p1">**</ept> to initialize COM.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is usually called in the main code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CDataSource::Open<ept id="p1">](../../data/oledb/cdatasource-open.md)</ept> or one of its variations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Open a connection to the data source, open the session, and open and initialize the rowset (and if a command, also execute it):</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optionally, set rowset properties using <ph id="ph1">`CDBPropSet::AddProperty`</ph> and pass them as a parameter to <ph id="ph2">`rs.Open`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For an example of how this is done, see GetRowsetProperties in <bpt id="p1">[</bpt>Consumer Wizard-Generated Methods<ept id="p1">](../../data/oledb/consumer-wizard-generated-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can now use the rowset to retrieve/manipulate the data.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When your application is done, close the connection, session, and rowset:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are using a command, you might want to call <ph id="ph1">`ReleaseCommand`</ph> after <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code example in <bpt id="p1">[</bpt>CCommand::Close<ept id="p1">](../../data/oledb/ccommand-close.md)</ept> shows how to call <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> and <ph id="ph1">`ReleaseCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>CoUnInitialize<ept id="p1">**</ept> to uninitialize COM.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is usually called in the main code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating an OLE DB Consumer</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>