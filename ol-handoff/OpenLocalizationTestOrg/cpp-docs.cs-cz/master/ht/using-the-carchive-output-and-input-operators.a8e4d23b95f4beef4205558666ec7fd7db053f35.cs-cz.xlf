<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a7f3d43a111d34153ecc36a68caedceedc043d3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\using-the-carchive-output-and-input-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7af6b684e12700ceb5a1576470ebb101417f31b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a3bd0ffa1be0cd7fa94d5bb1d09c6ca0fc61513</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the CArchive <ph id="ph1">&amp;lt;&amp;lt;</ph> and <ph id="ph2">&amp;gt;&amp;gt;</ph> Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the CArchive <ph id="ph1">&amp;lt;&amp;lt;</ph> and <ph id="ph2">&amp;gt;&amp;gt;</ph> Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>provides &lt;<ph id="ph1">\&lt;</ph> and &gt;&gt; operators for writing and reading simple data types as well as <ph id="ph2">`CObject`</ph>s to and from a file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To store an object in a file via an archive</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example shows how to store an object in a file via an archive:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#7</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To load an object from a value previously stored in a file</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how to load an object from a value previously stored in a file:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#8</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Usually, you store and load data to and from a file via an archive in the <ph id="ph1">`Serialize`</ph> functions of <ph id="ph2">`CObject`</ph>-derived classes, which you must have declared with the <bpt id="p1">**</bpt>DECLARE_SERIALIZE<ept id="p1">**</ept> macro.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CArchive`</ph> object is passed to your <ph id="ph2">`Serialize`</ph> function.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You call the <ph id="ph1">`IsLoading`</ph> function of the <ph id="ph2">`CArchive`</ph> object to determine whether the <ph id="ph3">`Serialize`</ph> function has been called to load data from the file or store data to the file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Serialize`</ph> function of a serializable <ph id="ph2">`CObject`</ph>-derived class typically has the following form:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#9</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The above code template is exactly the same as the one AppWizard creates for the <ph id="ph1">`Serialize`</ph> function of the document (a class derived from <bpt id="p1">**</bpt>CDocument)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This code template helps you write code that is easier to review, because the storing code and the loading code should always be parallel, as in the following example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#10</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The library defines <bpt id="p1">**</bpt><ph id="ph1">&lt;\&lt;</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt><ph id="ph2">&gt;&gt;</ph><ept id="p2">**</ept> operators for <ph id="ph3">`CArchive`</ph> as the first operand and the following data types and class types as the second operand:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>SIZE and CSize</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>WORD</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> and</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>BYTE</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Double</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>LONG</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>COleCurrency</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Storing and loading <ph id="ph1">`CObject`</ph>s via an archive requires extra consideration.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Storing and Loading CObjects via an Archive<ept id="p1">](../mfc/storing-and-loading-cobjects-via-an-archive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CArchive &lt;<ph id="ph1">\&lt;</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt><ph id="ph2">&gt;&gt;</ph><ept id="p2">**</ept> operators always return a reference to the <ph id="ph3">`CArchive`</ph> object, which is the first operand.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This enables you to chain the operators, as illustrated below:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#11</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Serialization: Serializing an Object</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>