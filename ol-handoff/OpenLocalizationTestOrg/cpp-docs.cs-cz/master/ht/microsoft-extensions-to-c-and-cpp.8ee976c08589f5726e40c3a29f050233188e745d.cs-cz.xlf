<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36379d35e17ba38731b6de770f20511e5f46ccc3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\microsoft-extensions-to-c-and-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d26b5814aba62964a16ff083b206c45e6db81e33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bdbc7fe1a018ff48a7869878ae6e16e6be28c9b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Microsoft Extensions to C and C++ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Microsoft Extensions to C and C++</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C++ extends the ANSI C and ANSI C++ standards as follows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Several keywords are added.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the list in <bpt id="p1">[</bpt>Keywords<ept id="p1">](../../cpp/keywords-cpp.md)</ept>, the keywords that have two leading underscores are Visual C++ extensions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Out of Class Definition of static const Integral (or enum) Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Under the standard (<bpt id="p1">**</bpt>/Za<ept id="p1">**</ept>), you must make an out-of-class definition for data members, as shown here:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>/Ze<ept id="p1">**</ept>, the out-of-class definition is optional for static, const integral, and const enum data members.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Only integrals and enums that are static and const can have initializers in a class; the initializing expression must be a const expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To avoid errors when an out-of-class definition is provided in a header file and the header file is included in multiple source files, use <bpt id="p1">[</bpt>selectany<ept id="p1">](../../cpp/selectany.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Casts</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Both the C++ compiler and C compiler support these kinds of non-ANSI casts:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Non-ANSI casts to produce l-values.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This extension is available in the C language only.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use the following ANSI C standard form in C++ code to modify a pointer as if it is a pointer to a different type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The preceding example could be rewritten as follows to conform to the ANSI C standard.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Non-ANSI casts of a function pointer to a data pointer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To perform the same cast and also maintain ANSI compatibility, you can cast the function pointer to a <ph id="ph1">`uintptr_t`</ph> before you cast it to a data pointer:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Variable-Length Argument Lists</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Both the C++ compiler and C compiler support a function declarator that specifies a variable number of arguments, followed by a function definition that provides a type instead:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The C compiler supports single-line comments, which are introduced by using two forward slash (//) characters:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The C compiler supports the following scope-related features.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Redefinitions of extern items as static:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use of benign typedef redefinitions within the same scope:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Function declarators have file scope:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use of block-scope variables that are initialized by using nonconstant expressions:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data Declarations and Definitions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The C compiler supports the following data declaration and definition features.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Mixed character and string constants in an initializer:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Bit fields that have base types other than <bpt id="p1">**</bpt>unsigned int<ept id="p1">**</ept> or <bpt id="p2">**</bpt>signed int<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Declarators that don't have a type:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unsized arrays as the last field in structures and unions:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unnamed (anonymous) structures:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unnamed (anonymous) unions:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unnamed members:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Intrinsic Floating-Point Functions</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Both the C++ compiler and C compiler support inline generation <bpt id="p1">**</bpt>x86 Specific &gt;<ept id="p1">**</ept> of the <ph id="ph1">`atan`</ph>, <ph id="ph2">`atan2`</ph>, <ph id="ph3">`cos`</ph>, <ph id="ph4">`exp`</ph>, <ph id="ph5">`log`</ph>, <ph id="ph6">`log10`</ph>, <ph id="ph7">`sin`</ph>, <ph id="ph8">`sqrt`</ph>, and <ph id="ph9">`tan`</ph> functions <bpt id="p2">**</bpt>END x86 Specific<ept id="p2">**</ept> when <bpt id="p3">**</bpt>/Oi<ept id="p3">**</ept> is specified.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For the C compiler, ANSI conformance is lost when these intrinsics are used, because they do not set the <ph id="ph1">`errno`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Passing a Non-Const Pointer Parameter to a Function that Expects a Reference to a Const Pointer Parameter</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is an extension to C++.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This code will compile with <bpt id="p1">**</bpt>/Ze<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ISO646.H Not Enabled</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>/Ze<ept id="p1">**</ept>, you have to include iso646.h if you want to use text forms of the following operators:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>&amp;&amp; (and)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&amp;= (and_eq)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&amp; (bitand)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>&amp;#124; (bitor)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>~ (compl)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>!</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(not)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>!= (not_eq)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&amp;#124;&amp;#124; (or)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&amp;#124;= (or_eq)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>^ (xor)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>^= (xor_eq)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Address of String Literal Has Type const char [], not const char (*) []</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example will output char const (<ph id="ph1">\*</ph>)[4] under <bpt id="p1">**</bpt>/Za<ept id="p1">**</ept>, but char const [4] under <bpt id="p2">**</bpt>/Ze<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>/Za, /Ze (Disable Language Extensions)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>