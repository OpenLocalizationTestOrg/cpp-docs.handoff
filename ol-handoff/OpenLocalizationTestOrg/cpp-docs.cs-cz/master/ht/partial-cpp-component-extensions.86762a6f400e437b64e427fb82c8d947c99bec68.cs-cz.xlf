<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70bab82f898fa2efa59dc4d4b8e180fca4f25c3d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\partial-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9e5490b415423c9f9102df71510f69f3ba305d8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7397f42716e53454e1aba4ae32cb1c150dda8653</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>partial  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>partial  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`partial`</ph> keyword enables different parts of the same ref class to be authored independently and in different files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(This language feature applies only to the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a ref class that has two partial definitions, the <ph id="ph1">`partial`</ph> keyword is applied to the first occurrence of the definition, and this is typically done by auto-generated code, so that a human coder doesn’t use the keyword very often.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For all subsequent partial definitions of the class, omit the <ph id="ph1">`partial`</ph> modifier from the <bpt id="p1">*</bpt>class-key<ept id="p1">*</ept> keyword and class identifier.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When the compiler encounters a previously defined ref class and class identifier but no <ph id="ph1">`partial`</ph> keyword, it internally combines all of the parts of the ref class definition into one definition.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>class-key</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A keyword that declares a class or struct that is supported by the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Either <ph id="ph1">`ref class`</ph>, <ph id="ph2">`value class`</ph>, <ph id="ph3">`ref struct`</ph>, or <ph id="ph4">`value struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The name of the defined type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A partial class supports scenarios where you modify one part of a class definition in one file, and automatic code-generating software—for example, the XAML designer—modifies code in the same class in another file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By using a partial class, you can prevent the automatic code generator from overwriting your code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In a Visual Studio project, the <ph id="ph1">`partial`</ph> modifier is applied automatically to the generated file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Contents: With two exceptions, a partial class definition can contain anything that the full class definition could contain if the <ph id="ph1">`partial`</ph> keyword was omitted.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, you can't specify class accessibility (for example, <ph id="ph1">`public partial class X {…};`</ph>),  or a <ph id="ph2">`declspec`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Access specifiers used in a partial class definition for <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> do not affect the default accessibility in a subsequent partial or full class definition for <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Inline definitions of static data members are allowed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declaration: A partial definition of a class <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> only introduces the name <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept>, but <bpt id="p3">*</bpt>identifier<ept id="p3">*</ept> cannot be used in a way that requires a class definition.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> can't be used to know the size of <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept>, or to use a base or member of <bpt id="p3">*</bpt>identifier<ept id="p3">*</ept> until after the compiler encounters the full definition of <bpt id="p4">*</bpt>identifier<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Number and ordering: There can be zero or more partial class definitions for <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Every partial class definition of <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> must lexically precede the one full definition of <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept> (if there is a full definition; otherwise, the class can't be used except as if forward-declared) but need not precede forward declarations of <bpt id="p3">*</bpt>identifier<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All class-keys must match.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Full definition: At the point of the full definition of the class <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept>, the behavior is the same as if the definition of <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept> had declared all base classes, members, etc. in the order in which they were encountered and defined in the partial classes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Templates: A partial class cannot be a template.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Generics: A partial class can be a generic if the full definition could be generic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>But every partial and full class must have exactly the same generic parameters, including formal parameter names.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`partial`</ph> keyword, see <bpt id="p1">[</bpt>Partial Classes (C++/CX)<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=249023)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(This language feature does not apply to the Common Language Runtime.)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Partial Classes (C++/CX)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>