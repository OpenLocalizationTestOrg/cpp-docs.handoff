<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ada80577ce14841448b45e6a76b9905dc9450dff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\accessing-all-members-of-a-collection.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af89f9038a9eea62fe00c6a89e5db42dedfd7253</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07fa77289f68c1adb059efe6f21b599fff12095a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing All Members of a Collection | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing All Members of a Collection</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The MFC array collection classes — both template-based and not — use indexes to access their elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The MFC list and map collection classes — both template-based and not — use an indicator of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> to describe a given position within the collection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To access one or more members of these collections, you first initialize the position indicator and then repeatedly pass that position to the collection and ask it to return the next element.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The collection is not responsible for maintaining state information about the progress of the iteration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That information is kept in the position indicator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>But, given a particular position, the collection is responsible for returning the next element.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following procedures show how to iterate over the three main types of collections provided with MFC:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Iterating an array</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Iterating a list</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Iterating a map</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To iterate an array</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use sequential index numbers with the <ph id="ph1">`GetAt`</ph> member function:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#12</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses a typed pointer array that contains pointers to <ph id="ph1">`CPerson`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The array is derived from class <ph id="ph1">`CObArray`</ph>, one of the nontemplate predefined classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>returns a pointer to a <ph id="ph1">`CPerson`</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For typed pointer collection classes — arrays or lists — the first parameter specifies the base class; the second parameter specifies the type to store.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CTypedPtrArray`</ph> class also overloads the <bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept> operator so that you can use the customary array-subscript syntax to access elements of an array.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An alternative to the statement in the body of the <ph id="ph1">`for`</ph> loop above is</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#13</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This operator exists in both <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and non-<bpt id="p2">**</bpt>const<ept id="p2">**</ept> versions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> version, which is invoked for <bpt id="p2">**</bpt>const<ept id="p2">**</ept> arrays, can appear only on the right side of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To iterate a list</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the member functions <ph id="ph1">`GetHeadPosition`</ph> and <ph id="ph2">`GetNext`</ph> to work your way through the list:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#14</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses a typed pointer list to contain pointers to <ph id="ph1">`CPerson`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The list declaration resembles the one for the array in the procedure <bpt id="p1">[</bpt>To iterate an array<ept id="p1">](#_core_to_iterate_an_array)</ept> but is derived from class <ph id="ph1">`CObList`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>returns a pointer to a <ph id="ph1">`CPerson`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To iterate a map</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`GetStartPosition`</ph> to get to the beginning of the map and <ph id="ph2">`GetNextAssoc`</ph> to repeatedly get the next key and value from the map, as shown by the following example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#15</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example uses a simple map template (rather than a typed pointer collection) that uses <ph id="ph1">`CString`</ph> keys and stores pointers to <ph id="ph2">`CPerson`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you use access functions such as <ph id="ph1">`GetNextAssoc`</ph>, the class provides pointers to <ph id="ph2">`CPerson`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you use one of the nontemplate map collections instead, you must cast the returned <ph id="ph1">`CObject`</ph> pointer to a pointer to a <ph id="ph2">`CPerson`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For nontemplate maps, the compiler requires a reference to a <ph id="ph1">`CObject`</ph> pointer in the last parameter to <ph id="ph2">`GetNextAssoc`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On input, you must cast your pointers to that type, as shown in the next example.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The template solution is simpler and helps provide better type safety.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The nontemplate code is more complicated, as you can see here:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#16</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Deleting All Objects in a CObject Collection<ept id="p1">](../mfc/deleting-all-objects-in-a-cobject-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Collections</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>