<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73f4fbabb21948ebff7e5a55efefcfa9de5e8362</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\vsscanf-s-vswscanf-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c4c45aeb21822d68f8fb0e9c24bce68ddc8160c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38ebd41527bd34f7c2e21065329297cc0c949bf4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>vsscanf_s, vswscanf_s | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>vsscanf_s, vswscanf_s</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reads formatted data from a string.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These versions of <bpt id="p1">[</bpt>vsscanf, vswscanf<ept id="p1">](../../c-runtime-library/reference/vsscanf-vswscanf.md)</ept> have security enhancements, as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Stored data</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Format-control string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id="p1">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variable argument list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A return value of 0 indicates that no fields were assigned.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`buffer`</ph> or <ph id="ph2">`format`</ph> is a <ph id="ph3">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions return -1 and set <ph id="ph1">`errno`</ph> to</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For information about these and other error codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vsscanf_s`</ph> function reads data from <ph id="ph2">`buffer`</ph> into the locations that are given by each argument in the <ph id="ph3">`arglist`</ph> argument list.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The arguments in the argument list specify pointers to variables that have a type that corresponds to a type specifier in <ph id="ph1">`format`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Unlike the less secure version <ph id="ph1">`vsscanf`</ph>, a buffer size parameter is required when you use the type field characters <ph id="ph2">`c`</ph>, <ph id="ph3">`C`</ph>, <ph id="ph4">`s`</ph>, <ph id="ph5">`S`</ph>, or string-control sets that are enclosed in <ph id="ph6">`[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The buffer size in characters must be supplied as an additional parameter immediately after each buffer parameter that requires it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The buffer size includes the terminating null.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A width specification field may be used to ensure that the token that's read in will fit into the buffer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If no width specification field is used, and the token read in is too big to fit in the buffer, nothing is written to that buffer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id="p1">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept> and <bpt id="p2">[</bpt>scanf Type Field Characters<ept id="p2">](../../c-runtime-library/scanf-type-field-characters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The size parameter is of type <ph id="ph1">`unsigned`</ph>, not <ph id="ph2">`size_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`format`</ph> argument controls the interpretation of the input fields and has the same form and function as the <ph id="ph2">`format`</ph> argument for the <ph id="ph3">`scanf_s`</ph> function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If copying occurs between strings that overlap, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`vsscanf_s`</ph>; the arguments to <ph id="ph2">`vswscanf_s`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>does not handle multibyte hexadecimal characters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>does not handle Unicode full-width hexadecimal or "compatibility zone" characters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`vswscanf_s`</ph> and <ph id="ph2">`vsscanf_s`</ph> behave identically.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`Parse`</ph> methods, such as <bpt id="p1">[</bpt>System::Double::Parse<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>scanf, _scanf_l, wscanf, _wscanf_l</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>sscanf, _sscanf_l, swscanf, _swscanf_l</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id="ph1">\_</ph>_swprintf_l</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>vsscanf, vswscanf</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>