<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d270a9790f33fe5258108663f9618f0da1ed5b37</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\input-stream-member-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fbf7cfc7864461102eaef668afdf6a985f9036c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5706219606bbfb952c114a1b7a15a927a87715b8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Input Stream Member Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Input Stream Member Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Input stream member functions are used for disk input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The member functions include:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The open Function for Input Streams</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The get Function</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The getline Function</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The read Function</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The seekg and tellg Functions</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The close Function for Input Streams</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The open Function for Input Streams</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you are using an input file stream (ifstream), you must associate that stream with a specific disk file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can do this in the constructor, or you can use the <bpt id="p1">**</bpt>open<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In either case, the arguments are the same.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You generally specify an <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept> flag when you open the file associated with an input stream (the default mode is <bpt id="p2">**</bpt>ios::in<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>open_mode<ept id="p1">**</ept> flags, see <bpt id="p2">[</bpt>The open Function<ept id="p2">](#vclrftheopenfunctionforinputstreamsanchor11)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The flags can be combined with the bitwise OR ( &amp;#124; ) operator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To read a file, first use the <bpt id="p1">**</bpt>fail<ept id="p1">**</ept> member function to determine whether it exists:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The get Function</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The unformatted <bpt id="p1">**</bpt>get<ept id="p1">**</ept> member function works like the <bpt id="p2">**</bpt><ph id="ph1">&gt;&gt;</ph><ept id="p2">**</ept> operator with two exceptions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>First, the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> function includes white-space characters, whereas the extractor excludes white space when the <bpt id="p2">**</bpt>skipws<ept id="p2">**</ept> flag is set (the default).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Second, the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> function is less likely to cause a tied output stream (<ph id="ph1">`cout`</ph>, for example) to be flushed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A variation of the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> function specifies a buffer address and the maximum number of characters to read.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is useful for limiting the number of characters sent to a specific variable, as this example shows:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Input</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The getline Function</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>getline<ept id="p1">**</ept> member function is similar to the <bpt id="p2">**</bpt>get<ept id="p2">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Both functions allow a third argument that specifies the terminating character for input.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default value is the newline character.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Both functions reserve one character for the required terminating character.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, <bpt id="p1">**</bpt>get<ept id="p1">**</ept> leaves the terminating character in the stream and <bpt id="p2">**</bpt>getline<ept id="p2">**</ept> removes the terminating character.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example specifies a terminating character for the input stream:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Input</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The read Function</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>read<ept id="p1">**</ept> member function reads bytes from a file to a specified area of memory.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The length argument determines the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you do not include that argument, reading stops when the physical end of file is reached or, in the case of a text-mode file, when an embedded <ph id="ph1">`EOF`</ph> character is read.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This example reads a binary record from a payroll file into a structure:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The program assumes that the data records are formatted exactly as specified by the structure with no terminating carriage-return or linefeed characters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The seekg and tellg Functions</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Input file streams keep an internal pointer to the position in the file where data is to be read next.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You set this pointer with the <ph id="ph1">`seekg`</ph> function, as shown here:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`seekg`</ph> to implement record-oriented data management systems, multiply the fixed-length record size by the record number to obtain the byte position relative to the end of the file, and then use the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> object to read the record.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tellg`</ph> member function returns the current file position for reading.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This value is of type <ph id="ph1">`streampos`</ph>, a <ph id="ph2">`typedef`</ph> defined in <ph id="ph3">\&lt;</ph>iostream&gt;.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example reads a file and displays messages showing the positions of spaces.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The close Function for Input Streams</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>close<ept id="p1">**</ept> member function closes the disk file associated with an input file stream and frees the operating system file handle.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ifstream<ept id="p1">](../standard-library/basic-ifstream-class.md)</ept> destructor closes the file for you, but you can use the <bpt id="p2">**</bpt>close<ept id="p2">**</ept> function if you need to open another file for the same stream object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Input Streams</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>