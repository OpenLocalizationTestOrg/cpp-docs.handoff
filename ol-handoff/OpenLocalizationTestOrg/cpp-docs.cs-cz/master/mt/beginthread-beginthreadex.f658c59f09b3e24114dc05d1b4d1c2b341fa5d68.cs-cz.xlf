<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">727cd0bb0804aa38b687226faac0e900a3ce3233</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\beginthread-beginthreadex.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca79b0b8d3235eff8969947cae98dc364c0c8982</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7caaf79fb347bd86ca5e9c9c8f2c752b85dca15d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_beginthread, _beginthreadex | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_beginthread, _beginthreadex</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates a thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Start address of a routine that begins execution of a new thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`_beginthread`</ph>, the calling convention is either <bpt id="p1">[</bpt>__cdecl<ept id="p1">](../../cpp/cdecl.md)</ept> (for native code) or <bpt id="p2">[</bpt>__clrcall<ept id="p2">](../../cpp/clrcall.md)</ept> (for managed code); for <ph id="ph2">`_beginthreadex`</ph>, it is either <bpt id="p3">[</bpt>__stdcall<ept id="p3">](../../cpp/stdcall.md)</ept> (for native code) or <bpt id="p4">[</bpt>__clrcall<ept id="p4">](../../cpp/clrcall.md)</ept> (for managed code).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Stack size for a new thread, or 0.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Argument list to be passed to a new thread, or NULL.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SECURITY_ATTRIBUTES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that determines whether the returned handle can be inherited by child processes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Security`</ph> is NULL, the handle cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Must be NULL for Windows 95 applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Flags that control the initial state of a new thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`initflag`</ph> to <ph id="ph2">`0`</ph> to run immediately, or to <ph id="ph3">`CREATE_SUSPENDED`</ph> to create the thread in a suspended state; use <bpt id="p1">[</bpt>ResumeThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms685086.aspx)</ept> to execute the thread.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`initflag`</ph> to <ph id="ph2">`STACK_SIZE_PARAM_IS_A_RESERVATION`</ph> flag to use <ph id="ph3">`stack_size`</ph> as the initial reserve size of the stack in bytes; if this flag is not specified, <ph id="ph4">`stack_size`</ph> specifies the commit size.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Points to a 32-bit variable that receives the thread identifier.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If it's NULL, it's not used.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If successful, each of these functions returns a handle to the newly created thread; however, if the newly created thread exits too quickly, <ph id="ph1">`_beginthread`</ph> might not return a valid handle.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(See the discussion in the Remarks section.) On an error, <ph id="ph1">`_beginthread`</ph> returns -1L, and <ph id="ph2">`errno`</ph> is set to <ph id="ph3">`EAGAIN`</ph> if there are too many threads, to <ph id="ph4">`EINVAL`</ph> if the argument is invalid or the stack size is incorrect, or to <ph id="ph5">`EACCES`</ph> if there are insufficient resources (such as memory).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>On an error, <ph id="ph1">`_beginthreadex`</ph> returns 0, and <ph id="ph2">`errno`</ph> and <ph id="ph3">`_doserrno`</ph> are set.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`startaddress`</ph> is NULL, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and return -1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about these and other return codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`uintptr_t`</ph>, see <bpt id="p1">[</bpt>Standard Types<ept id="p1">](../../c-runtime-library/standard-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_beginthread`</ph> function creates a thread that begins execution of a routine at <ph id="ph2">`start_address`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The routine at <ph id="ph1">`start_address`</ph> must use the <ph id="ph2">`__cdecl`</ph> (for native code) or <ph id="ph3">`__clrcall`</ph> (for managed code) calling convention and should have no return value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the thread returns from that routine, it is terminated automatically.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about threads, see <bpt id="p1">[</bpt>Multithreading Support for Older Code (Visual C++)<ept id="p1">](../../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_beginthreadex`</ph> resembles the Win32 <bpt id="p1">[</bpt>CreateThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682453.aspx)</ept> API more closely than <ph id="ph2">`_beginthread`</ph> does.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_beginthreadex`</ph> differs from <ph id="ph2">`_beginthread`</ph> in the following ways:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_beginthreadex`</ph> has three additional parameters: <ph id="ph2">`initflag`</ph>, <ph id="ph3">`security`</ph>, and <ph id="ph4">`threadaddr`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The new thread can be created in a suspended state, with a specified security, and can be accessed by using <ph id="ph1">`thrdaddr`</ph>, which is the thread identifier.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The routine at <ph id="ph1">`start_address`</ph> that's passed to <ph id="ph2">`_beginthreadex`</ph> must use the <ph id="ph3">`__stdcall`</ph> (for native code) or <ph id="ph4">`__clrcall`</ph> (for managed code) calling convention and must return a thread exit code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_beginthreadex`</ph> returns 0 on failure, rather than -1L.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A thread that's created by using <ph id="ph1">`_beginthreadex`</ph> is terminated by a call to <bpt id="p1">[</bpt>_endthreadex<ept id="p1">](../../c-runtime-library/reference/endthread-endthreadex.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_beginthreadex`</ph> function gives you more control over how the thread is created than <ph id="ph2">`_beginthread`</ph> does.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_endthreadex`</ph> function is also more flexible.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, with <ph id="ph1">`_beginthreadex`</ph>, you can use security information, set the initial state of the thread (running or suspended), and get the thread identifier of the newly created thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can also use the thread handle that's returned by <ph id="ph1">`_beginthreadex`</ph> with the synchronization APIs, which you cannot do with <ph id="ph2">`_beginthread`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It's safer to use <ph id="ph1">`_beginthreadex`</ph> than <ph id="ph2">`_beginthread`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the thread that's generated by <ph id="ph1">`_beginthread`</ph> exits quickly, the handle that's returned to the caller of <ph id="ph2">`_beginthread`</ph> might be invalid or point to another thread.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, the handle that's returned by <ph id="ph1">`_beginthreadex`</ph> has to be closed by the caller of <ph id="ph2">`_beginthreadex`</ph>, so it is guaranteed to be a valid handle if <ph id="ph3">`_beginthreadex`</ph> did not return an error.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>_endthread<ept id="p1">](../../c-runtime-library/reference/endthread-endthreadex.md)</ept> or <ph id="ph1">`_endthreadex`</ph> explicitly to terminate a thread; however, <ph id="ph2">`_endthread`</ph> or <ph id="ph3">`_endthreadex`</ph> is called automatically when the thread returns from the routine that's passed as a parameter.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Terminating a thread with a call to <ph id="ph1">`_endthread`</ph> or <ph id="ph2">`_endthreadex`</ph> helps ensure correct recovery of resources that are allocated for the thread.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_endthread`</ph> automatically closes the thread handle, whereas <ph id="ph2">`_endthreadex`</ph> does not.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, when you use <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_endthread`</ph>, do not explicitly close the thread handle by calling the Win32 <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> API.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This behavior differs from the Win32 <bpt id="p1">[</bpt>ExitThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx)</ept> API.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For an executable file linked with Libcmt.lib, do not call the Win32 <ph id="ph1">`ExitThread`</ph> API so that you don't prevent the run-time system from reclaiming allocated resources.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_endthread`</ph> and <ph id="ph2">`_endthreadex`</ph> reclaim allocated thread resources and then call <ph id="ph3">`ExitThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The operating system handles the allocation of the stack when either <ph id="ph1">`_beginthread`</ph> or <ph id="ph2">`_beginthreadex`</ph> is called; you don't have to pass the address of the thread stack to either of these functions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`stack_size`</ph> argument can be 0, in which case the operating system uses the same value as the stack that's specified for the main thread.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`arglist`</ph> is a parameter to be passed to the newly created thread.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Typically, it is the address of a data item, such as a character string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`arglist`</ph> can be NULL if it is not needed, but <ph id="ph2">`_beginthread`</ph> and <ph id="ph3">`_beginthreadex`</ph> must be given some value to pass to the new thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All threads are terminated if any thread calls <ph id="ph1">`abort`</ph>, <ph id="ph2">`exit`</ph>, <ph id="ph3">`_exit`</ph>, or <ph id="ph4">`ExitProcess`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The locale of the new thread is inherited from its parent thread.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If per-thread locale is enabled by a call to <bpt id="p1">[</bpt>_configthreadlocale<ept id="p1">](../../c-runtime-library/reference/configthreadlocale.md)</ept> (either globally or for new threads only), the thread can change its locale independently from its parent by calling <ph id="ph1">`setlocale`</ph> or <ph id="ph2">`_wsetlocale`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For mixed and pure code, <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_beginthreadex`</ph> each have two overloads—one takes a native calling-convention function pointer, the other takes a <ph id="ph3">`__clrcall`</ph> function pointer.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first overload is not application domain-safe and never will be.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you are writing mixed or pure code you must ensure that the new thread enters the correct application domain before it accesses managed resources.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can do this, for example, by using <bpt id="p1">[</bpt>call_in_appdomain Function<ept id="p1">](../../dotnet/call-in-appdomain-function.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The second overload is application domain-safe; the newly created thread will always end up in the application domain of the caller of <ph id="ph1">`_beginthread`</ph> or <ph id="ph2">`_beginthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>process.h&gt;</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>process.h&gt;</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Multithreaded versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`_beginthread`</ph> or <ph id="ph2">`_beginthreadex`</ph>, the application must link with one of the multithreaded C run-time libraries.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_endthread`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Press any key to end the sample application.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following sample code demonstrates how you can use the thread handle that's returned by <ph id="ph1">`_beginthreadex`</ph> with the synchronization API <bpt id="p1">[</bpt>WaitForSingleObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687032.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The main thread waits for the second thread to terminate before it continues.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When the second thread calls <ph id="ph1">`_endthreadex`</ph>, it causes its thread object to go to the signaled state.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This allows the primary thread to continue running.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This cannot be done with <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_endthread`</ph>, because <ph id="ph3">`_endthread`</ph> calls <ph id="ph4">`CloseHandle`</ph>, which destroys the thread object before it can be set to the signaled state.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Threading::Thread::Start<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.threading.thread.start.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process and Environment Control<ept id="p1">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_endthread, _endthreadex<ept id="p1">](../../c-runtime-library/reference/endthread-endthreadex.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>abort<ept id="p1">](../../c-runtime-library/reference/abort.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>exit, _Exit, _exit<ept id="p1">](../../c-runtime-library/reference/exit-exit-exit.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>GetExitCodeThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>