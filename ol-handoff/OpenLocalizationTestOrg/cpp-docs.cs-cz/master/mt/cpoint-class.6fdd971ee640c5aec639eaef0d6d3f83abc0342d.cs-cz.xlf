<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbad481fe6abf7c3423548db75f24b6cdbb6d1ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\reference\cpoint-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a103ff5c73640c49a00f2f87256d4838cf3fd72f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce9efaa20c8ff937baa7938713c2efd93e98fedb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CPoint Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CPoint Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Similar to the Windows <ph id="ph1">`POINT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::CPoint<ept id="p1">](#cpoint__cpoint)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::Offset<ept id="p1">](#cpoint__offset)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds values to the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> and <bpt id="p2">**</bpt>y<ept id="p2">**</ept> members of the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator -<ept id="p1">](#cpoint__operator_-)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns the difference of a <ph id="ph1">`CPoint`</ph> and a size, or the negation of a point, or the size difference between two points, or the offset by a negative size.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator !=<ept id="p1">](#cpoint__operator__neq)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Checks for inequality between two points.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator +<ept id="p1">](#cpoint__operator__add)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the sum of a <ph id="ph1">`CPoint`</ph> and a size or point, or a <ph id="ph2">`CRect`</ph> offset by a size.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator +=<ept id="p1">](#cpoint__operator__add_eq)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Offsets <ph id="ph1">`CPoint`</ph> by adding a size or point.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator -=<ept id="p1">](cpoint::operator%20-=.xml)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Offsets <ph id="ph1">`CPoint`</ph> by subtracting a size or point.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint::operator ==<ept id="p1">](#cpoint__operator__eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Checks for equality between two points.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It also includes member functions to manipulate <ph id="ph1">`CPoint`</ph> and <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structures.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CPoint`</ph> object can be used wherever a <ph id="ph2">`POINT`</ph> structure is used.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The operators of this class that interact with a "size" accept either <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> objects or <bpt id="p2">[</bpt>SIZE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structures, since the two are interchangeable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This class is derived from the <ph id="ph1">`tagPOINT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(The name <ph id="ph1">`tagPOINT`</ph> is a less commonly used name for the <ph id="ph2">`POINT`</ph> structure.) This means that the data members of the <ph id="ph3">`POINT`</ph> structure, <ph id="ph4">`x`</ph> and <ph id="ph5">`y`</ph>, are accessible data members of <ph id="ph6">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information on shared utility classes (like <ph id="ph1">`CPoint`</ph>), see <bpt id="p1">[</bpt>Shared Classes<ept id="p1">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atltypes.h</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__cpoint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::CPoint</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specifies the value of the <ph id="ph1">`x`</ph> member of <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies the value of the <ph id="ph1">`y`</ph> member of <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id="ph1">`CPoint`</ph> that specifies the values used to initialize <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> that specifies the values used to initialize <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`x`</ph> member to the low-order word of <ph id="ph2">`dwPoint`</ph> and the <ph id="ph3">`y`</ph> member to the high-order word of <ph id="ph4">`dwPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If no arguments are given, <ph id="ph1">`x`</ph> and <ph id="ph2">`y`</ph> members are set to 0.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__offset"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::Offset</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Adds values to the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> and <bpt id="p2">**</bpt>y<ept id="p2">**</ept> members of the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>xOffset<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies the amount to offset the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> member of the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>yOffset<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies the amount to offset the <bpt id="p1">**</bpt>y<ept id="p1">**</ept> member of the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the amount ( <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> or <ph id="ph1">`CPoint`</ph>) to offset the <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specifies the amount ( <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept>) to offset the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#28<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator__eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator ==</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Checks for equality between two points.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Nonzero if the points are equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#29<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator__neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator !=</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Checks for inequality between two points.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Nonzero if the points are not equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#30<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator__add_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator +=</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first overload adds a size to the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The second overload adds a point to the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In both cases, addition is done by adding the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>cx<ept id="p2">**</ept>) member of the right-hand operand to the <bpt id="p3">**</bpt>x<ept id="p3">**</ept> member of the <ph id="ph1">`CPoint`</ph> and adding the <bpt id="p4">**</bpt>y<ept id="p4">**</ept> (or <bpt id="p5">**</bpt>cy<ept id="p5">**</ept>) member of the right-hand operand to the <bpt id="p6">**</bpt>y<ept id="p6">**</ept> member of the <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, adding <ph id="ph1">`CPoint(5, -7)`</ph> to a variable which contains <ph id="ph2">`CPoint(30, 40)`</ph> changes the variable to <ph id="ph3">`CPoint(35, 33)`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#31<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator_-_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator -=</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The first overload subtracts a size from the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The second overload subtracts a point from the <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In both cases, subtraction is done by subtracting the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>cx<ept id="p2">**</ept>) member of the right-hand operand from the <bpt id="p3">**</bpt>x<ept id="p3">**</ept> member of the <ph id="ph1">`CPoint`</ph> and subtracting the <bpt id="p4">**</bpt>y<ept id="p4">**</ept> (or <bpt id="p5">**</bpt>cy<ept id="p5">**</ept>) member of the right-hand operand from the <bpt id="p6">**</bpt>y<ept id="p6">**</ept> member of the <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, subtracting <ph id="ph1">`CPoint(5, -7)`</ph> from a variable which contains <ph id="ph2">`CPoint(30, 40)`</ph> changes the variable to <ph id="ph3">`CPoint(25, 47)`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#32<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator__add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator +</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use this operator to offset <ph id="ph1">`CPoint`</ph> by a <ph id="ph2">`CPoint`</ph> or <ph id="ph3">`CSize`</ph> object, or to offset a <ph id="ph4">`CRect`</ph> by a <ph id="ph5">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Contains a pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CPoint`</ph> that is offset by a size, a <bpt id="p1">**</bpt>CPoint<ept id="p1">**</ept> that is offset by a point, or a <bpt id="p2">**</bpt>CRect<ept id="p2">**</ept> offset by a point.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, using one of the first two overloads to offset the point <ph id="ph1">`CPoint(25, -19)`</ph> by a point <ph id="ph2">`CPoint(15, 5)`</ph> or size <ph id="ph3">`CSize(15, 5)`</ph> returns the value <ph id="ph4">`CPoint(40, -14)`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Adding a rectangle to a point returns the rectangle after being offset by the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> and <bpt id="p2">**</bpt>y<ept id="p2">**</ept> values specified in the point.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For example, using the last overload to offset a rectangle <ph id="ph1">`CRect(125, 219, 325, 419)`</ph> by a point <ph id="ph2">`CPoint(25, -19)`</ph> returns <ph id="ph3">`CRect(150, 200, 350, 400)`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#33<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpoint__operator_-"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CPoint::operator -</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Use one of the first two overloads to subtract a <ph id="ph1">`CPoint`</ph> or <ph id="ph2">`CSize`</ph> object from <ph id="ph3">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> that is the difference between two points, a <ph id="ph2">`CPoint`</ph> that is offset by the negation of a size, a <ph id="ph3">`CRect`</ph> that is offset by the negation of a point, or a <ph id="ph4">`CPoint`</ph> that is the negation of a point.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The third overload offsets a <ph id="ph1">`CRect`</ph> by the negation of <ph id="ph2">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Finally, use the unary operator to negate <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example, using the first overload to find the difference between two points <ph id="ph1">`CPoint(25, -19)`</ph> and <ph id="ph2">`CPoint(15, 5)`</ph> returns <ph id="ph3">`CSize(10, -24)`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Subtracting a <ph id="ph1">`CSize`</ph> from <ph id="ph2">`CPoint`</ph> does the same calculation as above but returns a <ph id="ph3">`CPoint`</ph> object, not a <ph id="ph4">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, using the second overload to find the difference between the point <ph id="ph1">`CPoint(25, -19)`</ph> and the size <ph id="ph2">`CSize(15, 5)`</ph> returns <ph id="ph3">`CPoint(10, -24)`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Subtracting a rectangle from a point returns the rectangle offset by the negatives of the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> and <bpt id="p2">**</bpt>y<ept id="p2">**</ept> values specified in the point.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, using the last overload to offset the rectangle <ph id="ph1">`CRect(125, 200, 325, 400)`</ph> by the point <ph id="ph2">`CPoint(25, -19)`</ph> returns <ph id="ph3">`CRect(100, 219, 300, 419)`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Use the unary operator to negate a point.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For example, using the unary operator with the point <ph id="ph1">`CPoint(25, -19)`</ph> returns <ph id="ph2">`CPoint(-25, 19)`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATLMFC_Utilities#34<ept id="p2">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample MDI<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>POINT Structure<ept id="p1">](../../mfc/reference/point-structure1.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CRect Class<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CSize Class<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>