<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40ec8c04960e091198cb2a81605f377273c3de45</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-errors-1\fatal-error-c1017.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">782f8f72a6997bc2dae1d5d4d8cb4af4d6c5f0d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">049356a32e780122b34ca560044312d0c82c8c4d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Fatal Error C1017 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Fatal Error C1017</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>invalid integer constant expression</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The expression in an <ph id="ph1">`#if`</ph> directive did not exist or did not evaluate to a constant.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Constants defined using <ph id="ph1">`#define`</ph> must have values that evaluate to an integer constant if they are used in an <ph id="ph2">`#if`</ph>, <ph id="ph3">`#elif`</ph>, or <ph id="ph4">`#else`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following sample generates C1017:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Possible resolution:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CONSTANT_NAME`</ph> evaluates to a string and not an integer, the <ph id="ph2">`#if`</ph> directive generates fatal error C1017.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In other cases, the preprocessor evaluates an undefined constant as zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This can cause unintended results, as shown in the following sample.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`YES`</ph> is undefined, so it evaluates to zero.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`#if`</ph> <ph id="ph2">`CONSTANT_NAME`</ph> evaluates to false and the code to be used on <ph id="ph3">`YES`</ph> is removed by the preprocessor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NO`</ph> is also undefined (zero), so <ph id="ph2">`#elif`</ph> <ph id="ph3">`CONSTANT_NAME==NO`</ph> evaluates to true (<ph id="ph4">`0 == 0`</ph>), causing the preprocessor to leave the code in the <ph id="ph5">`#elif`</ph> portion of the statement â€” exactly the opposite of the intended behavior.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To see exactly how the compiler handles preprocessor directives, use <bpt id="p1">[</bpt>/P<ept id="p1">](../../build/reference/p-preprocess-to-a-file.md)</ept>, <bpt id="p2">[</bpt>/E<ept id="p2">](../../build/reference/e-preprocess-to-stdout.md)</ept>, or <bpt id="p3">[</bpt>/EP<ept id="p3">](../../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>