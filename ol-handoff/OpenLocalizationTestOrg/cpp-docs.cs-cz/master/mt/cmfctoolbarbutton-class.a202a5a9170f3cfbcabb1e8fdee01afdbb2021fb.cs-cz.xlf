<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26cbb3bc43e5678bc545552d030889229aa41bc2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfctoolbarbutton-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2882519e7858d556f5dfa20632cef7971a1a367e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03fc78a2c3766bf58b44fac38bf32fed11e53eec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCToolBarButton Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCToolBarButton Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides button functionality to toolbars.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CMFCToolBarButton<ept id="p1">](#cmfctoolbarbutton__cmfctoolbarbutton)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CanBeDropped<ept id="p1">](#cmfctoolbarbutton__canbedropped)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can position a button on a toolbar or menu during customization.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CanBeStored<ept id="p1">](#cmfctoolbarbutton__canbestored)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specifies whether the button can be stored.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CanBeStretched<ept id="p1">](#cmfctoolbarbutton__canbestretched)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can stretch the button during customization.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CompareWith<ept id="p1">](#cmfctoolbarbutton__comparewith)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compares this instance with the provided <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CopyFrom<ept id="p1">](#cmfctoolbarbutton__copyfrom)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copies the properties of another toolbar button to the current button.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::CreateFromOleData<ept id="p1">](#cmfctoolbarbutton__createfromoledata)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBarButton`</ph> object from the provided <ph id="ph2">`COleDataObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Used by the framework to create a dynamic instance of this class type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::EnableWindow<ept id="p1">](#cmfctoolbarbutton__enablewindow)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enables or disables mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::ExportToMenuButton<ept id="p1">](#cmfctoolbarbutton__exporttomenubutton)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copies text from the toolbar button to a menu.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetClipboardFormat<ept id="p1">](#cmfctoolbarbutton__getclipboardformat)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the global clipboard format for the application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetHwnd<ept id="p1">](#cmfctoolbarbutton__gethwnd)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the window handle that is associated with the toolbar button.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetImage<ept id="p1">](#cmfctoolbarbutton__getimage)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves the image index of the button.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id="p1">](#cmfctoolbarbutton__getinvalidaterect)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area of the button that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetParentWnd<ept id="p1">](#cmfctoolbarbutton__getparentwnd)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves the parent window of the button.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id="p1">](#cmfctoolbarbutton__getprotectedcommands)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the list of commands that the user cannot customize.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::GetTextSize<ept id="p1">](#cmfctoolbarbutton__gettextsize)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the size of the button text.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::HasFocus<ept id="p1">](#cmfctoolbarbutton__hasfocus)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines whether the button has the current input focus.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id="p1">](#cmfctoolbarbutton__havehotborder)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether a border of the button is displayed when a user selects the button.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsDrawImage<ept id="p1">](#cmfctoolbarbutton__isdrawimage)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Determines whether an image is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsDrawText<ept id="p1">](#cmfctoolbarbutton__isdrawtext)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Determines whether a text label is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsDroppedDown<ept id="p1">](#cmfctoolbarbutton__isdroppeddown)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determines whether the button displays a submenu.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsEditable<ept id="p1">](#cmfctoolbarbutton__iseditable)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Determines whether the button can be customized.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsExtraSize<ept id="p1">](#cmfctoolbarbutton__isextrasize)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Determines whether the button can be displayed with an extended border.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsFirstInGroup<ept id="p1">](#cmfctoolbarbutton__isfirstingroup)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether the button is in the first position in its button group.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsHidden<ept id="p1">](#cmfctoolbarbutton__ishidden)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Determines whether the button is hidden.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsHorizontal<ept id="p1">](#cmfctoolbarbutton__ishorizontal)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Determines whether the button is located on a horizontal toolbar.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsLastInGroup<ept id="p1">](#cmfctoolbarbutton__islastingroup)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is in the last position in its button group.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsLocked<ept id="p1">](#cmfctoolbarbutton__islocked)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Determines whether the button is on a locked (non-customizable) toolbar.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsOwnerOf<ept id="p1">](#cmfctoolbarbutton__isownerof)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Determines whether the button is the owner of the provided window handle.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsVisible<ept id="p1">](#cmfctoolbarbutton__isvisible)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar button is visible.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::IsWindowVisible<ept id="p1">](#cmfctoolbarbutton__iswindowvisible)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Determines whether the underlying window handle of the button is visible.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::NotifyCommand<ept id="p1">](#cmfctoolbarbutton__notifycommand)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies whether the button processes the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id="p1">](#cmfctoolbarbutton__onaddtocustomizepage)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is added to a <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnBeforeDrag<ept id="p1">](#cmfctoolbarbutton__onbeforedrag)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Specifies whether the button can be dragged.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnBeforeDrop<ept id="p1">](#cmfctoolbarbutton__onbeforedrop)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can drop the button onto the target toolbar.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id="p1">](#cmfctoolbarbutton__oncalculatesize)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Called by the framework to calculate the size of the button for the specified device context and docking state.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnCancelMode<ept id="p1">](#cmfctoolbarbutton__oncancelmode)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Called by the framework to handle the <bpt id="p1">[</bpt>WM_CANCELMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](#cmfctoolbarbutton__onchangeparentwnd)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is inserted into a new toolbar.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnClick<ept id="p1">](#cmfctoolbarbutton__onclick)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user clicks the mouse button.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnClickUp<ept id="p1">](#cmfctoolbarbutton__onclickup)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user releases the mouse button.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnContextHelp<ept id="p1">](#cmfctoolbarbutton__oncontexthelp)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_HELPHITTEST`</ph> message.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnCtlColor<ept id="p1">](#cmfctoolbarbutton__onctlcolor)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_CTLCOLOR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnCustomizeMenu<ept id="p1">](#cmfctoolbarbutton__oncustomizemenu)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnDblClk<ept id="p1">](#cmfctoolbarbutton__ondblclk)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <bpt id="p1">[</bpt>WM_LBUTTONDBLCLK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnDraw<ept id="p1">](#cmfctoolbarbutton__ondraw)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button by using the specified styles and options.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id="p1">](#cmfctoolbarbutton__ondrawoncustomizelist)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnGetCustomToolTipText<ept id="p1">](#cmfctoolbarbutton__ongetcustomtooltiptext)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the custom tooltip text for the button.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id="p1">](#cmfctoolbarbutton__onglobalfontschanged)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Called by the framework when the global font has changed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnMove<ept id="p1">](#cmfctoolbarbutton__onmove)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar moves.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnShow<ept id="p1">](#cmfctoolbarbutton__onshow)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button becomes visible or invisible.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnSize<ept id="p1">](#cmfctoolbarbutton__onsize)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar changes its size or position and this change requires the button to change size.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnToolHitTest<ept id="p1">](#cmfctoolbarbutton__ontoolhittest)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id="p1">](#cmfctoolbarbutton__onupdatetooltip)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar updates its tooltip text.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::PrepareDrag<ept id="p1">](#cmfctoolbarbutton__preparedrag)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is about to perform a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::Rect<ept id="p1">](#cmfctoolbarbutton__rect)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::ResetImageToDefault<ept id="p1">](#cmfctoolbarbutton__resetimagetodefault)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Sets to the default value the image that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SaveBarState<ept id="p1">](#cmfctoolbarbutton__savebarstate)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Saves the state of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::Serialize<ept id="p1">](#cmfctoolbarbutton__serialize)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Reads this object from an archive or writes it to an archive.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CObject::Serialize<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetACCData<ept id="p1">](#cmfctoolbarbutton__setaccdata)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetClipboardFormatName<ept id="p1">](#cmfctoolbarbutton__setclipboardformatname)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Renames the global clipboard format.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetImage<ept id="p1">](#cmfctoolbarbutton__setimage)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Sets the image index of the button.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id="p1">](#cmfctoolbarbutton__setprotectedcommands)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that the user cannot customize.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetRadio<ept id="p1">](#cmfctoolbarbutton__setradio)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Called by the framework when a button changes its checked state.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetRect<ept id="p1">](#cmfctoolbarbutton__setrect)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Sets the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetStyle<ept id="p1">](#cmfctoolbarbutton__setstyle)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Sets the style of the button.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::SetVisible<ept id="p1">](#cmfctoolbarbutton__setvisible)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is visible.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::Show<ept id="p1">](#cmfctoolbarbutton__show)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Shows or hides the button.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bImage<ept id="p1">](#cmfctoolbarbutton__m_bimage)</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Specifies whether an image is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bText<ept id="p1">](#cmfctoolbarbutton__m_btext)</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Specifies whether a text label is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bTextBelow<ept id="p1">](#cmfctoolbarbutton__m_btextbelow)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Specifies whether the text label is displayed underneath the image on the button.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bUserButton<ept id="p1">](#cmfctoolbarbutton__m_buserbutton)</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Specifies whether the button has a user-defined image.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bWholeText<ept id="p1">](#cmfctoolbarbutton__m_bwholetext)</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bWrap<ept id="p1">](#cmfctoolbarbutton__m_bwrap)</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Specifies whether the button next to a separator will be put on the next row.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_bWrapText<ept id="p1">](#cmfctoolbarbutton__m_bwraptext)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Specifies whether multi-line text labels are enabled.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_nID<ept id="p1">](#cmfctoolbarbutton__m_nid)</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The command ID of the button.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_nStyle<ept id="p1">](#cmfctoolbarbutton__m_nstyle)</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The style of the button.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton::m_strText<ept id="p1">](#cmfctoolbarbutton__m_strtext)</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The text label of the button.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CMFCToolbarButton`</ph> object is a control that resides on a toolbar.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Its behavior resembles that of an ordinary button.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You can assign an image and a text label to this object.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A toolbar button can also have a command ID.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>When the user clicks the toolbar button, the framework executes the command that this ID specifies.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Typically, toolbar buttons can be customized: the user can drag buttons from one toolbar to another, and copy, paste, delete, and edit text labels and images.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To prevent the user from customizing the toolbar, you can lock the toolbar in one of two ways.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Either set the <ph id="ph1">`bLocked`</ph> flag to <ph id="ph2">`TRUE`</ph> when you call <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar)</ept>, or add the command ID of an individual button to the global list of protected commands by using the <bpt id="p2">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id="p2">](#cmfctoolbarbutton__setprotectedcommands)</ept> method.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CMFCToolBarButton`</ph> objects display images from the global collections of toolbar images in the application.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>These collections are maintained by the parent toolbar, <bpt id="p1">[</bpt>CMFCToolBar Class<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CMFCToolBarImages Class<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>When the user clicks a toolbar button, its parent toolbar processes the mouse message and communicates the appropriate actions to the button.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If the button has a valid command ID, the parent toolbar sends the <ph id="ph1">`WM_COMMAND`</ph> message to the parent frame.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCToolBarButton`</ph> class is the base class for other toolbar button classes, such as <bpt id="p1">[</bpt>CMFCToolBarMenuButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>, <bpt id="p2">[</bpt>CMFCToolBarEditBoxButton Class<ept id="p2">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept>, and <bpt id="p3">[</bpt>CMFCToolBarComboBoxButton Class<ept id="p3">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to configure a <ph id="ph1">`CMFCToolBarButton`</ph> object by using various methods in the <ph id="ph2">`CMFCToolBarButton`</ph> class.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The example illustrates how to enable the mouse and keyboard input, set the image index of the button, set the bounding rectangle of the button, and make the button visible.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Tab Control sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_TabControl#1<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_TabControl#2<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmfctoolbarbutton-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCToolBarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtoolbarbutton.h</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__canbedropped"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeDropped</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can position a button on a toolbar or menu during customization.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pToolbar`</ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>By default, a toolbar button can be dropped on every customizable (that is, non-locked) toolbar.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Override this method and return <ph id="ph1">`FALSE`</ph> if you want to prevent the user from repositioning the button.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__canbestored"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeStored</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Determines whether the button can be stored.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The framework uses this method to determine whether the button can participate in a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Override this method if your button cannot be stored as part of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For more information about drag-and-drop operations, see <bpt id="p1">[</bpt>Drag and Drop (OLE)<ept id="p1">](../../mfc/drag-and-drop-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__canbestretched"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CanBeStretched</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can stretch the button during customization.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This method is used by the framework to determine whether the button can be stretched in customization mode.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`TRUE`</ph> for a variable-width control such as a combo box or slider.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For more information about customization mode, see <bpt id="p1">[</bpt>CMFCToolBar::SetCustomizeMode<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__cmfctoolbarbutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CMFCToolBarButton</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiID`</ph></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The command ID of the button.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iImage`</ph></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The image index of the button in the collection of images.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszText`</ph></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The text label of the button.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUserButton`</ph></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A Boolean value that determines whether the button is user-defined.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is user-defined.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Otherwise, the button image is loaded from a resource.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bLocked`</ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A Boolean value that determines whether the button can be customized.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button cannot be customized.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Otherwise, the button can be customized.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__comparewith"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CompareWith</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Compares this instance with the provided <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`other`</ph></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Reference to the object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Nonzero if the provided object equals the value of this instance; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The default implementation determines whether the command ID of the provided object equals the command ID of this instance.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Override this method if you must perform additional processing to determine whether two <ph id="ph1">`CMFCToolBarButton`</ph> objects are equal.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__copyfrom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CopyFrom</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Copies the properties of another toolbar button to the current button.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`src`</ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A reference to the source button from which to copy.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Call this method to copy another toolbar button to this toolbar button.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__createfromoledata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::CreateFromOleData</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCToolBarButton`</ph> object from the provided <ph id="ph2">`COleDataObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDataObject`</ph></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The source OLE data object.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The created <ph id="ph1">`CMFCToolBarButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This method is used by the framework to perform data transfer in various formats.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`CMFCOutlookBarPane::OnDragOver`</ph> method uses this method to perform drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__enablewindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::EnableWindow</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Enables or disables mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bEnable`</ph></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Set this parameter to <ph id="ph1">`TRUE`</ph> to enable input, or to <ph id="ph2">`FALSE`</ph> to disable input.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This method calls the <ph id="ph1">`EnableWindow`</ph> function to enable or disable input.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EnableWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646291)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__exporttomenubutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::ExportToMenuButton</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Copies text from the toolbar button to a menu.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`menuButton`</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A reference to the target menu button.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The framework calls this method to copy the text from a toolbar button to a menu button.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The default implementation copies the text label of the button.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the text label is empty, this method copies the tooltip text of the button.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Override this method if you want to take additional actions when the framework converts an object that is derived from <bpt id="p1">[</bpt>CMFCToolbarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> to a menu button.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__getclipboardformat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetClipboardFormat</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Retrieves the global clipboard format for the application.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The global <ph id="ph1">`CLIPFORMAT`</ph> value for the application.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The framework calls this method to retrieve the clipboard format for OLE data transfer operations.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>CMFCToolBarButton::CreateFromOleData<ept id="p1">](#cmfctoolbarbutton__createfromoledata)</ept> method uses this method to copy data from a source OLE data object.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This method sets the global <ph id="ph1">`CLIPFORMAT`</ph> value the first time this method is called.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>All subsequent calls to this method return this value.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>To allow drag-and-drop operations to occur between applications, call the <bpt id="p1">[</bpt>CMFCToolBarButton::SetClipboardFormatName<ept id="p1">](#cmfctoolbarbutton__setclipboardformatname)</ept> method.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For more information about clipboards in MFC, see <bpt id="p1">[</bpt>Clipboard<ept id="p1">](../../mfc/clipboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__gethwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetHwnd</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Retrieves the window handle that is associated with the toolbar button.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The window handle that is associated with the toolbar button or <ph id="ph1">`NULL`</ph> if the toolbar button has no associated window handle.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Override this method to return the window handle of your specific control.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__getimage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetImage</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Retrieves the image index of the button.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The index of the image associated with this button.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If the button has a user-defined image (that is, if <ph id="ph1">`bUserButton`</ph> was <ph id="ph2">`TRUE`</ph> in the constructor), the returned index specifies an image in the collection of user-defined images (see <bpt id="p1">[</bpt>CMFCToolBar::GetUserImages<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getuserimages)</ept>).</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Otherwise, the index specifies an image in the collection of images that are loaded from a resource file (see <bpt id="p1">[</bpt>CMFCToolBar::GetImages<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getimages)</ept>).</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>For more information about resource files, see <bpt id="p1">[</bpt>Working with Resource Files<ept id="p1">](../../mfc/working-with-resource-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__getinvalidaterect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetInvalidateRect</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area of the button that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that specifies the region that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns the whole client area.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Override this method if you want a different area to be redrawn.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__getparentwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetParentWnd</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Retrieves the parent window of the button.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The parent window of the button.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__getprotectedcommands"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetProtectedCommands</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Retrieves the list of commands that the user cannot customize.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The list of protected commands.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>In customization mode, the framework disables toolbar button commands that are protected.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id="p1">](#cmfctoolbarbutton__setprotectedcommands)</ept> method to define the list of protected commands.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__gettextsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::GetTextSize</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Retrieves the size of the button text.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SIZE`</ph> object that contains the size, in pixels, of the button text.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__hasfocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::HasFocus</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Determines whether the button has the current input focus.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Nonzero if the button has the input focus; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns nonzero if the button has the input focus or is a child or descendant window of the window that has the input focus.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>You can override this function to customize this behavior.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__havehotborder"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::HaveHotBorder</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Determines whether a border of the button is displayed when a user selects the button.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the toolbar button should display its border when a user selects it.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>You can override this method to customize this behavior.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isdrawimage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDrawImage</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Determines whether an image is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Nonzero if an image is displayed on the button; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the toolbar button has no associated image ( <bpt id="p1">[</bpt>CMFCToolBarButton::GetImage<ept id="p1">](#cmfctoolbarbutton__getimage)</ept> returns -1) or if <bpt id="p2">[</bpt>CMFCToolBarButton::m_bImage<ept id="p2">](#cmfctoolbarbutton__m_bimage)</ept> is set to <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isdrawtext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDrawText</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Determines whether a text label is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Nonzero if a text label is displayed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the toolbar button has no associated text label ( <bpt id="p1">[</bpt>CMFCToolBarButton::m_strText<ept id="p1">](#cmfctoolbarbutton__m_strtext)</ept> is empty) or <bpt id="p2">[</bpt>CMFCToolBarButton::m_bText<ept id="p2">](#cmfctoolbarbutton__m_btext)</ept> is set to <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isdroppeddown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsDroppedDown</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Determines whether the button displays a submenu.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`TRUE`</ph> if your control displays a submenu.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__iseditable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsEditable</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Determines whether the button can be customized.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Nonzero if a button can be customized by the user; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`FALSE`</ph> if the command ID of the button is a standard command (you can determine this by calling the <ph id="ph2">`IsStandardCommand`</ph> function) or if the command ID is in the list of protected commands.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>For more information about protected commands, see <bpt id="p1">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id="p1">](#cmfctoolbarbutton__getprotectedcommands)</ept> and <bpt id="p2">[</bpt>CMFCToolBarButton::SetProtectedCommands<ept id="p2">](#cmfctoolbarbutton__setprotectedcommands)</ept>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Override this method to customize its behavior.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isextrasize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsExtraSize</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Determines whether the button can be displayed with an extended border.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Nonzero if the toolbar button can be displayed with an extended border; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Several skins use extra size for the borders of toolbar buttons (for example, round buttons).</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If the user moves this button from one toolbar to another, the framework calls the <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](#cmfctoolbarbutton__onchangeparentwnd)</ept> method.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](#cmfctoolbarbutton__onchangeparentwnd)</ept> method sets the extra size flag to that of the new parent toolbar (for more information, see <bpt id="p2">[</bpt>CMFCToolBar::IsButtonExtraSizeAvailable<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable)</ept>).</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isfirstingroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsFirstInGroup</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Determines whether the button is in the first position in its button group.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the button is the first button in its button group; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This method defines a <bpt id="p1">*</bpt>button group<ept id="p1">*</ept> as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the toolbar button refers to the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button, see <bpt id="p2">[</bpt>CMFCToolBar::GetCustomizeButton<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBarButton::IsLastInGroup<ept id="p1">](#cmfctoolbarbutton__islastingroup)</ept> method to determine whether the button is in the last position in its button group.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ishidden"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsHidden</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Determines whether the button is hidden.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is hidden (invisible); otherwise 0.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the parent toolbar is stretched to determine whether the toolbar button is visible.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If you set the button to be invisible by using the <bpt id="p1">[</bpt>CMFCToolBarButton::SetVisible<ept id="p1">](#cmfctoolbarbutton__setvisible)</ept> method, use <bpt id="p2">[</bpt>CMFCToolBarButton::IsVisible<ept id="p2">](#cmfctoolbarbutton__isvisible)</ept> to determine whether the toolbar button is visible.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>By default, all toolbar buttons are visible.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarButton::Show<ept id="p1">](#cmfctoolbarbutton__show)</ept> method to hide or show toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ishorizontal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsHorizontal</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Determines whether the button is located on a horizontal toolbar.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Nonzero if a toolbar button is located on a horizontal toolbar; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine the layout of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>This method returns the <ph id="ph1">`m_bHorz`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The default value of the <ph id="ph1">`m_bHorz`</ph> data member is <ph id="ph2">`TRUE`</ph>; it is reset on each call to the <bpt id="p1">[</bpt>CMFCToolBarButton::OnDraw<ept id="p1">](#cmfctoolbarbutton__ondraw)</ept> method.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__islastingroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsLastInGroup</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is in the last position in its button group.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the button is the last button in its button group; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>This method defines a <bpt id="p1">*</bpt>button group<ept id="p1">*</ept> as a neighboring set of buttons that are positioned on the same row and are bounded by separators or the border of the toolbar This method returns <ph id="ph1">`FALSE`</ph> if the toolbar button has no parent toolbar or the toolbar button refers to the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> button, see <bpt id="p2">[</bpt>CMFCToolBar::GetCustomizeButton<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcustomizebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CMFCToolBarButton::IsFirstInGroup<ept id="p1">](#cmfctoolbarbutton__isfirstingroup)</ept> method to determine whether the button is in the first position in its button group.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__islocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsLocked</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Determines whether the button is on a locked (non-customizable) toolbar.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is on a locked toolbar; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine whether the user can customize the toolbar button by using drag-and-drop or edit operations.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Set the locked attribute on the parent toolbar by using the <bpt id="p1">[</bpt>CMFCToolBar::LoadToolBar<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__loadtoolbar)</ept> method.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The framework passes the value of this attribute to the constructor of each toolbar button ( <bpt id="p1">[</bpt>CMFCToolbarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>) that it inserts into the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isownerof"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsOwnerOf</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Determines whether the button is the owner of the provided window handle.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hwnd`</ph></source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A window handle.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is the owner of the provided window handle; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>This method returns nonzero if <ph id="ph1">`hwnd`</ph> either refers to the direct window handle or is a child of the window handle that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>This method returns 0 if <ph id="ph1">`hwnd`</ph> is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__isvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsVisible</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar button is visible.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Nonzero if the toolbar button is visible; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>You can show or hide the toolbar button by using the <bpt id="p1">[</bpt>CMFCToolBarButton::SetVisible<ept id="p1">](#cmfctoolbarbutton__setvisible)</ept> method.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CPane::AdjustSizeImmediate<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept> method on the parent toolbar after you call <bpt id="p2">[</bpt>CMFCToolBarButton::SetVisible<ept id="p2">](#cmfctoolbarbutton__setvisible)</ept> to recalculate the layout of a parent toolbar.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__iswindowvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::IsWindowVisible</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Determines whether the underlying window handle of the button is visible.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Nonzero if the underlying window handle of the button is visible; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>This method returns nonzero if the styles attribute of the underlying window handle contains the <ph id="ph1">`WS_VISIBLE`</ph> style.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the underlying window handle of the button is <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_bimage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bImage</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Specifies whether an image is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>If this data member is set to <ph id="ph1">`TRUE`</ph>, the framework displays the image that is associated with the toolbar button; otherwise the framework does not display the image.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>This member affects the return value of the <bpt id="p1">[</bpt>CMFCToolBarButton::m_bImage<ept id="p1">](#cmfctoolbarbutton__m_bimage)</ept> method.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_btext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bText</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Specifies whether a text label is displayed on the button.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>If this data member is set to <ph id="ph1">`TRUE`</ph>, the framework displays the text label of the toolbar button; otherwise the framework does not display the text label.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>This member affects the return value of the <bpt id="p1">[</bpt>CMFCToolBarButton::m_bText<ept id="p1">](#cmfctoolbarbutton__m_btext)</ept> method.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_btextbelow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bTextBelow</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Specifies whether the text label is displayed underneath the image on the button.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If this member variable is set to <ph id="ph1">`TRUE`</ph>, the framework displays the text of the button underneath the image.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The default value of this member is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_buserbutton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bUserButton</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Specifies whether the button has a user-defined image</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>This data member is set to <ph id="ph1">`TRUE`</ph> when the button has a user-defined image associated with it.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_bwholetext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWholeText</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Specifies whether the button displays its full text label even if it does not fit in the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>If this data member is set to <ph id="ph1">`TRUE`</ph>, the framework displays the full text label by enlarging the button.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Otherwise, the framework truncates and appends an ellipsis ( <bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the text label.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_bwrap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWrap</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Specifies whether the button next to a separator will be put on the next row.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The framework sets this data member to <ph id="ph1">`TRUE`</ph> when the toolbar button does not fit on the current row or when you specify a layout (for example, a specific number of toolbar buttons per row).</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The framework places this button on the next row if this data member is set to <ph id="ph1">`TRUE`</ph> and the toolbar is docked horizontally or floating.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The default value of this data member is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_bwraptext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_bWrapText</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Specifies whether multi-line text labels are enabled.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If this static member variable is <ph id="ph1">`TRUE`</ph>, the framework enables all toolbars to display multi-line text labels on toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>The default value of this data member is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_nid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_nID</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The command ID of the button.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>A command ID of -1 indicates that the button is a separator.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>All button separators have the <ph id="ph1">`TBBS_SEPARATOR`</ph> style.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CMFCToolBarButton::m_nStyle<ept id="p1">](#cmfctoolbarbutton__m_nstyle)</ept> for more information about button styles.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_nstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_nStyle</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The style of the button.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__m_strtext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::m_strText</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The text label of the button.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>This data member contains the text label of the button.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The text label can be empty.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__notifycommand"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::NotifyCommand</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Specifies whether the button processes the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iNotifyCode`</ph></source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The notification message that is associated with the command.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it is about to send a <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the parent window.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>By default, this method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`TRUE`</ph> if you want to process the <ph id="ph2">`WM_COMMAND`</ph> message or <ph id="ph3">`FALSE`</ph> to indicate that the parent toolbar should handle the message.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onaddtocustomizepage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnAddToCustomizePage</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is added to a <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Override this method if you want to perform some action when the button is added to a <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onbeforedrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnBeforeDrag</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Specifies whether the button can be dragged.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the button can be dragged; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The framework calls this method before the user starts to drag the button.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`FALSE`</ph> to disable dragging of the button.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onbeforedrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnBeforeDrop</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can drop the button onto the target toolbar.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pTarget`</ph></source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The target of the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the button can be dropped onto the provided target toolbar; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The framework calls this method before the button is dropped onto a toolbar.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The default implementation of this method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`FALSE`</ph> to disable the drop operation on the specified target.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__oncalculatesize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCalculateSize</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Called by the framework to calculate the size of the button for the specified device context and docking state.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The device context that displays the button.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`sizeDefault`</ph></source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The default size of the button.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The dock state of the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> if the toolbar is docked horizontally or is floating, or <ph id="ph2">`FALSE`</ph> if the toolbar is docked vertically.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SIZE`</ph> structure that contains the dimensions of the button, in pixels.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The framework calls this method to determine the size of the toolbar button for the specified device context and dock state.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The default implementation considers the text and image sizes (if they are displayed), the text and image positions (the text below or at the right-hand side of the image), and the toolbar dock state.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Override this method if you want to provide the size of a non-standard button (for example, an edit box button).</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__oncancelmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCancelMode</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Called by the framework to handle the <bpt id="p1">[</bpt>WM_CANCELMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Override this method if you want to handle the <bpt id="p1">[</bpt>WM_CANCELMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onchangeparentwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnChangeParentWnd</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is inserted into a new toolbar.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndParent`</ph></source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The new parent window.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The button is inserted into a toolbar, for example, when the user drags it from one toolbar to another toolbar.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onclick"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnClick</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user clicks the mouse button.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The parent window of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if the message should be handled with a delay.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user clicks the toolbar button.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Override this method to return a nonzero value if the button processes the click message.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onclickup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnClickUp</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user releases the mouse button.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user releases the toolbar button.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Override this method to return a nonzero value if the button processes the click message.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__oncontexthelp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_HELPHITTEST`</ph> message.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The parent window of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Override this method to return a nonzero value if the button processes the help message.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`WM_HELPHITTEST`</ph> message, see <bpt id="p1">[</bpt>TN028: Context-Sensitive Help Support<ept id="p1">](../../mfc/tn028-context-sensitive-help-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onctlcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCtlColor</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_CTLCOLOR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The device context that displays the button.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nCtlColor`</ph></source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The specific color notification.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A handle to the brush object that the framework uses to paint the background of the button.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the parent toolbar processes the <ph id="ph1">`WM_CTLCOLOR`</ph> message for a toolbar button that contains a Windows control.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The framework does not call this method if the toolbar button is windowless.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the toolbar framework is in customization mode and the toolbar button is unlocked.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>For more information about customization mode, see <bpt id="p1">[</bpt>CMFCToolBar::SetCustomizeMode<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>For more information about locking toolbar buttons, see <bpt id="p1">[</bpt>CMFCToolBarButton::IsLocked<ept id="p1">](#cmfctoolbarbutton__islocked)</ept>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__oncustomizemenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnCustomizeMenu</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Allows the button to modify the provided menu when the application displays a shortcut menu on the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pMenu`</ph></source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The menu to customize.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Override this method and return a nonzero value if you want to modify the contents of the provided menu.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ondblclk"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDblClk</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <bpt id="p1">[</bpt>WM_LBUTTONDBLCLK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The parent window of the button.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>This method is called by the <ph id="ph1">`CMFCToolBar::OnLButtonDblClk`</ph> method when the parent toolbar handles a <bpt id="p1">[</bpt>WM_LBUTTONDBLCLK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645606)</ept> message.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ondraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDraw</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button by using the specified styles and options.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The device context that displays the button.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>The bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pImages`</ph></source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The collection of toolbar images that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>The dock state of the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> when the button is docked horizontally and <ph id="ph2">`FALSE`</ph> when the button is docked vertically.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bCustomizeMode`</ph></source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Specifies whether the toolbar is in customization mode.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> when the toolbar is in customization mode and <ph id="ph2">`FALSE`</ph> when the toolbar is not in customization mode.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHighlight`</ph></source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is highlighted.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> when the button is highlighted and <ph id="ph2">`FALSE`</ph> when the button is not highlighted.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDrawBorder`</ph></source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Specifies whether the button should display its border.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> when the button should display its border and <ph id="ph2">`FALSE`</ph> when the button should not display its border.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bGrayDisabledButtons`</ph></source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Specifies whether to shade disabled buttons or use the disabled images collection.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>This parameter is <ph id="ph1">`TRUE`</ph> when disabled buttons should be shaded and <ph id="ph2">`FALSE`</ph> when this method should use the disabled images collection.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Override this method to customize toolbar button drawing.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ondrawoncustomizelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnDrawOnCustomizeList</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The device context that displays the button.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSelected`</ph></source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is selected.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is selected.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`FALSE`</ph>, the button is not selected.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The width, in pixels, of the button on the specified device context.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>This method is called by the customization dialog box ( <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> tab) when the button is about to display itself on the owner-draw list box.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The default implementation of this method displays the image and text label of the button if they are available.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>If the text label of the button is not available, the method displays the tooltip text.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Override this method to perform custom drawing.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ongetcustomtooltiptext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnGetCustomToolTipText</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the custom tooltip text for the button.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`strToolTip`</ph></source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that receives the custom tooltip text.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it displays the tooltip for the toolbar button.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`FALSE`</ph>, the framework uses a default tooltip.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Override this method and return a nonzero value to provide custom tooltip text for the toolbar button.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onglobalfontschanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnGlobalFontsChanged</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Called by the framework when the global font has changed.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Override this method to update the font that is used to display the button text.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onmove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnMove</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar moves.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Override this method to reposition the button when the parent toolbar moves.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onshow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnShow</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button becomes visible or invisible.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is visible.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is visible.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Otherwise, the button is not visible.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Override this method to update the visibility of the button.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnSize</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iSize`</ph></source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The new width of the button.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Override this method to resize the button when the size or position of the parent toolbar changes.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__ontoolhittest"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnToolHitTest</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar must determine whether a point is in the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWnd`</ph></source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The parent window of the button.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pTI`</ph></source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TOOLINFO`</ph> structure that contains information about a tool in a tooltip control.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The result of <ph id="ph1">`OnMenuButtonToolHitTest`</ph> if the button can retrieve a pointer to the parent frame window; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>This method calls one of the following methods if it can convert the parent window to a valid frame object:</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMDIFrameWndEx::OnMenuButtonToolHitTest<ept id="p1">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onmenubuttontoolhittest)</ept></source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CFrameWndEx::OnMenuButtonToolHitTest<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__onmenubuttontoolhittest)</ept></source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COleIPFrameWndEx::OnMenuButtonToolHitTest<ept id="p1">](../../mfc/reference/coleipframewndex-class.md#coleipframewndex__onmenubuttontoolhittest)</ept></source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__onupdatetooltip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::OnUpdateToolTip</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar updates its tooltip text.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndParent`</ph></source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The parent window.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iButtonIndex`</ph></source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button in the parent button collection.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`wndToolTip`</ph></source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>The control that displays the tooltip text.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`str`</ph></source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that receives the updated tooltip text.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Override this method to return a nonzero value if you provide a tooltip text string.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__preparedrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::PrepareDrag</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is about to perform a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`srcItem`</ph></source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`COleDataSource`</ph> object that stores state information about the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the operation succeeds; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The framework calls this method to prepare the toolbar button to store its state in the provided <ph id="ph1">`COleDataSource`</ph> object.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>This method stores its state by serializing itself to a shared file and then passing that file to the <bpt id="p1">[</bpt>COleDataSource::CacheGlobalData<ept id="p1">](../../mfc/reference/coledatasource-class.md#coledatasource__cacheglobaldata)</ept> method.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>For more information about toolbar button serialization, see <bpt id="p1">[</bpt>CMFCToolBarButton::Serialize<ept id="p1">](#cmfctoolbarbutton__serialize)</ept>.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>This method does nothing and returns <ph id="ph1">`TRUE`</ph> if the button cannot be stored (the <bpt id="p1">[</bpt>CMFCToolBarButton::CanBeStored<ept id="p1">](#cmfctoolbarbutton__canbestored)</ept> method returns <ph id="ph2">`FALSE`</ph>).</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`FALSE`</ph> if an exception occurs during object serialization.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>For more information about OLE drag-and-drop operations, see <bpt id="p1">[</bpt>Drag and Drop (OLE)<ept id="p1">](../../mfc/drag-and-drop-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__rect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::Rect</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that contains the bounding rectangle of a button.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__resetimagetodefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::ResetImageToDefault</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Sets to the default value the image that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>This method retrieves the default image from its parent toolbar by using the <bpt id="p1">[</bpt>CMFCToolBar::GetDefaultImage<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getdefaultimage)</ept> method.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>If the button has no associated default image, this method sets the text label of the button according to its string resource by using the <bpt id="p1">[</bpt>CStringT::LoadString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md#cstringt__loadstring)</ept> method.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>For more information about string resources, see <bpt id="p1">[</bpt>Working with Resource Files<ept id="p1">](../../mfc/working-with-resource-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>This method does nothing if the button has a user-defined image.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__savebarstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SaveBarState</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Saves the state of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it creates a <ph id="ph1">`CMFCToolBarButton`</ph> object as the result of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Override this method to save the state of the toolbar button to an external data source.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__serialize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::Serialize</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Reads this object from an archive or writes it to an archive.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`ar`</ph></source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CArchive`</ph> object from which or to which to serialize.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>This method supports data transfer processes such as clipboard or drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>It reads or writes properties of the button such as the ID, text label, and image ID from or to the provided <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>For serialization examples, see <bpt id="p1">[</bpt>Serialization: Serializing an Object<ept id="p1">](../../mfc/serialization-serializing-an-object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setaccdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetACCData</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pParent`</ph></source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>The parent window of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`data`</ph></source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CAccessibilityData`</ph> object that is populated with the accessibility data of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Override this method to return <ph id="ph1">`FALSE`</ph> if your toolbar button does not provide accessibility data.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setclipboardformatname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetClipboardFormatName</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Renames the global clipboard format.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszName`</ph></source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The new name of the global clipboard format.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Cannot be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>This method makes it possible for drag-and-drop operations to occur among multiple applications.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Each application must supply the same clipboard format name.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>You must call this method before the framework calls <bpt id="p1">[</bpt>CMFCToolBarButton::GetClipboardFormat<ept id="p1">](#cmfctoolbarbutton__getclipboardformat)</ept>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setimage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetImage</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Sets the image index of the button.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iImage`</ph></source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>The index of the image in the collection of toolbar images.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>If the toolbar button is a separator, <ph id="ph1">`iImage`</ph> refers to the new width of the separator button.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iImage`</ph> is less than zero, this method disables drawing of the image and enables drawing of the text label of the button.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setprotectedcommands"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetProtectedCommands</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Sets the list of commands that the user cannot customize.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lstCmds`</ph></source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The list of protected commands.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>In customization mode, the framework disables toolbar button commands that are protected.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The user cannot perform drag-and-drop and edit operations on disabled toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarButton::GetProtectedCommands<ept id="p1">](#cmfctoolbarbutton__getprotectedcommands)</ept> method to retrieve the list of protected commands.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setradio"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetRadio</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Called by the framework when a button changes its checked state.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Override this method to perform a custom action when the button changes its checked state.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetRect</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Sets the bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The new bounding rectangle of the button.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>This method calls the <bpt id="p1">[</bpt>CMFCToolBarButton::OnMove<ept id="p1">](#cmfctoolbarbutton__onmove)</ept> method after it sets the new bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetStyle</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Sets the style of the button.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nStyle`</ph></source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>The new style of the button.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>The default implementation sets the <bpt id="p1">[</bpt>CMFCToolBarButton::m_nStyle<ept id="p1">](#cmfctoolbarbutton__m_nstyle)</ept> data member to <ph id="ph1">`nStyle`</ph>.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Override this method if you want to perform additional processing to handle the change in style.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](toolbar-control-styles.md)</ept> for a list of valid style flags.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__setvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::SetVisible</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is visible.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to show or hide the button.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is shown.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>If the parameter is <ph id="ph1">`FALSE`</ph>, the button is hidden.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Use this function to hide or show a particular toolbar button.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CPane::AdjustSizeImmediate<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__adjustsizeimmediate)</ept> method after you call this method.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmfctoolbarbutton__show"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMFCToolBarButton::Show</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>Shows or hides the button.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to show or hide the button.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is shown.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>If the parameter is <ph id="ph1">`FALSE`</ph>, the button is hidden.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>The framework calls this method to update the visibility of toolbar buttons when their parent toolbar is resized.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>The framework calls this method with <ph id="ph1">`bShow`</ph> set to <ph id="ph2">`FALSE`</ph> when the button no longer fits within the bounds of the toolbar.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>The framework calls this method with <ph id="ph1">`bShow`</ph> set to <ph id="ph2">`TRUE`</ph> when after resizing the button again fits within the bounds of the toolbar.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarButton::SetVisible<ept id="p1">](#cmfctoolbarbutton__setvisible)</ept> method to set the general visibility of the button.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>This method calls the <bpt id="p1">[</bpt>CMFCToolBarButton::OnShow<ept id="p1">](#cmfctoolbarbutton__onshow)</ept> method after it updates the visibility state of the button.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMFCToolBar Class<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMFCToolBarImages Class<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>