<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b03df1bb0d64012f7600c1ab940ac6a6c3c10ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\multitype-join-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3065212d180d2c1a547cb4972fb13ab2965a6b35</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c448695a87672558713c1ba3547df0ff3a7e8f5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>multitype_join Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>multitype_join Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`multitype_join`</ph> messaging block is a multi-source, single-target messaging block that combines together messages of different types from each of its sources and offers a tuple of the combined messages to its targets.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tuple`</ph> payload type of the messages joined and propagated by the block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The kind of <ph id="ph1">`join`</ph> block this is, either <ph id="ph2">`greedy`</ph> or <ph id="ph3">`non_greedy`</ph></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A type alias for <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::multitype_join Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::~multitype_join Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::accept Method<ept id="p1">](#accept)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`multitype_join`</ph> block, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::acquire_ref Method<ept id="p1">](#acquire_ref)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Acquires a reference count on this <ph id="ph1">`multitype_join`</ph> messaging block, to prevent deletion.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::consume Method<ept id="p1">](#consume)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by the <ph id="ph1">`multitype_join`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::link_target Method<ept id="p1">](#link_target)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Links a target block to this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::release Method<ept id="p1">](#release)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Releases a previous successful message reservation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::release_ref Method<ept id="p1">](#release_ref)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Releases a reference count on this <ph id="ph1">`multiple_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::reserve Method<ept id="p1">](#reserve)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::unlink_target Method<ept id="p1">](#unlink_target)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unlinks a target block from this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join::unlink_targets Method<ept id="p1">](#unlink_targets)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unlinks all targets from this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>ISource::unlink_targets<ept id="p1">](isource-class.md#unlink_targets)</ept>.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISource<ept id="p1">](isource-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> agents.h</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="accept"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::accept Method</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`multitype_join`</ph> block, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the offered <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`accept`</ph> method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A pointer to the message that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="acquire_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::acquire_ref Method</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Acquires a reference count on this <ph id="ph1">`multitype_join`</ph> messaging block, to prevent deletion.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling this method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This method is called by an <ph id="ph1">`ITarget`</ph> object that is being linked to this source during the <ph id="ph2">`link_target`</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="consume"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::consume Method</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by the <ph id="ph1">`multitype_join`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the reserved <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`consume`</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`consume`</ph> method is similar to <ph id="ph2">`accept`</ph>, but must always be preceded by a call to <ph id="ph3">`reserve`</ph> that returned <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="link_target"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::link_target Method</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Links a target block to this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`ITarget`</ph> block to link to this <ph id="ph2">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::multitype_join Constructor</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`tuple`</ph> of sources for this <ph id="ph2">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> object within which the propagation task for the <ph id="ph2">`multitype_join`</ph> messaging block is scheduled.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ScheduleGroup`</ph> object within which the propagation task for the <ph id="ph2">`multitype_join`</ph> messaging block is scheduled.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> object used is implied by the schedule group.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`multitype_join`</ph> messaging block to copy from.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Note that the original object is orphaned, making this a move constructor.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The runtime uses the default scheduler if you do not specify the <ph id="ph1">`_PScheduler`</ph> or <ph id="ph2">`_PScheduleGroup`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Move construction is not performed under a lock, which means that it is up to the user to make sure that there are no light-weight tasks in flight at the time of moving.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Otherwise, numerous races can occur, leading to exceptions or inconsistent state.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::~multitype_join Destructor</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::release Method</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Releases a previous successful message reservation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being released.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`release`</ph> method.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::release_ref Method</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Releases a reference count on this <ph id="ph1">`multiple_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling this method.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This method is called by an <ph id="ph1">`ITarget`</ph> object that is being unlinked from this source.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The source block is allowed to release any resources reserved for the target block.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="reserve"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::reserve Method</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being reserved.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A pointer to the target block that is calling the <ph id="ph1">`reserve`</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was successfully reserved, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After you call <ph id="ph1">`reserve`</ph>, if it succeeds, you must call either <ph id="ph2">`consume`</ph> or <ph id="ph3">`release`</ph> in order to take or give up possession of the message, respectively.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unlink_target"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::unlink_target Method</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Unlinks a target block from this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`ITarget`</ph> block to unlink from this <ph id="ph2">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unlink_targets"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  multitype_join::unlink_targets Method</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Unlinks all targets from this <ph id="ph1">`multitype_join`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>choice Class<ept id="p1">](choice-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>join Class<ept id="p1">](join-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>