<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85e0d96bfd5b7b315295f720d8069a076b9b6ce4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\mersenne-twister-engine-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e7b43efa8b27182d1be9be05d8569e167c9c6cc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">962058215f96ec5f4f88159c82c1bb368e0c0300</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>mersenne_twister_engine Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>mersenne_twister_engine Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Generates a high quality random sequence of integers based on the Mersenne twister algorithm.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The unsigned integer result type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For possible types, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>random&gt;<ept id="p1">](../standard-library/random.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Word size<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Size of each word, in bits, of the state sequence.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precondition<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>State size<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The number of elements (values) in the state sequence.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Shift size<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The number of elements to skip during each twist.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precondition<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Mask bits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precondition<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>XOR mask<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Precondition<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`S`</ph>, <ph id="ph2">`T`</ph>,</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Tempering shift parameters<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Used as shift values during scrambling (tempering).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Precondition:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`B`</ph>,</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Tempering bit mask parameters<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Used as bit mask values during scrambling (tempering).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Precondition:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Initialization multiplier<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Used to help with initialization of the sequence.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Precondition:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is a member constant, defined as <ph id="ph1">`5489u`</ph>, used as the default parameter value for <ph id="ph2">`mersenne_twister_engine::seed`</ph> and the single value constructor.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about engine members, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>random&gt;<ept id="p1">](../standard-library/random.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This template class describes a random number engine, returning values on the closed interval [ <ph id="ph1">`0`</ph>, <ph id="ph2">`2`&lt;sup&gt;</ph>W<ph id="ph3">&lt;/sup&gt; - `1`</ph>].</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It holds a large integral value with <ph id="ph1">`W * (N - 1) + R`</ph> bits.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It extracts <ph id="ph1">`W`</ph> bits at a time from this large value, and when it has used all the bits it twists the large value by shifting and mixing the bits so that it has a new set of bits to extract from.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The engine's state is the last <ph id="ph1">`N``W`</ph>-bit values used if <ph id="ph2">`operator()`</ph> has been called at least <ph id="ph3">`N`</ph> times, otherwise the <ph id="ph4">`M``W`</ph>-bit values that have been used and the last <ph id="ph5">`N - M`</ph> values of the seed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The generator twists the large value that it holds by using a twisted generalized feedback shift register defined by shift values <ph id="ph1">`N`</ph> and <ph id="ph2">`M`</ph>, a twist value <ph id="ph3">`R`</ph>, and a conditional XOR-mask <ph id="ph4">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Additionally, the bits of the raw shift register are scrambled (tempered) according to a bit-scrambling matrix defined by values <ph id="ph1">`U`</ph>, <ph id="ph2">`D`</ph>, <ph id="ph3">`S`</ph>, <ph id="ph4">`B`</ph>, <ph id="ph5">`T`</ph>, <ph id="ph6">`C`</ph>, and <ph id="ph7">`L`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The template argument <ph id="ph1">`UIntType`</ph> must be large enough to hold values up to <ph id="ph2">`2`&lt;sup&gt;</ph>W<ph id="ph3">&lt;/sup&gt; - `1`</ph>. The values of the other template arguments must satisfy the following requirements: <ph id="ph4">`2u &lt; W, 0 &lt; M, M ≤ N, R ≤ W, U ≤ W, S ≤ W, T ≤ W, L ≤ W, W ≤ numeric_limits&lt;UIntType&gt;::digits, A ≤ (1u&lt;&lt;W) - 1u, B ≤ (1u&lt;&lt;W) - 1u, C ≤ (1u&lt;&lt;W) - 1u, D ≤ (1u&lt;&lt;W) - 1u, and F ≤ (1u&lt;&lt;W) - 1u`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Although you can construct a generator from this engine directly, it is recommended you use one of these predefined typedefs:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>: 32-bit Mersenne twister engine (Matsumoto and Nishimura, 1998).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>: 64-bit Mersenne twister engine (Matsumoto and Nishimura, 2000).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For detailed information about the Mersenne twister algorithm, see the Wikipedia article <bpt id="p1">[</bpt>Mersenne twister<ept id="p1">](http://go.microsoft.com/fwlink/LinkId=402356)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>random&gt;<ept id="p1">](../standard-library/random.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>random&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>random&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>