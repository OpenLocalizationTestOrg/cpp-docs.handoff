<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5d9501bdb969b916e65c4c29e95bcba1a7efb11</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\comparing-synchronization-data-structures-to-the-windows-api.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86cca1d679d95a8a5995cc9ecd133836153b1dda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">099eafc44264779dce2d2a051da296d8665dfa56</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Comparing Synchronization Data Structures to the Windows API | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparing Synchronization Data Structures to the Windows API</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares the behavior of the synchronization data structures that are provided by the Concurrency Runtime to those provided by the Windows API.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The synchronization data structures that are provided by the Concurrency Runtime follow the <bpt id="p1">*</bpt>cooperative threading model<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the cooperative threading model, synchronization primitives explicitly yield their processing resources to other threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This differs from the <bpt id="p1">*</bpt>preemptive threading model<ept id="p1">*</ept>, where processing resources are transferred to other threads by the controlling scheduler or operating system.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>critical_section</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::critical_section<ept id="p1">](../../parallel/concrt/reference/critical-section-class.md)</ept> class resembles the Windows <ph id="ph1">`CRITICAL_SECTION`</ph> structure because it can be used only by the threads of one process.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about critical sections in the Windows API, see <bpt id="p1">[</bpt>Critical Section Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682530)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>reader_writer_lock</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::reader_writer_lock<ept id="p1">](../../parallel/concrt/reference/reader-writer-lock-class.md)</ept> class resembles Windows slim reader/writer (SRW) locks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table explains the similarities and differences.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Feature</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SRW lock</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Non-reentrant</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Can promote a reader to a writer (upgrade support)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Can demote a writer to a reader (downgrade support)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Write-preference lock</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>FIFO access to writers</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about SRW locks, see <bpt id="p1">[</bpt>Slim Reader/Writer (SRW) Locks<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa904937)</ept> in the Platform SDK.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::event<ept id="p1">](../../parallel/concrt/reference/event-class.md)</ept> class resembles an unnamed, Windows manual-reset event.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, an <ph id="ph1">`event`</ph> object behaves cooperatively, whereas a Windows event behaves preemptively.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about Windows events, see <bpt id="p1">[</bpt>Event Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682655)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To better understand the difference between the <ph id="ph1">`event`</ph> class and Windows events, consider the following example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This example enables the scheduler to create at most two simultaneous tasks and then calls two similar functions that use the <ph id="ph1">`event`</ph> class and a Windows manual-reset event.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each function first creates several tasks that wait for a shared event to become signaled.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Each function then yields to the running tasks and then signals the event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each function then waits for the signaled event.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>concrt-event-comparison#1</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example produces the following sample output:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`event`</ph> class behaves cooperatively, the scheduler can reallocate processing resources to another context when an event is waiting to enter the signaled state.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Therefore, more work is accomplished by the version that uses the <ph id="ph1">`event`</ph> class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the version that uses Windows events, each waiting task must enter the signaled state before the next task is started.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about tasks, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>