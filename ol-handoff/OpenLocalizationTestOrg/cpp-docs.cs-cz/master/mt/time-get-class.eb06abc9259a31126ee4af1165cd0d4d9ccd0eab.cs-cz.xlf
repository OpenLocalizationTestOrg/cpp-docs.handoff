<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17124e4149db5cd22afde2aff9b8e0dae94f7ca2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\time-get-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af68cdd6b8ae9e4afd48e57f5d91100c51a1b1be</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8b66af500998993a074d572b3430ea984c75736</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>time_get Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>time_get Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that can serve as a locale facet to control conversions of sequences of type <ph id="ph1">`CharType`</ph> to time values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The iterator from which the time values are read.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>time_get<ept id="p1">](#time_get__time_get)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`time_get`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>char_type<ept id="p1">](#time_get__char_type)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iter_type<ept id="p1">](#time_get__iter_type)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A type that describes an input iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>date_order<ept id="p1">](#time_get__date_order)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_date_order<ept id="p1">](#time_get__do_date_order)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return the date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get<ept id="p1">](#time_get__do_get)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reads and converts character data to a time value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get_date<ept id="p1">](#time_get__do_get_date)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the date produced by the <ph id="ph1">`x`</ph> specifier for <ph id="ph2">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get_monthname<ept id="p1">](#time_get__do_get_monthname)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the name of the month.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get_time<ept id="p1">](#time_get__do_get_time)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the date produced by the <ph id="ph1">`X`</ph> specifier for <ph id="ph2">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get_weekday<ept id="p1">](#time_get__do_get_weekday)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the name of the day of the week.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_get_year<ept id="p1">](#time_get__do_get_year)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parses a string as the name of the year.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get<ept id="p1">](#time_get__get)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reads from a source of character data and converts that data to a time that is stored in a time struct.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_date<ept id="p1">](#time_get__get_date)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parses a string as the date produced by the <ph id="ph1">`x`</ph> specifier for <ph id="ph2">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_monthname<ept id="p1">](#time_get__get_monthname)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the month.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_time<ept id="p1">](#time_get__get_time)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parses a string as the date produced by the <ph id="ph1">`X`</ph> specifier for <ph id="ph2">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_weekday<ept id="p1">](#time_get__get_weekday)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the day of the week.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_year<ept id="p1">](#time_get__get_year)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the year.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__char_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::char_type</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__date_order"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::date_order</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns the date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_date_order<ept id="p1">](#time_get__do_date_order)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_date_order"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_date_order</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return the date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The date order used by a facet.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The virtual protected member function returns a value of type <bpt id="p1">**</bpt>time_base::dateorder<ept id="p1">**</ept>, which describes the order in which date components are matched by <bpt id="p2">[</bpt>do_get_date<ept id="p2">](#time_get__do_get_date)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this implementation, the value is <bpt id="p1">**</bpt>time_base::mdy<ept id="p1">**</ept>, corresponding to dates of the form December 2, 1979.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>date_order<ept id="p1">](#time_get__date_order)</ept>, which calls <ph id="ph1">`do_date_order`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Reads and converts character data to a time value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Accepts one conversion specifier and modifier.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An Input iterator that indicates the start of the sequence to convert.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An Input iterator that indicates the end of the sequence.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A stream object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A field in _Iosbase where appropriate bitmask elements are set to indicate errors.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A pointer to the time structure where the time is to be stored.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A conversion specifier character.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An optional modifier character.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns an iterator that designates the first unconverted element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A conversion failure sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">`_State`</ph> and returns <ph id="ph3">` first`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The virtual member function converts and skips one or more input elements in the range <ph id="ph1">`[`` first``,`</ph> <ph id="ph2">` last``)`</ph> to determine the values stored in one or more members of <ph id="ph3">`*pt`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A conversion failure sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">`_State`</ph> and returns <ph id="ph3">` first`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Otherwise, the function returns an iterator designating the first unconverted element.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The conversion specifiers are:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'a'`</ph> or <ph id="ph2">`'A'`</ph> -- behaves the same as <bpt id="p1">[</bpt>time_get::get_weekday<ept id="p1">](#time_get__get_weekday)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'b'`</ph>, <ph id="ph2">`'B'`</ph>, or <ph id="ph3">`'h'`</ph> -- behaves the same as <bpt id="p1">[</bpt>time_get::get_monthname<ept id="p1">](#time_get__get_monthname)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'c'`</ph> -- behaves the same as <ph id="ph2">`"%b %d %H : %M : %S %Y"`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'C'`</ph> -- converts a decimal input field in the range [0, 99] to the value <ph id="ph2">`val`</ph> and stores <ph id="ph3">`val * 100 - 1900`</ph> in <ph id="ph4">`pt-&amp;tm_year`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'d'`</ph> or <ph id="ph2">`'e'`</ph> -- converts a decimal input field in the range [1, 31] and stores its value in <ph id="ph3">`pt-&amp;tm_mday`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'D'`</ph> -- behaves the same as <ph id="ph2">`"%m / %d / %y"`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'H'`</ph> -- converts a decimal input field in the range [0, 23] and stores its value in <ph id="ph2">`pt-&amp;tm_hour`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'I'`</ph> -- converts a decimal input field in the range [0, 11] and stores its value in <ph id="ph2">`pt-&amp;tm_hour`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'j'`</ph> -- converts a decimal input field in the range [1, 366] and stores its value in <ph id="ph2">`pt-&amp;tm_yday`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'m'`</ph> -- converts a decimal input field in the range [1, 12] to the value <ph id="ph2">`val`</ph> and stores <ph id="ph3">`val - 1`</ph> in and stores its value in <ph id="ph4">`pt-&amp;tm_mon`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'M'`</ph> -- converts a decimal input field in the range [0, 59] and stores its value in <ph id="ph2">`pt-&amp;tm_min`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'n'`</ph> or <ph id="ph2">`'t'`</ph> -- behaves the same as <ph id="ph3">`" "`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'p'`</ph> -- converts "AM" or "am" to zero and "PM" or "PM" to 12 and adds this value to <ph id="ph2">`pt-&amp;tm_hour`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'r'`</ph> -- behaves the same as <ph id="ph2">`"%I : %M : %S %p"`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'R'`</ph> -- behaves the same as <ph id="ph2">`"%H %M"`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'S'`</ph> -- converts a decimal input field in the range [0, 59] and stores its value in <ph id="ph2">`pt-&amp;tm_sec`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'T'`</ph> or <ph id="ph2">`'X'`</ph> -- behaves the same as <ph id="ph3">`"%H : %M : S"`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'U'`</ph> -- converts a decimal input field in the range [0, 53] and stores its value in <ph id="ph2">`pt-&amp;tm_yday`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'w'`</ph> -- converts a decimal input field in the range [0, 6] and stores its value in <ph id="ph2">`pt-&amp;tm_wday`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'W'`</ph> -- converts a decimal input field in the range [0, 53] and stores its value in <ph id="ph2">`pt-&amp;tm_yday`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'x'`</ph> -- behaves the same as <ph id="ph2">`"%d / %m / %y"`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'y'`</ph> -- converts a decimal input field in the range [0, 99] to the value <ph id="ph2">`val`</ph> and stores <ph id="ph3">`val &lt; 69  val + 100 : val`</ph> in <ph id="ph4">`pt-&amp;tm_year`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`'Y'`</ph> -- behaves the same as <bpt id="p1">[</bpt>time_get::get_year<ept id="p1">](#time_get__get_year)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Any other conversion specifier sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">`state`</ph> and returns.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In this implementation, any modifier has no effect.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get_date"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get_date</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the date produced by the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> specifier for <ph id="ph1">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A pointer to where the date information is to be stored.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>) until it has recognized a complete, nonempty date input field.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as the components <bpt id="p1">**</bpt>tm::tm_mon<ept id="p1">**</ept>, <bpt id="p2">**</bpt>tm::tm_day<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>tm::tm_year<ept id="p3">**</ept>, and stores the results in _ <bpt id="p4">*</bpt>Pt<ept id="p4">*</ept><ph id="ph1">-&gt; </ph><bpt id="p5">**</bpt>tm_mon<ept id="p5">**</ept>, <ph id="ph2">\_</ph> <bpt id="p6">*</bpt>Pt<ept id="p6">*</ept><ph id="ph3">-&gt; </ph><bpt id="p7">**</bpt>tm_day<ept id="p7">**</ept> and <ph id="ph4">\_</ph> <bpt id="p8">*</bpt>Pt<ept id="p8">*</ept><ph id="ph5">-&gt; </ph><bpt id="p9">**</bpt>tm_year<ept id="p9">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the date input field.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Otherwise, the function sets <ph id="ph1">`_Iosbase`</ph><bpt id="p1">**</bpt>::failbit<ept id="p1">**</ept> in <ph id="ph2">`_State`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid date input field.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">` last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">`_State`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The format for the date input field is locale dependent.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For the default locale, the date input field has the form MMM DD, YYYY, where:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>MMM is matched by calling <bpt id="p1">[</bpt>get_monthname<ept id="p1">](#time_get__get_monthname)</ept>, giving the month.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>DD is a sequence of decimal digits whose corresponding numeric value must be in the range [1, 31], giving the day of the month.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>YYYY is matched by calling <bpt id="p1">[</bpt>get_year<ept id="p1">](#time_get__get_year)</ept>, giving the year.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The literal spaces and commas must match corresponding elements in the input sequence.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_date<ept id="p1">](#time_get__get_date)</ept>, which calls <ph id="ph1">`do_get_date`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get_monthname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get_monthname</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the name of the month.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A pointer to where the month information is to be stored.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>) until it has recognized a complete, nonempty month input field.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as the component <bpt id="p1">**</bpt>tm::tm_mon<ept id="p1">**</ept>, and stores the result in _ <bpt id="p2">*</bpt>Pt<ept id="p2">*</ept><ph id="ph1">-&gt; </ph><bpt id="p3">**</bpt>tm_mon<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the month input field.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Otherwise, the function sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid month input field.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">` last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The month input field is a sequence that matches the longest of a set of locale-specific sequences, such as Jan, January, Feb, February, and so on.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The converted value is the number of months since January.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_monthname<ept id="p1">](#time_get__get_monthname)</ept>, which calls <ph id="ph1">`do_get_monthname`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get_time"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get_time</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the date produced by the <bpt id="p1">*</bpt>X<ept id="p1">*</ept> specifier for <ph id="ph1">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A pointer to where the date information is to be stored.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>) until it has recognized a complete, nonempty time input field.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as the components <bpt id="p1">**</bpt>tm::tm_hour<ept id="p1">**</ept>, <bpt id="p2">**</bpt>tm::tm_min<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>tm::tm_sec<ept id="p3">**</ept>, and stores the results in _ <bpt id="p4">*</bpt>Pt<ept id="p4">*</ept><ph id="ph1">-&gt; </ph><bpt id="p5">**</bpt>tm_hour<ept id="p5">**</ept>, <ph id="ph2">\_</ph> <bpt id="p6">*</bpt>Pt<ept id="p6">*</ept><ph id="ph3">-&gt; </ph><bpt id="p7">**</bpt>tm_min<ept id="p7">**</ept>, and <ph id="ph4">\_</ph> <bpt id="p8">*</bpt>Pt<ept id="p8">*</ept><ph id="ph5">-&gt; </ph><bpt id="p9">**</bpt>tm_sec<ept id="p9">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the time input field.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Otherwise, the function sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid time input field.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">` last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>In this implementation, the time input field has the form HH:MM:SS, where:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>HH is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 24), giving the hour of the day.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>MM is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the minutes past the hour.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>SS is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the seconds past the minute.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The literal colons must match corresponding elements in the input sequence.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_time<ept id="p1">](#time_get__get_time)</ept>, which calls <ph id="ph1">`do_get_time`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get_weekday"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get_weekday</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parse a string as the name of the day of the week.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A pointer to where the weekday information is to be stored.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The virtual protected member function tries to match sequential elements beginning at <ph id="ph1">` first`</ph> in the sequence [ <ph id="ph2">` first`</ph>, <ph id="ph3">` last`</ph>) until it has recognized a complete, nonempty weekday input field.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as the component <bpt id="p1">**</bpt>tm::tm_wday<ept id="p1">**</ept>, and stores the result in _ <bpt id="p2">*</bpt>Pt<ept id="p2">*</ept><ph id="ph1">-&gt; </ph><bpt id="p3">**</bpt>tm_wday<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the weekday input field.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Otherwise, the function sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid weekday input field.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">` last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The weekday input field is a sequence that matches the longest of a set of locale-specific sequences, such as Sun, Sunday, Mon, Monday, and so on.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The converted value is the number of days since Sunday.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_weekday<ept id="p1">](#time_get__get_weekday)</ept>, which calls <ph id="ph1">`do_get_weekday`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__do_get_year"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::do_get_year</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to parses a string as the name of the year.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A pointer to where the year information is to be stored.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The virtual protected member function tries to match sequential elements beginning at <ph id="ph1">` first`</ph> in the sequence [ <ph id="ph2">` first`</ph>, <ph id="ph3">` last`</ph>) until it has recognized a complete, nonempty year input field.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as the component <bpt id="p1">**</bpt>tm::tm_year<ept id="p1">**</ept>, and stores the result in _ <bpt id="p2">*</bpt>Pt<ept id="p2">*</ept><ph id="ph1">-&gt; </ph><bpt id="p3">**</bpt>tm_year<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the year input field.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Otherwise, the function sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid year input field.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">` last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">\_</ph> <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The year input field is a sequence of decimal digits whose corresponding numeric value must be in the range [1900, 2036).</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The stored value is this value minus 1900.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>In this implementation, values in the range [69, 136) represent the range of years [1969, 2036).</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Values in the range [0, 69) are also permissible, but may represent either the range of years [1900, 1969) or [2000, 2069), depending on the specific translation environment.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_year<ept id="p1">](#time_get__get_year)</ept>, which calls <ph id="ph1">`do_get_year`</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Reads from a source of character data and converts that data to a time that is stored in a time struct.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The first function accepts one conversion specifier and modifier, the second accepts several.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Input iterator that indicates where the sequence to be converted starts.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Input iterator that indicates the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The stream.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The appropriate bitmask elements are set for the stream state to indicate errors.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Pointer to the time structure where the time is to be stored.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A conversion specifier character.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An optional modifier character.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Points to where the format directives start.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Points to the end of the format directives.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first character after the data that was used to assign the time struct *_Pt.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The first member function returns <ph id="ph1">`do_get`</ph> <ph id="ph2">`(`` first``,`</ph> <ph id="ph3">` last``,`</ph> <ph id="ph4">`_Iosbase``,`</ph> <ph id="ph5">`_State``,`</ph> <ph id="ph6">`_Pt``,`</ph> <ph id="ph7">`_Fmt``,`</ph> <ph id="ph8">`_Mod``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The second member function calls <ph id="ph1">`do_get`</ph> under the control of the format delimited by <ph id="ph2">`[``_Fmt_first``,``_Fmt_last``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>It treats the format as a sequence of fields, each of which determines the conversion of zero or more input elements delimited by <ph id="ph1">`[first, last)`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first unconverted element.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>There are three kinds of fields:</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>A per cent (%) in the format, followed by an optional modifier <ph id="ph1">`mod`</ph> in the set [EOQ#], followed by a conversion specifier <ph id="ph2">`fmt`</ph>, replaces <ph id="ph3">`first`</ph> with the value returned by <ph id="ph4">`do_get`</ph> <ph id="ph5">`(`` first``,`</ph> <ph id="ph6">` last``,`</ph> <ph id="ph7">`_Iosbase``,`</ph> <ph id="ph8">`_State``,`</ph> <ph id="ph9">`_Pt``,`</ph> <ph id="ph10">`_Fmt``,`</ph> <ph id="ph11">`_Mod``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A conversion failure sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">`state`</ph> and returns.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A whitespace element in the format skips past zero or more input whitespace elements.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Any other element in the format must match the next input element, which is skipped.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A match failure sets <ph id="ph1">`ios_base::failbit`</ph> in <ph id="ph2">`state`</ph> and returns.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get_date"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get_date</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Parses a string as the date produced by the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> specifier for <ph id="ph1">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A pointer to where the date information is to be stored.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_get_date<ept id="p1">](#time_get__do_get_date)</ept>( <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`_Pt`</ph>).</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Note that months are counted from 0 to 11.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get_monthname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get_monthname</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the month.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A pointer to where the month information is to be stored.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_get_monthname<ept id="p1">](#time_get__do_get_monthname)</ept>( <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`_Pt`</ph>).</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get_time"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get_time</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parses a string as the date produced by the <bpt id="p1">*</bpt>X<ept id="p1">*</ept> specifier for <ph id="ph1">`strftime`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A pointer to where the date information is to be stored.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_get_time<ept id="p1">](#time_get__do_get_time)</ept>( <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`_Pt`</ph>).</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get_weekday"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get_weekday</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the day of the week.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>A pointer to where the weekday information is to be stored.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_get_weekday<ept id="p1">](#time_get__do_get_weekday)</ept>( <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`_Pt`</ph>).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__get_year"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::get_year</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Parses a string as the name of the year.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the beginning of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Input iterator addressing the end of the sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>A pointer to where the year information is to be stored.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>An input iterator addressing the first element beyond the input field.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_get_year<ept id="p1">](#time_get__do_get_year)</ept>( <ph id="ph1">` first`</ph>, <ph id="ph2">` last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`_Pt`</ph>).</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__iter_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::iter_type</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A type that describes an input iterator.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>InputIterator<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="time_get__time_get"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  time_get::time_get</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`time_get`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&gt;</ph> 0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>( <ph id="ph1">`_Refs`</ph>).</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>locale&gt;<ept id="p1">](../standard-library/locale.md)</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>time_base Class<ept id="p1">](../standard-library/time-base-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>