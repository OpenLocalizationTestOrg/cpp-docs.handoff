<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77631fbba9ab64ba0c2d87412c4e14d6dcab083b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\rpt-rptf-rptw-rptfw-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc7d04467371920e206c154a596fd791b2f185cf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29bf648ce2944bd98c26fa4a62193d281ba7e2c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_RPT, _RPTF, _RPTW, _RPTFW Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_RPT, _RPTF, _RPTW, _RPTFW Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tracks an application's progress by generating a debug report (debug version only).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">*</bpt>n<ept id="p1">*</ept> specifies the number of arguments in <ph id="ph1">`args`</ph> and can be 0, 1, 2, 3, 4, or 5.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Report type: <ph id="ph1">`_CRT_WARN`</ph>, <ph id="ph2">`_CRT_ERROR`</ph>, or <ph id="ph3">`_CRT_ASSERT`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Format-control string used to create the user message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Substitution arguments used by <ph id="ph1">`format`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All these macros take the <ph id="ph1">`reportType`</ph>and <ph id="ph2">`format`</ph>parameters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In addition, they might also take up to four additional arguments, signified by the number appended to the macro name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`_RPT0`</ph> and <ph id="ph2">`_RPTF0`</ph> take no additional arguments, <ph id="ph3">`_RPT1`</ph> and <ph id="ph4">`_RPTF1`</ph> take <ph id="ph5">`arg1`</ph>, <ph id="ph6">`_RPT2`</ph> and <ph id="ph7">`_RPTF2`</ph> take <ph id="ph8">`arg1`</ph> and <ph id="ph9">`arg2`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPT`</ph> and <ph id="ph2">`_RPTF`</ph> macros are similar to the <bpt id="p1">[</bpt>printf<ept id="p1">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> function, because they can be used to track an application's progress during the debugging process.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, these macros are more flexible than <ph id="ph1">`printf`</ph> because they do not need to be enclosed in <ph id="ph2">`#ifdef`</ph> statements to prevent them from being called in a retail build of an application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This flexibility is achieved by using the <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> macro; the <ph id="ph1">`_RPT`</ph> and <ph id="ph2">`_RPTF`</ph> macros are only available when the <ph id="ph3">`_DEBUG`</ph> flag is defined.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_DEBUG`</ph> is not defined, calls to these macros are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPTW`</ph> and <ph id="ph2">`_RPTFW`</ph> macros are wide-character versions of these macros.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>They are like <ph id="ph1">`wprintf`</ph> and take wide-character strings as arguments.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPT`</ph> macros call the <bpt id="p1">[</bpt>_CrtDbgReport<ept id="p1">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> function to generate a debug report with a user message.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPTW`</ph> macros call the <ph id="ph2">`_CrtDbgReportW`</ph> function to generate the same report with wide characters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPTF`</ph> and <ph id="ph2">`_RPTFW`</ph> macros create a debug report with the source file and line number where the report macro was called, in addition to the user message.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The user message is created by substituting the <ph id="ph1">`arg`</ph>[<bpt id="p1">*</bpt>n<ept id="p1">*</ept>] arguments into the <ph id="ph2">`format`</ph> string, using the same rules defined by the <bpt id="p2">[</bpt>printf<ept id="p2">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_CrtDbgReport`</ph> or <ph id="ph2">`_CrtDbgReportW`</ph> generates the debug report and determines its destinations based on the current report modes and file defined for <ph id="ph3">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_CrtSetReportMode<ept id="p1">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id="p2">[</bpt>_CrtSetReportFile<ept id="p2">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions are used to define the destinations for each report type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`_RPT`</ph> macro is called and neither <ph id="ph2">`_CrtSetReportMode`</ph> nor <ph id="ph3">`_CrtSetReportFile`</ph> has been called, messages are displayed as follows.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Report type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Output destination</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Warning text is not displayed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A pop-up window.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Same as if <ph id="ph1">`_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);`</ph> had been specified.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Same as <ph id="ph1">`_CRT_ERROR`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When the destination is a debug message window and the user chooses the <bpt id="p1">**</bpt>Retry<ept id="p1">**</ept> button, <ph id="ph1">`_CrtDbgReport`</ph> or <ph id="ph2">`_CrtDbgReportW`</ph> returns 1, causing these macros to start the debugger, provided that just-in-time (JIT) debugging is enabled.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about using these macros as a debugging error handling mechanism, see <bpt id="p1">[</bpt>Using Macros for Verification and Reporting<ept id="p1">](/visualstudio/debugger/macros-for-reporting)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Two other macros exist that generate a debug report.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_ASSERT<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro generates a report, but only when its expression argument evaluates to FALSE.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ASSERTE<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> is exactly like <ph id="ph1">`_ASSERT`</ph>, but includes the failed expression in the generated report.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_RPT`</ph> macros</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_RPTF`</ph> macros</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_RPTW`</ph> macros</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_RPTFW`</ph> macros</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Debug versions of <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Although these are macros and are obtained by including Crtdbg.h, the application must link with one of the debug libraries because these macros call other run-time functions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>_ASSERT<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debug Routines<ept id="p1">](../../c-runtime-library/debug-routines.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>