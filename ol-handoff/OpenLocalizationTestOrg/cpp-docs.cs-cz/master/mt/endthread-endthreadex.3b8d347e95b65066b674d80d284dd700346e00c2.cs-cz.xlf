<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1885c3c2e09af01e52fbe298b0abb1373988521</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\endthread-endthreadex.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab9d53f186608c68fa90f3cca9040247b39da144</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b400083f754b9d60dd64fd24bfcdd8de2097caba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_endthread, _endthreadex | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_endthread, _endthreadex</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Terminates a thread; <ph id="ph1">`_endthread`</ph> terminates a thread that's created by <ph id="ph2">`_beginthread`</ph> and  <ph id="ph3">`_endthreadex`</ph> terminates a thread that's created by<ph id="ph4">`_beginthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Thread exit code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`_endthread`</ph> or <ph id="ph2">`_endthreadex`</ph> explicitly to terminate a thread; however, <ph id="ph3">`_endthread`</ph> or <ph id="ph4">`_endthreadex`</ph> is called automatically when the thread returns from the routine passed as a parameter to <ph id="ph5">`_beginthread`</ph> or <ph id="ph6">`_beginthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Terminating a thread with a call to <ph id="ph1">`endthread`</ph> or <ph id="ph2">`_endthreadex`</ph> helps ensure proper recovery of resources allocated for the thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For an executable file linked with Libcmt.lib, do not call the Win32 <bpt id="p1">[</bpt>ExitThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx)</ept> API; this prevents the run-time system from reclaiming allocated resources.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_endthread`</ph> and <ph id="ph2">`_endthreadex`</ph> reclaim allocated thread resources and then call <ph id="ph3">`ExitThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_endthread`</ph> automatically closes the thread handle.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(This behavior differs from the Win32 <ph id="ph1">`ExitThread`</ph> API.) Therefore, when you use <ph id="ph2">`_beginthread`</ph> and <ph id="ph3">`_endthread`</ph>, do not explicitly close the thread handle by calling the Win32 <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> API.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Like the Win32 <ph id="ph1">`ExitThread`</ph> API, <ph id="ph2">`_endthreadex`</ph> does not close the thread handle.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, when you use <ph id="ph1">`_beginthreadex`</ph> and <ph id="ph2">`_endthreadex`</ph>, you must close the thread handle by calling the Win32 <ph id="ph3">`CloseHandle`</ph> API.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `_endthread`</ph> and <ph id="ph2">`_endthreadex`</ph> cause C++ destructors pending in the thread not to be called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>process.h&gt;</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>process.h&gt;</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Multithreaded versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>_beginthread<ept id="p1">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process and Environment Control<ept id="p1">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_beginthread, _beginthreadex<ept id="p1">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>