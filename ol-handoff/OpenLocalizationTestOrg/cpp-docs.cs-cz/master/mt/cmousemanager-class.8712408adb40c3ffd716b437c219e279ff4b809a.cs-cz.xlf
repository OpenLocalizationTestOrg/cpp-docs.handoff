<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2333b9e0f6fec419bc0f3de3772fafe0a266c968</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmousemanager-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44831f138decd49bef7d8f0c53257d1b1ba96e91</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a4f747913842b183eb1c01c4da39d649c1e2c4b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMouseManager Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMouseManager Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows a user to associate different commands with a particular <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept> object when the user double-clicks inside that view.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](#cmousemanager__addview)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">`CView`</ph> object to the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box enables the user to associate a double-click with a command for each of the listed views.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::GetViewDblClickCommand<ept id="p1">](#cmousemanager__getviewdblclickcommand)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Returns the command that is executed when the user double-clicks inside the provided view.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::GetViewIconId<ept id="p1">](#cmousemanager__getviewiconid)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the icon associated with the provided view ID.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::GetViewIdByName<ept id="p1">](#cmousemanager__getviewidbyname)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the view ID associated with the provided view name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::GetViewNames<ept id="p1">](#cmousemanager__getviewnames)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retrieves a list of all added view names.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::LoadState<ept id="p1">](#cmousemanager__loadstate)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Loads the <ph id="ph1">`CMouseManager`</ph> state from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::SaveState<ept id="p1">](#cmousemanager__savestate)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Writes the <ph id="ph1">`CMouseManager`</ph> state to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager::SetCommandForDblClk<ept id="p1">](#cmousemanager__setcommandfordblclk)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Associates the provided command and the provided view.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMouseManager`</ph> class maintains a collection of <ph id="ph2">`CView`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each view is identified by a name and by an ID.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These views are shown in the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The user can change the command that is associated with any view through the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The associated command is executed when the user double-clicks in that view.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To support this from a coding perspective, you must process the <ph id="ph1">`WM_LBUTTONDBLCLK`</ph> message and call the <bpt id="p1">[</bpt>CWinAppEx::OnViewDoubleClick<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__onviewdoubleclick)</ept> function in the code for that <ph id="ph2">`CView`</ph> object..</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You should not create a <ph id="ph1">`CMouseManager`</ph> object manually.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It will be created by the framework of your application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It will also be destroyed automatically when the user exits the application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To get a pointer to the mouse manager for your application, call <bpt id="p1">[</bpt>CWinAppEx::GetMouseManager<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__getmousemanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMouseManager<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxmousemanager.h</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__addview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::AddView</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Registers a <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept> object with the <bpt id="p2">[</bpt>CMouseManager Class<ept id="p2">](../../mfc/reference/cmousemanager-class.md)</ept> to support custom mouse behavior.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iViewId`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A view ID.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiViewNameResId`</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A resource string ID that references the view name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiIconId`</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A view icon ID.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iId`</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A view ID.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszViewName`</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A view name.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In order to support custom mouse behavior, a view must be registered with the <ph id="ph1">`CMouseManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Any object derived from the <ph id="ph1">`CView`</ph> class can be registered with the mouse manager.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The string and icon associated with a view are displayed in the <bpt id="p1">**</bpt>Mouse<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the programmer to create and maintain view IDs such as <ph id="ph1">`iViewId`</ph> and <ph id="ph2">`iId`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information about how to provide custom mouse behavior, see <bpt id="p1">[</bpt>Keyboard and Mouse Customization<ept id="p1">](../../mfc/keyboard-and-mouse-customization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to retrieve a pointer to a <ph id="ph1">`CMouseManager`</ph> object by using the <ph id="ph2">`CWinAppEx::GetMouseManager`</ph> method and the <ph id="ph3">`AddView`</ph> method in the <ph id="ph4">`CMouseManager`</ph> class.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>State Collection sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_StateCollection#4<ept id="p2">](../../mfc/reference/codesnippet/cpp/cmousemanager-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__getviewdblclickcommand"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::GetViewDblClickCommand</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the command that is executed when the user double-clicks inside the provided view.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iId`</ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The view ID.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The command identifier if the view is associated with a command; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__getviewiconid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::GetViewIconId</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Retrieves the icon associated with a view ID.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iViewId`</ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The view ID.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An icon resource identifier if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This method will fail if the view is not first registered by using <bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](#cmousemanager__addview)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__getviewidbyname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::GetViewIdByName</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Retrieves the view ID associated with a view name.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszName`</ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The view name.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A view ID if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This method searches through views registered by using <bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](#cmousemanager__addview)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__getviewnames"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::GetViewNames</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Retrieves a list of all the registered view names.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`listOfNames`</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`CStringList`</ph> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This method fills the parameter <ph id="ph1">`listOfNames`</ph> with the names of all the views registered by using <bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](#cmousemanager__addview)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__loadstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::LoadState</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Loads the state of the <bpt id="p1">[</bpt>CMouseManager Class<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept> from the registry.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszProfileName`</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A path of a registry key.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The state information loaded from the registry includes the registered views, view identifiers, and the associated commands.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If the parameter <ph id="ph1">`lpszProfileName`</ph> is <ph id="ph2">`NULL`</ph>, this function loads the <ph id="ph3">`CMouseManager`</ph> data from the default registry location controlled by the <bpt id="p1">[</bpt>CWinAppEx Class<ept id="p1">](../../mfc/reference/cwinappex-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In most cases, you do not have to call this function directly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It is called as a part of the workspace initialization process.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information about the workspace initialization process, see <bpt id="p1">[</bpt>CWinAppEx::LoadState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__savestate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::SaveState</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Writes the state of the <bpt id="p1">[</bpt>CMouseManager Class<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept> to the registry.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszProfileName`</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A path of a registry key.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The state information written to the registry includes all registered views, view identifiers, and the associated commands.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the parameter <ph id="ph1">`lpszProfileName`</ph> is <ph id="ph2">`NULL`</ph>, this function writes the <ph id="ph3">`CMouseManager`</ph> data to the default registry location controlled by the <bpt id="p1">[</bpt>CWinAppEx Class<ept id="p1">](../../mfc/reference/cwinappex-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In most cases, you do not have to call this function directly.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It is called as a part of the workspace serialization process.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more information about the workspace serialization process, see <bpt id="p1">[</bpt>CWinAppEx::SaveState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cmousemanager__setcommandfordblclk"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CMouseManager::SetCommandForDblClk</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Associates a custom command with a view that is first registered with the mouse manager.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iViewId`</ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The view identifier.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uiCmd`</ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The command identifier.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In order to associate a custom command with a view, you must first register the view by using <bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](#cmousemanager__addview)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddView`</ph> method requires a view identifier as an input parameter.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Once you register a view, you can call <ph id="ph1">`CMouseManager::SetCommandForDblClk`</ph> with the same view identifier input parameter that you supplied to <ph id="ph2">`AddView`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Thereafter, when the user double-clicks the mouse in the registered view, the application will execute the command indicated by <ph id="ph1">`uiCmd.`</ph> To support the custom mouse behavior, you will also need to customize the view registered with the mouse manager.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For more information about custom mouse behavior, see [Keyboard and Mouse Customization]--brokenlink--(../mouse-and-keyboard-customization.md).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`uiCmd`</ph> is set to 0, the specified view is no longer associated with a command.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWinAppEx Class<ept id="p1">](../../mfc/reference/cwinappex-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Keyboard and Mouse Customization<ept id="p1">](../../mfc/keyboard-and-mouse-customization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>