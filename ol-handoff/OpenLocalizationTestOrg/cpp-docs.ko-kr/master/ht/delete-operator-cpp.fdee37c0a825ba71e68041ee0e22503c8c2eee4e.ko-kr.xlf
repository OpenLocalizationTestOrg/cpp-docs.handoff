<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8eb1f307053da35aad92fd425d5b58b5fb550c95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\delete-operator-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35460c6905c9c483f7d95a8cfa3b6217874a93ed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62507057c72ad76fdd695d7f9c2a1306b8e36945</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>delete Operator (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>delete Operator (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Deallocates a block of memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>cast-expression<ept id="p1">*</ept> argument must be a pointer to a block of memory previously allocated for an object created with the <bpt id="p2">[</bpt>new operator<ept id="p2">](../cpp/new-operator-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator has a result of type <ph id="ph1">`void`</ph> and therefore does not return a value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> on a pointer to an object not allocated with <bpt id="p2">**</bpt>new<ept id="p2">**</ept> gives unpredictable results.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can, however, use <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> on a pointer with the value 0.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This provision means that, when <bpt id="p1">**</bpt>new<ept id="p1">**</ept> returns 0 on failure, deleting the result of a failed <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operation is harmless.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>The new and delete Operators<ept id="p1">](../cpp/new-and-delete-operators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> and <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> operators can also be used for built-in types, including arrays.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pointer`</ph> refers to an array, place empty brackets before <ph id="ph2">`pointer`</ph>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator on an object deallocates its memory.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A program that dereferences a pointer after the object is deleted can have unpredictable results or crash.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> is used to deallocate memory for a C++ class object, the object's destructor is called before the object's memory is deallocated (if the object has a destructor).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the operand to the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator is a modifiable l-value, its value is undefined after the object is deleted.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using delete</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are two syntactic variants for the <bpt id="p1">[</bpt>delete operator<ept id="p1">](../cpp/delete-operator-cpp.md)</ept>: one for single objects and the other for arrays of objects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how these differ:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following two cases produce undefined results: using the array form of delete (delete [ ]) on an object and using the nonarray form of delete on an array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For examples of using <bpt id="p1">**</bpt>delete<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>new operator<ept id="p2">](../cpp/new-operator-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How delete works</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The delete operator invokes the function <bpt id="p1">**</bpt>operator delete<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For objects not of class type (<bpt id="p1">[</bpt>class<ept id="p1">](../cpp/class-cpp.md)</ept>, <bpt id="p2">[</bpt>struct<ept id="p2">](../cpp/struct-cpp.md)</ept>, or <bpt id="p3">[</bpt>union<ept id="p3">](../cpp/unions.md)</ept>), the global delete operator is invoked.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For objects of class type, the name of the deallocation function is resolved in global scope if the delete expression begins with the unary scope resolution operator (::).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Otherwise, the delete operator invokes the destructor for an object prior to deallocating memory (if the pointer is not null).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The delete operator can be defined on a per-class basis; if there is no such definition for a given class, the global operator delete is invoked.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the delete expression is used to deallocate a class object whose static type has a virtual destructor, the deallocation function is resolved through the virtual destructor of the dynamic type of the object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>new and delete Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>