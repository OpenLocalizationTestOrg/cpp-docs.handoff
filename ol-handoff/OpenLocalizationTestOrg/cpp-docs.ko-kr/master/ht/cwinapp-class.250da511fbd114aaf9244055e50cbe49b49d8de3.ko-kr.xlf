<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebbb4ece731a762741f44816ac753e6cf4347231</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwinapp-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98a6267b13420d7e4bdeacd88ee8a1be8d745c88</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ec0707e70a8fc98b3b242a962d6f1591a4e36ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWinApp Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWinApp Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class from which you derive a Windows application object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CWinApp::CWinApp</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinApp`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CWinApp::AddDocTemplate</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a document template to the application's list of available document templates.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CWinApp::AddToRecentFileList</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds a filename to the most recently used (MRU) file list.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CWinApp::ApplicationRecoveryCallback</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Called by the framework when the application unexpectedly exits.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CWinApp::CloseAllDocuments</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Closes all open documents.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CWinApp::CreatePrinterDC</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a printer device context.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CWinApp::DelRegTree</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Deletes a specified key and all its subkeys.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CWinApp::DoMessageBox</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Implements <bpt id="p1">[</bpt>AfxMessageBox<ept id="p1">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept> for the application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CWinApp::DoWaitCursor</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Turns the wait cursor on and off.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableD2DSupport</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Enables application <ph id="ph1">`D2D`</ph> support.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call this method before the main window is initialized.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableHtmlHelp</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implements HTMLHelp for the application, rather than WinHelp.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableTaskbarInteraction</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Enables Taskbar interaction.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CWinApp::ExitInstance</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Override to clean up when your application terminates.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRecoveryParameter</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Retrieves the input parameter for the application recovery method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRecoveryPingInterval</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns the length of time that the restart manager waits for the recovery callback function to return.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRestartFlags</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the flags for the restart manager.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CWinApp::GetAppRegistryKey</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns key for HKEY_CURRENT_USER<ph id="ph1">\\</ph>"Software"\RegistryKey\ProfileName.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CWinApp::GetDataRecoveryHandler</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets the data recovery handler for this instance of the application.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CWinApp::GetFirstDocTemplatePosition</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Retrieves the position of the first document template.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CWinApp::GetHelpMode</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the type of help used by the application.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CWinApp::GetNextDocTemplate</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Retrieves the position of a document template.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Can be used recursively.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CWinApp::GetPrinterDeviceDefaults</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the printer device defaults.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileBinary</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves binary data from an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileInt</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves an integer from an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileString</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves a string from an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CWinApp::GetSectionKey</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns key for HKEY_CURRENT_USER<ph id="ph1">\\</ph>"Software"\RegistryKey\AppName\lpszSection.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CWinApp::HideApplication</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Hides the application before closing all documents.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CWinApp::HtmlHelp</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`HTMLHelp`</ph> Windows function.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CWinApp::InitInstance</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Override to perform Windows instance initialization, such as creating your window objects.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CWinApp::IsTaskbarInteractionEnabled</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Tells whether Windows 7 Taskbar interaction is enabled.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadCursor</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Loads a cursor resource.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadIcon</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Loads an icon resource.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadOEMCursor</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Loads a Windows OEM predefined cursor that the <bpt id="p1">**</bpt>OCR_<ept id="p1">**</ept> constants specify in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadOEMIcon</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Loads a Windows OEM predefined icon that the <bpt id="p1">**</bpt>OIC_<ept id="p1">**</ept> constants specify in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStandardCursor</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Loads a Windows predefined cursor that the <bpt id="p1">**</bpt>IDC_<ept id="p1">**</ept> constants specify in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStandardIcon</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Loads a Windows predefined icon that the <bpt id="p1">**</bpt>IDI_<ept id="p1">**</ept> constants specify in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CWinApp::OnDDECommand</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a dynamic data exchange (DDE) execute command.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CWinApp::OnIdle</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Override to perform application-specific idle-time processing.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CWinApp::OpenDocumentFile</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Called by the framework to open a document from a file.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CWinApp::ParseCommandLine</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Parses individual parameters and flags in the command line.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CWinApp::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Filters messages before they are dispatched to the Windows functions <bpt id="p1">[</bpt>TranslateMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p2">[</bpt>DispatchMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessMessageFilter</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Intercepts certain messages before they reach the application.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessShellCommand</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Handles command-line arguments and flags.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessWndProcException</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Intercepts all unhandled exceptions thrown by the application's message and command handlers.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWinApp::Register</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Performs customized registration.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CWinApp::RegisterWithRestartManager</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Registers the application with the restart manager.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CWinApp::ReopenPreviousFilesAtRestart</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CWinApp::RestartInstance</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Handles an application restart initiated by the restart manager.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CWinApp::RestoreAutosavedFilesAtRestart</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager restores the autosaved files when it restarts the application.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CWinApp::Run</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Runs the default message loop.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Override to customize the message loop.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CWinApp::RunAutomated</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Tests the application's command line for the <bpt id="p1">**</bpt>/Automation<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Obsolete.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Instead, use the value in <bpt id="p1">[</bpt>CCommandLineInfo::m_bRunAutomated<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunautomated)</ept> after calling <bpt id="p2">[</bpt>ParseCommandLine<ept id="p2">](#cwinapp__parsecommandline)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CWinApp::RunEmbedded</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Tests the application's command line for the <bpt id="p1">**</bpt>/Embedding<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Obsolete.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Instead, use the value in <bpt id="p1">[</bpt>CCommandLineInfo::m_bRunEmbedded<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunembedded)</ept> after calling <bpt id="p2">[</bpt>ParseCommandLine<ept id="p2">](#cwinapp__parsecommandline)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CWinApp::SaveAllModified</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Prompts the user to save all modified documents.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CWinApp::SelectPrinter</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Selects a printer previously indicated by a user through a print dialog box.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CWinApp::SetHelpMode</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Sets and initializes the type of help used by the application.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsApplicationRecovery</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager recovers an application that exited unexpectedly.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsAutosaveAtInterval</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager autosaves open documents at a regular interval.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsAutosaveAtRestart</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager autosaves any open documents when the application restarts.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsRestartManager</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Determines whether the application supports the restart manager.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CWinApp::Unregister</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Unregisters everything known to be registered by the <ph id="ph1">`CWinApp`</ph> object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CWinApp::WinHelp</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`WinHelp`</ph> Windows function.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileBinary</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Writes binary data to an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileInt</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Writes an integer to an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileString</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Writes a string to an entry in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableShellOpen</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Allows the user to open data files from the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStdProfileSettings</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Loads standard .INI file settings and enables the MRU file list feature.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CWinApp::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Handles SHIFT+F1 Help within the application.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFileNew</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">`ID_FILE_NEW`</ph> command.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFileOpen</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">`ID_FILE_OPEN`</ph> command.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFilePrintSetup</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">`ID_FILE_PRINT_SETUP`</ph> command.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelp</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Handles F1 Help within the application (using the current context).</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpFinder</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_FINDER`</ph> and <ph id="ph2">`ID_DEFAULT_HELP`</ph> commands.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpIndex</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_INDEX`</ph> command and provides a default Help topic.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpUsing</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_USING`</ph> command.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CWinApp::RegisterShellFileTypes</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Registers all the application's document types with the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CWinApp::SetAppID</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Explicitly sets Application User Model ID for the application.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This method should be called before any user interface is presented to user (the best place is the application constructor).</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CWinApp::SetRegistryKey</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Causes application settings to be stored in the registry instead of .INI files.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CWinApp::UnregisterShellFileTypes</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Unregisters all the application's document types with the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CWinApp::m_bHelpMode</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Indicates if the user is in Help context mode (typically invoked with SHIFT+F1).</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CWinApp::m_eHelpType</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Specifies the type of help used by the application.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CWinApp::m_hInstance</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Identifies the current instance of the application.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CWinApp::m_lpCmdLine</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the command line for the application.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CWinApp::m_nCmdShow</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifies how the window is to be shown initially.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pActiveWnd</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Pointer to the main window of the container application when an OLE server is in-place active.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszAppID</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Application User Model ID.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszAppName</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Specifies the name of the application.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszExeName</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The module name of the application.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszHelpFilePath</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The path to the application's Help file.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszProfileName</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The application's .INI filename.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszRegistryKey</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Used to determine the full registry key for storing application profile settings.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Protected Data Members</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CWinApp::m_dwRestartManagerSupportFlags</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Flags that determine how the restart manager behaves.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>CWinApp::m_nAutosaveInterval</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The length of time in milliseconds between autosaves.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pDataRecoveryHandler</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Pointer to the data recovery handler for the application.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An application object provides member functions for initializing your application (and each instance of it) and for running the application.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Each application that uses the Microsoft Foundation classes can only contain one object derived from <ph id="ph1">`CWinApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This object is constructed when other C++ global objects are constructed and is already available when Windows calls the <ph id="ph1">`WinMain`</ph> function, which is supplied by the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Declare your derived <ph id="ph1">`CWinApp`</ph> object at the global level.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>When you derive an application class from <ph id="ph1">`CWinApp`</ph>, override the <bpt id="p1">[</bpt>InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> member function to create your application's main window object.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In addition to the <ph id="ph1">`CWinApp`</ph> member functions, the Microsoft Foundation Class Library provides the following global functions to access your <ph id="ph2">`CWinApp`</ph> object and other global information:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxGetApp<ept id="p1">](application-information-and-management.md#afxgetapp)</ept> Obtains a pointer to the <ph id="ph1">`CWinApp`</ph> object.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxGetInstanceHandle<ept id="p1">](application-information-and-management.md#afxgetinstancehandle)</ept> Obtains a handle to the current application instance.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxGetResourceHandle<ept id="p1">](application-information-and-management.md#afxgetresourcehandle)</ept> Obtains a handle to the application's resources.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxGetAppName<ept id="p1">](application-information-and-management.md#afxgetappname)</ept> Obtains a pointer to a string containing the application's name.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Alternately, if you have a pointer to the <ph id="ph1">`CWinApp`</ph> object, use <ph id="ph2">`m_pszExeName`</ph> to get the application's name.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp: The Application Class<ept id="p1">](../../mfc/cwinapp-the-application-class.md)</ept> for more on the <ph id="ph1">`CWinApp`</ph> class, including an overview of the following:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>-derived code written by the Application Wizard.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>'s role in the execution sequence of your application.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>'s default member function implementations.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>'s key overridables.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m_hPrevInstance<ept id="p1">**</ept> data member no longer exists.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For information on detecting a previous instance of <ph id="ph1">`CWinApp`</ph>, see the Knowledge Base article "How To Identify a Previous Instance of an Application" (KB106385) at <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;106385<ept id="p1">](http://support.microsoft.com/default.aspxscid=kb;en-us;106385)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CWinThread</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>CWinApp::AddDocTemplate</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Call this member function to add a document template to the list of available document templates that the application maintains.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CDocTemplate`</ph> to be added.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You should add all document templates to an application before you call <bpt id="p1">[</bpt>RegisterShellFileTypes<ept id="p1">](#cwinapp__registershellfiletypes)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#35</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>CWinApp::AddToRecentFileList</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Call this member function to add <ph id="ph1">`lpszPathName`</ph> to the MRU file list.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The path of the file.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You should call the <bpt id="p1">[</bpt>LoadStdProfileSettings<ept id="p1">](#cwinapp__loadstdprofilesettings)</ept> member function to load the current MRU file list before you use this member function.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when it opens a file or executes the Save As command to save a file with a new name.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#36</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CWinApp::ApplicationRecoveryCallback</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Called by the framework when the application unexpectedly exits.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>0 if this method is successful; nonzero if an error occurs.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If your application supports the restart manager, the framework calls this function when your application unexpectedly exits.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`ApplicationRecoveryCallback`</ph> uses the <ph id="ph2">`CDataRecoveryHandler`</ph> to save the list of currently open documents to the registry.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>This method does not autosave any files.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>To customize the behavior, override this function in a derived <bpt id="p1">[</bpt>CWinApp Class<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> or pass your own application recovery method as a parameter to <bpt id="p2">[</bpt>CWinApp::RegisterWithRestartManager<ept id="p2">](#cwinapp__registerwithrestartmanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CWinApp::CloseAllDocuments</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Call this member function to close all open documents before exiting.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Specifies whether or not the Windows session is being ended.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the session is being ended; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>HideApplication<ept id="p1">](#cwinapp__hideapplication)</ept> before calling <ph id="ph1">`CloseAllDocuments`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>CWinApp::CreatePrinterDC</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Call this member function to create a printer device context (DC) from the selected printer.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A reference to a printer device context.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Nonzero if the printer device context is created successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>initializes the device context that you pass in by reference, so you can use it to print.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If the function is successful, when you have finished printing, you must destroy the device context.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>You can let the destructor of the <bpt id="p1">[</bpt>CDC<ept id="p1">](../../mfc/reference/cdc-class.md)</ept> object do it, or you can do it explicitly by calling <bpt id="p2">[</bpt>CDC::DeleteDC<ept id="p2">](../../mfc/reference/cdc-class.md#cdc__deletedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CWinApp::CWinApp</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinApp`</ph> object and passes <ph id="ph2">`lpszAppName`</ph> to be stored as the application name.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A null-terminated string that contains the application name that Windows uses.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If this argument is not supplied or is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph1">`CWinApp`</ph> uses the resource string <bpt id="p2">**</bpt>AFX_IDS_APP_TITLE<ept id="p2">**</ept> or the filename of the executable file.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>You should construct one global object of your <ph id="ph1">`CWinApp`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>You can have only one <ph id="ph1">`CWinApp`</ph> object in your application.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The constructor stores a pointer to the <ph id="ph1">`CWinApp`</ph> object so that <ph id="ph2">`WinMain`</ph> can call the object's member functions to initialize and run the application.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>CWinApp::DelRegTree</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Deletes a specific registry key and all its subkeys.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>hParentKey</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Handle to a registry key.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>strKeyName</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The name of the registry key to be deleted.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>pTM</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is a nonzero error code defined in Winerror.h.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Call this function to delete the specified key and its subkeys.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>CWinApp::DoMessageBox</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to implement a message box for the global function <bpt id="p1">[</bpt>AfxMessageBox<ept id="p1">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>lpszPrompt</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Address of text in the message box.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The message box <bpt id="p1">[</bpt>style<ept id="p1">](../../mfc/reference/message-box-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>An index to a Help context string.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Returns the same values as <ph id="ph1">`AfxMessageBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Do not call this member function to open a message box; use <ph id="ph1">`AfxMessageBox`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Override this member function to customize your application-wide processing of <ph id="ph1">`AfxMessageBox`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CWinApp::DoWaitCursor</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to implement <bpt id="p1">[</bpt>CWaitCursor<ept id="p1">](../../mfc/reference/cwaitcursor-class.md)</ept>, <bpt id="p2">[</bpt>CCmdTarget::BeginWaitCursor<ept id="p2">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor)</ept>, <bpt id="p3">[</bpt>CCmdTarget::EndWaitCursor<ept id="p3">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor)</ept>, and <bpt id="p4">[</bpt>CCmdTarget::RestoreWaitCursor<ept id="p4">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)</ept>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If this parameter is 1, a wait cursor appears.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If 0, the wait cursor is restored without incrementing the reference count.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>If –1, the wait cursor ends.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The default implements an hourglass cursor.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>maintains a reference count.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>When positive, the hourglass cursor is displayed.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>While you would not normally call <ph id="ph1">`DoWaitCursor`</ph> directly, you could override this member function to change the wait cursor or to do additional processing while the wait cursor is displayed.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>For an easier, more streamlined way to implement a wait cursor, use <ph id="ph1">`CWaitCursor`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#37</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableD2DSupport</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Enables application D2D support.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Call this method before the main window is initialized.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The threading model of the D2D factory and the resources it creates.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>A value that specifies whether the write factory object will be shared or isolated</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Returns TRUE if D2D support was enabled, FALSE - otherwise</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableHtmlHelp</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Call this member function from within the constructor of your <ph id="ph1">`CWinApp`</ph>-derived class to use HTMLHelp for your application's help.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableShellOpen</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Call this function, typically from your <ph id="ph1">`InitInstance`</ph> override, to enable your application's users to open data files when they double-click the files from within the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`RegisterShellFileTypes`</ph> member function in conjunction with this function, or provide a .REG file with your application for manual registration of document types.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#38</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>CWinApp::EnableTaskbarInteraction</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Enables Taskbar interaction.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Specifies whether interaction with Windows 7 taskbar should be enabled ( <ph id="ph1">`TRUE`</ph>), or disabled ( <ph id="ph2">`FALSE`</ph>).</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if taskbar interaction can be enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>This method must be called before creation of main window, otherwise it asserts and returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>CWinApp::ExitInstance</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Called by the framework from within the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> member function to exit this instance of the application.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The application's exit code; 0 indicates no errors, and values greater than 0 indicate an error.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>This value is used as the return value from <ph id="ph1">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Do not call this member function from anywhere but within the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The default implementation of this function writes framework options to the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Override this function to clean up when your application terminates.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#39</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRecoveryParameter</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Retrieves the input parameter for the application recovery method.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The default input parameter for the application recovery method.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The default behavior of this function returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id="p1">](#cwinapp__applicationrecoverycallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRecoveryPingInterval</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Returns the length of time that the restart manager waits for the recovery callback function to return.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The length of time in milliseconds.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>When an application that is registered with the restart manager exits unexpectedly, the application tries to save open documents and calls the recovery callback function.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The default recovery callback function is <bpt id="p1">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id="p1">](#cwinapp__applicationrecoverycallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The length of time that the framework waits for the recovery callback function to return is the ping interval.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>You can customize the ping interval by overriding <ph id="ph1">`CWinApp::GetApplicationRecoveryPingInterval`</ph> or by providing a custom value to <ph id="ph2">`RegisterWithRestartManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>CWinApp::GetApplicationRestartFlags</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Returns the flags for the restart manager.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The flags for the restart manager.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The default implementation returns 0.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The flags for the restart manager have no effect with the default implementation.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>They are provided for future use.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>You set the flags when you register the application with the restart manager by using <bpt id="p1">[</bpt>CWinApp::RegisterWithRestartManager<ept id="p1">](#cwinapp__registerwithrestartmanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The possible values for the restart manager flags are as follows:</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>CWinApp::GetAppRegistryKey</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Returns the key for HKEY_CURRENT_USER<ph id="ph1">\\</ph>"Software"\RegistryKey\ProfileName.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Application key if the function succeeds; otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>CWinApp::GetDataRecoveryHandler</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Gets the data recovery handler for this instance of the application.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The data recovery handler for this instance of the application.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Each application that uses the restart manager must have one instance of the <bpt id="p1">[</bpt>CDataRecoveryHandler Class<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This class is responsible for monitoring open documents and autosaving files.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The behavior of the <ph id="ph1">`CDataRecoveryHandler`</ph> depends on the configuration of the restart manager.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDataRecoveryHandler Class<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`NULL`</ph> on operating systems earlier than <ph id="ph2">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The restart manager is not supported on operating systems earlier than <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If the application does not currently have a data recovery handler, this method creates one and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>CWinApp::GetFirstDocTemplatePosition</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Gets the position of the first document template in the application.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned in a call to <bpt id="p2">[</bpt>GetNextDocTemplate<ept id="p2">](#cwinapp__getnextdoctemplate)</ept> to get the first <bpt id="p3">[</bpt>CDocTemplate<ept id="p3">](../../mfc/reference/cdoctemplate-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>CWinApp::GetHelpMode</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Retrieves the type of help used by the application.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The help type used by the application.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::m_eHelpType<ept id="p1">](#cwinapp__m_ehelptype)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>CWinApp::GetNextDocTemplate</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Gets the document template identified by <ph id="ph1">`pos`</ph>, then sets <ph id="ph2">`pos`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous call to <ph id="ph1">`GetNextDocTemplate`</ph> or <bpt id="p2">[</bpt>GetFirstDocTemplatePosition<ept id="p2">](#cwinapp__getfirstdoctemplateposition)</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The value is updated to the next position by this call.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CDocTemplate<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNextDocTemplate`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id="ph2">`GetFirstDocTemplatePosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value is valid.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>If the retrieved document template is the last available, then the new value of <ph id="ph1">`pos`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>CWinApp::GetPrinterDeviceDefaults</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Call this member function to prepare a printer device context for printing.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>pPrintDlg</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>PRINTDLG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Retrieves the current printer defaults from the Windows .INI file as necessary, or uses the last printer configuration set by the user in Print Setup.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#40</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileBinary</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve binary data from an entry within a specified section of the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>lpszSection</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>lpszEntry</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry whose value is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>ppData</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Points to a pointer that will receive the address of the data.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>pBytes</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Points to a UINT that will receive the size of the data (in bytes).</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>This member function is not case sensitive, so the strings in the <bpt id="p1">*</bpt>lpszSection<ept id="p1">*</ept> and <bpt id="p2">*</bpt>lpszEntry<ept id="p2">*</ept> parameters may differ in case.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetProfileBinary<ept id="p1">**</ept> allocates a buffer and returns its address in <ph id="ph1">\*</ph> <bpt id="p2">*</bpt>ppData<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The caller is responsible for freeing the buffer using <bpt id="p1">**</bpt>delete []<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#41</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>For an additional example, see <bpt id="p1">[</bpt>CWinApp::WriteProfileBinary<ept id="p1">](#cwinapp__writeprofilebinary)</ept>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileInt</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the value of an integer from an entry within a specified section of the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry whose value is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Specifies the default value to return if the framework cannot find the entry.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The integer value of the string that follows the specified entry if the function is successful.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The return value is the value of the <ph id="ph1">`nDefault`</ph> parameter if the function does not find the entry.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The return value is 0 if the value that corresponds to the specified entry is not an integer.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>This member function supports hexadecimal notation for the value in the .INI file.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>When you retrieve a signed integer, you should cast the value into an <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>This member function is not case sensitive, so the strings in the <ph id="ph1">`lpszSection`</ph> and <ph id="ph2">`lpszEntry`</ph> parameters may differ in case.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#42</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>For an additional example, see <bpt id="p1">[</bpt>CWinApp::WriteProfileInt<ept id="p1">](#cwinapp__writeprofileint)</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>CWinApp::GetProfileString</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the string associated with an entry within the specified section in the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry whose string is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>This value must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Points to the default string value for the given entry if the entry cannot be found in the initialization file.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The return value is the string from the application's .INI file or <ph id="ph1">`lpszDefault`</ph> if the string cannot be found.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The maximum string length supported by the framework is <ph id="ph1">`_MAX_PATH`</ph>.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszDefault`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the return value is an empty string.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#43</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>For another example, see the example for <bpt id="p1">[</bpt>CWinApp::GetProfileInt<ept id="p1">](#cwinapp__getprofileint)</ept>.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>CWinApp::GetSectionKey</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Returns the key for HKEY_CURRENT_USER<ph id="ph1">\\</ph>"Software"\RegistryKey\AppName\lpszSection.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The name of the key to be obtained.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Section key if the function succeeds; otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>CWinApp::HideApplication</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Call this member function to hide an application before closing the open documents.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>CWinApp::HtmlHelp</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Call this member function to invoke the HTMLHelp application.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Specifies additional data.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The value used depends on the value of the <ph id="ph1">`nCmd`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Specifies the type of help requested.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>For a list of possible values and how they affect the <ph id="ph1">`dwData`</ph> parameter, see the <ph id="ph2">`uCommand`</ph> parameter described in About the HTMLHelp API Function in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The framework also calls this function to invoke the HTMLHelp application.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The framework will automatically close the HTMLHelp application when your application terminates.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>CWinApp::InitInstance</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Windows allows several copies of the same program to run at the same time.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Nonzero if initialization is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Application initialization is conceptually divided into two sections: one-time application initialization that is done the first time the program runs, and instance initialization that runs each time a copy of the program runs, including the first time.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>The framework's implementation of <ph id="ph1">`WinMain`</ph> calls this function.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`InitInstance`</ph> to initialize each new instance of your application running under Windows.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Typically, you override <ph id="ph1">`InitInstance`</ph> to construct your main window object and set the <ph id="ph2">`CWinThread::m_pMainWnd`</ph> data member to point to that window.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>For more information on overriding this member function, see <bpt id="p1">[</bpt>CWinApp: The Application Class<ept id="p1">](../../mfc/cwinapp-the-application-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>MFC applications must be initialized as single threaded apartment (STA).</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CoInitializeEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms695279)</ept> in your <ph id="ph1">`InitInstance`</ph> override, specify <ph id="ph2">`COINIT_APARTMENTTHREADED`</ph> (rather than <ph id="ph3">`COINIT_MULTITHREADED`</ph>).</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;828643<ept id="p1">](http://support.microsoft.com/default.aspxscid=kb;en-us;828643)</ept>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>NVC_MFCListView#9</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>CWinApp::IsTaskbarInteractionEnabled</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Tells whether Windows 7 Taskbar interaction is enabled.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if <ph id="ph2">`EnableTaskbarInteraction`</ph> has been called and the Operating System is Windows 7 or higher.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Taskbar interaction means that MDI application displays the content of MDI children in separate tabbed thumbnails that appear when the mouse pointer is over the application taskbar button.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadCursor</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Loads the cursor resource named by <ph id="ph1">`lpszResourceName`</ph> or specified by <ph id="ph2">`nIDResource`</ph> from the current executable file.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the name of the cursor resource.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`CString`</ph> for this argument.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>ID of the cursor resource.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>For a list of resources, see <bpt id="p1">[</bpt>LoadCursor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648391)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>A handle to a cursor if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>loads the cursor into memory only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>LoadStandardCursor<ept id="p1">](#cwinapp__loadstandardcursor)</ept> or <bpt id="p2">[</bpt>LoadOEMCursor<ept id="p2">](#cwinapp__loadoemcursor)</ept> member function to access the predefined Windows cursors.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#44</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadIcon</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Loads the icon resource named by <ph id="ph1">`lpszResourceName`</ph> or specified by <ph id="ph2">`nIDResource`</ph> from the executable file.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the name of the icon resource.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>You can also use a <ph id="ph1">`CString`</ph> for this argument.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>ID number of the icon resource.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>A handle to an icon if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>loads the icon only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>LoadStandardIcon<ept id="p1">](#cwinapp__loadstandardicon)</ept> or <bpt id="p2">[</bpt>LoadOEMIcon<ept id="p2">](#cwinapp__loadoemicon)</ept> member function to access the predefined Windows icons.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>This member function calls the Win32 API function <bpt id="p1">[</bpt>LoadIcon<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648072)</ept>, which can only load an icon whose size conforms to the <bpt id="p2">**</bpt>SM_CXICON<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SM_CYICON<ept id="p3">**</ept> system metric values.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadOEMCursor</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Loads the Windows predefined cursor resource specified by <ph id="ph1">`nIDCursor`</ph>.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>OCR_<ept id="p1">**</ept> manifest constant identifier that specifies a predefined Windows cursor.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>You must have <bpt id="p1">**</bpt>#define OEMRESOURCE<ept id="p1">**</ept> before <bpt id="p2">**</bpt>#include <ph id="ph1">\&lt;</ph>afxwin.h&gt;<ept id="p2">**</ept> to gain access to the <bpt id="p3">**</bpt>OCR_<ept id="p3">**</ept> constants in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>A handle to a cursor if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`LoadOEMCursor`</ph> or <bpt id="p1">[</bpt>LoadStandardCursor<ept id="p1">](#cwinapp__loadstandardcursor)</ept> member function to access the predefined Windows cursors.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#45</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#46</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadOEMIcon</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Loads the Windows predefined icon resource specified by <ph id="ph1">`nIDIcon`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>OIC_<ept id="p1">**</ept> manifest constant identifier that specifies a predefined Windows icon.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>You must have <bpt id="p1">**</bpt>#define OEMRESOURCE<ept id="p1">**</ept> before <bpt id="p2">**</bpt>#include <ph id="ph1">\&lt;</ph>afxwin.h&gt;<ept id="p2">**</ept> to access the <bpt id="p3">**</bpt>OIC_<ept id="p3">**</ept> constants in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>A handle to an icon if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`LoadOEMIcon`</ph> or <bpt id="p1">[</bpt>LoadStandardIcon<ept id="p1">](#cwinapp__loadstandardicon)</ept> member function to access the predefined Windows icons.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStandardCursor</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Loads the Windows predefined cursor resource that <ph id="ph1">`lpszCursorName`</ph> specifies.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IDC_<ept id="p1">**</ept> manifest constant identifier that specifies a predefined Windows cursor.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>These identifiers are defined in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The following list shows the possible predefined values and meanings for <ph id="ph1">`lpszCursorName`</ph>:</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_ARROW<ept id="p1">**</ept> Standard arrow cursor</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_IBEAM<ept id="p1">**</ept> Standard text-insertion cursor</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_WAIT<ept id="p1">**</ept> Hourglass cursor used when Windows performs a time-consuming task</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_CROSS<ept id="p1">**</ept> Cross-hair cursor for selection</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_UPARROW<ept id="p1">**</ept> Arrow that points straight up</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZE<ept id="p1">**</ept> Obsolete and unsupported; use <bpt id="p2">**</bpt>IDC_SIZEALL<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZEALL<ept id="p1">**</ept> A four-pointed arrow.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The cursor to use to resize a window.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_ICON<ept id="p1">**</ept> Obsolete and unsupported.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>IDC_ARROW<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZENWSE<ept id="p1">**</ept> Two-headed arrow with ends at upper left and lower right</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZENESW<ept id="p1">**</ept> Two-headed arrow with ends at upper right and lower left</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZEWE<ept id="p1">**</ept> Horizontal two-headed arrow</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDC_SIZENS<ept id="p1">**</ept> Vertical two-headed arrow</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A handle to a cursor if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`LoadStandardCursor`</ph> or <bpt id="p1">[</bpt>LoadOEMCursor<ept id="p1">](#cwinapp__loadoemcursor)</ept> member function to access the predefined Windows cursors.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#47</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStandardIcon</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Loads the Windows predefined icon resource that <ph id="ph1">`lpszIconName`</ph> specifies.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>A manifest constant identifier that specifies a predefined Windows icon.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>These identifiers are defined in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>For a list of the possible predefined values and their descriptions, see the <bpt id="p1">*</bpt>lpIconName<ept id="p1">*</ept> parameter in <bpt id="p2">[</bpt>LoadIcon<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms648072)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>A handle to an icon if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`LoadStandardIcon`</ph> or <bpt id="p1">[</bpt>LoadOEMIcon<ept id="p1">](#cwinapp__loadoemicon)</ept> member function to access the predefined Windows icons.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>CWinApp::LoadStdProfileSettings</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Call this member function from within the <bpt id="p1">[</bpt>InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> member function to enable and load the list of most recently used (MRU) files and last preview state.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The number of recently used files to track.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nMaxMRU`</ph> is 0, no MRU list will be maintained.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>CWinApp::m_bHelpMode</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the application is in Help context mode (conventionally invoked with SHIFT + F1); otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>In Help context mode, the cursor becomes a question mark and the user can move it about the screen.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Examine this flag if you want to implement special handling when in the Help mode.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>CWinApp::m_dwRestartManagerSupportFlags</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Flags that determine how the restart manager behaves.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>To enable the restart manager, set <ph id="ph1">`m_dwRestartManagerSupportFlags`</ph> to the behavior that you want.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The following table shows the flags that are available.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Flag</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The application is registered by using <bpt id="p1">[</bpt>CWinApp::RegisterWithRestartManager<ept id="p1">](#cwinapp__registerwithrestartmanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The restart manager is responsible for restarting the application if it unexpectedly exits.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The application is registered with the restart manager and the restart manager calls the recovery callback function when it restarts the application.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The default recovery callback function is <bpt id="p1">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id="p1">](#cwinapp__applicationrecoverycallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Autosave is enabled and the restart manager autosaves any open documents when the application restarts.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Autosave is enabled and the restart manager autosaves any open documents at a regular interval.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>The interval is defined by <bpt id="p1">[</bpt>CWinApp::m_nAutosaveInterval<ept id="p1">](#cwinapp__m_nautosaveinterval)</ept>.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>The restart manager opens previously open documents after restarting the application from an unexpected exit.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CDataRecoveryHandler Class<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept> handles storing the list of open documents and restoring them.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The restart manager prompts the user to restore autosaved files after restarting the application.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDataRecoveryHandler`</ph> class queries the user.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The union of <ph id="ph1">`AFX_RESTART_MANAGER_SUPPORT_RESTART`</ph>, <ph id="ph2">`AFX_RESTART_MANAGER_SUPPORT_RECOVER`</ph>, and <ph id="ph3">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>The union of <ph id="ph1">`AFX_RESTART_MANAGER_SUPPORT_NO_AUTOSAVE`</ph>, <ph id="ph2">`AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`</ph>, <ph id="ph3">`AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`</ph>, and <ph id="ph4">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>The union of <ph id="ph1">`AFX_RESTART_MANAGER_SUPPORT_RESTART`</ph>, <ph id="ph2">`AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`</ph>, <ph id="ph3">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>, and <ph id="ph4">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>The union of <ph id="ph1">`AFX_RESTART_MANAGER_SUPPORT_RECOVERY`</ph>, <ph id="ph2">`AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`</ph>, <ph id="ph3">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>, and <ph id="ph4">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>CWinApp::m_eHelpType</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>The type of this data member is the enumerated type <bpt id="p1">**</bpt>AFX_HELP_TYPE<ept id="p1">**</ept>, which is defined within the <ph id="ph1">`CWinApp`</ph> class.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AFX_HELP_TYPE<ept id="p1">**</ept> enumeration is defined as follows:</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>To set the application's help to HTML Help, call <bpt id="p1">[</bpt>SetHelpMode<ept id="p1">](#cwinapp__sethelpmode)</ept> and specify <bpt id="p2">**</bpt>afxHTMLHelp<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>To set the application's help to WinHelp, call <ph id="ph1">`SetHelpMode`</ph> and specify <bpt id="p1">**</bpt>afxWinHelp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>CWinApp::m_hInstance</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Corresponds to the <ph id="ph1">`hInstance`</ph> parameter passed by Windows to <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hInstance`</ph> data member is a handle to the current instance of the application running under Windows.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>This is returned by the global function <bpt id="p1">[</bpt>AfxGetInstanceHandle<ept id="p1">](application-information-and-management.md#afxgetinstancehandle)</ept>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>is a public variable of type <ph id="ph1">`HINSTANCE`</ph>.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#55</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>CWinApp::m_lpCmdLine</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Corresponds to the <ph id="ph1">`lpCmdLine`</ph> parameter passed by Windows to <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the command line for the application.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`m_lpCmdLine`</ph> to access any command-line arguments the user entered when the application was started.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>is a public variable of type <ph id="ph1">`LPTSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#52</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>CWinApp::m_nAutosaveInterval</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The length of time in milliseconds between autosaves.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>You can configure the restart manager to autosave open documents at set intervals.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>If your application does not autosave files, this parameter has no effect.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>CWinApp::m_nCmdShow</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Corresponds to the <ph id="ph1">`nCmdShow`</ph> parameter passed by Windows to <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>You should pass <ph id="ph1">`m_nCmdShow`</ph> as an argument when you call <bpt id="p1">[</bpt>CWnd::ShowWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept> for your application's main window.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>is a public variable of type <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#56</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pActiveWnd</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Use this data member to store a pointer to the main window of the OLE container application that has your OLE server application in-place activated.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>If this data member is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the application is not in-place active.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The framework sets this member variable when the frame window is in-place activated by an OLE container application.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pDataRecoveryHandler</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Pointer to the data recovery handler for the application.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The data recovery handler of an application monitors open documents and autosaves them.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The framework uses the data recovery handler to restore autosaved files when an application restarts after it exits unexpectedly.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDataRecoveryHandler Class<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszAppName</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Specifies the name of the application.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>The application name can come from the parameter passed to the <bpt id="p1">[</bpt>CWinApp<ept id="p1">](#cwinapp__cwinapp)</ept> constructor, or, if not specified, to the resource string with the ID of <bpt id="p2">**</bpt>AFX_IDS_APP_TITLE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>If the application name is not found in the resource, it comes from the program's .EXE filename.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Returned by the global function <bpt id="p1">[</bpt>AfxGetAppName<ept id="p1">](application-information-and-management.md#afxgetappname)</ept>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>const char<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>If you assign a value to <ph id="ph1">`m_pszAppName`</ph>, it must be dynamically allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> destructor calls <bpt id="p1">**</bpt>free<ept id="p1">**</ept>( ) with this pointer.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>You many want to use the <ph id="ph1">`_tcsdup`</ph>( ) run-time library function to do the allocating.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Also, free the memory associated with the current pointer before assigning a new value.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#57</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#65</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszExeName</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Contains the name of the application's executable file without an extension.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>m_pszAppName<ept id="p1">](#cwinapp__m_pszappname)</ept>, this name cannot contain blanks.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>const char<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>If you assign a value to <ph id="ph1">`m_pszExeName`</ph>, it must be dynamically allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> destructor calls <bpt id="p1">**</bpt>free<ept id="p1">**</ept>( ) with this pointer.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>You many want to use the <ph id="ph1">`_tcsdup`</ph>( ) run-time library function to do the allocating.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Also, free the memory associated with the current pointer before assigning a new value.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#58</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszHelpFilePath</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Contains the path to the application's Help file.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>By default, the framework initializes <ph id="ph1">`m_pszHelpFilePath`</ph> to the name of the application with ".HLP" appended.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>To change the name of the help file, set <ph id="ph1">`m_pszHelpFilePath`</ph> to point to a string that contains the complete name of the desired help file.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>A convenient place to do this is in the application's <bpt id="p1">[</bpt>InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> function.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>const char<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>If you assign a value to <ph id="ph1">`m_pszHelpFilePath`</ph>, it must be dynamically allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> destructor calls <bpt id="p1">**</bpt>free<ept id="p1">**</ept>( ) with this pointer.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>You many want to use the <ph id="ph1">`_tcsdup`</ph>( ) run-time library function to do the allocating.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Also, free the memory associated with the current pointer before assigning a new value.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#59</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszProfileName</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Contains the name of the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>const char<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>If you assign a value to <ph id="ph1">`m_pszProfileName`</ph>, it must be dynamically allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> destructor calls <bpt id="p1">**</bpt>free<ept id="p1">**</ept>( ) with this pointer.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>You many want to use the <ph id="ph1">`_tcsdup`</ph>( ) run-time library function to do the allocating.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Also, free the memory associated with the current pointer before assigning a new value.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#60</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszRegistryKey</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Used to determine where, in the registry or INI file, application profile settings are stored.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Normally, this data member is treated as read-only.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The value is stored to a registry key.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The name for the application profile setting is appended to the following registry key: HKEY_CURRENT_USER/Software/LocalAppWizard-Generated/.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>If you assign a value to <ph id="ph1">`m_pszRegistryKey`</ph>, it must be dynamically allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> destructor calls <bpt id="p1">**</bpt>free<ept id="p1">**</ept>( ) with this pointer.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>You many want to use the <ph id="ph1">`_tcsdup`</ph>( ) run-time library function to do the allocating.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Also, free the memory associated with the current pointer before assigning a new value.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#61</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>CWinApp::m_pszAppID</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Application User Model ID.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>CWinApp::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Handles SHIFT+F1 Help within the application.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_CONTEXT_HELP, OnContextHelp )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map and also add an accelerator table entry, typically SHIFT+F1, to enable this member function.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>puts the application into Help mode.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>This member function retrieves the Help context of the object under the cursor and calls the Windows function WinHelp with that Help context.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>CWinApp::OnDDECommand</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Called by the framework when the main frame window receives a DDE execute message.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>lpszCommand</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Points to a DDE command string received by the application.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Nonzero if the command is handled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>The default implementation checks whether the command is a request to open a document and, if so, opens the specified document.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>The Windows File Manager usually sends such DDE command strings when the user double-clicks a data file.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Override this function to handle other DDE execute commands, such as the command to print.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#48</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFileNew</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">`ID_FILE_NEW`</ph> command.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_FILE_NEW, OnFileNew )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>If enabled, this function handles execution of the File New command.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Technical Note 22<ept id="p1">](../../mfc/tn022-standard-commands-implementation.md)</ept> for information on default behavior and guidance on how to override this member function.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#49</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#50</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFileOpen</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">`ID_FILE_OPEN`</ph> command.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_FILE_OPEN, OnFileOpen )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>If enabled, this function handles execution of the File Open command.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>For information on default behavior and guidance on how to override this member function, see <bpt id="p1">[</bpt>Technical Note 22<ept id="p1">](../../mfc/tn022-standard-commands-implementation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#49</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#50</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>CWinApp::OnFilePrintSetup</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Implements the <bpt id="p1">**</bpt>ID_FILE_PRINT_SETUP<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_FILE_PRINT_SETUP, OnFilePrintSetup )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>If enabled, this function handles execution of the File Print command.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>For information on default behavior and guidance on how to override this member function, see <bpt id="p1">[</bpt>Technical Note 22<ept id="p1">](../../mfc/tn022-standard-commands-implementation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#49</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#50</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelp</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Handles F1 Help within the application (using the current context).</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Usually you will also add an accelerator-key entry for the F1 key.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Enabling the F1 key is only a convention, not a requirement.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_HELP, OnHelp )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>If enabled, called by the framework when the user presses the F1 key.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>The default implementation of this message-handler function determines the Help context that corresponds to the current window, dialog box, or menu item and then calls WINHELP.EXE.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>If no context is currently available, the function uses the default context.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Override this member function to set the Help context to something other than the window, dialog box, menu item, or toolbar button that currently has the focus.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`WinHelp`</ph> with the desired Help context ID.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpFinder</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_FINDER<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ID_DEFAULT_HELP<ept id="p2">**</ept> commands.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_HELP_FINDER, OnHelpFinder )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>If enabled, the framework calls this message-handler function when the user of your application selects the Help Finder command to invoke <ph id="ph1">`WinHelp`</ph> with the standard <bpt id="p1">**</bpt>HELP_FINDER<ept id="p1">**</ept> topic.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpIndex</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_INDEX<ept id="p1">**</ept> command and provides a default Help topic.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_HELP_INDEX, OnHelpIndex )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>If enabled, the framework calls this message-handler function when the user of your application selects the Help Index command to invoke <ph id="ph1">`WinHelp`</ph> with the standard <bpt id="p1">**</bpt>HELP_INDEX<ept id="p1">**</ept> topic.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>CWinApp::OnHelpUsing</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_USING<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>You must add an <ph id="ph1">`ON_COMMAND( ID_HELP_USING, OnHelpUsing )`</ph> statement to your <ph id="ph2">`CWinApp`</ph> class message map to enable this member function.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>The framework calls this message-handler function when the user of your application selects the Help Using command to invoke the <ph id="ph1">`WinHelp`</ph> application with the standard <bpt id="p1">**</bpt>HELP_HELPONHELP<ept id="p1">**</ept> topic.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>CWinApp::OnIdle</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Override this member function to perform idle-time processing.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>A counter incremented each time <ph id="ph1">`OnIdle`</ph> is called when the application's message queue is empty.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>This count is reset to 0 each time a new message is processed.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`lCount`</ph> parameter to determine the relative length of time the application has been idle without processing a message.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Nonzero to receive more idle processing time; 0 if no more idle time is needed.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>is called in the default message loop when the application's message queue is empty.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Use your override to call your own background idle-handler tasks.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>should return 0 to indicate that no idle processing time is required.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lCount`</ph> parameter is incremented each time <ph id="ph2">`OnIdle`</ph> is called when the message queue is empty and resets to 0 each time a new message is processed.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>You can call your different idle routines based on this count.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The following summarizes idle loop processing:</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>If the message loop in the Microsoft Foundation Class Library checks the message queue and finds no pending messages, it calls <ph id="ph1">`OnIdle`</ph> for the application object and supplies 0 as the <ph id="ph2">`lCount`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>performs some processing and returns a nonzero value to indicate it should be called again to do further processing.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>The message loop checks the message queue again.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>If no messages are pending, it calls <ph id="ph1">`OnIdle`</ph> again, incrementing the <ph id="ph2">`lCount`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Eventually, <ph id="ph1">`OnIdle`</ph> finishes processing all its idle tasks and returns 0.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>This tells the message loop to stop calling <ph id="ph1">`OnIdle`</ph> until the next message is received from the message queue, at which point the idle cycle restarts with the argument set to 0.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Do not perform lengthy tasks during <ph id="ph1">`OnIdle`</ph> because your application cannot process user input until <ph id="ph2">`OnIdle`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnIdle`</ph> updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Therefore, if you override <ph id="ph1">`OnIdle`</ph>, you must call <ph id="ph2">`CWinApp::OnIdle`</ph> with the <ph id="ph3">`lCount`</ph> in your overridden version.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>First call all base-class idle processing (that is, until the base class <ph id="ph1">`OnIdle`</ph> returns 0).</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper <ph id="ph1">`lCount`</ph> during which to do your work.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>If you do not want <ph id="ph1">`OnIdle`</ph> to be called whenever a message is retrieved from the message queue, you can override the <bpt id="p1">[</bpt>CWinThreadIsIdleMessage<ept id="p1">](../../mfc/reference/cwinthread-class.md#cwinthread__isidlemessage)</ept>.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>If an application has set a very short timer, or if the system is sending the <bpt id="p1">**</bpt>WM_SYSTIMER<ept id="p1">**</ept> message, then <ph id="ph1">`OnIdle`</ph> will be called repeatedly, and degrade performance.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>The following two examples show how to use <ph id="ph1">`OnIdle`</ph>.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>The first example processes two idle tasks using the <ph id="ph1">`lCount`</ph> argument to prioritize the tasks.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>The first task is high priority, and you should do it whenever possible.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>The second task is less important and should be done only when there is a long pause in user input.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Note the call to the base-class version of <ph id="ph1">`OnIdle`</ph>.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The second example manages a group of idle tasks with different priorities.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#51</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>CWinApp::OpenDocumentFile</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>The framework calls this method to open the named <bpt id="p1">[</bpt>CDocument<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept> file for the application.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The name of the file to be opened.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>indicates the document is one of the most recent files; <ph id="ph1">`FALSE`</ph> indicates the document is not one of the most recent files.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CDocument`</ph> if successful; otherwise <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>If a document that has that name is already open, the first frame window that contains that document will get the focus.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>If an application supports multiple document templates, the framework uses the file name extension to find the appropriate document template to try to load the document.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>If successful, the document template then creates a frame window and view for the document.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#52</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>CWinApp::ParseCommandLine</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Call this member function to parse the command line and send the parameters, one at a time, to <bpt id="p1">[</bpt>CCommandLineInfo::ParseParam<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam)</ept>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CCommandLineInfo<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of <ph id="ph1">`CCommandLineInfo`</ph>, and then call <ph id="ph2">`ProcessShellCommand`</ph> and <ph id="ph3">`ParseCommandLine`</ph> in the <bpt id="p1">[</bpt>InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>A command line follows the route described below:</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>After being created in <ph id="ph1">`InitInstance`</ph>, the <ph id="ph2">`CCommandLineInfo`</ph> object is passed to <ph id="ph3">`ParseCommandLine`</ph>.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>then calls <ph id="ph1">`CCommandLineInfo::ParseParam`</ph> repeatedly, once for each parameter.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>fills the <ph id="ph1">`CCommandLineInfo`</ph> object, which is then passed to <bpt id="p1">[</bpt>ProcessShellCommand<ept id="p1">](#cwinapp__processshellcommand)</ept>.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>handles the command-line arguments and flags.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Note that you can call <ph id="ph1">`ParseCommandLine`</ph> directly as needed.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>For a description of the command-line flags, see <bpt id="p1">[</bpt>CCommandLineInfo::m_nShellCommand<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand)</ept>.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>CWinApp::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Override this function to filter window messages before they are dispatched to the Windows functions <bpt id="p1">[</bpt>TranslateMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p2">[</bpt>DispatchMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> The default implementation performs accelerator-key translation, so you must call the <ph id="ph1">`CWinApp::PreTranslateMessage`</ph> member function in your overridden version.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to process.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Nonzero if the message was fully processed in <ph id="ph1">`PreTranslateMessage`</ph> and should not be processed further.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Zero if the message should be processed in the normal way.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessMessageFilter</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>The framework's hook function calls this member function to filter and respond to certain Windows messages.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Specifies a hook code.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>This member function uses the code to determine how to process</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>A pointer to a Windows <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Nonzero if the message is processed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>A hook function processes events before they are sent to the application's normal message processing.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessShellCommand</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>This member function is called by <bpt id="p1">[</bpt>InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> to accept the parameters passed from the <ph id="ph1">`CCommandLineInfo`</ph> object identified by <ph id="ph2">`rCmdInfo`</ph>, and perform the indicated action.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CCommandLineInfo<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Nonzero if the shell command is processed successfully.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>If 0, return <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> from <bpt id="p2">[</bpt>InitInstance<ept id="p2">](#cwinapp__initinstance)</ept>.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of <ph id="ph1">`CCommandLineInfo`</ph>, and then call <ph id="ph2">`ProcessShellCommand`</ph> and <bpt id="p1">[</bpt>ParseCommandLine<ept id="p1">](#cwinapp__parsecommandline)</ept> in the <ph id="ph3">`InitInstance`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>A command line follows the route described below:</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>After being created in <ph id="ph1">`InitInstance`</ph>, the <ph id="ph2">`CCommandLineInfo`</ph> object is passed to <ph id="ph3">`ParseCommandLine`</ph>.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>then calls <bpt id="p1">[</bpt>CCommandLineInfo::ParseParam<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam)</ept> repeatedly, once for each parameter.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>fills the <ph id="ph1">`CCommandLineInfo`</ph> object, which is then passed to <ph id="ph2">`ProcessShellCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>handles the command-line arguments and flags.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>The data members of the <ph id="ph1">`CCommandLineInfo`</ph> object, identified by <bpt id="p1">[</bpt>CCommandLineInfo::m_nShellCommand<ept id="p1">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand)</ept>, are of the following enumerated type, which is defined within the <ph id="ph2">`CCommandLineInfo`</ph> class.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>For a brief description of each of these values, see <ph id="ph1">`CCommandLineInfo::m_nShellCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>CWinApp::ProcessWndProcException</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>The framework calls this member function whenever the handler does not catch an exception thrown in one of your application's message or command handlers.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>e</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>A pointer to an uncaught exception.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure that contains information about the windows message that caused the framework to throw an exception.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>The value that should be returned to Windows.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Normally this is 0L for windows messages, 1L ( <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>) for command messages.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Do not call this member function directly.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function creates a message box.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>If the uncaught exception originates with a menu, toolbar, or accelerator command failure, the message box displays a "Command failed" message; otherwise, it displays an "Internal application error" message.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Override this member function to provide global handling of your exceptions.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Only call the base functionality if you wish the message box to be displayed.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>CWinApp::Register</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Performs any registration tasks not handled by <ph id="ph1">`RegisterShellFileTypes`</ph>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Nonzero on success; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>The default implementation simply returns TRUE.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Override this function to provide any customized registration steps.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>CWinApp::RegisterShellFileTypes</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Call this member function to register all of your application's document types with the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>adds registration entries for shell commands Print and Print To, allowing a user to print files directly from the shell, or by dragging the file to a printer object.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>It also adds a DefaultIcon key.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>By default, this parameter is <ph id="ph1">`FALSE`</ph> for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>This allows the user to open a data file created by your application by double-clicking it from within File Manager.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`RegisterShellFileTypes`</ph> after you call <bpt id="p1">[</bpt>AddDocTemplate<ept id="p1">](#cwinapp__adddoctemplate)</ept> for each of the document templates in your application.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>Also call the <bpt id="p1">[</bpt>EnableShellOpen<ept id="p1">](#cwinapp__enableshellopen)</ept> member function when you call <ph id="ph1">`RegisterShellFileTypes`</ph>.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>iterates through the list of <bpt id="p1">[</bpt>CDocTemplate<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept> objects that the application maintains and, for each document template, adds entries to the registration database that Windows maintains for file associations.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>File Manager uses these entries to open a data file when the user double-clicks it.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>This eliminates the need to ship a .REG file with your application.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>only works if the user runs the program with administrator rights.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>If the program does not have administrator rights, it cannot alter registry keys.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>If the registration database already associates a given filename extension with another file type, no new association is created.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`CDocTemplate`</ph> class for the format of strings necessary to register this information.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>CWinApp::RegisterWithRestartManager</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Registers the application with the restart manager.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>indicates that this instance of the application uses a recovery callback function; <ph id="ph1">`FALSE`</ph> indicates that it does not.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>The framework calls the recovery callback function when the application exits unexpectedly.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id="p1">](#cwinapp__applicationrecoverycallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>The unique string that identifies this instance of the restart manager.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>The restart manager identifier is unique for each instance of an application.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>A string that contains any extra arguments from the command line.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Optional flags for the restart manager.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>The recovery callback function.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>This function must take a <ph id="ph1">`LPVOID`</ph> parameter as input and return a <ph id="ph2">`DWORD`</ph>.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The default recovery callback function is <ph id="ph1">`CWinApp::ApplicationRecoveryCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>The input parameter for the recovery callback function.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id="p1">](#cwinapp__applicationrecoverycallback)</ept>.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The length of time that the restart manager waits for the recovery callback function to return.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>This parameter is in milliseconds.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Flags passed to the recovery callback function.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>if the method is successful; otherwise an error code.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>If your application uses the default MFC implementation for autosaving files, you should use the simple version of <ph id="ph1">`RegisterWithRestartManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Use the complex version of <ph id="ph1">`RegisterWithRestartManager`</ph> if you want to customize the autosave behavior of your application.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>If you call this method with an empty string for <ph id="ph1">`strRestartIdentifier`</ph>, <ph id="ph2">`RegisterWithRestartManager`</ph> creates a unique identifier string for this instance of the restart manager.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>When an application exits unexpectedly, the restart manager restarts the application from the command line and provides the unique restart identifier as an optional argument.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>In this scenario, the framework calls <ph id="ph1">`RegisterWithRestartManager`</ph> two times.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>The first call comes from <bpt id="p1">[</bpt>CWinApp::InitInstance<ept id="p1">](#cwinapp__initinstance)</ept> with an empty string for the string identifier.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Then, the method <bpt id="p1">[</bpt>CWinApp::ProcessShellCommand<ept id="p1">](#cwinapp__processshellcommand)</ept> calls <ph id="ph1">`RegisterWithRestartManager`</ph> with the unique restart identifier.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>After you register an application with the restart manager, the restart manager monitors the application.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>If the application exits unexpectedly, the restart manager calls the recovery callback function during the shut down process.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The restart manager waits the <ph id="ph1">`dwPingInterval`</ph> for a response from the recovery callback function.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>If the recovery callback function does not respond within this time, the application exits without executing the recovery callback function.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>By default, the dwRestartFlags are not supported but are provided for future use.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>The possible values for <ph id="ph1">`dwRestartFlags`</ph> are as follows:</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>CWinApp::ReopenPreviousFilesAtRestart</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>indicates the restart manager reopens the previously open files; <ph id="ph1">`FALSE`</ph> indicates the restart manager does not.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>CWinApp::RestartInstance</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Handles an application restart initiated by the restart manager.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>if the data recovery handler opens previously open documents; <ph id="ph1">`FALSE`</ph> if the data recovery handler has an error or if there are no previously open documents.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>When the restart manager restarts an application, the framework calls this method.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>This method retrieves the data recovery handler and restores the autosaved files.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>This method calls <bpt id="p1">[</bpt>CDataRecoveryHandler::RestoreAutosavedDocuments<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md#cdatarecoveryhandler__restoreautosaveddocuments)</ept> to determine whether the user wants to restore the autosaved files.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`FALSE`</ph> if the <bpt id="p1">[</bpt>CDataRecoveryHandler<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept> determines that there were no open documents.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>If there were no open documents, the application starts ordinarily.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>CWinApp::RestoreAutosavedFilesAtRestart</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager restores the autosaved files when it restarts the application.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>indicates the restart manager restores autosaved files; <ph id="ph1">`FALSE`</ph> indicates the restart manager does not.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>CWinApp::Run</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Provides a default message loop.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> value that is returned by <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run<ept id="p1">**</ept> acquires and dispatches Windows messages until the application receives a <bpt id="p2">**</bpt>WM_QUIT<ept id="p2">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>If the application's message queue currently contains no messages, <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> calls <bpt id="p2">[</bpt>OnIdle<ept id="p2">](#cwinapp__onidle)</ept> to perform idle-time processing.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>Incoming messages go to the <bpt id="p1">[</bpt>PreTranslateMessage<ept id="p1">](#cwinapp__pretranslatemessage)</ept> member function for special processing and then to the Windows function <bpt id="p2">**</bpt>TranslateMessage<ept id="p2">**</ept> for standard keyboard translation; finally, the <bpt id="p3">**</bpt>DispatchMessage<ept id="p3">**</ept> Windows function is called.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run<ept id="p1">**</ept> is rarely overridden, but you can override it to provide special behavior.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>CWinApp::RunAutomated</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the " <bpt id="p1">**</bpt>/Automation<ept id="p1">**</ept>" or " <bpt id="p2">**</bpt>-Automation<ept id="p2">**</ept>" option is present, which indicates whether the server application was launched by a client application.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Nonzero if the option was found; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>If present, the option is removed from the command line.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>For more information on OLE Automation, see the article <bpt id="p1">[</bpt>Automation Servers<ept id="p1">](../../mfc/automation-servers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>CWinApp::RunEmbedded</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the " <bpt id="p1">**</bpt>/Embedding<ept id="p1">**</ept>" or " <bpt id="p2">**</bpt>-Embedding<ept id="p2">**</ept>" option is present, which indicates whether the server application was launched by a client application.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Nonzero if the option was found; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>If present, the option is removed from the command line.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>For more information on embedding, see the article <bpt id="p1">[</bpt>Servers: Implementing a Server<ept id="p1">](../../mfc/servers-implementing-a-server.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>CWinApp::SaveAllModified</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Called by the framework to save all documents when the application's main frame window is to be closed, or through a <ph id="ph1">`WM_QUERYENDSESSION`</ph> message.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Nonzero if safe to terminate the application; 0 if not safe to terminate the application.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function calls the <bpt id="p1">[</bpt>CDocument::SaveModified<ept id="p1">](../../mfc/reference/cdocument-class.md#cdocument__savemodified)</ept> member function in turn for all modified documents within the application.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>CWinApp::SelectPrinter</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Call this member function to select a specific printer, and release the printer that was previously selected in the Print Dialog box.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>A handle to a <bpt id="p1">[</bpt>DEVNAMES<ept id="p1">](../../mfc/reference/devnames-structure.md)</ept> structure that identifies the driver, device, and output port names of a specific printer.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>A handle to a <bpt id="p1">[</bpt>DEVMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183565)</ept> structure that specifies information about the device initialization and environment of a printer.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>bFreeOld</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Frees the previously-selected printer.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`hDevMode`</ph> and <ph id="ph2">`hDevNames`</ph> are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph3">`SelectPrinter`</ph> uses the current default printer.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>CWinApp::SetHelpMode</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Sets the application's help type.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Specifies the type of help to use.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::m_eHelpType<ept id="p1">](#cwinapp__m_ehelptype)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Sets the application's Help type.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>To set your application's Help type to HTMLHelp, you can call <bpt id="p1">[</bpt>EnableHTMLHelp<ept id="p1">](#cwinapp__enablehtmlhelp)</ept>.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Once you call <ph id="ph1">`EnableHTMLHelp`</ph>, your application must use HTMLHelp as its help application.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>If you want to change to use WinHelp, you can call <ph id="ph1">`SetHelpMode`</ph> and set <ph id="ph2">`eHelpType`</ph> to <bpt id="p1">**</bpt>afxWinHelp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>CWinApp::SetRegistryKey</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Causes application settings to be stored in the registry instead of INI files.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>lpszRegistryKey</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Pointer to a string containing the name of the key.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>nIDRegistryKey</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>ID of a string resource containing the name of the registry key.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>This function sets <bpt id="p1">*</bpt>m_pszRegistryKey<ept id="p1">*</ept>, which is then used by the <ph id="ph1">`GetProfileInt`</ph>, <ph id="ph2">`GetProfileString`</ph>, <ph id="ph3">`WriteProfileInt`</ph>, and <ph id="ph4">`WriteProfileString`</ph> member functions of <ph id="ph5">`CWinApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>If this function has been called, the list of most recently-used (MRU) files is also stored in the registry.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The registry key is usually the name of a company.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>It is stored in a key of the following form: HKEY_CURRENT_USER\Software<ph id="ph1">\\</ph>&lt;company name<ph id="ph2">\&gt;\\</ph>&lt;application name<ph id="ph3">\&gt;\\</ph>&lt;section name<ph id="ph4">\&gt;\\</ph>&lt;value name<ph id="ph5">\&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsApplicationRecovery</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager recovers an application that exited unexpectedly.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>indicates the restart manager recovers the application; <ph id="ph1">`FALSE`</ph> indicates the restart manager does not.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsAutosaveAtInterval</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager autosaves open documents at a regular interval.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>indicates the restart manager autosaves open documents; <ph id="ph1">`FALSE`</ph> indicates the restart manager does not.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsAutosaveAtRestart</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Determines whether the restart manager autosaves any open documents when the application restarts.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>indicates the restart manager autosaves open documents when the application restarts; <ph id="ph1">`FALSE`</ph> indicates the restart manager does not.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>CWinApp::SupportsRestartManager</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Determines whether the application supports the restart manager.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>indicates the application supports the restart manager; <ph id="ph1">`FALSE`</ph> indicates the application does not.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>CWinApp::Unregister</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>Unregisters all files registered by the application object.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Nonzero on success; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Unregister`</ph> function undoes the registration performed by the application object and the <bpt id="p1">[</bpt>Register<ept id="p1">](#cwinapp__register)</ept> function.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Normally, both functions are called implicitly by MFC and therefore will not appear in your code.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Override this function to perform custom unregistration steps.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>CWinApp::UnregisterShellFileTypes</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Call this member function to unregister all of your application's document types with the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>CWinApp::WinHelp</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Call this member function to invoke the WinHelp application.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>Specifies additional data.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The value used depends on the value of the <ph id="ph1">`nCmd`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Specifies the type of help requested.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>For a list of possible values and how they affect the <ph id="ph1">`dwData`</ph> parameter, see the <bpt id="p1">[</bpt>WinHelp<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>The framework also calls this function to invoke the WinHelp application.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>The framework will automatically close the WinHelp application when your application terminates.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#53</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileBinary</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Call this member function to write binary data into the specified section of the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>If the section does not exist, it is created.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry into which the value is to be written.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>If the entry does not exist in the specified section, it is created.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Points to the data to be written.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Contains the number of bytes to be written.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">`CWinApp* pApp = AfxGetApp();`</ph> to get at the CWinApp class illustrating a way that <ph id="ph2">`WriteProfileBinary`</ph> and <ph id="ph3">`GetProfileBinary`</ph> can be used from any function in an MFC application.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#54</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>For another example, see the example for <bpt id="p1">[</bpt>CWinApp::GetProfileBinary<ept id="p1">](#cwinapp__getprofilebinary)</ept>.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileInt</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Call this member function to write the specified value into the specified section of the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>If the section does not exist, it is created.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry into which the value is to be written.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>If the entry does not exist in the specified section, it is created.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Contains the value to be written.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">`CWinApp* pApp = AfxGetApp();`</ph> to get at the CWinApp class illustrating a way that <ph id="ph2">`WriteProfileString`</ph>, <ph id="ph3">`WriteProfileInt`</ph>, <ph id="ph4">`GetProfileString`</ph>, and <ph id="ph5">`GetProfileInt`</ph> can be used from any function in an MFC application.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#43</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>For another example, see the example for <bpt id="p1">[</bpt>CWinApp::GetProfileInt<ept id="p1">](#cwinapp__getprofileint)</ept>.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>CWinApp::WriteProfileString</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>Call this member function to write the specified string into the specified section of the application's registry or .INI file.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the section containing the entry.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>If the section does not exist, it is created.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the entry into which the value is to be written.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>If the entry does not exist in the specified section, it is created.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`NULL`</ph>, the section specified by <ph id="ph2">`lpszSection`</ph> is deleted.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>Points to the string to be written.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`NULL`</ph>, the entry specified by the <ph id="ph2">`lpszEntry`</ph> parameter is deleted.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#43</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>For another example, see the example for <bpt id="p1">[</bpt>CWinApp::GetProfileInt<ept id="p1">](#cwinapp__getprofileint)</ept>.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>CWinApp::SetAppID</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>Explicitly sets Application User Model ID for the application.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>This method should be called before any user interface is presented to the user (the best place is the application constructor).</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>Specifies the Application User Model ID.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>CWinThread Class</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>How to: Add Restart Manager Support</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>