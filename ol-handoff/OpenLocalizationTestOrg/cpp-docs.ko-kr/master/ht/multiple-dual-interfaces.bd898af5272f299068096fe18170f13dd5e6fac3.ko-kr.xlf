<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40b9f35f1510a31d404daa671cf5eecbffc9e74b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\multiple-dual-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c11d7cc2b2ba08988f8b04f22b79aad632615050</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed8547f733ba3c85eefbea710464041875feb89b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multiple Dual Interfaces | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multiple Dual Interfaces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You may want to combine the advantages of a dual interface (that is, the flexibility of both vtable and late binding, thus making the class available to scripting languages as well as C++) with the techniques of multiple inheritance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although it is possible to expose multiple dual interfaces on a single COM object, it is not recommended.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If there are multiple dual interfaces, there must be only one <ph id="ph1">`IDispatch`</ph> interface exposed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The techniques available to ensure that this is the case carry penalties such as loss of function or increased code complexity.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The developer considering this approach should carefully weigh the advantages and disadvantages.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Exposing a Single IDispatch Interface</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is possible to expose multiple dual interfaces on a single object by deriving from two or more specializations of <ph id="ph1">`IDispatchImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, if you allow clients to query for the <ph id="ph1">`IDispatch`</ph> interface, you will need to use the <bpt id="p1">[</bpt>COM_INTERFACE_ENTRY2<ept id="p1">](http://msdn.microsoft.com/library/3d48c53b-827b-42cc-9e22-594f7ea2bf0b)</ept> macro (or <bpt id="p2">[</bpt>COM_INTERFACE_ENTRY_IID<ept id="p2">](http://msdn.microsoft.com/library/1bb69549-2099-4e20-ad5e-4c5a32f44e4b)</ept>) to specify which base class to use for the implementation of <ph id="ph2">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#23</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because only one <ph id="ph1">`IDispatch`</ph> interface is exposed, clients that can only access your objects through the <ph id="ph2">`IDispatch`</ph> interface will not be able to access the methods or properties in any other interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Combining Multiple Dual Interfaces into a Single Implementation of IDispatch</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>ATL does not provide any support for combining multiple dual interfaces into a single implementation of <ph id="ph1">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, there are several known approaches to manually combining the interfaces, such as creating a templated class that contains a union of the separate <ph id="ph1">`IDispatch`</ph> interfaces, creating a new object to perform the <ph id="ph2">`QueryInterface`</ph> function, or using a typeinfo-based implementation of nested objects to create the <ph id="ph3">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These approaches have problems with potential namespace collisions, as well as code complexity and maintainability.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is not recommended that you create multiple dual interfaces.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Dual Interfaces and ATL</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>