<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3c21ca46df6c60df3adb9d8a7f6e5219ee4c185</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\message-passing-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5a65b1e476e07cd138fdbd942080da5604a8acd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e6898339811e9a6c738a51a50f13fc416b6ffb0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Message Passing Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Asynchronous Agents Library provides several functions that let you pass messages among components.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These message-passing functions are used with the various message-block types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about the message-block types that are defined by the Concurrency Runtime, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes the following message-passing functions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>send and asend</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>receive and try_receive</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>send and asend</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::send<ept id="p1">](reference/concurrency-namespace-functions.md#send)</ept> function sends a message to the specified target synchronously and the <bpt id="p2">[</bpt>concurrency::asend<ept id="p2">](reference/concurrency-namespace-functions.md#asend)</ept> function sends a message to the specified target asynchronously.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">`send`</ph> and <ph id="ph2">`asend`</ph> functions wait until the target indicates that it will eventually accept or decline the message.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`send`</ph> function waits until the target accepts or declines the message before it returns.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`send`</ph> function returns <ph id="ph2">`true`</ph> if the message was delivered and <ph id="ph3">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`send`</ph> function works synchronously, the <ph id="ph2">`send`</ph> function waits for the target to receive the message before it returns.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Conversely, the <ph id="ph1">`asend`</ph> function does not wait for the target to accept or decline the message before it returns.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instead, the <ph id="ph1">`asend`</ph> function returns <ph id="ph2">`true`</ph> if the target accepts the message and will eventually take it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`asend`</ph> returns <ph id="ph2">`false`</ph> to indicate that the target either declined the message or postponed the decision about whether to take the message.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>receive and try_receive</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::receive<ept id="p1">](reference/concurrency-namespace-functions.md#receive)</ept> and <bpt id="p2">[</bpt>concurrency::try_receive<ept id="p2">](reference/concurrency-namespace-functions.md#try_receive)</ept> functions read data from a given source.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`receive`</ph> function waits for data to become available, whereas the <ph id="ph2">`try_receive`</ph> function returns immediately.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`receive`</ph> function when you must have the data to continue.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`try_receive`</ph> function if you must not block the current context or you do not have to have the data to continue.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For examples that use the <ph id="ph1">`send`</ph> and <ph id="ph2">`asend`</ph>, and <ph id="ph3">`receive`</ph> functions, see the following topics:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>How to: Implement Various Producer-Consumer Patterns</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>How to: Provide Work Functions to the call and transformer Classes</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>How to: Use transformer in a Data Pipeline</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>How to: Select Among Completed Tasks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How to: Send a Message at a Regular Interval</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>send Function</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>asend Function</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>receive Function</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>try_receive Function</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>