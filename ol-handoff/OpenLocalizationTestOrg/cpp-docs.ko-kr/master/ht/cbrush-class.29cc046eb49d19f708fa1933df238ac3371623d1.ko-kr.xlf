<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55944804e7eaf41145f189c76b142f8469be0f6c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cbrush-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41e1d0df68320d7569608f715d3178d8aeb9399c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2afbfb0af9bf2d939be3a2f17dc26133295e456b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CBrush Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CBrush Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates a Windows graphics device interface (GDI) brush.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CBrush::CBrush</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CBrush::CreateBrushIndirect</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a brush with the style, color, and pattern specified in a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CBrush::CreateDIBPatternBrush</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a brush with a pattern specified by a device-independent bitmap (DIB).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CBrush::CreateHatchBrush</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a brush with the specified hatched pattern and color.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CBrush::CreatePatternBrush</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a brush with a pattern specified by a bitmap.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CBrush::CreateSolidBrush</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a brush with the specified solid color.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CBrush::CreateSysColorBrush</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a brush that is the default system color.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CBrush::FromHandle</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CBrush`</ph> object when given a handle to a Windows <ph id="ph2">`HBRUSH`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CBrush::GetLogBrush</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CBrush::operator HBRUSH</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the Windows handle attached to the <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CBrush`</ph> object, construct a <ph id="ph2">`CBrush`</ph> object and pass it to any <ph id="ph3">`CDC`</ph> member function that requires a brush.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Brushes can be solid, hatched, or patterned.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CBrush`</ph>, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](../../mfc/graphic-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CGdiObject</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CBrush::CBrush</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies the foreground color of the brush as an RGB color.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the brush is hatched, this parameter specifies the color of the hatching.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specifies the hatch style of the brush.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Downward hatch (left to right) at 45 degrees</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Horizontal and vertical crosshatch</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Crosshatch at 45 degrees</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Upward hatch (left to right) at 45 degrees</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Horizontal hatch</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Vertical hatch</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CBitmap`</ph> object that specifies a bitmap with which the brush paints.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>has four overloaded constructors.The constructor with no arguments constructs an uninitialized <ph id="ph1">`CBrush`</ph> object that must be initialized before it can be used.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you use the constructor with no arguments, you must initialize the resulting <ph id="ph1">`CBrush`</ph> object with <bpt id="p1">[</bpt>CreateSolidBrush<ept id="p1">](#cbrush__createsolidbrush)</ept>, <bpt id="p2">[</bpt>CreateHatchBrush<ept id="p2">](#cbrush__createhatchbrush)</ept>, <bpt id="p3">[</bpt>CreateBrushIndirect<ept id="p3">](#cbrush__createbrushindirect)</ept>, <bpt id="p4">[</bpt>CreatePatternBrush<ept id="p4">](#cbrush__createpatternbrush)</ept>, or <bpt id="p5">[</bpt>CreateDIBPatternBrush<ept id="p5">](#cbrush__createdibpatternbrush)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you use one of the constructors that takes arguments, then no further initialization is necessary.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The constructors with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The constructor with a single <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter constructs a solid brush with the specified color.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The color specifies an RGB value and can be constructed with the <ph id="ph1">`RGB`</ph> macro in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The constructor with two parameters constructs a hatch brush.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIndex`</ph> parameter specifies the index of a hatched pattern.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`crColor`</ph> parameter specifies the color.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The constructor with a <ph id="ph1">`CBitmap`</ph> parameter constructs a patterned brush.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The parameter identifies a bitmap.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The bitmap is assumed to have been created by using <bpt id="p1">[</bpt>CBitmap::CreateBitmap<ept id="p1">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap)</ept>, <bpt id="p2">[</bpt>CBitmap::CreateBitmapIndirect<ept id="p2">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect)</ept>, <bpt id="p3">[</bpt>CBitmap::LoadBitmap<ept id="p3">](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap)</ept>, or <bpt id="p4">[</bpt>CBitmap::CreateCompatibleBitmap<ept id="p4">](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The minimum size for a bitmap to be used in a fill pattern is 8 pixels by 8 pixels.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#21</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CBrush::CreateBrushIndirect</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Initializes a brush with a style, color, and pattern specified in a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>lpLogBrush</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure that contains information about the brush.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected as the current brush for any device context.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A brush created using a monochrome (1 plane, 1 bit per pixel) bitmap is drawn using the current text and background colors.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Pixels represented by a bit set to 0 will be drawn with the current text color.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pixels represented by a bit set to 1 will be drawn with the current background color.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#22</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CBrush::CreateDIBPatternBrush</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Initializes a brush with the pattern specified by a device-independent bitmap (DIB).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>hPackedDIB</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Identifies a global-memory object containing a packed device-independent bitmap (DIB).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>nUsage</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifies whether the <bpt id="p1">**</bpt>bmiColors[]<ept id="p1">**</ept> fields of the <bpt id="p2">[</bpt>BITMAPINFO<ept id="p2">](../../mfc/reference/bitmapinfo-structure.md)</ept> data structure (a part of the "packed DIB") contain explicit RGB values or indices into the currently realized logical palette.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The parameter must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DIB_PAL_COLORS<ept id="p1">**</ept> The color table consists of an array of 16-bit indexes.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DIB_RGB_COLORS<ept id="p1">**</ept> The color table contains literal RGB values.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>lpPackedDIB</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Points to a packed DIB consisting of a <ph id="ph1">`BITMAPINFO`</ph> structure immediately followed by an array of bytes defining the pixels of the bitmap.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected for any device context that supports raster operations.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The two versions differ in the way you handle the DIB:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the first version, to obtain a handle to the DIB you call the Windows <bpt id="p1">**</bpt>GlobalAlloc<ept id="p1">**</ept> function to allocate a block of global memory and then fill the memory with the packed DIB.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In the second version, it is not necessary to call <bpt id="p1">**</bpt>GlobalAlloc<ept id="p1">**</ept> to allocate memory for the packed DIB.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A packed DIB consists of a <ph id="ph1">`BITMAPINFO`</ph> data structure immediately followed by the array of bytes that defines the pixels of the bitmap.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Bitmaps used as fill patterns should be 8 pixels by 8 pixels.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the bitmap is larger, Windows creates a fill pattern using only the bits corresponding to the first 8 rows and 8 columns of pixels in the upper-left corner of the bitmap.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When an application selects a two-color DIB pattern brush into a monochrome device context, Windows ignores the colors specified in the DIB and instead displays the pattern brush using the current text and background colors of the device context.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Pixels mapped to the first color (at offset 0 in the DIB color table) of the DIB are displayed using the text color.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Pixels mapped to the second color (at offset 1 in the color table) are displayed using the background color.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For information about using the following Windows functions, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateDIBPatternBrush<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183492)</ept> (This function is provided only for compatibility with applications written for versions of Windows earlier than 3.0; use the <bpt id="p2">**</bpt>CreateDIBPatternBrushPt<ept id="p2">**</ept> function.)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateDIBPatternBrushPt<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183493)</ept> (This function should be used for Win32-based applications.)</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>GlobalAlloc</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#23</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CBrush::CreateHatchBrush</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Initializes a brush with the specified hatched pattern and color.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies the hatch style of the brush.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Downward hatch (left to right) at 45 degrees</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Horizontal and vertical crosshatch</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Crosshatch at 45 degrees</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Upward hatch (left to right) at 45 degrees</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Horizontal hatch</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Vertical hatch</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specifies the foreground color of the brush as an RGB color (the color of the hatches).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected as the current brush for any device context.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#24</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CBrush::CreatePatternBrush</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Initializes a brush with a pattern specified by a bitmap.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Identifies a bitmap.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected for any device context that supports raster operations.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The bitmap identified by <ph id="ph1">`pBitmap`</ph> is typically initialized by using the <bpt id="p1">[</bpt>CBitmap::CreateBitmap<ept id="p1">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap)</ept>, <bpt id="p2">[</bpt>CBitmap::CreateBitmapIndirect<ept id="p2">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect)</ept>, <bpt id="p3">[</bpt>CBitmap::LoadBitmap<ept id="p3">](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap)</ept>, or <bpt id="p4">[</bpt>CBitmap::CreateCompatibleBitmap<ept id="p4">](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)</ept> function.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Bitmaps used as fill patterns should be 8 pixels by 8 pixels.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the bitmap is larger, Windows will only use the bits corresponding to the first 8 rows and columns of pixels in the upper-left corner of the bitmap.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A pattern brush can be deleted without affecting the associated bitmap.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This means the bitmap can be used to create any number of pattern brushes.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A brush created using a monochrome bitmap (1 color plane, 1 bit per pixel) is drawn using the current text and background colors.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Pixels represented by a bit set to 0 are drawn with the current text color.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Pixels represented by a bit set to 1 are drawn with the current background color.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For information about using <bpt id="p1">[</bpt>CreatePatternBrush<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183508)</ept>, a Windows function, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#25</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CBrush::CreateSolidBrush</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Initializes a brush with a specified solid color.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure that specifies the color of the brush.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The color specifies an RGB value and can be constructed with the <ph id="ph1">`RGB`</ph> macro in WINDOWS.H.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected as the current brush for any device context.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>When an application has finished using the brush created by <ph id="ph1">`CreateSolidBrush`</ph>, it should select the brush out of the device context.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CBrush::CBrush<ept id="p1">](#cbrush__cbrush)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CBrush::CreateSysColorBrush</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Initializes a brush color.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies a color index.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This value corresponds to the color used to paint one of the 21 window elements.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>GetSysColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724371)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of values.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The brush can subsequently be selected as the current brush for any device context.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When an application has finished using the brush created by <ph id="ph1">`CreateSysColorBrush`</ph>, it should select the brush out of the device context.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#26</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CBrush::FromHandle</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CBrush`</ph> object when given a handle to a Windows <bpt id="p1">[</bpt>HBRUSH<ept id="p1">](#cbrush__operator_hbrush)</ept> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>to a Windows GDI brush.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CBrush`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CBrush`</ph> object is not already attached to the handle, a temporary <ph id="ph2">`CBrush`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CBrush`</ph> object is valid only until the next time the application has idle time in its event loop.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>At this time, all temporary graphic objects are deleted.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>In other words, the temporary object is valid only during the processing of one window message.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information about using graphic objects, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CBrush::CBrush<ept id="p1">](#cbrush__cbrush)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CBrush::GetLogBrush</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the <ph id="ph1">`LOGBRUSH`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure that contains information about the brush.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the function succeeds, and <ph id="ph1">`pLogBrush`</ph> is a valid pointer, the return value is the number of bytes stored into the buffer.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If the function succeeds, and <ph id="ph1">`pLogBrush`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the return value is the number of bytes required to hold the information the function would store into the buffer.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LOGBRUSH`</ph> structure defines the style, color, and pattern of a brush.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For example, call <ph id="ph1">`GetLogBrush`</ph> to match the particular color or pattern of a bitmap.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#27</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CBrush::operator HBRUSH</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Use this operator to get the attached Windows GDI handle of the <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If successful, a handle to the Windows GDI object represented by the <ph id="ph1">`CBrush`</ph> object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This operator is a casting operator, which supports direct use of an <ph id="ph1">`HBRUSH`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For more information about using graphic objects, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#28</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>MFC Sample PROPDLG</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>CGdiObject Class</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>CBitmap Class</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CDC Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>