<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74cdb204d744c265752013d39e642a96c23934ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\to-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7904d7851c9e33b67f4544982ceffec75ab3772</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce18ac7b69372d81266d15f16d076fa1041dad76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>to Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>to Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each of the <bpt id="p1">**</bpt>to<ept id="p1">**</ept> functions and its associated macro, if any, converts a single character to another character.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>__toascii</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>toupper, _toupper, towupper</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>tolower, _tolower, towlower</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>to<ept id="p1">**</ept> functions and macro conversions are as follows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to ASCII character</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to lowercase if appropriate</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to lowercase</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to corresponding wide-character lowercase letter</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to uppercase if appropriate</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Converts <ph id="ph1">`c`</ph> to uppercase</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Converts c to corresponding wide-character uppercase letter</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To use the function versions of the <bpt id="p1">**</bpt>to<ept id="p1">**</ept> routines that are also defined as macros, either remove the macro definitions with <ph id="ph1">`#undef`</ph> directives or do not include CTYPE.H.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you use the /Za compiler option, the compiler uses the function version of <ph id="ph1">`toupper`</ph> or <ph id="ph2">`tolower`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declarations of the <ph id="ph1">`toupper`</ph> and <ph id="ph2">`tolower`</ph> functions are in STDLIB.H.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__toascii`</ph> routine sets all but the low-order 7 bits of <ph id="ph2">`c`</ph> to 0, so that the converted value represents a character in the ASCII character set.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`c`</ph> already represents an ASCII character, <ph id="ph2">`c`</ph> is unchanged.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tolower`</ph> and <ph id="ph2">`toupper`</ph> routines:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Are dependent on the <ph id="ph1">`LC_CTYPE`</ph> category of the current locale (<ph id="ph2">`tolower`</ph> calls <ph id="ph3">`isupper`</ph> and <ph id="ph4">`toupper`</ph> calls <ph id="ph5">`islower`</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`c`</ph> if <ph id="ph2">`c`</ph> represents a convertible letter of the appropriate case in the current locale and the opposite case exists for that locale.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`c`</ph> is unchanged.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_tolower`</ph> and <ph id="ph2">`_toupper`</ph> routines:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Are locale-independent, much faster versions of <ph id="ph1">`tolower`</ph> and <bpt id="p1">**</bpt>toupper.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can be used only when <bpt id="p1">**</bpt>isascii(<ept id="p1">**</ept><ph id="ph1">`c`</ph><bpt id="p2">**</bpt>)<ept id="p2">**</ept> and either <bpt id="p3">**</bpt>isupper(<ept id="p3">**</ept><ph id="ph2">`c`</ph><bpt id="p4">**</bpt>)<ept id="p4">**</ept> or <bpt id="p5">**</bpt>islower(<ept id="p5">**</ept><ph id="ph3">`c`</ph><bpt id="p6">**</bpt>)<ept id="p6">**</ept>, respectively, are nonzero.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Have undefined results if <ph id="ph1">`c`</ph> is not an ASCII letter of the appropriate case for converting.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`towlower`</ph> and <ph id="ph2">`towupper`</ph> functions return a converted copy of <ph id="ph3">`c`</ph> if and only if both of the following conditions are nonzero.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`c`</ph> is unchanged.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>is a wide character of the appropriate case (that is, for which <ph id="ph1">`iswupper`</ph> or <bpt id="p1">**</bpt>iswlower,<ept id="p1">**</ept> respectively, is nonzero).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There is a corresponding wide character of the target case (that is, for which <ph id="ph1">`iswlower`</ph> or <bpt id="p1">**</bpt>iswupper,<ept id="p1">**</ept> respectively, is nonzero).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>is, isw Routines</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>