<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e26fd6d604c8b373a11c69945d748298b08dec8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cexception-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44917f755f00e2b2a53a8dd13f0b8cfa9ba9b54e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6da01faef7dcdbf0f9a7122428612d37293e28ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CException Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CException Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class for all exceptions in the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CException::CException</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CException::Delete</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Deletes a <ph id="ph1">`CException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CException::ReportError</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reports an error message in a message box to the user.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CException`</ph> is an abstract base class you cannot create <ph id="ph2">`CException`</ph> objects directly; you must create objects of derived classes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you need to create your own <ph id="ph1">`CException`</ph>-style class, use one of the derived classes listed above as a model.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Make sure that your derived class also uses <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The derived classes and their descriptions are listed below:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CSimpleException</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A base class for resource-critical MFC exceptions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CInvalidArgException</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Invalid argument exception condition</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CMemoryException</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Out-of-memory exception</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CNotSupportedException</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Request for an unsupported operation</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CArchiveException</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Archive-specific exception</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CFileException</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>File-specific exception</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CResourceException</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows resource not found or not creatable</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>COleException</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>OLE exception</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CDBException</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Database exception (that is, exception conditions arising for MFC database classes based on Open Database Connectivity)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>COleDispatchException</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>OLE dispatch (automation) exception</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CUserException</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Exception that indicates that a resource could not be found</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CDaoException</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Data access object exception (that is, exception conditions arising for DAO classes)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CInternetException</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Internet exception (that is, exception conditions arising for Internet classes).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These exceptions are intended to be used with the <bpt id="p1">[</bpt>THROW<ept id="p1">](exception-processing.md#throw)</ept>, <bpt id="p2">[</bpt>THROW_LAST<ept id="p2">](exception-processing.md#throw_last)</ept>, <bpt id="p3">[</bpt>try<ept id="p3">](exception-processing.md#try)</ept>, <bpt id="p4">[</bpt>catch<ept id="p4">](exception-processing.md#catch)</ept>, <bpt id="p5">[</bpt>and_catch<ept id="p5">](exception-processing.md#and_catch)</ept>, and <bpt id="p6">[</bpt>end_catch<ept id="p6">](exception-processing.md#end_catch)</ept> macros.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information on exceptions, see <bpt id="p1">[</bpt>Exception Processing<ept id="p1">](exception-processing.md)</ept>, or see the article <bpt id="p2">[</bpt>Exception Handling (MFC)<ept id="p2">](../exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To catch a specific exception, use the appropriate derived class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To catch all types of exceptions, use <ph id="ph1">`CException`</ph>, and then use <bpt id="p1">[</bpt>CObject::IsKindOf<ept id="p1">](cobject-class.md#cobject__iskindof)</ept> to differentiate among <ph id="ph2">`CException`</ph>-derived classes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CObject::IsKindOf`</ph> works only for classes declared with the <bpt id="p1">[</bpt>IMPLEMENT_DYNAMIC<ept id="p1">](run-time-object-model-services.md#implement_dynamic)</ept> macro, in order to take advantage of dynamic type checking.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`CException`</ph>-derived class that you create should use the <ph id="ph2">`IMPLEMENT_DYNAMIC`</ph> macro, too.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can report details about exceptions to the user by calling <bpt id="p1">[</bpt>GetErrorMessage<ept id="p1">](cfileexception-class.md#cfileexception__geterrormessage)</ept> or <bpt id="p2">[</bpt>ReportError<ept id="p2">](#cexception__reporterror)</ept>, two member functions that work with any of <ph id="ph1">`CException`</ph>'s derived classes.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If an exception is caught by one of the macros, the <ph id="ph1">`CException`</ph> object is deleted automatically; do not delete it yourself.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If an exception is caught by using a <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> keyword, it is not automatically deleted.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Exception Handling (MFC)<ept id="p1">](../exception-handling-in-mfc.md)</ept> for more information about when to delete an exeption object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CException::CException</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This member function constructs a <ph id="ph1">`CException`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>b_AutoDelete</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the memory for the <ph id="ph1">`CException`</ph> object has been allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This will cause the <ph id="ph1">`CException`</ph> object to be deleted when the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> member function is called to delete the exception.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if the <ph id="ph1">`CException`</ph> object is on the stack or is a global object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`CException`</ph> object will not be deleted when the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You would normally never need to call this constructor directly.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A function that throws an exception should create an instance of a <ph id="ph1">`CException`</ph>-derived class and call its constructor, or it should use one of the MFC throw functions, such as <bpt id="p1">[</bpt>AfxThrowFileException<ept id="p1">](exception-processing.md#afxthrowfileexception)</ept>, to throw a predefined type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This documentation is provided only for completeness.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CException::Delete</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This function checks to see if the <bpt id="p1">**</bpt>CException<ept id="p1">**</ept> object was created on the heap, and if so, it calls the <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> operator on the object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When deleting a <bpt id="p1">**</bpt>CException<ept id="p1">**</ept> object, use the <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> member function to delete the exception.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Do not use the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator directly, because the <ph id="ph1">`CException`</ph> object may be a global object or have been created on the stack.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can specify whether the object should be deleted when the object is constructed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CException::CException<ept id="p1">](#cexception__cexception)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You only need to call <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> if you are using the C++ <bpt id="p2">**</bpt>try<ept id="p2">**</ept><ph id="ph1">- </ph><bpt id="p3">**</bpt>catch<ept id="p3">**</ept> mechanism.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you are using the MFC macros <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CATCH<ept id="p2">**</ept>, then these macros will automatically call this function.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CException::ReportError</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Call this member function to report error text in a message box to the user.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies the style of the message box.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Apply any combination of the <bpt id="p1">[</bpt>message-box styles<ept id="p1">](message-box-styles.md)</ept> to the box.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If you don't specify this parameter, the default is <bpt id="p1">**</bpt>MB_OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>nMessageID</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID (string table entry) of a message to display if the exception object does not have an error message.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If 0, the message "No error message is available" is displayed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`AfxMessageBox`</ph> value; otherwise 0 if there is not enough memory to display the message box.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>AfxMessageBox<ept id="p1">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept> for the possible return values.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Here is an example of the use of <ph id="ph1">`CException::ReportError`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For another example, see the example for [CATCH]--brokenlink--(exception-processing.md#catch).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Exception Processing</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>How Do I: Create my Own Custom Exception Classes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>