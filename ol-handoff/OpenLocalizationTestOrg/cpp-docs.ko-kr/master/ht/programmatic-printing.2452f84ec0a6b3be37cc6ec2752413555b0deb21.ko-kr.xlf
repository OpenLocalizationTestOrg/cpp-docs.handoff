<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c88ae488c71ed1c4df05a9e22953c4c6cd74963</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\programmatic-printing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98434f2ffb25227e21d3e0f0b7a0b17d5b0fae6b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">739db055dce232430ed1ed9bc0ddddb10322ec7d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Programmatic Printing | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Programmatic Printing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>OLE provided the means to uniquely identify persistent documents (<bpt id="p1">**</bpt>GetClassFile<ept id="p1">**</ept>) and load them into their associated code (<ph id="ph1">`CoCreateInstance`</ph>, <bpt id="p2">**</bpt>QueryInterface(IID_IPersistFile)<ept id="p2">**</ept>, <bpt id="p3">**</bpt>QueryInterface(IID_IPersistStorage)<ept id="p3">**</ept>, <bpt id="p4">**</bpt>IPersistFile::Load<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>IPersistStorage::Load<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To further enable printing documents, active document containment (using an existing OLE design not shipped with OLE 2.0 originally) introduces a base-standard printing interface, <ph id="ph1">`IPrint`</ph>, generally available through any object that can load the persistent state of the document type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each view of an active document can optionally support the <bpt id="p1">**</bpt>IPrint<ept id="p1">**</ept> interface to provide these capabilities.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IPrint`</ph> interface is defined as follows:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Clients and containers simply use <bpt id="p1">**</bpt>IPrint::Print<ept id="p1">**</ept> to instruct the document to print itself once that document is loaded, specifying printing control flags, the target device, the pages to print, and additional options.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The client can also control the continuation of printing through the interface <ph id="ph1">`IContinueCallback`</ph> (see below).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, <bpt id="p1">**</bpt>IPrint::SetInitialPageNum<ept id="p1">**</ept> supports the ability to print a series of documents as one by numbering pages seamlessly, obviously a benefit for active document containers like Office Binder.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IPrint::GetPageInfo<ept id="p1">**</ept> makes displaying pagination information simple by allowing the caller to retrieve the starting page number previously passed to <bpt id="p2">**</bpt>SetInitialPageNum<ept id="p2">**</ept> (or the document's internal default starting page number) and the number of pages in the document.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Objects that support <ph id="ph1">`IPrint`</ph> are marked in the registry with the "Printable" key stored under the object's CLSID:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>HKEY_CLASSES_ROOT\CLSID<ph id="ph1">\\</ph>{...}\Printable</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>is usually implemented on the same object that supports either <ph id="ph1">`IPersistFile`</ph> or <ph id="ph2">`IPersistStorage`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Callers note the capability to programmatically print the persistent state of some class by looking in the registry for the "Printable" key.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Currently, "Printable" indicates support for at least <ph id="ph1">`IPrint`</ph>; other interfaces may be defined in the future which would then be available through <ph id="ph2">`QueryInterface`</ph> where <bpt id="p1">**</bpt>IPrint<ept id="p1">**</ept> simply represents the base level of support.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>During a print procedure, you may want the client or container that initiated the printing to control whether or not the printing should continue.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the container may support a "Stop Print" command that should terminate the print job as soon as possible.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To support this capability, the client of a printable object can implement a small notification sink object with the interface <ph id="ph1">`IContinueCallback`</ph>:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This interface is designed to be useful as a generic continuation callback function that takes the place of the various continuation procedures in the Win32 API (such as the <bpt id="p1">**</bpt>AbortProc<ept id="p1">**</ept> for printing and the <bpt id="p2">**</bpt>EnumMetafileProc<ept id="p2">**</ept> for metafile enumeration).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thus this interface design is useful in a wide variety of time-consuming processes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the most generic cases, the <bpt id="p1">**</bpt>IContinueCallback::FContinue<ept id="p1">**</ept> function is called periodically by any lengthy process.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The sink object returns <ph id="ph1">`S_OK`</ph> to continue the operation, and <bpt id="p1">**</bpt>S_FALSE<ept id="p1">**</ept> to stop the procedure as soon as possible.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FContinue<ept id="p1">**</ept>, however, is not used in the context of <bpt id="p2">**</bpt>IPrint::Print<ept id="p2">**</ept>; rather, printing uses <bpt id="p3">**</bpt>IContinueCallback::FContinuePrint<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Any printing object should periodically call <bpt id="p1">**</bpt>FContinuePrinting<ept id="p1">**</ept> passing the number of pages that have been printing, the number of the page being printed, and an additional string describing the print status that the client may choose to display to the user (such as "Page 5 of 19").</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Active Document Containers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>