<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83706cc08dd6a1b9397aa2d33ec90b219b9f6f04</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-keywords.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">008d6912e0f98c82c792c9a5a2f84196155f9ef5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3c43ef08b34ca24aa21ffc98674a9867b12478c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Keywords | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Keywords</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>"Keywords" are words that have special meaning to the C compiler.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In translation phases 7 and 8, an identifier cannot have the same spelling and case as a C keyword.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(See a description of <bpt id="p1">[</bpt>translation phases<ept id="p1">](../preprocessor/phases-of-translation.md)</ept> in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept>; for information on identifiers, see <bpt id="p3">[</bpt>Identifiers<ept id="p3">](../c-language/c-identifiers.md)</ept>.) The C language uses the following keywords:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>auto</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>break</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>else</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>case</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>register</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>union</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>const</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>continue</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>for</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>signed</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>default</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>do</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>if</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>static</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You cannot redefine keywords.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, you can specify text to be substituted for keywords before compilation by using C <bpt id="p1">[</bpt>preprocessor directives<ept id="p1">](../preprocessor/preprocessor-directives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The ANSI C standard allows identifiers with two leading underscores to be reserved for compiler implementations.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, the Microsoft convention is to precede Microsoft-specific keyword names with double underscores.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These words cannot be used as identifier names.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a description of the ANSI rules for naming identifiers, including the use of double underscores, see <bpt id="p1">[</bpt>Identifiers<ept id="p1">](../c-language/c-identifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following keywords and special identifiers are recognized by the Microsoft C compiler:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept>2</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>thread<ept id="p1">**</ept>2</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__based`</ph> keyword has limited uses for 32-bit and 64-bit target compilations.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These are special identifiers when used with <ph id="ph1">`__declspec`</ph>; their use in other contexts is not restricted.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Microsoft extensions are enabled by default.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the /Za option (compile for ANSI compatibility) during compilation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you do this, Microsoft-specific keywords are disabled.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When Microsoft extensions are enabled, you can use the keywords listed above in your programs.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For ANSI compliance, most of these keywords are prefaced by a double underscore.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The four exceptions, <ph id="ph1">`dllexport`</ph>, <bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept>, <ph id="ph2">`naked`</ph>, and <bpt id="p2">**</bpt>thread<ept id="p2">**</ept>, are used only with <ph id="ph3">`__declspec`</ph> and therefore do not require a leading double underscore.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For backward compatibility, single-underscore versions of the rest of the keywords are supported.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Elements of C</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>