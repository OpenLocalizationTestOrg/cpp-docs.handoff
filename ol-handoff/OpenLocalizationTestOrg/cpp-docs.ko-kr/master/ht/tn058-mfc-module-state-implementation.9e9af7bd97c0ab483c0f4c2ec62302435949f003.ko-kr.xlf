<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a49f28143467b847c9d1ce20793e092ab6702e2c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn058-mfc-module-state-implementation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d57fca3d9c611e708fb3331a117d7eeecc110075</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df023885a6a21d93788e328c69579e4aee024c2e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN058: MFC Module State Implementation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN058: MFC Module State Implementation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This technical note describes the implementation of MFC "module state" constructs.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An understanding of the module state implementation is critical for using the MFC shared DLLs from a DLL (or OLE in-process server).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Before reading this note, refer to "Managing the State Data of MFC Modules" in <bpt id="p1">[</bpt>Creating New Documents, Windows, and Views<ept id="p1">](../mfc/creating-new-documents-windows-and-views.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article contains important usage information and overview information on this subject.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are three kinds of MFC state information: Module State, Process State, and Thread State.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Sometimes these state types can be combined.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, MFC's handle maps are both module local and thread local.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This allows two different modules to have different maps in each of their threads.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Process State and Thread State are similar.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These data items are things that have traditionally been global variables, but have need to be specific to a given process or thread for proper Win32s support or for proper multithreading support.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Which category a given data item fits in depends on that item and its desired semantics with regard to process and thread boundaries.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Module State is unique in that it can contain either truly global state or state that is process local or thread local.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition, it can be switched quickly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Module State Switching</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each thread contains a pointer to the "current" or "active" module state (not surprisingly, the pointer is part of MFC's thread local state).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This pointer is changed when the thread of execution passes a module boundary, such as an application calling into an OLE Control or DLL, or an OLE Control calling back into an application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current module state is switched by calling <bpt id="p1">**</bpt>AfxSetModuleState<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the most part, you will never deal directly with the API.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MFC, in many cases, will call it for you (at WinMain, OLE entry-points, <bpt id="p1">**</bpt>AfxWndProc<ept id="p1">**</ept>, etc.).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is done in any component you write by statically linking in a special <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept>, and a special <ph id="ph1">`WinMain`</ph> (or <ph id="ph2">`DllMain`</ph>) that knows which module state should be current.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can see this code by looking at DLLMODUL.CPP or APPMODUL.CPP in the MFC\SRC directory.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is rare that you want to set the module state and then not set it back.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Most of the time you want to "push" your own module state as the current one and then, after you are done, "pop" the original context back.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is done by the macro <bpt id="p1">[</bpt>AFX_MANAGE_STATE<ept id="p1">](http://msdn.microsoft.com/library/620cb840-4227-4a75-b36d-f7d507f44606)</ept> and the special class <bpt id="p2">**</bpt>AFX_MAINTAIN_STATE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>has special features for supporting module state switching.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In particular, a <ph id="ph1">`CCmdTarget`</ph> is the root class used for OLE automation and OLE COM entry points.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Like any other entry point exposed to the system, these entry points must set the correct module state.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How does a given <ph id="ph1">`CCmdTarget`</ph> know what the "correct" module state should be The answer is that it "remembers" what the "current" module state is when it is constructed, such that it can set the current module state to that "remembered" value when it is later called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As a result, the module state that a given <ph id="ph1">`CCmdTarget`</ph> object is associated with is the module state that was current when the object was constructed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Take a simple example of loading an INPROC server, creating an object, and calling its methods.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The DLL is loaded by OLE using <bpt id="p1">**</bpt>LoadLibrary<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RawDllMain<ept id="p1">**</ept> is called first.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It sets the module state to the known static module state for the DLL.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For this reason <bpt id="p1">**</bpt>RawDllMain<ept id="p1">**</ept> is statically linked to the DLL.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The constructor for the class factory associated with our object is called.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>is derived from <ph id="ph1">`CCmdTarget`</ph> and as a result, it remembers in which module state it was instantiated.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is important — when the class factory is asked to create objects, it knows now what module state to make current.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>is called to obtain the class factory.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>MFC searches the class factory list associated with this module and returns it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleObjectFactory::XClassFactory2::CreateInstance<ept id="p1">**</ept> is called.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Before creating the object and returning it, this function sets the module state to the module state that was current in step 3 (the one that was current when the <ph id="ph1">`COleObjectFactory`</ph> was instantiated).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is done inside of <bpt id="p1">[</bpt>METHOD_PROLOGUE<ept id="p1">](http://msdn.microsoft.com/library/e94c4939-64ea-42de-a501-55594c952828)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When the object is created, it too is a <ph id="ph1">`CCmdTarget`</ph> derivative and in the same way <ph id="ph2">`COleObjectFactory`</ph> remembered which module state was active, so does this new object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Now the object knows which module state to switch to whenever it is called.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The client calls a function on the OLE COM object it received from its <ph id="ph1">`CoCreateInstance`</ph> call.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the object is called it uses <ph id="ph1">`METHOD_PROLOGUE`</ph> to switch the module state just like <ph id="ph2">`COleObjectFactory`</ph> does.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As you can see, the module state is propagated from object to object as they are created.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It is important to have the module state set appropriately.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If it is not set, your DLL or COM object may interact poorly with an MFC application that is calling it, or may be unable to find its own resources, or may fail in other miserable ways.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that certain kinds of DLLs, specifically "MFC Extension" DLLs do not switch the module state in their <bpt id="p1">**</bpt>RawDllMain<ept id="p1">**</ept> (actually, they usually don't even have a <bpt id="p2">**</bpt>RawDllMain<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is because they are intended to behave "as if" they were actually present in the application that uses them.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>They are very much a part of the application that is running and it is their intention to modify that application's global state.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OLE Controls and other DLLs are very different.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>They do not want to modify the calling application's state; the application that is calling them may not even be an MFC application and so there may be no state to modify.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is the reason that module state switching was invented.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For exported functions from a DLL, such as one that launches a dialog box in your DLL, you need to add the following code to the beginning of the function:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This swaps the current module state with the state returned from <bpt id="p1">[</bpt>AfxGetStaticModuleState<ept id="p1">](http://msdn.microsoft.com/library/8b6c7c95-9d57-4337-9378-9b65e60d5c3b)</ept> until the end of the current scope.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Problems with resources in DLLs will occur if the <ph id="ph1">`AFX_MODULE_STATE`</ph> macro is not used.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, MFC uses the resource handle of the main application to load the resource template.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This template is actually stored in the DLL.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The root cause is that MFC's module state information has not been switched by the <ph id="ph1">`AFX_MODULE_STATE`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The resource handle is recovered from MFC's module state.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Not switching the module state causes the wrong resource handle to be used.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>does not need to be put in every function in the DLL.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`InitInstance`</ph> can be called by the MFC code in the application without <ph id="ph2">`AFX_MODULE_STATE`</ph> because MFC automatically shifts the module state before <ph id="ph3">`InitInstance`</ph> and then switches it back after <ph id="ph4">`InitInstance`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The same is true for all message map handlers.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Regular DLLs actually have a special master window procedure that automatically switches the module state before routing any message.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Process Local Data</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Process local data would not be of such great concern had it not been for the difficulty of the Win32s DLL model.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In Win32s all DLLs share their global data, even when loaded by multiple applications.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is very different from the "real" Win32 DLL data model, where each DLL gets a separate copy of its data space in each process that attaches to the DLL.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To add to the complexity, data allocated on the heap in a Win32s DLL is in fact process specific (at least as far as ownership goes).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Consider the following data and code:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Consider what happens if the above code is in located in a DLL and that DLL is loaded by two processes A and B (it could, in fact, be two instances of the same application).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A calls <ph id="ph1">`SetGlobalString("Hello from A")`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>As a result, memory is allocated for the <ph id="ph1">`CString`</ph> data in the context of process A. Keep in mind that the <ph id="ph2">`CString`</ph> itself is global and is visible to both A and B. Now B calls <ph id="ph3">`GetGlobalString(sz, sizeof(sz))`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>B will be able to see the data that A set.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is because Win32s offers no protection between processes like Win32 does.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>That is the first problem; in many cases it is not desirable to have one application affect global data that is considered to be owned by a different application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>There are additional problems as well.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Let's say that A now exits.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When A exits, the memory used by the '<ph id="ph1">`strGlobal`</ph>' string is made available for the system — that is, all memory allocated by process A is freed automatically by the operating system.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It is not freed because the <ph id="ph1">`CString`</ph> destructor is being called; it hasn't been called yet.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It is freed simply because the application which allocated it has left the scene.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Now if B called <ph id="ph1">`GetGlobalString(sz, sizeof(sz))`</ph>, it may not get valid data.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Some other application may have used that memory for something else.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Clearly a problem exists.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>MFC 3.x used a technique called thread-local storage (TLS).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MFC 3.x would allocate a TLS index that under Win32s really acts as a process-local storage index, even though it is not called that and then would reference all data based on that TLS index.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is similar to the TLS index that was used to store thread-local data on Win32 (see below for more information on that subject).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This caused every MFC DLL to utilize at least two TLS indices per process.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When you account for loading many OLE Control DLLs (OCXs), you quickly run out of TLS indices (there are only 64 available).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In addition, MFC had to place all this data in one place, in a single structure.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It was not very extensible and was not ideal with regard to its use of TLS indices.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>MFC 4.x addresses this with a set of class templates you can "wrap" around the data that should be process local.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, the problem mentioned above could be fixed by writing:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>MFC implements this in two steps.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>First, there is a layer on top of the Win32 <bpt id="p1">**</bpt>Tls<ph id="ph1">\*</ph><ept id="p1">**</ept> APIs (<bpt id="p2">**</bpt>TlsAlloc<ept id="p2">**</ept>, <bpt id="p3">**</bpt>TlsSetValue<ept id="p3">**</ept>, <bpt id="p4">**</bpt>TlsGetValue<ept id="p4">**</ept>, etc.) which use only two TLS indexes per process, no matter how many DLLs you have.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Second, the <ph id="ph1">`CProcessLocal`</ph> template is provided to access this data.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It overrides operator-&gt; which is what allows the intuitive syntax you see above.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>All objects that are wrapped by <ph id="ph1">`CProcessLocal`</ph> must be derived from <ph id="ph2">`CNoTrackObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>provides a lower-level allocator (<bpt id="p1">**</bpt>LocalAlloc<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>LocalFree<ept id="p2">**</ept>) and a virtual destructor such that MFC can automatically destroy the process local objects when the process is terminated.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Such objects can have a custom destructor if additional cleanup is required.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The above example doesn't require one, since the compiler will generate a default destructor to destroy the embedded <ph id="ph1">`CString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>There are other interesting advantages to this approach.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Not only are all <ph id="ph1">`CProcessLocal`</ph> objects destroyed automatically, they are not constructed until they are needed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>will instantiate the associated object the first time it is called, and no sooner.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the example above, that means that the '<ph id="ph1">`strGlobal`</ph>' string will not be constructed until the first time <bpt id="p1">**</bpt>SetGlobalString<ept id="p1">**</ept> or <bpt id="p2">**</bpt>GetGlobalString<ept id="p2">**</ept> is called.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In some instances, this can help decrease DLL startup time.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Thread Local Data</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Similar to process local data, thread local data is used when the data must be local to a given thread.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>That is, you need a separate instance of the data for each thread that accesses that data.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This can many times be used in lieu of extensive synchronization mechanisms.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If the data does not need to be shared by multiple threads, such mechanisms can be expensive and unnecessary.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Suppose we had a <ph id="ph1">`CString`</ph> object (much like the sample above).</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>We can make it thread local by wrapping it with a <ph id="ph1">`CThreadLocal`</ph> template:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MakeRandomString`</ph> was called from two different threads, each would "shuffle" the string in different ways without interfering with the other.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is because there is actually a <ph id="ph1">`strThread`</ph> instance per thread instead of just one global instance.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Note how a reference is used to capture the <ph id="ph1">`CString`</ph> address once instead of once per loop iteration.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The loop code could have been written with <ph id="ph1">`threadData-&gt;strThread`</ph> everywhere '<ph id="ph2">`str`</ph>' is used, but the code would be much slower in execution.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is best to cache a reference to the data when such references occur in loops.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CThreadLocal`</ph> class template uses the same mechanisms that <ph id="ph2">`CProcessLocal`</ph> does and the same implementation techniques.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>