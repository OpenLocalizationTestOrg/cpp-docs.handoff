<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">369a431dc1671427d3f64a67351f2f2be18c2a30</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\cpp-program-startup-and-termination.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">528ee16ac6d6eeae060274434f999a5241b95f77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac6d71a9ee49cfbed631b3e8b0ed0c3ed54ba4e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C++ Program Startup and Termination | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C++ Program Startup and Termination</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A C++ program performs the same operations as a C program does at program startup and at program termination, plus a few more outlined here.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Before the target environment calls the function <ph id="ph1">`main`</ph>, and after it stores any constant initial values you specify in all objects that have static duration, the program executes any remaining constructors for such static objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The order of execution is not specified between translation units, but you can nevertheless assume that some <bpt id="p1">[</bpt>iostreams<ept id="p1">](../standard-library/iostreams-conventions.md)</ept> objects are properly initialized for use by these static constructors.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These control text streams are:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cin<ept id="p1">](../standard-library/iostream.md#cin)</ept> — for standard input.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cout<ept id="p1">](../standard-library/iostream.md#cout)</ept> — for standard output.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cerr<ept id="p1">](../standard-library/iostream.md#cerr)</ept> — for unbuffered standard error output.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>clog<ept id="p1">](../standard-library/iostream.md#clog)</ept> — for buffered standard error output.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also use these objects within the destructors called for static objects, during program termination.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As with C, returning from <ph id="ph1">`main`</ph> or calling <ph id="ph2">`exit`</ph> calls all functions registered with <ph id="ph3">`atexit`</ph> in reverse order of registry.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An exception thrown from such a registered function calls <ph id="ph1">`terminate`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>STL Overview</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>