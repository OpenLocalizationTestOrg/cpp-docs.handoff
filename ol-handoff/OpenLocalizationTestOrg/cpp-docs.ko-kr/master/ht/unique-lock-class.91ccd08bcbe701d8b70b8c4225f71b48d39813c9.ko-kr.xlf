<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a411a67c44033293d0225a249108147329e8701</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\unique-lock-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8ba958326374b40686b7ad228e6df10f0c44e59</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa72b06985e7d1e40c6a1f643ee47fe485b7f399</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>unique_lock Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>unique_lock Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a template that can be instantiated to create objects that manage the locking and unlocking of a <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The template argument <ph id="ph1">`Mutex`</ph> must name a <bpt id="p1">*</bpt>mutex type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Internally, a <ph id="ph1">`unique_lock`</ph> stores a pointer to an associated <ph id="ph2">`mutex`</ph> object and a <ph id="ph3">`bool`</ph> that indicates whether the current thread owns the <ph id="ph4">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Synonym for the template argument <ph id="ph1">`Mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>unique_lock Constructor</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>~unique_lock Destructor</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases any resources that are associated with the <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>mutex</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieves the stored pointer to the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>owns_lock</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies whether the calling thread owns the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>release</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Disassociates the <ph id="ph1">`unique_lock`</ph> object from the associated <ph id="ph2">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Swaps the associated <ph id="ph1">`mutex`</ph> and ownership status with that of a specified object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>try_lock_for</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>try_lock_until</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Releases ownership of the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>operator bool</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies whether the calling thread has ownership of the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Copies the stored <ph id="ph1">`mutex`</ph> pointer and associated ownership status from a specified object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> mutex</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the stored <ph id="ph1">`mutex`</ph> pointer is <ph id="ph2">`null`</ph>, this method throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph3">`operation_not_permitted`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the associated <ph id="ph1">`mutex`</ph>, this method throws a <ph id="ph2">`system_error`</ph> that has an error code of <ph id="ph3">`resource_deadlock_would_occur`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Otherwise, this method calls <ph id="ph1">`lock`</ph> on the associated <ph id="ph2">`mutex`</ph> and sets the internal thread ownership flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>mutex</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the stored pointer to the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>operator bool</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies whether the calling thread has ownership of the associated mutex.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>if the thread owns the mutex; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Copies the stored <ph id="ph1">`mutex`</ph> pointer and associated ownership status from a specified object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the calling thread owns the previously associated <ph id="ph1">`mutex`</ph>, before this method calls <ph id="ph2">`unlock`</ph> on the <ph id="ph3">`mutex`</ph>, it assigns the new values.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>After the copy, this method sets <ph id="ph1">`Other`</ph> to a default-constructed state.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>owns_lock</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifies whether the calling thread owns the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>if the thread owns the <ph id="ph1">`mutex`</ph>; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>release</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Disassociates the <ph id="ph1">`unique_lock`</ph> object from the associated <ph id="ph2">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The previous value of the stored <ph id="ph1">`mutex`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This method sets the value of the stored <ph id="ph1">`mutex`</ph> pointer to 0 and sets the internal <ph id="ph2">`mutex`</ph> ownership flag to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Swaps the associated <ph id="ph1">`mutex`</ph> and ownership status with that of a specified object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>if the method successfully obtains ownership of the <ph id="ph1">`mutex`</ph>; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the stored <ph id="ph1">`mutex`</ph> pointer is <ph id="ph2">`null`</ph>, the method throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph3">`operation_not_permitted`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method throws a <ph id="ph2">`system_error`</ph> that has an error code of <ph id="ph3">`resource_deadlock_would_occur`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>try_lock_for</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>chrono::duration<ept id="p1">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>if the method successfully obtains ownership of the <ph id="ph1">`mutex`</ph>; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If the stored <ph id="ph1">`mutex`</ph> pointer is <ph id="ph2">`null`</ph>, the method throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph3">`operation_not_permitted`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method throws a <ph id="ph2">`system_error`</ph> that has an error code of <ph id="ph3">`resource_deadlock_would_occur`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>try_lock_until</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the associated <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>if the method successfully obtains ownership of the <ph id="ph1">`mutex`</ph>; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the stored <ph id="ph1">`mutex`</ph> pointer is <ph id="ph2">`null`</ph>, the method throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph3">`operation_not_permitted`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method throws a <ph id="ph2">`system_error`</ph> that has an error code of <ph id="ph3">`resource_deadlock_would_occur`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>unique_lock Constructor</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A mutex type object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>chrono::duration<ept id="p1">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The first constructor constructs an object that has an associated mutex pointer value of 0.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The second constructor moves the associated mutex status from <ph id="ph1">`Other`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After the move, <ph id="ph1">`Other`</ph> is no longer associated with a mutex.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The remaining constructors store &amp; <ph id="ph1">`Mtx`</ph> as the stored <ph id="ph2">`mutex`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Ownership of the <ph id="ph1">`mutex`</ph> is determined by the second argument, if it exists.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Ownership is obtained by calling the <ph id="ph1">`lock`</ph> method on the associated <ph id="ph2">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Ownership is assumed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>must be locked when the constructor is called.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The calling thread is assumed not to own the <ph id="ph1">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>must not be locked when the constructor is called.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Ownership is determined by calling <ph id="ph1">`try_lock`</ph> on the associated <ph id="ph2">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The constructor throws nothing.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Ownership is determined by calling <ph id="ph1">`try_lock_for(Rel_time)`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Ownership is determined by calling <ph id="ph1">`try_lock_until(Abs_time)`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>~unique_lock Destructor</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Releases any resources that are associated with the <ph id="ph1">`unique_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the calling thread owns the associated <ph id="ph1">`mutex`</ph>, the destructor releases ownership by calling unlock on the <ph id="ph2">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Releases ownership of the associated <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the calling thread doesn't own the associated <ph id="ph1">`mutex`</ph>, this method throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph2">`operation_not_permitted`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Otherwise, this method calls <ph id="ph1">`unlock`</ph> on the associated <ph id="ph2">`mutex`</ph> and sets the internal thread ownership flag to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>mutex&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>