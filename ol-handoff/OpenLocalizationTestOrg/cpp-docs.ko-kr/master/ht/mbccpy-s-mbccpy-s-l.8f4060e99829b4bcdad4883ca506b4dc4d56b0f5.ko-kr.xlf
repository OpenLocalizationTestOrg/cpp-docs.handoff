<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27a71726f00b075c9a3e06acc203d19a59977a60</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\mbccpy-s-mbccpy-s-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d28cc4230948cb2f911c8d7703c5037296c48ce0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2c1e4b62f4c41336d61c337e1bab48c67b486f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_mbccpy_s, _mbccpy_s_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_mbccpy_s, _mbccpy_s_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Copies one multibyte character from a string to another string.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These versions of <bpt id="p1">[</bpt>_mbccpy, _mbccpy_l<ept id="p1">](../../c-runtime-library/reference/mbccpy-mbccpy-l.md)</ept> have security enhancements, as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This API cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Copy destination.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Size of the destination buffer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Filled with the number of bytes copied (1 or 2 if successful).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pass <ph id="ph1">`NULL`</ph> if you don't care about the number.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Multibyte character to copy.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Locale to use.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Zero if successful; an error code on failure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`src`</ph> or <ph id="ph2">`dest`</ph> is <ph id="ph3">`NULL`</ph>, or if more than <ph id="ph4">`buffSizeinBytes`</ph> bytes would be copied to <ph id="ph5">`dest`</ph>, then the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the functions return <ph id="ph1">`EINVAL`</ph> and <ph id="ph2">`errno`</ph> is set to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_mbccpy_s`</ph> function copies one multibyte character from <ph id="ph2">`src`</ph> to <ph id="ph3">`dest`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`src`</ph> does not point to the lead byte of a multibyte character as determined by an implicit call to <bpt id="p1">[</bpt>_ismbblead<ept id="p1">](../../c-runtime-library/reference/ismbblead-ismbblead-l.md)</ept>, then the single byte that <ph id="ph2">`src`</ph> points to is copied.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`src`</ph> points to a lead byte but the following byte is 0 and thus invalid, then 0 is copied to <ph id="ph2">`dest`</ph>, <ph id="ph3">`errno`</ph> is set to <ph id="ph4">`EILSEQ`</ph>, and the function returns <ph id="ph5">`EILSEQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>does not append a null terminator; however, if <ph id="ph1">`src`</ph> points to a null character, then that null is copied to <ph id="ph2">`dest`</ph> (this is just a regular single-byte copy).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The value in <ph id="ph1">`pCopied`</ph> is filled with the number of bytes copied.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Possible values are 1 and 2 if the operation is successful.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`NULL`</ph> is passed in, this parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>copied to</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>non-lead-byte</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>non-lead-byte</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>lead-byte followed by non-0</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>lead-byte followed by non-0</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>lead-byte followed by 0</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Note that the second row is just a special case of the first.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Also note that the table assumes <ph id="ph1">`buffSizeInBytes` &gt;= `pCopied`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>uses the current locale for any locale-dependent behavior.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>is identical to <ph id="ph1">`_mbccpy_s`</ph> except that <ph id="ph2">`_mbccpy_s_l`</ph> uses the locale passed in for any locale-dependent behavior.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Maps to macro or inline function.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Maps to macro or inline function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Interpretation of Multibyte-Character Sequences</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>_mbclen, mblen, _mblen_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>