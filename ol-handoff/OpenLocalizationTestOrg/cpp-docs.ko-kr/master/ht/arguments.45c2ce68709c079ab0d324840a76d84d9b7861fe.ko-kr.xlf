<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c65be1a32389b23996c3e92b086d61e3166d0b97</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e8210533e35d828b6aa9a8b8a69fc8ca6c4997f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4eebf93d3c7e1e27408cc523499b6d6cb763e73</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Arguments | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The arguments in a function call have this form:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In a function call, <bpt id="p1">*</bpt>expression-list<ept id="p1">*</ept> is a list of expressions (separated by commas).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The values of these latter expressions are the arguments passed to the function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the function takes no arguments, <bpt id="p1">*</bpt>expression-list<ept id="p1">*</ept> should contain the keyword <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An argument can be any value with fundamental, structure, union, or pointer type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All arguments are passed by value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This means a copy of the argument is assigned to the corresponding parameter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The function does not know the actual memory location of the argument passed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The function uses this copy without affecting the variable from which it was originally derived.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Although you cannot pass arrays or functions as arguments, you can pass pointers to these items.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Pointers provide a way for a function to access a value by reference.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Since a pointer to a variable holds the address of the variable, the function can use this address to access the value of the variable.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pointer arguments allow a function to access arrays and functions, even though arrays and functions cannot be passed as arguments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The order in which arguments are evaluated can vary under different compilers and different optimization levels.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, the arguments and any side effects are completely evaluated before the function is entered.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Side Effects<ept id="p1">](../c-language/side-effects.md)</ept> for information on side effects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>expression-list<ept id="p1">*</ept> in a function call is evaluated and the usual arithmetic conversions are performed on each argument in the function call.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a prototype is available, the resulting argument type is compared to the prototype's corresponding parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If they do not match, either a conversion is performed, or a diagnostic message is issued.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The parameters also undergo the usual arithmetic conversions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The number of expressions in <bpt id="p1">*</bpt>expression-list<ept id="p1">*</ept> must match the number of parameters, unless the function's prototype or definition explicitly specifies a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, the compiler checks as many arguments as there are type names in the list of parameters and converts them, if necessary, as described above.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Calls with a Variable Number of Arguments<ept id="p1">](../c-language/calls-with-a-variable-number-of-arguments.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the prototype's parameter list contains only the keyword <ph id="ph1">`void`</ph>, the compiler expects zero arguments in the function call and zero parameters in the definition.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A diagnostic message is issued if it finds any arguments.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This example uses pointers as arguments:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`swap`</ph> function is declared in <ph id="ph2">`main`</ph> to have two arguments, represented respectively by identifiers <ph id="ph3">`num1`</ph> and <ph id="ph4">`num2`</ph>, both of which are pointers to <ph id="ph5">`int`</ph> values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`num1`</ph> and <ph id="ph2">`num2`</ph> in the prototype-style definition are also declared as pointers to <ph id="ph3">`int`</ph> type values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the function call</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>the address of <ph id="ph1">`x`</ph> is stored in <ph id="ph2">`num1`</ph> and the address of <ph id="ph3">`y`</ph> is stored in <ph id="ph4">`num2`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now two names, or "aliases," exist for the same location.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>References to <ph id="ph1">`*num1`</ph> and <ph id="ph2">`*num2`</ph> in <ph id="ph3">`swap`</ph> are effectively references to <ph id="ph4">`x`</ph> and <ph id="ph5">`y`</ph> in <ph id="ph6">`main`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The assignments within <ph id="ph1">`swap`</ph> actually exchange the contents of <ph id="ph2">`x`</ph> and <ph id="ph3">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, no <ph id="ph1">`return`</ph> statement is necessary.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler performs type checking on the arguments to <ph id="ph1">`swap`</ph> because the prototype of <ph id="ph2">`swap`</ph> includes argument types for each parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The identifiers within the parentheses of the prototype and definition can be the same or different.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>What is important is that the types of the arguments match those of the parameter lists in both the prototype and the definition.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Function Calls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>