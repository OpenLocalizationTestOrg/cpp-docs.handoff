<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad9b1c3569fcb5afb117fab130ca7463a3275fbb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warnings-c4200-through-c4399.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c1b6e3d730ea755465617bf04601d26a2ad2d1a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f6c6e4ddbc1fb265c00b28bc89e26fc527295c7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warnings C4200 Through C4399 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warnings C4200 Through C4399</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The articles in this part of the documentation contain information about a subset of the Visual C++ compiler warnings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can access the information here or, in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio, you can select a warning number and then choose the F1 key.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Warning</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Message</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compiler Warning (levels 2 and 4) C4200</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: zero-sized array in struct/union</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4201</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: nameless struct/union</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4202</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: '...': prototype parameter in name list illegal</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compiler warning C4203</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: union with static member variable</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4204</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: non-constant aggregate initializer</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4205</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: static function declaration in function scope</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4206</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: translation unit is empty</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4207</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: extended initializer form</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4208</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: delete [exp] - exp evaluated but ignored</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4210</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: function given file scope</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4211</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: redefined extern to static</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4212</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: function declaration used ellipsis</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4213</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: cast on l-value</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4214</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: bit field types other than int</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4215</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: long float</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4216</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: float long</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4218</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: must specify at least a storage class or a type</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4220</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>varargs matches remaining parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4221</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'identifier': cannot be initialized using address of automatic variable 'variable'</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Compiler Warning (levels 1 and 4) C4223</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: non-lvalue array converted to pointer</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4224</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: formal parameter 'identifier' was previously defined as a type</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4226</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'keyword' is an obsolete keyword</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4227</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>anachronism used: qualifiers on reference are ignored</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4228</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: qualifiers after comma in declarator list are ignored</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4229</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>anachronism used: modifiers on data are ignored</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4230</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>anachronism used: modifiers/qualifiers interspersed; qualifier ignored</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4232</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'identifier': address of dllimport 'dllimport' is not static, identity not guaranteed</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4233</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'keyword' keyword only supported in C++, not C</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4234</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'keyword' keyword reserved for future use</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4235</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'keyword' keyword not supported on this architecture</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4237</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>'keyword' keyword is not yet supported, but reserved for future use</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4238</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: class rvalue used as lvalue</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4239</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'token': conversion from 'type1' to 'type2'</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4240</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: access to 'classname' now defined to be 'acess_specifier1', previously it was defined to be 'access_specifier2'</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4242</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>'identfier': conversion from 'type1' to 'type1', possible loss of data</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4243</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>'conversion_type' conversion from 'type1' to 'type1' exists, but is inaccessible</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4244</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>'conversion_type': conversion from 'type1' to 'type2', possible loss of data</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Compiler Warning (levels 3 and 4) C4244</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>'conversion_type': conversion from 'type1' to 'type2', possible loss of data</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4245</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>'conversion_type': conversion from 'type1' to 'type2', signed/unsigned mismatch</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4250</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>'classname': inherits 'base_classname::member' via dominance</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4251</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>'identifier': 'object_type1' 'identifier1' needs to have dll-interface to be used by clients of 'object_type' 'identfier2'</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4254</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4255</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>'function': no function prototype given: converting '()' to '(void)'</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4256</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>'function': constructor for class with virtual bases has '...'; calls may not be compatible with older versions of Visual C++</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4258</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>'variable': definition from the for loop is ignored; the definition from the enclosing scope is used</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4263</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>'function': member function does not override any base class virtual member function</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4264</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>'virtual_function': no override available for virtual member function from base 'classname'; function is hidden</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4265</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>'classname': class has virtual functions, but destructor is not virtual\n instances of this class may not be destructed correctly</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4266</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>'virtual_function': no override available for virtual member function from base 'classname'; function is hidden</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4267</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>'variable': conversion from 'size_t' to 'type', possible loss of data</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4268</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>'identifier': 'const' static/global data initialized with compiler generated default constructor fills the object with zeros</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4269</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>'identifier': 'const' automatic data initialized with compiler generated default constructor produces unreliable results</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4272</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>'function': is marked __declspec(dllimport); must specify native calling convention when importing a function.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4273</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>'function': inconsistent dll linkage</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4274</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>ident ignored; see documentation for #pragma comment(exestr, 'string')</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4275</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>non dll-interface 'classkey' 'identifier1' used as base for dll-interface 'classkey' 'identifier2'</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4276</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>'function': no prototype provided; assumed no parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4277</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>imported item 'classname::member' exists as both data member and function member; data member ignored</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4278</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>'identifier': identifier in type library 'library' is already a macro; use the 'rename' qualifier</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3 and level 4) C4279</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>'identifier': identifier in type library 'library' is a keyword; use the 'rename' qualifier</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4280</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>'operator -&gt;' was self recursive through type 'type'</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4281</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>'operator -&gt;' recursion occurred through type 'type1'</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4282</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>then through type 'type2'</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4283</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>and through type 'typeN'</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4285</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>return type for 'identifier::operator -&gt;' is recursive if applied using infix notation</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4286</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>'derived_type': is caught by base class ('base_type') on line 'line_number'</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4287</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>'operator': unsigned/negative constant mismatch</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4288</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope; it conflicts with the declaration in the outer scope</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4289</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4290</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>C++ exception specification ignored except to indicate a function is not __declspec(nothrow)</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4291</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>'declaration': no matching operator delete found; memory will not be freed if initialization throws an exception</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4293</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>'shift_operator': shift count negative or too big, undefined behavior</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4295</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>'array': array is too small to include a terminating null character</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4296</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>'operator': expression is always 'boolean_value'</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4297</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>'function': function assumed not to throw an exception but does</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4298</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>'identifier': identifier in type library 'library' is already a macro; renaming to '__identifier'</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4299</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>'identifier': identifier in type library 'library' is a keyword; renaming to '__identifier'</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Compiler warning C4301</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>'derived_class::function': overriding virtual function only differs from 'base_class:function' by const/volatile qualifier</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4302</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>'conversion': truncation from 'type1' to 'type2'</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Compiler warning C4303</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>C-style_cast' from 'type1' to 'type2' is deprecated, use static_cast, __try_cast or dynamic_cast</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4305</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>'conversion': truncation from 'type1' to 'type2'</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4306</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>'conversion': conversion from 'type1' to 'type2' of greater size</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4307</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>'operator': integral constant overflow</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4308</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>negative integral constant converted to unsigned type</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4309</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>'conversion': truncation of constant value</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4310</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>cast truncates constant value</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4311</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>'variable': pointer truncation from 'type1' to 'type2'</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4312</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>'operation': conversion from 'type1' to 'type2' of greater size</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4313</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>'function': 'format_specifier' in format string conflicts with argument 'argument_number' of type 'type'</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Compiler warning C4314</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>expected pragma parameter to be '32' or '64'</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4315</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>'classname': 'this' pointer for member 'member' may not be aligned 'alignment' as expected by the constructor</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4316</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>'identifier': object allocated on the heap may not be aligned 'alignment'</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4317</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>'printf_family' : not enough arguments passed for format string</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Compiler warning C4318</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>passing constant zero as the length to memset</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4319</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>'operator': zero extending 'type1' to 'type2' of greater size</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4321</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>automatically generating an IID for interface '%$S'</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4322</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>automatically generating a CLSID for class '%$S'</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4323</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>re-using registered CLSID for class '%$S'</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4324</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>'structname': structure was padded due to __declspec(align())</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4325</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>attributes for standard section 'section' ignored</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4326</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>return type of 'function' should be 'type1' instead of 'type2'</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Compiler warning C4327</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>'assignment': indirection alignment of LHS ('alignment1') is greater than RHS ('alignment2')</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Compiler warning C4328</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>'function': indirection alignment of formal parameter parameter_number (parameter_alignment) is greater than the actual argument alignment (argument_alignment)</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4329</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>__declspec(align()) is ignored on enum</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4330</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>attribute '%s' for section '%s' ignored</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4333</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>'shift_operator': right shift by too large amount, data loss</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4334</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>'shift_operator': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4335</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Mac file format detected: please convert the source file to either DOS or UNIX format</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4336</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>import cross-referenced type library 'library1' before importing 'library2'</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4337</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>cross-referenced type library 'library1' in 'library2' is being automatically imported</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4338</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>pragma %s: standard section '%s' is used</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4339</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>'type': use of undefined type detected in 'WinRT&amp;#124;CLR' meta-data - use of this type may lead to a runtime exception</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4340</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>'value': value wrapped from positive to negative value</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4342</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>behavior change: 'function' called, but a member operator was called in previous versions</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4343</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>pragma optimize("g",off) overrides /Og option</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4344</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>behavior change: use of explicit template arguments results in call to 'function'</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4346</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>'name': dependent name is not a type</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4348</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>'type': redefinition of default parameter: parameter 'parameter_number'</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4350</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>behavior change: 'member1' called instead of 'member2'</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4352</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>'%$I': intrinsic function already defined</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4353</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>nonstandard extension used: constant 0 as function expression.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Use '__noop' function intrinsic instead</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiler Warning C4355<ept id="p1">](../../error-messages/compiler-warnings/compiler-warning-c4355.md)</ept>Compiler warning (level 1 and level 4) C4355</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>'this': used in base member initializer list</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4356</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>'member': static data member cannot be initialized via derived class</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4357</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>param array argument found in formal argument list for delegate 'delegate' ignored when generating 'function'</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4358</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>'operator': return type of combined delegates is not 'void'; returned value is undefined</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4359</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>'type': Alignment specifier is less than actual alignment ('alignment'), and will be ignored.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 2) C4362</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>'%$S': alignment greater than 8 bytes is not supported by CLR</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4364</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>using for assembly 'assembly' previously seen at 'location'('line_number') without as_friend attribute; as_friend not applied</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4365</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>'expression': conversion from 'type1' to 'type2', signed/unsigned mismatch</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4366</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The result of the unary 'operator' operator may be unaligned</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4367</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Conversion from '%$T' to '%$T' may cause datatype misalignment exception</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4368</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>cannot define 'member' as a member of managed 'type': mixed types are not supported</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4369</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>'enumerator':  enumerator value 'value' cannot be represented as 'type', value is 'new_value'</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Compiler warning C4370</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>'classname': layout of class has changed from a previous version of the compiler due to better packing</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4371</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>'classname': layout of class may have changed from a previous version of the compiler due to better packing of member 'member'</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4373</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>'derived_class::function': virtual function overrides 'base_class::function', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4374</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>'function1': interface method will not be implemented by non-virtual method 'function2'</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4375</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>non-public method 'method2' does not override 'method2'</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4376</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>access specifier 'old_specifier:' is no longer supported: please use 'new_specifier:' instead</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4377</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>native types are private by default; -d1PrivateNativeTypes is deprecated</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4378</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Must obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4379</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Version 'version_number' of the common language runtime is not supported by this compiler.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Using this version may cause unexpected results</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 1) C4380</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>'%$S': A default constructor cannot be deprecated</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4381</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>'function1': interface method will not be implemented by non-public method 'function2'</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4382</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>throwing 'type': a type with __clrcall destructor or copy constructor can only be caught in /clr:pure module</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4383</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>'instance_dereference_operator': the meaning of dereferencing a handle can change, when a user-defined 'instance_dereference_operator' operator exists; write the operator as a static function to be explicit about the operand</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4384</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>pragma 'make_public' should only be used at global scope</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 3) C4387</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>'%s': was considered</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 4) C4388</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>'%$L': signed/unsigned mismatch</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4389</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>'operator': signed/unsigned mismatch</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4390</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>';': empty controlled statement found; is this the intent?</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4391</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>'function_signature': incorrect return type for intrinsic function, expected 'type'</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4392</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>'function_signature': incorrect number of arguments for intrinsic function, expected 'argument_count' arguments</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4393</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>'variable': const has no effect on 'literal' data member; ignored</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Compiler Warning C4394</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>'function': per-appdomain symbol should not be marked with __declspec('dllexport')</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4395</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>'function': member function will be invoked on a copy of the initonly data member 'member'</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Compiler warning (level 2) C4396</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>'%$S': the inline specifier cannot be used when a friend declaration refers to a specialization of a function template</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4397</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>DefaultCharSetAttribute is ignored</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 3) C4398</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>'variable': per-process global object might not work correctly with multiple appdomains; consider using __declspec(appdomain)</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1) C4399</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>'symbol': per-process symbol should not be marked with __declspec('dllimport') when compiled with /clr:pure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>