<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70c873ec9986dbe484a328e94829f836978a3fe4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\result-of-class2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9f78049dfbc76e2fd4eb6a2b37b2a3f55262d86</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e60d3073987c86b1f1ccb22db9224fa1bb94c9ab</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>result_of Class2 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>result_of Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The return type of a wrapped callable object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>struct result_of {</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>typedef T0 type;</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A description of a function call (see Remarks section).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The template class defines its member <ph id="ph1">`type`</ph> as a synonym for the return type of a function call described by its template argument <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The template argument must be of the form <ph id="ph1">`Fty(T1, T2, ..., TN)`</ph>, where <ph id="ph2">`Fty`</ph> is a callable type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The template determines the return type according to the first of the following rules that applies:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a pointer to function type <ph id="ph2">`R(*)(U1, U2, ..., UN)`</ph> the return type is <ph id="ph3">`R`</ph>;</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a reference to function type <ph id="ph2">`R(&amp;)(U1, U2, ..., UN)`</ph> the return type is <ph id="ph3">`R`</ph>;</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a pointer to member function type <ph id="ph2">`R(U1::*)(U2, ..., UN)`</ph> the return type is <ph id="ph3">`R`</ph>;</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a pointer to data member type <ph id="ph2">`R U1::*`</ph> the return type is <ph id="ph3">`R`</ph>;</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a class with a member typedef <ph id="ph2">`result_type`</ph> the return type is <ph id="ph3">`Fty::result_type`</ph>;</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`N`</ph> is 0 (that is, <ph id="ph2">`Ty`</ph> is of the form <ph id="ph3">`Fty()`</ph>) the return type is <ph id="ph4">`void`</ph>;</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Fty`</ph> is a class with a member template named <ph id="ph2">`result`</ph> the return type is <ph id="ph3">`Fty::result&lt;T1, T2, ..., TN&gt;::type`</ph>;</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>in all other cases it is an error.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Ã‚</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>functional&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>