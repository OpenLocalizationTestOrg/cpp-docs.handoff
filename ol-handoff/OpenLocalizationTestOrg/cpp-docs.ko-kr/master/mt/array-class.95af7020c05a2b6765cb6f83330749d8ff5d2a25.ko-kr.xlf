<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf6713921a697a704cf377d43bb1466d82c48e32</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\reference\array-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58282de20600ae81ad5bbfb2cd2cc646458d7d48</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0cefa9a6fe9c7b62832eaa92657927e0a697d60</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>array Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>array Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a data container used to move data to an accelerator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The element type of the data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The rank of the array.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::array Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">`array`</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::~array Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::copy_to Method<ept id="p1">](#copy_to)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Copies the contents of the array to another array.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::data Method<ept id="p1">](#data)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the raw data of the array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::get_accelerator_view Method<ept id="p1">](#get_accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that represents the location where the array is allocated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This property can be accessed only on the CPU.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::get_associated_accelerator_view Method<ept id="p1">](#get_associated_accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the second <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that is passed as a parameter when a staging constructor is called to instantiate the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::get_cpu_access_type Method<ept id="p1">](#get_cpu_access_type)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept> of the array.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This method can be accessed only on the CPU.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::get_extent Method<ept id="p1">](#get_extent)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object of the array.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::reinterpret_as Method<ept id="p1">](#reinterpret_as)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a one-dimensional array that contains all the elements in the <ph id="ph1">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::section Method<ept id="p1">](#section)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns a subsection of the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object that is at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::view_as Method<ept id="p1">](#view_as)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object that is constructed from the <ph id="ph1">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::operator std::vector<ph id="ph1">&amp;lt;</ph>value_type<ph id="ph2">&amp;gt;</ph> Operator<ept id="p1">](#array__operator_vec)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Uses <ph id="ph1">`copy(*this, vector)`</ph> to implicitly convert the array to a std::<bpt id="p1">[</bpt>vector<ept id="p1">](../../../standard-library/vector-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::operator() Operator<ept id="p1">](#array__operator_call)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the element value that is specified by the parameters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::operator[] Operator<ept id="p1">](#operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns the element that is at the specified index.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::operator= Operator<ept id="p1">](#operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <ph id="ph1">`array`</ph> object into this one.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Public Constants</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::rank Constant<ept id="p1">](#rank)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Stores the rank of the array.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::accelerator_view Data Member<ept id="p1">](#accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that represents the location where the array is allocated.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This property can be accessed only on the CPU.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::associated_accelerator_view Data Member<ept id="p1">](#associated_accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets the second <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that is passed as a parameter when a staging constructor is called to instantiate the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::cpu_access_type Data Member<ept id="p1">](#cpu_access_type)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept> that represents how the CPU can access the storage of the array.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array::extent Data Member<ept id="p1">](#extent)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the extent that defines the shape of the array.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`array&lt;T,N&gt;`</ph> represents a dense and regular (not jagged) <bpt id="p1">*</bpt>N<ept id="p1">*</ept>-dimensional array that is located in a specific location, such as an accelerator or the CPU.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The data type of the elements in the array is <ph id="ph1">`T`</ph>, which must be of a type that is compatible with the target accelerator.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Although the rank, <ph id="ph1">`N`</ph>, (of the array is determined statically and is part of the type, the extent of the array is determined by the runtime and is expressed by using class <ph id="ph2">`extent&lt;N&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array can have any number of dimensions, although some functionality is specialized for <ph id="ph1">`array`</ph> objects with rank one, two, and three.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you omit the dimension argument, the default is 1.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Array data is laid out contiguously in memory.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Elements that differ by one in the least significant dimension are adjacent in memory.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Arrays are logically considered to be value types, because when an array is copied to another array, a deep copy is performed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Two arrays never point to the same data.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`array&lt;T,N&gt;`</ph> type is used in several scenarios:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As a data container that can be used in computations on an accelerator.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>As a data container to hold memory on the host CPU (that can be used to copy to and from other arrays).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As a staging object to act as a fast intermediary in host-to-device copies.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> amp.h</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> Concurrency</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::~array Destructor</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::accelerator_view Data Member</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that represents the location where the array is allocated.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This property can be accessed only on the CPU.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::array Constructor</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">[</bpt>array class<ept id="p1">](array-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>There is no default constructor for <ph id="ph1">`array&lt;T,N&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>All constructors are run on the CPU only.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>They cannot be executed on a Direct3D target.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An accelerator_view which specifies the preferred target location of the array.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that specifies the location of the array.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The desired <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept>  for the array on the CPU.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This parameter has a default value of <ph id="ph1">`access_type_auto`</ph> leaving the CPU <ph id="ph2">`access_type`</ph> determination to the runtime.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The actual CPU <ph id="ph1">`access_type`</ph> for the array can be queried using the <ph id="ph2">`get_cpu_access_type`</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The extent in each dimension of the array.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The most significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The least significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The type of the input interator.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To object to copy.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A beginning iterator into the source container.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An ending iterator into the source container.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Other data source.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The rank of the section.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The data type of the elements that are copied.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="associated_accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::associated_accelerator_view Data Member</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Gets the second <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that is passed as a parameter when a staging constructor is called to instantiate the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="copy_to"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::copy_to Method</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Copies the contents of the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> to another <ph id="ph1">`array`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object to copy to.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpu_access_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::cpu_access_type Data Member</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets the CPU access_type allowed for this array.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="data"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::data Method</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the raw data of the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A pointer to the raw data of the array.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="extent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::extent Data Member</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object that defines the shape of the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::get_accelerator_view Method</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that represents the location where the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept> object is allocated.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This property can be accessed only on the CPU.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator_view`</ph> object that represents the location where the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object is allocated.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_associated_accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::get_associated_accelerator_view Method</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the second <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object that is passed as a parameter when a staging constructor is called to instantiate the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The second <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object passed to the staging constructor.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_cpu_access_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::get_cpu_access_type Method</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns the CPU access_type that's allowed for this array.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_extent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::get_extent Method</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object of the <bpt id="p2">[</bpt>array<ept id="p2">](array-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`extent`</ph> object of the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="array__operator_vec"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::operator std::vector<ph id="ph1">&amp;lt;</ph>value_type<ph id="ph2">&amp;gt;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Uses <ph id="ph1">`copy(*this, vector)`</ph> to implicitly convert the array to a std::vector object.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>```  operator std::vector&lt;value_type&gt;() const restrict(cpu);</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>value_type&amp; operator() (const index&lt;_Rank&gt;&amp; _Index) restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>const value_type&amp; operator() (const index&lt;_Rank&gt;&amp; _Index) const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>value_type&amp; operator() (int _I0, int _I1) restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>const value_type&amp; operator() (int _I0, int _I1) const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>value_type&amp; operator() (int _I0, int _I1, int _I2) restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>const value_type&amp; operator() (int _I0, int _I1, int _I2) const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>typename details::_Projection_result_type&lt;value_type,_Rank&gt;::_Result_type operator()(int _I) restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>typename details::_Projection_result_type&lt;value_type,_Rank&gt;::_Const_result_type operator()(int _I) const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>value_type&amp; operator<ph id="ph1">\[</ph><ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>( const index&lt;_Rank&gt;&amp; _Index) restrict(amp,cpu );</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>const value_type&amp; operator<ph id="ph1">\[</ph><ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>( const index&lt;_Rank&gt;&amp; _Index) const restrict(amp,cpu );</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>typename details::_Projection_result_type&lt;value_type,_Rank&gt;::_Result_type operator<bpt id="p1">[</bpt><ept id="p1">](int _i)</ept> restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>typename details::_Projection_result_type&lt;value_type,_Rank&gt;::_Const_result_type operator<bpt id="p1">[</bpt><ept id="p1">](int _i)</ept> const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>array&amp; operator= ( const array&amp; _Other) restrict(cpu);</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>array&amp; operator= ( array&amp;&amp; _Other) restrict(cpu);</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>array&amp; operator= ( const array_view&lt;const value_type, _Rank&gt;&amp; _Src) restrict(cpu);</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>static const int rank = _Rank;</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>template &lt; typename _Value_type2</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>array_view&lt;_Value_type2,1&gt; reinterpret_as()restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>template &lt; typename _Value_type2</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>array_view&lt;const _Value_type2,1&gt; reinterpret_as() const restrict(amp,cpu);</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="section"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::section Method</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returns a subsection of the <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object that is at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The most significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The least significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object that specifies the extent of the section.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The origin is 0.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>index<ept id="p1">](index-class.md)</ept> object that specifies the location of the origin.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The subsection is the rest of the extent.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The most significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The least significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The rank of the section.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object that specifies the extent of the section.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>index<ept id="p1">](index-class.md)</ept> object that specifies the location of the origin.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The data type of the elements that are copied.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Returns a subsection of the <ph id="ph1">`array`</ph> object that is at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>When only the <ph id="ph1">`index`</ph> object is specified, the subsection contains all elements in the associated grid that have indexes that are larger than the indexes of the elements in the <ph id="ph2">`index`</ph> object.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="view_as"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array::view_as Method</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Reinterprets this array as an <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> of a different rank.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The rank of the <ph id="ph1">`extent`</ph> object passed as a parameter.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The extent that is used to construct the new <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The data type of the elements in both the original <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object and the returned <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object that is constructed.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency Namespace (C++ AMP)<ept id="p1">](concurrency-namespace-cpp-amp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>