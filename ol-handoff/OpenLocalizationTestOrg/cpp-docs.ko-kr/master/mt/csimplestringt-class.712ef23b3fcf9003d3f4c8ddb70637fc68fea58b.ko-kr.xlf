<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6dcfd962ba00f84a4b2a1282bc2da94f8a7c47e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\reference\csimplestringt-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7df40fae784fc51165e11d0d619a8f85ae4f4c87</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bb221766685110b30f3a10bb04683c80f2081aa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CSimpleStringT Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CSimpleStringT Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class represents a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The character type of the string class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`char`</ph> (for ANSI character strings).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wchar_t`</ph> (for Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TCHAR<ept id="p1">**</ept> (for both ANSI and Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSimpleStringT::PCXSTR<ept id="p1">](#csimplestringt__pcxstr)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A pointer to a constant string.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSimpleStringT::PXSTR<ept id="p1">](#csimplestringt__pxstr)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A pointer to a string.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSimpleStringT::CSimpleStringT<ept id="p1">](#csimplestringt__ctor)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Constructs <ph id="ph1">`CSimpleStringT`</ph> objects in various ways.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSimpleStringT::~CSimpleStringT<ept id="p1">](#csimplestringt__dtor)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;&lt;&lt;&lt;&lt;&lt;&lt; 
</ph><ph id="ph2">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Append<ept id="p1">](#csimplestringt__append)</ept>|Appends a <ph id="ph3">`CSimpleStringT`</ph> object to an existing <ph id="ph4">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::AppendChar<ept id="p1">](#csimplestringt__appendchar)</ept>|Appends a character to an existing <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::CopyChars<ept id="p1">](#csimplestringt__copychars)</ept>|Copies a character or characters to another string.|</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::CopyCharsOverlapped<ept id="p1">](#csimplestringt__copycharsoverlapped)</ept>|Copies a character or characters to another string in which the buffers overlap.|</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Empty<ept id="p1">](#csimplestringt__empty)</ept>|Forces a string to have a length of zero.|</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::FreeExtra<ept id="p1">](#csimplestringt__freeextra)</ept>|Frees any extra memory previously allocated by the string object.|</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetAllocLength<ept id="p1">](#csimplestringt__getalloclength)</ept>|Retrieves the allocated length of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetAt<ept id="p1">](#csimplestringt__getat)</ept>|Returns the character at a given position.|</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept>|Returns a pointer to the characters in a <ph id="ph2">`CSimpleStringT`</ph>.|</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetBufferSetLength<ept id="p1">](#csimplestringt__getbuffersetlength)</ept>|Returns a pointer to the characters in a <ph id="ph2">`CSimpleStringT`</ph>, truncating to the specified length.|</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetLength<ept id="p1">](#csimplestringt__getlength)</ept>|Returns the number of characters in a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetManager<ept id="p1">](#csimplestringt__getmanager)</ept>|Retrieves the memory manager of the <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetString<ept id="p1">](#csimplestringt__getstring)</ept>|Retrieves the character string|</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::IsEmpty<ept id="p1">](#csimplestringt__isempty)</ept>|Tests whether a <ph id="ph2">`CSimpleStringT`</ph> object contains no characters.|</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::LockBuffer<ept id="p1">](#csimplestringt__lockbuffer)</ept>|Disables reference counting and protects the string in the buffer.|</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Preallocate<ept id="p1">](#csimplestringt__preallocate)</ept>|Allocates a specific amount of memory for the character buffer.|</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::ReleaseBuffer<ept id="p1">](#csimplestringt__releasebuffer)</ept>|Releases control of the buffer returned by <ph id="ph2">`GetBuffer`</ph>.|</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::ReleaseBufferSetLength<ept id="p1">](#csimplestringt__releasebuffersetlength)</ept>|Releases control of the buffer returned by <ph id="ph2">`GetBuffer`</ph>.|</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetAt<ept id="p1">](#csimplestringt__setat)</ept>|Sets a character at a given position.|</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetManager<ept id="p1">](#csimplestringt__setmanager)</ept>|Sets the memory manager of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetString<ept id="p1">](#csimplestringt__setstring)</ept>|Sets the string of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::StringLength<ept id="p1">](#csimplestringt__stringlength)</ept>|Returns the number of characters in the specified string.|</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Truncate<ept id="p1">](#csimplestringt__truncate)</ept>|Truncates the string to a specified length.|</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::UnlockBuffer<ept id="p1">](#csimplestringt__unlockbuffer)</ept>|Enables reference counting and releases the string in the buffer.|</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">=======
</ph><ph id="ph2">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Append<ept id="p1">](#csimplestringt__append)</ept>|Appends a <ph id="ph3">`CSimpleStringT`</ph> object to an existing <ph id="ph4">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::AppendChar<ept id="p1">](#csimplestringt__appendchar)</ept>|Appends a character to an existing <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::CopyChars<ept id="p1">](#csimplestringt__copychars)</ept>|Copies a character or characters to another string.|</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::CopyCharsOverlapped<ept id="p1">](#csimplestringt__copycharsoverlapped)</ept>|Copies a character or characters to another string in which the buffers overlap.|</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Empty<ept id="p1">](#csimplestringt__empty)</ept>|Forces a string to have a length of zero.|</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::FreeExtra<ept id="p1">](#csimplestringt__freeextra)</ept>|Frees any extra memory previously allocated by the string object.|</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetAllocLength<ept id="p1">](#csimplestringt__getalloclength)</ept>|Retrieves the allocated length of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetAt<ept id="p1">](#csimplestringt__getat)</ept>|Returns the character at a given position.|</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept>|Returns a pointer to the characters in a <ph id="ph2">`CSimpleStringT`</ph>.|</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetBufferSetLength<ept id="p1">](#csimplestringt__getbuffersetlength)</ept>|Returns a pointer to the characters in a <ph id="ph2">`CSimpleStringT`</ph>, truncating to the specified length.|</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetLength<ept id="p1">](#csimplestringt__getlength)</ept>|Returns the number of characters in a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetManager<ept id="p1">](#csimplestringt__getmanager)</ept>|Retrieves the memory manager of the <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::GetString<ept id="p1">](#csimplestringt__getstring)</ept>|Retrieves the character string|</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::IsEmpty<ept id="p1">](#csimplestringt__isempty)</ept>|Tests whether a <ph id="ph2">`CSimpleStringT`</ph> object contains no characters.|</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::LockBuffer<ept id="p1">](#csimplestringt__lockbuffer)</ept>|Disables reference counting and protects the string in the buffer.|</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Preallocate<ept id="p1">](#csimplestringt__preallocate)</ept>|Allocates a specific amount of memory for the character buffer.|</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::ReleaseBuffer<ept id="p1">](#csimplestringt__releasebuffer)</ept>|Releases control of the buffer returned by <ph id="ph2">`GetBuffer`</ph>.|</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::ReleaseBufferSetLength<ept id="p1">](#csimplestringt__releasebuffersetlength)</ept>|Releases control of the buffer returned by <ph id="ph2">`GetBuffer`</ph>.|</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetAt<ept id="p1">](#csimplestringt__setat)</ept>|Sets a character at a given position.|</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetManager<ept id="p1">](#csimplestringt__setmanager)</ept>|Sets the memory manager of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::SetString<ept id="p1">](#csimplestringt__setstring)</ept>|Sets the string of a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::StringLength<ept id="p1">](#csimplestringt__stringlength)</ept>|Returns the number of characters in the specified string.|</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::Truncate<ept id="p1">](#csimplestringt__truncate)</ept>|Truncates the string to a specified length.|</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::UnlockBuffer<ept id="p1">](#csimplestringt__unlockbuffer)</ept>|Enables reference counting and releases the string in the buffer.|</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>master</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::operator PCXSTR<ept id="p1">](#csimplestringt__operator_pcxstr)</ept>|Directly accesses characters stored in a <ph id="ph2">`CSimpleStringT`</ph> object as a C-style string.|</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::operator<ph id="ph2">\[</ph><ph id="ph3">\]</ph><ept id="p1">](#csimplestringt__operator_at)</ept>|Returns the character at a given position — operator substitution for <ph id="ph4">`GetAt`</ph>.|</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::operator +=<ept id="p1">](#csimplestringt__operator_add_eq)</ept>|Concatenates a new string to the end of an existing string.|</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CSimpleStringT::operator =<ept id="p1">](#csimplestringt__operator_eq)</ept>|Assigns a new value to a <ph id="ph2">`CSimpleStringT`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CSimpleStringT`</ph> is the base class for the various string classes supported by Visual C++.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It provides minimal support for memory management of the string object and basic buffer manipulation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more advanced string objects, see <bpt id="p1">[</bpt>CStringT Class<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__append"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> CSimpleStringT::Append</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Appends a <ph id="ph1">`CSimpleStringT`</ph> object to an existing <ph id="ph2">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSimpleStringT`</ph> object to be appended.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the characters to be appended.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The number of characters to append.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Call this method to append an existing <ph id="ph1">`CSimpleStringT`</ph> object to another <ph id="ph2">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::Append`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__appendchar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> CSimpleStringT::AppendChar</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Appends a character to an existing <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ch<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The character to be appended</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Call this function to append the specified character to the end of an existing <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__copychars"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> CSimpleStringT::CopyChars</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Copies a character or characters to a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A pointer to a character string.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the characters to be copied.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">`pchSrc`</ph> characters to be copied.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Call this method to copy characters from <ph id="ph1">`pchSrc`</ph> to the <ph id="ph2">`pchDest`</ph> string.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::CopyChars`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__copycharsoverlapped"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::CopyCharsOverlapped</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Copies a character or characters to a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A pointer to a character string.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the characters to be copied.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">`pchSrc`</ph> characters to be copied.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call this method to copy characters from <ph id="ph1">`pchSrc`</ph> to the <ph id="ph2">`pchDest`</ph> string.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`CopyChars`</ph>, <ph id="ph2">`CopyCharsOverlapped`</ph> provides a safe method for copying from character buffers that might be overlapped.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CSimpleStringT::CopyChars<ept id="p1">](#csimplestringt__copychars)</ept>, or the source code for <ph id="ph1">`CSimpleStringT::SetString`</ph> (located in atlsimpstr.h).</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::CSimpleStringT</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`CSimpleStringT`</ph> object to be copied into this <ph id="ph2">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A pointer to an array of characters of length <ph id="ph1">`nLength`</ph>, not null terminated.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A null-terminated string to be copied into this <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A count of the number of characters in <ph id="ph1">`pch`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A pointer to the memory manager of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`IAtlStringMgr`</ph> and memory management for <ph id="ph2">`CSimpleStringT`</ph>, see <bpt id="p1">[</bpt>Memory Management and CStringT<ept id="p1">](../memory-management-with-cstringt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Construct a new <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Because the constructors copy the input data into new allocated storage, memory exceptions may result.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::CSimpleStringT`</ph> by using the ATL <ph id="ph2">`typedef``CSimpleString`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CSimpleString`</ph> is a commonly used specialization of the class template <ph id="ph2">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__empty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::Empty</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Makes this <ph id="ph1">`CSimpleStringT`</ph> object an empty string and frees memory as appropriate.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Strings: CString Exception Cleanup<ept id="p1">](../cstring-exception-cleanup.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__freeextra"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::FreeExtra</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Frees any extra memory previously allocated by the string but no longer needed.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This should reduce the memory overhead consumed by the string object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The method reallocates the buffer to the exact length returned by <bpt id="p1">[</bpt>GetLength<ept id="p1">](#csimplestringt__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The output from this example is as follows:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getalloclength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetAllocLength</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Retrieves the allocated length of a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The number of characters allocated for this object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Call this method to determine the number of characters allocated for this <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>FreeExtra<ept id="p1">](#csimplestringt__freeextra)</ept> for an example of calling this function.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetAt</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Returns one character from a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Zero-based index of the character in the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`iChar`</ph> parameter must be greater than or equal to 0 and less than the value returned by <bpt id="p1">[</bpt>GetLength<ept id="p1">](#csimplestringt__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`GetAt`</ph> will generate an exception.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`XCHAR`</ph> that contains the character at the specified position in the string.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Call this method to return the one character specified by <ph id="ph1">`iChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The overloaded subscript (<ph id="ph1">`[]`</ph>) operator is a convenient alias for <ph id="ph2">`GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The null terminator is addressable without generating an exception by using <ph id="ph1">`GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>However, it is not counted by <ph id="ph1">`GetLength`</ph>, and the value returned is 0.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use <ph id="ph1">`CSimpleStringT::GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getbuffer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetBuffer</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the internal character buffer for the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The minimum number of characters that the character buffer can hold.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This value does not include space for a null terminator.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nMinBufferLength`</ph> is larger than the length of the current buffer, <ph id="ph2">`GetBuffer`</ph> destroys the current buffer, replaces it with a buffer of the requested size, and resets the object reference count to zero.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If you have previously called <bpt id="p1">[</bpt>LockBuffer<ept id="p1">](#csimplestringt__lockbuffer)</ept> on this buffer, you lose the buffer lock.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`PXSTR`</ph> pointer to the object's (null-terminated) character buffer.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Call this method to return the buffer contents of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">`PXSTR`</ph> is not a constant and therefore allows direct modification of <ph id="ph2">`CSimpleStringT`</ph> contents.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If you use the pointer returned by <ph id="ph1">`GetBuffer`</ph> to change the string contents, you must call <bpt id="p1">[</bpt>ReleaseBuffer<ept id="p1">](#csimplestringt__releasebuffer)</ept> before you use any other <ph id="ph2">`CSimpleStringT`</ph> member methods.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The address returned by <ph id="ph1">`GetBuffer`</ph> may not be valid after the call to <ph id="ph2">`ReleaseBuffer`</ph> because additional <ph id="ph3">`CSimpleStringT`</ph> operations can cause the <ph id="ph4">`CSimpleStringT`</ph> buffer to be reallocated.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The buffer is not reallocated if you do not change the length of the <ph id="ph1">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The buffer memory is automatically freed when the <ph id="ph1">`CSimpleStringT`</ph> object is destroyed.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If you keep track of the string length yourself, you should not append the terminating null character.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>However, you must specify the final string length when you release the buffer with <ph id="ph1">`ReleaseBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If you do append a terminating null character, you should pass –1 (the default) for the length.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ReleaseBuffer`</ph> then determines the buffer length.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If there is insufficient memory to satisfy the <ph id="ph1">`GetBuffer`</ph> request, this method throws a CMemoryException*.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getbuffersetlength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetBufferSetLength</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the internal character buffer for the <ph id="ph1">`CSimpleStringT`</ph> object, truncating or growing its length if necessary to exactly match the length specified in <ph id="ph2">`nLength`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The exact size of the <ph id="ph1">`CSimpleStringT`</ph> character buffer in characters.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`PXSTR`</ph> pointer to the object's (null-terminated) character buffer.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve a specified length of the internal buffer of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">`PXSTR`</ph> pointer is not <ph id="ph2">`const`</ph> and thus allows direct modification of <ph id="ph3">`CSimpleStringT`</ph> contents.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you use the pointer returned by <bpt id="p1">[</bpt>GetBufferSetLength<ept id="p1">](#csimplestringt__getbuffersetlength)</ept> to change the string contents, call <ph id="ph1">`ReleaseBuffer`</ph> to update the internal state of <ph id="ph2">`CsimpleStringT`</ph> before you use any other <ph id="ph3">`CSimpleStringT`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The address returned by <ph id="ph1">`GetBufferSetLength`</ph> may not be valid after the call to <ph id="ph2">`ReleaseBuffer`</ph> because additional <ph id="ph3">`CSimpleStringT`</ph> operations can cause the <ph id="ph4">`CSimpleStringT`</ph> buffer to be reallocated.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The buffer is not reassigned if you do not change the length of the <ph id="ph1">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The buffer memory is automatically freed when the <ph id="ph1">`CSimpleStringT`</ph> object is destroyed.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>If you keep track of the string length yourself, do not not append the terminating null character.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>You must specify the final string length when you release the buffer by using <ph id="ph1">`ReleaseBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>If you do append a terminating null character when you call <ph id="ph1">`ReleaseBuffer`</ph>, pass –1 (the default) for the length to <ph id="ph2">`ReleaseBuffer`</ph>, and <ph id="ph3">`ReleaseBuffer`</ph> will perform a <ph id="ph4">`strlen`</ph> on the buffer to determine its length.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For more information about reference counting, see the following articles:</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managing Object Lifetimes through Reference Counting<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687260)</ept> in the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing Reference Counting<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693431)</ept> in the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for Managing Reference Counts<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692481)</ept> in the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::GetBufferSetLength`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getlength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetLength</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A count of the characters in the string.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Call this method to return the number of characters in the object.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The count does not include a null terminator.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For multibyte character sets (MBCS), <ph id="ph1">`GetLength`</ph> counts each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two bytes.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>FreeExtra<ept id="p1">](#csimplestringt__freeextra)</ept> for an example of calling this function.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getmanager"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetManager</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Retrieves the memory manager of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A pointer to the memory manager for the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the memory manager used by the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For more information on memory managers and string objects, see <bpt id="p1">[</bpt>Memory Management and CStringT<ept id="p1">](../memory-management-with-cstringt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__getstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::GetString</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Retrieves the character string.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated character string.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the character string associated with the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">`PCXSTR`</ph> pointer is <ph id="ph2">`const`</ph> and does not allow direct modification of <ph id="ph3">`CSimpleStringT`</ph> contents.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::GetString`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__isempty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::IsEmpty</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Tests a <ph id="ph1">`CSimpleStringT`</ph> object for the empty condition.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the <ph id="ph1">`CSimpleStringT`</ph> object has 0 length; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Call this method to determine if the object contains an empty string.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::IsEmpty`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__lockbuffer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::LockBuffer</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Disables reference counting and protects the string in the buffer.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CSimpleStringT`</ph> object or a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Call this method to lock the buffer of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>By calling <ph id="ph1">`LockBuffer`</ph>, you create a copy of the string, with a –1 for the reference count.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>When the reference count value is -1, the string in the buffer is considered to be in a "locked" state.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>While in a locked state, the string is protected in two ways:</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>No other string can get a reference to the data in the locked string, even if that string is assigned to the locked string.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The locked string will never reference another string, even if that other string is copied to the locked string.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>By locking the string in the buffer, you ensure that the string's exclusive hold on the buffer will remain intact.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>After you have finished with <ph id="ph1">`LockBuffer`</ph>, call <bpt id="p1">[</bpt>UnlockBuffer<ept id="p1">](#csimplestringt__unlockbuffer)</ept> to reset the reference count to 1.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept> on a locked buffer and you set the <ph id="ph1">`GetBuffer`</ph> parameter <ph id="ph2">`nMinBufferLength`</ph> to greater than the length of the current buffer, you will lose the buffer lock.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Such a call to <ph id="ph1">`GetBuffer`</ph> destroys the current buffer, replaces it with a buffer of the requested size, and resets the reference count to zero.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>For more information about reference counting, see the following articles:</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managing Object Lifetimes through Reference Counting<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687260)</ept> in the Windows SDK</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing Reference Counting<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693431)</ept> in the Windows SDK</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for Managing Reference Counts<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692481)</ept> in the Windows SDK</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::LockBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="simplestringt__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::operator<ph id="ph1">\[</ph><ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Call this function to access a single character of the character array.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Zero-based index of a character in the string.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The overloaded subscript (<ph id="ph1">`[]`</ph>) operator returns a single character specified by the zero-based index in <ph id="ph2">`iChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This operator is a convenient substitute for the <bpt id="p1">[</bpt>GetAt<ept id="p1">](#csimplestringt__getat)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>You can use the subscript (<ph id="ph1">`[]`</ph>) operator to get the value of a character in a <ph id="ph2">`CSimpleStringT`</ph>, but you cannot use it to change the value of a character in a <ph id="ph3">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <bpt id="p1">**</bpt>CSimpleStringT::operator []<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::operator <ph id="ph1">\[</ph><ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Call this function to access a single character of the character array.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Zero-based index of a character in the string.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The overloaded subscript (<ph id="ph1">`[]`</ph>) operator returns a single character specified by the zero-based index in <ph id="ph2">`iChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>This operator is a convenient substitute for the <bpt id="p1">[</bpt>GetAt<ept id="p1">](#csimplestringt__getat)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>You can use the subscript (<ph id="ph1">`[]`</ph>) operator to get the value of a character in a <ph id="ph2">`CSimpleStringT`</ph>, but you cannot use it to change the value of a character in a <ph id="ph3">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__operator_add_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::operator +=</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Joins a new string or character to the end of an existing string.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>A pointer to an existing <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ch<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The character to be appended.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The operator accepts another <ph id="ph1">`CSimpleStringT`</ph> object or a character.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Note that memory exceptions may occur whenever you use this concatenation operator because new storage may be allocated for characters added to this <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <bpt id="p1">**</bpt>CSimpleStringT::operator +=<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::operator =</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Assigns a new value to a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>A pointer to an existing <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If the destination string (the left side) is already large enough to store the new data, no new memory allocation is performed.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Note that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <bpt id="p1">**</bpt>CSimpleStringT::operator =<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__operator_pcxstr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::operator PCXSTR</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Directly accesses characters stored in a <ph id="ph1">`CSimpleStringT`</ph> object as a C-style string.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A character pointer to the string's data.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>No characters are copied; only a pointer is returned.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Be careful with this operator.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If you change a <ph id="ph1">`CString`</ph> object after you have obtained the character pointer, you may cause a reallocation of memory that invalidates the pointer.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <bpt id="p1">**</bpt>CSimpleStringT::operator PCXSTR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__pcxstr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::PCXSTR</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A pointer to a constant string.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__preallocate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::Preallocate</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Allocates a specific amount of bytes for the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The exact size of the <ph id="ph1">`CSimpleStringT`</ph> character buffer in characters.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Call this method to allocate a specific buffer size for the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CSimpleStringT`</ph> generates a <ph id="ph2">`STATUS_NO_MEMORY`</ph> exception if it is unable to allocate space for the character buffer.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>By default, memory allocation is performed by WIN32 API functions <ph id="ph1">`HeapAlloc`</ph> or <ph id="ph2">`HeapReAlloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::Preallocate`</ph>.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__pxstr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::PXSTR</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>A pointer to a string.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__releasebuffer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::ReleaseBuffer</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Releases control of the buffer allocated by <bpt id="p1">[</bpt>GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The new length of the string in characters, not counting a null terminator.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>If the string is null terminated, the -1 default value sets the <ph id="ph1">`CSimpleStringT`</ph> size to the current length of the string.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Call this method to reallocate or free up the buffer of the string object.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If you know that the string in the buffer is null terminated, you can omit the <ph id="ph1">`nNewLength`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>If your string is not null terminated, use <ph id="ph1">`nNewLength`</ph> to specify its length.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The address returned by <bpt id="p1">[</bpt>GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept> is invalid after the call to <ph id="ph1">`ReleaseBuffer`</ph> or any other <ph id="ph2">`CSimpleStringT`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::ReleaseBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__releasebuffersetlength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::ReleaseBufferSetLength</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Releases control of the buffer allocated by <bpt id="p1">[</bpt>GetBuffer<ept id="p1">](#csimplestringt__getbuffer)</ept>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The length of the string being released</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>This function is functionally similar to <bpt id="p1">[</bpt>ReleaseBuffer<ept id="p1">](#csimplestringt__releasebuffer)</ept> except that a valid length for the string object must be passed.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__setat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::SetAt</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Sets a single character from a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Zero-based index of the character in the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`iChar`</ph> parameter must be greater than or equal to 0 and less than the value returned by <bpt id="p1">[</bpt>GetLength<ept id="p1">](#csimplestringt__getlength)</ept>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ch<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The new character.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Call this method to overwrite the character located at <ph id="ph1">`iChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>This method will not enlarge the string if <ph id="ph1">`iChar`</ph> exceeds the bounds of the existing string.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::SetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__setmanager"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::SetManager</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Specifies the memory manager of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>A pointer to the new memory manager.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Call this method to specify a new memory manager used by the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>For more information on memory managers and string objects, see <bpt id="p1">[</bpt>Memory Management and CStringT<ept id="p1">](../memory-management-with-cstringt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::SetManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__setstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::SetString</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Sets the string of a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>A count of the number of characters in <ph id="ph1">`pszSrc`</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Copy a string into the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetString`</ph> overwrites the older string data in the buffer.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Both versions of <ph id="ph1">`SetString`</ph> check whether <ph id="ph2">`pszSrc`</ph> is a null pointer, and if it is, throw an <bpt id="p1">**</bpt>E_INVALIDARG<ept id="p1">**</ept> error.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The one-parameter version of <ph id="ph1">`SetString`</ph> expects <ph id="ph2">`pszSrc`</ph> to point to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The two-parameter version of <ph id="ph1">`SetString`</ph> also expects <ph id="ph2">`pszSrc`</ph> to be a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>It uses <ph id="ph1">`nLength`</ph> as the string length unless it encounters a null terminator first.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The two-parameter version of <ph id="ph1">`SetString`</ph> also checks whether <ph id="ph2">`pszSrc`</ph> points to a location in the current buffer in <ph id="ph3">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>In this special case, <ph id="ph1">`SetString`</ph> uses a memory copy function that does not overwrite the string data as it copies the string data back to its buffer.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::SetString`</ph>.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__stringlength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::StringLength</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in the specified string.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The number of characters in <ph id="ph1">`psz`</ph>; not counting a null terminator.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the number of characters in the string pointed to by <ph id="ph1">`psz`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::StringLength`</ph>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__truncate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::Truncate</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Truncates the string to the new length.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The new length of the string.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Call this method to truncate the contents of the string to the new length.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>This does not affect the allocated length of the buffer.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>To decrease or increase the current buffer, see <bpt id="p1">[</bpt>FreeExtra<ept id="p1">](#csimplestringt__freeextra)</ept> and <bpt id="p2">[</bpt>Preallocate<ept id="p2">](#csimplestringt__preallocate)</ept>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CSimpleStringT::Truncate`</ph>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__unlockbuffer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::UnlockBuffer</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Unlocks the buffer of the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Call this method to reset the reference count of the string to 1.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSimpleStringT`</ph> destructor automatically calls <ph id="ph2">`UnlockBuffer`</ph> to ensure that the buffer is not locked when the destructor is called.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>For an example of this method, see <bpt id="p1">[</bpt>LockBuffer<ept id="p1">](#csimplestringt__lockbuffer)</ept>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csimplestringt__dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSimpleStringT::~CSimpleStringT</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Destroys a <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Call this method to destroy the <ph id="ph1">`CSimpleStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsimpstr.h</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ATL/MFC Shared Classes<ept id="p1">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>