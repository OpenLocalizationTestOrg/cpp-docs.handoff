<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6421f67389dd9608e1e6a8d70a8060b85566b824</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\debugging-and-error-reporting-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9273376240e31e8139b6b1886154dfac5c28505a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6efb35eb512d470ec3ad6f0ef2eff40d537bfafd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Debugging and Error Reporting Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debugging and Error Reporting Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These macros provide useful debugging and trace facilities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ATL_DEBUG_INTERFACES<ept id="p1">](#_atl_debug_interfaces)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Writes, to the output window, any interface leaks that are detected when <ph id="ph1">`_Module.Term`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ATL_DEBUG_QI<ept id="p1">](#_atl_debug_qi)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Writes all calls to <ph id="ph1">`QueryInterface`</ph> to the output window.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATLASSERT<ept id="p1">](#atlassert)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Performs the same functionality as the <bpt id="p1">[</bpt>_ASSERTE<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro found in the C run-time library.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATLENSURE<ept id="p1">](#atlensure)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Performs parameters validation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`AtlThrow`</ph> if needed</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATLTRACENOTIMPL<ept id="p1">](#atltracenotimpl)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Sends a message to the dump device that the specified function is not implemented.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATLTRACE<ept id="p1">](http://msdn.microsoft.com/library/c796baa5-e2b9-4814-a27d-d800590b102e)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Included for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ATLTRACE2<ept id="p1">](#atltrace2)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="_atl_debug_interfaces"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  _ATL_DEBUG_INTERFACES</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Define this macro before including any ATL header files to trace all <ph id="ph1">`AddRef`</ph> and <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> calls on your components' interfaces to the output window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The trace output will appear as shown below:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first part of each trace will always be <ph id="ph1">`ATL: QIThunk`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next is a value identifying the particular <bpt id="p1">*</bpt>interface thunk<ept id="p1">*</ept> being used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An interface thunk is an object used to maintain a reference count and provide the tracing capability used here.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A new interface thunk is created on every call to <ph id="ph1">`QueryInterface`</ph> except for requests for the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface (in this case, the same thunk is returned every time to comply with COM's identity rules).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Next you'll see <ph id="ph1">`AddRef`</ph> or <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> indicating which method was called.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Following that, you'll see a value identifying the object whose interface reference count was changed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The value traced is the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> pointer of the object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The reference count that is traced is the reference count on that thunk after <ph id="ph1">`AddRef`</ph> or <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> was called.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that this reference count may not match the reference count for the object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each thunk maintains its own reference count to help you fully comply with COM's reference-counting rules.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The final piece of information traced is the name of the object and the interface being affected by the <ph id="ph1">`AddRef`</ph> or <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Any interface leaks that are detected when the server shuts down and <ph id="ph1">`_Module.Term`</ph> is called will be logged like this:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The information provided here maps directly to the information provided in the previous trace statements, so you can examine the reference counts throughout the whole lifetime of an interface thunk.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In addition, you get an indication of the maximum reference count on that interface thunk.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_ATL_DEBUG_INTERFACES`</ph> can be used in retail builds.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="_atl_debug_qi"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  _ATL_DEBUG_QI</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Writes all calls to <ph id="ph1">`QueryInterface`</ph> to the output window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a call to <ph id="ph1">`QueryInterface`</ph> failed, the output window will display:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>interface name<ept id="p1">*</ept><ph id="ph1"> - </ph><ph id="ph2">`failed`</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atlassert"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  ATLASSERT</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ATLASSERT`</ph> macro performs the same functionality as the <bpt id="p1">[</bpt>_ASSERTE<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro found in the C run-time library.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Expression (including pointers) that evaluates to nonzero or 0.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In debug builds, <ph id="ph1">`ATLASSERT`</ph> evaluates <ph id="ph2">`booleanExpression`</ph> and generates a debug report when the result is false.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atlensure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  ATLENSURE</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This macro is used to validate parameters passed to a function.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specifies a boolean expression to be tested.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specifies an error code to return.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These macros provide a mechanism to detect and notify the user of incorrect parameter usage.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The macro calls <ph id="ph1">`ATLASSERT`</ph> and if the condition fails calls <ph id="ph2">`AtlThrow`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>ATLENSURE<ept id="p1">**</ept> case, <ph id="ph1">`AtlThrow`</ph> is called with E_FAIL.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>ATLENSURE_THROW<ept id="p1">**</ept> case, <ph id="ph1">`AtlThrow`</ph> is called with the specified HRESULT.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The difference between <bpt id="p1">**</bpt>ATLENSURE<ept id="p1">**</ept> and <ph id="ph1">`ATLASSERT`</ph> is that <bpt id="p2">**</bpt>ATLENSURE<ept id="p2">**</ept> throws an exception in Release builds as well as in Debug builds.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#108<ept id="p2">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atltracenotimpl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  ATLTRACENOTIMPL</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In debug builds of ATL, sends the string " <ph id="ph1">`funcname`</ph> is not implemented" to the dump device and returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>[in] A string containing the name of the function that is not implemented.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In release builds, simply returns <bpt id="p1">**</bpt>E_NOTIMPL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#127<ept id="p2">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atltrace__atl_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  ATLTRACE (ATL)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Included for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>[in] The string and variables to send to the Visual C++ output window or any application that traps these messages.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[in] Type of event or method on which to report.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See the Remarks for a list of categories.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[in] The level of tracing to report.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See the Remarks for details.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[in] The formatted string to send to the dump device.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ATLTRACE2<ept id="p1">](#atltrace2)</ept> for a description of <bpt id="p2">**</bpt>ATLTRACE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ATLTRACE<ept id="p1">**</ept> and <ph id="ph1">`ATLTRACE2`</ph> have the same behavior, <bpt id="p2">**</bpt>ATLTRACE<ept id="p2">**</ept> is included for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="atltrace2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  ATLTRACE2</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Reports warnings to an output device, such as the debugger window, according to the indicated flags and levels.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>[in] The string to send to the Visual C++ output window or any application that traps these messages.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>[in] Type of event or method on which to report.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See the Remarks for a list of categories.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[in] The level of tracing to report.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See the Remarks for details.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`printf`</ph>-style format string to use to create a string to send to the dump device.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The short form of <ph id="ph1">`ATLTRACE2`</ph> writes a string to the debugger's output window.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The second form of <ph id="ph1">`ATLTRACE2`</ph> also writes output to the debugger's output window, but is subject to the settings of the ATL/MFC Trace Tool (see <bpt id="p1">[</bpt>ATLTraceTool Sample<ept id="p1">](../../visual-cpp-samples.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, if you set <ph id="ph1">`level`</ph> to 4 and the ATL/MFC Trace Tool to level 0, you will not see the message.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>level<ept id="p1">*</ept> can be 0, 1, 2, 3, or 4.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The default, 0, reports only the most serious problems.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`category`</ph> parameter lists the trace flags to set.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>These flags correspond to the types of methods for which you want to report.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The tables below list the valid trace flags you can use for the <ph id="ph1">`category`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>ATL Trace Flags</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ATL Category</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Reports on all ATL applications.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Reports on COM methods.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Reports on QueryInterface calls.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Reports on the registration of objects.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Reports on changing reference count.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Reports on windows methods; for example, reports an invalid message map ID.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Reports on controls; for example, reports when a control or its window is destroyed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Reports hosting messages; for example, reports when a client in a container is activated.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Reports on OLE DB Consumer Template; for example, when a call to GetData fails, the output can contain the HRESULT.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Reports on OLE DB Provider Template; for example, reports if the creation of a column failed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Reports for MMC SnapIn application.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Reports that the indicated function is not implemented.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>atlTraceAllocation<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Reports messages printed by the memory debugging tools in atldbgmem.h.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>MFC Trace Flags</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>MFC Category</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceAppMsg<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>General purpose, MFC messages.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Always recommended.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceDumpContext<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Messages from <bpt id="p1">[</bpt>CDumpContext<ept id="p1">](../../mfc/reference/cdumpcontext-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceWinMsg<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Messages from MFC's message handling code.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceMemory<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Messages from MFC's memory management code.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceCmdRouting<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Messages from MFC's Windows command routing code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceHtml<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Messages from MFC's DHTML dialog support.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceSocket<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Messages from MFC's socket support.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceOle<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Messages from MFC's OLE support.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceDatabase<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Messages from MFC's database support.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>traceInternet<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Messages from MFC's Internet support.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To declare a custom trace category, declare a global instance of the <ph id="ph1">`CTraceCategory`</ph> class as follows:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#109<ept id="p2">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The category name, <ph id="ph1">`MY_CATEGORY`</ph> in this example, is the name you specify to the <ph id="ph2">`category`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The first parameter is the category name that will appear in the ATL/MFC Trace Tool.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The second parameter is the default trace level.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This parameter is optional, and the default trace level is 0.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To use a user-defined category:</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#110<ept id="p2">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To specify that you want to filter the trace messages, insert definitions for these macros into Stdafx.h before the <ph id="ph1">`#include &lt;atlbase.h&gt;`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Alternatively, you can set the filter in the preprocessor directives in the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Preprocessor<ept id="p1">**</ept> tab and then insert the global into the <bpt id="p2">**</bpt>Preprocessor Definitions<ept id="p2">**</ept> edit box.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Atlbase.h contains default definitions of the <ph id="ph1">`ATLTRACE2`</ph> macros and these definitions will be used if you don't define these symbols before atlbase.h is processed.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In release builds, <ph id="ph1">`ATLTRACE2`</ph> compiles to <ph id="ph2">`(void) 0`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ATLTRACE2`</ph> limits the contents of the string to be sent to the dump device to no more than 1023 characters, after formatting.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ATLTRACE<ept id="p1">**</ept> and <ph id="ph1">`ATLTRACE2`</ph> have the same behavior, <bpt id="p2">**</bpt>ATLTRACE<ept id="p2">**</ept> is included for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#111<ept id="p2">](../../atl/codesnippet/cpp/debugging-and-error-reporting-macros_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Macros<ept id="p1">](../../atl/reference/atl-macros.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Debugging and Error Reporting Global Functions<ept id="p1">](../../atl/reference/debugging-and-error-reporting-global-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>