<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a8678f7bdc2a83cb86ab53f5f2793003f4a0c03</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-4-c4754.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f1eb0745f56d7d6ad9dd4e9fae14cd864c53e8d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f654b6d359b9252211d4fe5225dd87aab048d45a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4754 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 4) C4754</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Conversion rules for arithmetic operations in a comparison mean that one branch cannot be executed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The C4754 warning is issued because the result of the comparison is always the same.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This indicates that one of the branches of the condition is never executed, most likely because the associated integer expression is incorrect.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This code defect often occurs in incorrect integer overflow checks on 64-bit architectures.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Integer conversion rules are complex and there are many subtle pitfalls.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As an alternative to fixing each C4754 warning, you can update the code to use the <bpt id="p1">[</bpt>SafeInt Library<ept id="p1">](../../windows/safeint-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This sample generates C4754:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The addition <ph id="ph1">`a + b`</ph> could cause an arithmetic overflow before the result is upcast to a 64-bit value and assigned to the 64-bit variable <ph id="ph2">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means that the check on <ph id="ph1">`x`</ph> is redundant and will never catch an overflow.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this case, the compiler emits this warning:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To eliminate the warning, you can change the assignment statement to cast the operands to 8-byte values:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The next sample also generates C4754.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sizeof()`</ph> operator returns a <ph id="ph2">`size_t`</ph>, whose size is architecture-dependent.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The example code works on 32-bit architectures where a <ph id="ph1">`size_t`</ph> is a 32-bit type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, on 64-bit architectures, <ph id="ph1">`size_t`</ph> is a 64-bit type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The conversion rules for integers mean that <ph id="ph1">`a`</ph> is upcast to a 64-bit value in the expression <ph id="ph2">`a + b &lt; a`</ph> as if it were written <ph id="ph3">`(size_t)a + (size_t)b &lt; (size_t)a`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> are 32-bit integers, the 64-bit addition operation can never overflow, and the constraint never holds.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As a result, the code never detects an integer overflow condition on 64-bit architectures.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example causes the compiler to emit this warning:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Notice that the warning message explicitly lists the constant value 4 instead of the original source stringâ€”by the time the warning analysis encounters the offending code, <ph id="ph1">`sizeof(unsigned long)`</ph> has already been converted to a constant.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, you may have to track down which expression in the source code is associated with the constant value in the warning message.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The most common sources of code resolved to constants in C4754 warning messages are expressions such as <ph id="ph1">`sizeof(TYPE)`</ph> and <ph id="ph2">`strlen(szConstantString)`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this case, the fixed code would resemble this:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The line number referred to in compiler warnings is the last line of a statement.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In a warning message about a complex conditional statement that's spread over multiple lines, the line that has the code defect may be several lines before the line that's reported.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>