<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3142624a110a399f40f53781420b64e17a0df519</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\fma-fmaf-fmal.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f065017f243e596088a7019114a1635070d4779c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b77134b029a23449471b23a5e260c65f6240dbc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>fma, fmaf, fmal | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>fma, fmaf, fmal</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multiplies two values together,  adds a third value, and then rounds the result, without losing any precision due to intermediary rounding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`x`</ph></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first value to multiply.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`y`</ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The second value to multiply.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`z`</ph></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The value to add.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Returns (<ph id="ph1">`x`</ph> ×    <ph id="ph2">`y`</ph>) + <ph id="ph3">`z`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The return value is then rounded using the current rounding format.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Otherwise, may return one of the following values:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Issue</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Return</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x`</ph> = INFINITY, <ph id="ph2">`y`</ph> = 0 or</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x`</ph> = 0, <ph id="ph2">`y`</ph> = INFINITY</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>NaN</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> = exact ± INFINITY, <ph id="ph3">`z`</ph> = INFINITY with the opposite sign</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NaN</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> = NaN</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>NaN</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>not (<ph id="ph1">`x`</ph> = 0, <ph id="ph2">`y`</ph>= indefinite) and <ph id="ph3">`z`</ph> = NaN</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>not (<ph id="ph1">`x`</ph>=indefinite, <ph id="ph2">`y`</ph>=0) and <ph id="ph3">`z`</ph> = NaN</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>NaN</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Overflow range error</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Underflow range error</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>correct value, after rounding.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Errors are reported as specified in <bpt id="p1">[</bpt>_matherr<ept id="p1">](../../c-runtime-library/reference/matherr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because C++ allows overloading, you can call overloads of <ph id="ph1">`fma`</ph> that take and return float and long double types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In a C program, <ph id="ph1">`fma`</ph> always takes and returns a double.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This function computes the value as though it were taken to infinite precision, and then rounds the final result.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>C header</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C++ header</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`fma`</ph>,                <ph id="ph2">`fmaf`</ph>,  <ph id="ph3">`fmal`</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>math.h&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>cmath&gt;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Alphabetical Function Reference<ept id="p1">](../../c-runtime-library/reference/crt-alphabetical-function-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>remainder, remainderf, remainderl<ept id="p1">](../../c-runtime-library/reference/remainder-remainderf-remainderl.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>remquo, remquof, remquol<ept id="p1">](../../c-runtime-library/reference/remquo-remquof-remquol.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>