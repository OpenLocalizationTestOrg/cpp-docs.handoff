<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96d4f83814f6111e41eac016b6803e8cea4d0d37</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdoctemplate-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11e740088e5bb94d7fdfd828e41f6fd7c538a1e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">121f2e9eb30791e121d495481794aca69c371144</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDocTemplate Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDocTemplate Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An abstract base class that defines the basic functionality for document templates.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CDocTemplate<ept id="p1">](#cdoctemplate__cdoctemplate)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDocTemplate`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::AddDocument<ept id="p1">](#cdoctemplate__adddocument)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a document to a template.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CloseAllDocuments<ept id="p1">](#cdoctemplate__closealldocuments)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Closes all documents associated with this template.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CreateNewDocument<ept id="p1">](#cdoctemplate__createnewdocument)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a new document.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CreateNewFrame<ept id="p1">](#cdoctemplate__createnewframe)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates a new frame window containing a document and view.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CreateOleFrame<ept id="p1">](#cdoctemplate__createoleframe)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an OLE-enabled frame window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::CreatePreviewFrame<ept id="p1">](#cdoctemplate__createpreviewframe)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a child frame used for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::GetDocString<ept id="p1">](#cdoctemplate__getdocstring)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Retrieves a string associated with the document type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::GetFirstDocPosition<ept id="p1">](#cdoctemplate__getfirstdocposition)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the position of the first document associated with this template.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::GetNextDoc<ept id="p1">](#cdoctemplate__getnextdoc)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves a document and the position of the next one.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::InitialUpdateFrame<ept id="p1">](#cdoctemplate__initialupdateframe)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes the frame window, and optionally makes it visible.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::LoadTemplate<ept id="p1">](#cdoctemplate__loadtemplate)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Loads the resources for a given <ph id="ph1">`CDocTemplate`</ph> or derived class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::MatchDocType<ept id="p1">](#cdoctemplate__matchdoctype)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Determines the degree of confidence in the match between a document type and this template.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::OpenDocumentFile<ept id="p1">](#cdoctemplate__opendocumentfile)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Opens a file specified by a pathname.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::RemoveDocument<ept id="p1">](#cdoctemplate__removedocument)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Removes a document from a template.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::SaveAllModified<ept id="p1">](#cdoctemplate__saveallmodified)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Saves all documents associated with this template which have been modified.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::SetContainerInfo<ept id="p1">](#cdoctemplate__setcontainerinfo)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines the resources for OLE containers when editing an in-place OLE item.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::SetDefaultTitle<ept id="p1">](#cdoctemplate__setdefaulttitle)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Displays the default title in the document window's title bar.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::SetPreviewInfo<ept id="p1">](#cdoctemplate__setpreviewinfo)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Setups out of process preview handler.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocTemplate::SetServerInfo<ept id="p1">](#cdoctemplate__setserverinfo)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Determines the resources and classes when the server document is embedded or edited in-place.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You usually create one or more document templates in the implementation of your application's <ph id="ph1">`InitInstance`</ph> function.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A document template defines the relationships among three types of classes:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A document class, which you derive from <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A view class, which displays data from the document class listed above.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can derive this class from <ph id="ph1">`CView`</ph>, <ph id="ph2">`CScrollView`</ph>, <ph id="ph3">`CFormView`</ph>, or <ph id="ph4">`CEditView`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(You can also use <ph id="ph1">`CEditView`</ph> directly.)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A frame window class, which contains the view.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For a single document interface (SDI) application, you derive this class from <ph id="ph1">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For a multiple document interface (MDI) application, you derive this class from <ph id="ph1">`CMDIChildWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you don't need to customize the behavior of the frame window, you can use <ph id="ph1">`CFrameWnd`</ph> or <ph id="ph2">`CMDIChildWnd`</ph> directly without deriving your own class.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your application has one document template for each type of document that it supports.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if your application supports both spreadsheets and text documents, the application has two document template objects.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Each document template is responsible for creating and managing all the documents of its type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The document template stores pointers to the <ph id="ph1">`CRuntimeClass`</ph> objects for the document, view, and frame window classes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>These <ph id="ph1">`CRuntimeClass`</ph> objects are specified when constructing a document template.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The document template contains the ID of the resources used with the document type (such as menu, icon, or accelerator table resources).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The document template also has strings containing additional information about its document type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>These include the name of the document type (for example, "Worksheet") and the file extension (for example, ".xls").</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Optionally, it can contain other strings used by the application's user interface, the Windows File Manager, and Object Linking and Embedding (OLE) support.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If your application is an OLE container and/or server, the document template also defines the ID of the menu used during in-place activation.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If your application is an OLE server, the document template defines the ID of the toolbar and menu used during in-place activation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You specify these additional OLE resources by calling <ph id="ph1">`SetContainerInfo`</ph> and <ph id="ph2">`SetServerInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CDocTemplate`</ph> is an abstract class, you cannot use the class directly.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A typical application uses one of the two <ph id="ph1">`CDocTemplate`</ph>-derived classes provided by the Microsoft Foundation Class Library: <ph id="ph2">`CSingleDocTemplate`</ph>, which implements SDI, and <ph id="ph3">`CMultiDocTemplate`</ph>, which implements MDI.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See those classes for more information on using document templates.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If your application requires a user-interface paradigm that is fundamentally different from SDI or MDI, you can derive your own class from <ph id="ph1">`CDocTemplate`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CDocTemplate`</ph>, see <bpt id="p1">[</bpt>Document Templates and the Document/View Creation Process<ept id="p1">](../../mfc/document-templates-and-the-document-view-creation-process.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__adddocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::AddDocument</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Use this function to add a document to a template.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pointer to the document to be added.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The derived classes <bpt id="p1">[</bpt>CMultiDocTemplate<ept id="p1">](../../mfc/reference/cmultidoctemplate-class.md)</ept> and <bpt id="p2">[</bpt>CSingleDocTemplate<ept id="p2">](../../mfc/reference/csingledoctemplate-class.md)</ept> override this function.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you derive your own document-template class from <ph id="ph1">`CDocTemplate`</ph>, your derived class must override this function.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__cdoctemplate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CDocTemplate</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDocTemplate`</ph> object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the resources used with the document type.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This may include menu, icon, accelerator table, and string resources.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The string resource consists of up to seven substrings separated by the '\n' character (the '\n' character is needed as a place holder if a substring is not included; however, trailing '\n' characters are not necessary); these substrings describe the document type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For information on the substrings, see <bpt id="p1">[</bpt>GetDocString<ept id="p1">](#cdoctemplate__getdocstring)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This string resource is found in the application's resource file.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Note that the string begins with a '\n' character; this is because the first substring is not used for MDI applications and so is not included.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can edit this string using the string editor; the entire string appears as a single entry in the String Editor, not as seven separate entries.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`CRuntimeClass`</ph> object of the document class.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This class is a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>-derived class you define to represent your documents.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`CRuntimeClass`</ph> object of the frame window class.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This class can be a <ph id="ph1">`CFrameWnd`</ph>-derived class, or it can be <ph id="ph2">`CFrameWnd`</ph> itself if you want default behavior for your main frame window.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`CRuntimeClass`</ph> object of the view class.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This class is a <ph id="ph1">`CView`</ph>-derived class you define to display your documents.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use this member function to construct a <ph id="ph1">`CDocTemplate`</ph> object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Dynamically allocate a <ph id="ph1">`CDocTemplate`</ph> object and pass it to <bpt id="p1">[</bpt>CWinApp::AddDocTemplate<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate)</ept> from the <ph id="ph2">`InitInstance`</ph> member function of your application class.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__closealldocuments"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CloseAllDocuments</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this member function to close all open documents.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specifies whether or not the session is being ended.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the session is being ended; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This member function is typically used as part of the File Exit command.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The default implementation of this function calls the <bpt id="p1">[</bpt>CDocument::DeleteContents<ept id="p1">](../../mfc/reference/cdocument-class.md#cdocument__deletecontents)</ept> member function to delete the document's data and then closes the frame windows for all the views attached to the document.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Override this function if you want to require the user to perform special cleanup processing before the document is closed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For example, if the document represents a record in a database, you may want to override this function to close the database.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__createnewdocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CreateNewDocument</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Call this member function to create a new document of the type associated with this document template.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A pointer to the newly created document, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__createnewframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CreateNewFrame</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Creates a new frame window containing a document and view.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The document to which the new frame window should refer.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The frame window on which the new frame window is to be based.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A pointer to the newly created frame window, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateNewFrame`</ph> uses the <ph id="ph2">`CRuntimeClass`</ph> objects passed to the constructor to create a new frame window with a view and document attached.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`pDoc`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the framework outputs a TRACE message.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pOther`</ph> parameter is used to implement the Window New command.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>It provides a frame window on which to model the new frame window.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The new frame window is usually created invisible.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call this function to create frame windows outside the standard framework implementation of File New and File Open.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__createoleframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CreateOleFrame</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Creates an OLE frame window.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A pointer to the frame's parent window.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A pointer to the document to which the new OLE frame window should refer.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Determines whether a view is created along with the frame.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bCreateView`</ph> is zero, an empty frame is created.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__getdocstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::GetDocString</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Retrieves a string associated with the document type.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CString`</ph> object that will contain the string when the function returns.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An index of the substring being retrieved from the string that describes the document type.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This parameter can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::windowTitle<ept id="p1">**</ept> Name that appears in the application window's title bar (for example, "Microsoft Excel").</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Present only in the document template for SDI applications.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::docName<ept id="p1">**</ept> Root for the default document name (for example, "Sheet").</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This root, plus a number, is used for the default name of a new document of this type whenever the user chooses the New command from the File menu (for example, "Sheet1" or "Sheet2").</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If not specified, "Untitled" is used as the default.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::fileNewName<ept id="p1">**</ept> Name of this document type.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If the application supports more than one type of document, this string is displayed in the File New dialog box (for example, "Worksheet").</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If not specified, the document type is inaccessible using the File New command.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::filterName<ept id="p1">**</ept> Description of the document type and a wildcard filter matching documents of this type.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This string is displayed in the List Files Of Type drop-down list in the File Open dialog box (for example, "Worksheets (*.xls)").</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If not specified, the document type is inaccessible using the File Open command.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::filterExt<ept id="p1">**</ept> Extension for documents of this type (for example, ".xls").</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If not specified, the document type is inaccessible using the File Open command.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::regFileTypeId<ept id="p1">**</ept> Identifier for the document type to be stored in the registration database maintained by Windows.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This string is for internal use only (for example, "ExcelWorksheet").</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If not specified, the document type cannot be registered with the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocTemplate::regFileTypeName<ept id="p1">**</ept> Name of the document type to be stored in the registration database.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This string may be displayed in dialog boxes of applications that access the registration database (for example, "Microsoft Excel Worksheet").</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified substring was found; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a specific substring describing the document type.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The string containing these substrings is stored in the document template and is derived from a string in the resource file for the application.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The framework calls this function to get the strings it needs for the application's user interface.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you have specified a filename extension for your application's documents, the framework also calls this function when adding an entry to the Windows registration database; this allows documents to be opened from the Windows File Manager.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Call this function only if you are deriving your own class from <ph id="ph1">`CDocTemplate`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__getfirstdocposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::GetFirstDocPosition</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Retrieves the position of the first document associated with this template.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used to iterate through the list of documents associated with this document template; or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Use this function to get the position of the first document in the list of documents associated with this template.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value as an argument to <bpt id="p2">[</bpt>CDocTemplate::GetNextDoc<ept id="p2">](#cdoctemplate__getnextdoc)</ept> to iterate through the list of documents associated with the template.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSingleDocTemplate<ept id="p1">](../../mfc/reference/csingledoctemplate-class.md)</ept> and <bpt id="p2">[</bpt>CMultiDocTemplate<ept id="p2">](../../mfc/reference/cmultidoctemplate-class.md)</ept> both override this pure virtual function.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Any class you derive from <ph id="ph1">`CDocTemplate`</ph> must also override this function.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__getnextdoc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::GetNextDoc</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Retrieves the list element identified by <ph id="ph1">`rPos`</ph>, then sets <ph id="ph2">`rPos`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the next entry in the list.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A pointer to the next document in the list of documents associated with this template.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous call to <bpt id="p2">[</bpt>GetFirstDocPosition<ept id="p2">](#cdoctemplate__getfirstdocposition)</ept> or <ph id="ph1">`GetNextDoc`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the list, then the new value of <ph id="ph1">`rPos`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNextDoc`</ph> in a forward iteration loop if you establish the initial position with a call to <bpt id="p1">[</bpt>GetFirstDocPosition<ept id="p1">](#cdoctemplate__getfirstdocposition)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__initialupdateframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::InitialUpdateFrame</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Initializes the frame window, and optionally makes it visible.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The frame window that needs the initial update.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The document to which the frame is associated.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Indicates whether the frame should become visible and active.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>IntitialUpdateFrame<ept id="p1">**</ept> after creating a new frame with <ph id="ph1">`CreateNewFrame`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Calling this function causes the views in that frame window to receive their <ph id="ph1">`OnInitialUpdate`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Also, if there was not previously an active view, the primary view of the frame window is made active; the primary view is a view with a child ID of <bpt id="p1">**</bpt>AFX_IDW_PANE_FIRST<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Finally, the frame window is made visible if <ph id="ph1">`bMakeVisible`</ph> is non-zero.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bMakeVisible`</ph> is zero, the current focus and visible state of the frame window will remain unchanged.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>It is not necessary to call this function when using the framework's implementation of File New and File Open.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__loadtemplate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::LoadTemplate</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Loads the resources for a given <ph id="ph1">`CDocTemplate`</ph> or derived class.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to load the resources for a given <ph id="ph1">`CDocTemplate`</ph> or derived class.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Normally it is called during construction, except when the template is being constructed globally.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>In that case, the call to <ph id="ph1">`LoadTemplate`</ph> is delayed until <bpt id="p1">[</bpt>CWinApp::AddDocTemplate<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__matchdoctype"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::MatchDocType</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Determines the degree of confidence in the match between a document type and this template.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Pathname of the file whose type is to be determined.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Pointer to a document that is assigned the matching document, if the file specified by <ph id="ph1">`lpszPathName`</ph> is already open.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A value from the <bpt id="p1">**</bpt>Confidence<ept id="p1">**</ept> enumeration, which is defined as follows:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Use this function to determine the type of document template to use for opening a file.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If your application supports multiple file types, for example, you can use this function to determine which of the available document templates is appropriate for a given file by calling <ph id="ph1">`MatchDocType`</ph> for each template in turn, and choosing a template according to the confidence value returned.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If the file specified by <ph id="ph1">`lpszPathName`</ph> is already open, this function returns <bpt id="p1">**</bpt>CDocTemplate::yesAlreadyOpen<ept id="p1">**</ept> and copies the file's <bpt id="p2">**</bpt>CDocument<ept id="p2">**</ept> object into the object at <ph id="ph2">`rpDocMatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If the file is not open but the extension in <ph id="ph1">`lpszPathName`</ph> matches the extension specified by <bpt id="p1">**</bpt>CDocTemplate::filterExt<ept id="p1">**</ept>, this function returns <bpt id="p2">**</bpt>CDocTemplate::yesAttemptNative<ept id="p2">**</ept> and sets <ph id="ph2">`rpDocMatch`</ph> to <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>For more information on <bpt id="p1">**</bpt>CDocTemplate::filterExt<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>CDocTemplate::GetDocString<ept id="p2">](#cdoctemplate__getdocstring)</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If neither case is true, the function returns <bpt id="p1">**</bpt>CDocTemplate::yesAttemptForeign<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The default implementation does not return <bpt id="p1">**</bpt>CDocTemplate::maybeAttemptForeign<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CDocTemplate::maybeAttemptNative<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Override this function to implement type-matching logic appropriate to your application, perhaps using these two values from the <bpt id="p1">**</bpt>Confidence<ept id="p1">**</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__opendocumentfile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::OpenDocumentFile</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Opens a file specified by a path.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszPathName`</ph></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Pointer to the path of the file that contains the document to be opened.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bAddToMRU`</ph></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> indicates the document is one of the most recent files; <ph id="ph2">`FALSE`</ph> indicates the document is not one of the most recent files.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A pointer to the document whose file is named by <ph id="ph1">`lpszPathName`</ph>; <ph id="ph2">`NULL`</ph> if unsuccessful.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Opens the file whose path is specified by <ph id="ph1">`lpszPathName`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszPathName`</ph> is <ph id="ph2">`NULL`</ph>, a new file that contains a document of the type associated with this template is created.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__removedocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::RemoveDocument</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Removes the document pointed to by <ph id="ph1">`pDoc`</ph> from the list of documents associated with this template.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Pointer to the document to be removed.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The derived classes <ph id="ph1">`CMultiDocTemplate`</ph> and <ph id="ph2">`CSingleDocTemplate`</ph> override this function.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>If you derive your own document-template class from <ph id="ph1">`CDocTemplate`</ph>, your derived class must override this function.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__saveallmodified"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::SaveAllModified</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Saves all documents that have been modified.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Non-zero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__setcontainerinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::SetContainerInfo</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Determines the resources for OLE containers when editing an in-place OLE item.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The ID of the resources used when an embedded object is activated.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Call this function to set the resources to be used when an OLE object is in-place activated.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>These resources may include menus and accelerator tables.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This function is usually called in the <bpt id="p1">[</bpt>CWinApp::InitInstance<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__initinstance)</ept> function of your application.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The menu associated with <ph id="ph1">`nIDOleInPlaceContainer`</ph> contains separators that allow the menu of the activated in-place item to merge with the menu of the container application.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information about merging server and container menus, see the article <bpt id="p1">[</bpt>Menus and Resources (OLE)<ept id="p1">](../../mfc/menus-and-resources-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__setdefaulttitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::SetDefaultTitle</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Call this function to load the document's default title and display it in the document's title bar.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pDocument<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Pointer to the document whose title is to be set.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For information on the default title, see the description of <bpt id="p1">**</bpt>CDocTemplate::docName<ept id="p1">**</ept> in <bpt id="p2">[</bpt>CDocTemplate::GetDocString<ept id="p2">](#cdoctemplate__getdocstring)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__setserverinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::SetServerInfo</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Determines the resources and classes when the server document is embedded or edited in-place.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nIDOleEmbedding<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The ID of the resources used when an embedded object is opened in a separate window.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The ID of the resources used when an embedded object is activated in-place.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pOleFrameClass<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure containing class information for the frame window object created when in-place activation occurs.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pOleViewClass<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CRuntimeClass`</ph> structure containing class information for the view object created when in-place activation occurs.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Call this member function to identify resources that will be used by the server application when the user requests activation of an embedded object.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>These resources consist of menus and accelerator tables.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This function is usually called in the <ph id="ph1">`InitInstance`</ph> of your application.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The menu associated with <ph id="ph1">`nIDOleInPlaceServer`</ph> contains separators that allow the server menu to merge with the menu of the container.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For more information about merging server and container menus, see the article <bpt id="p1">[</bpt>Menus and Resources (OLE)<ept id="p1">](../../mfc/menus-and-resources-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__createpreviewframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::CreatePreviewFrame</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Creates a child frame used for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A pointer to a parent window (usually provided by the Shell).</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A pointer to a document object, whose content will be previewed.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A valid pointer to a <ph id="ph1">`CFrameWnd`</ph> object, or <ph id="ph2">`NULL`</ph> if the creation fails.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdoctemplate__setpreviewinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocTemplate::SetPreviewInfo</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Sets up the out of process preview handler.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Specifies a resource ID of the preview frame.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a runtime class information structure of the preview frame.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a runtime class information structure of the preview view.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CSingleDocTemplate Class<ept id="p1">](../../mfc/reference/csingledoctemplate-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMultiDocTemplate Class<ept id="p1">](../../mfc/reference/cmultidoctemplate-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDocument Class<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CView Class<ept id="p1">](../../mfc/reference/cview-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CScrollView Class<ept id="p1">](../../mfc/reference/cscrollview-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CEditView Class<ept id="p1">](../../mfc/reference/ceditview-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CFormView Class<ept id="p1">](../../mfc/reference/cformview-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CFrameWnd Class<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMDIChildWnd Class<ept id="p1">](../../mfc/reference/cmdichildwnd-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>