<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">340f9872ca6a930ed5e5e29e0b28341eca28ad1a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\concurrency-namespace.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ff41c1e1a791c14653c3dae3c49360ca7e9b4fd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e266c3fc925f594b5d94a3f48b734491ac855d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>concurrency Namespace | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>concurrency Namespace</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Concurrency`</ph> namespace provides classes and functions that give you access to the Concurrency Runtime, a concurrent programming framework for C++.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Concurrency Runtime<ept id="p1">](../../../parallel/concrt/concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency::extensibility Namespace<ept id="p1">](http://msdn.microsoft.com/en-us/16a86ff2-128e-4edf-89e4-38aac79c81f9)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each message instance has an identity that follows it as it is cloned and passed between messaging components.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This cannot be the address of the message object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type that represents the terminal state of a task.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`completed`</ph> and <ph id="ph2">`canceled`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An elementary abstraction for a task, defined as <ph id="ph1">`void (__cdecl * TaskProc)(void *)`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TaskProc`</ph> is called to invoke the body of a task.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An elementary abstraction for a task, defined as <ph id="ph1">`void (__cdecl * TaskProc_t)(void *)`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TaskProc`</ph> is called to invoke the body of a task.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>affinity_partitioner Class<ept id="p1">](affinity-partitioner-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`affinity_partitioner`</ph> class is similar to the <ph id="ph2">`static_partitioner`</ph> class, but it improves cache affinity by its choice of mapping subranges to worker threads.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It can improve performance significantly when a loop is re-executed over the same data set, and the data fits in cache.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that the same <ph id="ph1">`affinity_partitioner`</ph> object must be used with subsequent iterations of a parallel loop that is executed over a particular data set, to benefit from data locality.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>agent Class<ept id="p1">](agent-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A class intended to be used as a base class for all independent agents.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is used to hide state from other agents and interact using message-passing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>auto_partitioner Class<ept id="p1">](auto-partitioner-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`auto_partitioner`</ph> class represents the default method <ph id="ph2">`parallel_for`</ph>, <ph id="ph3">`parallel_for_each`</ph> and <ph id="ph4">`parallel_transform`</ph> use to partition the range they iterates over.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method of partitioning employes range stealing for load balancing as well as per-iterate cancellation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bad_target Class<ept id="p1">](bad-target-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when a messaging block is given a pointer to a target which is invalid for the operation being performed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>call Class<ept id="p1">](call-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`call`</ph> messaging block is a multi-source, ordered <ph id="ph2">`target_block`</ph> that invokes a specified function when receiving a message.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cancellation_token Class<ept id="p1">](cancellation-token-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancellation_token`</ph> class represents the ability to determine whether some operation has been requested to cancel.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A given token can be associated with a <ph id="ph1">`task_group`</ph>, <ph id="ph2">`structured_task_group`</ph>, or <ph id="ph3">`task`</ph> to provide implicit cancellation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It can also be polled for cancellation or have a callback registered for if and when the associated <ph id="ph1">`cancellation_token_source`</ph> is canceled.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cancellation_token_registration Class<ept id="p1">](cancellation-token-registration-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancellation_token_registration`</ph> class represents a callback notification from a <ph id="ph2">`cancellation_token`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`register`</ph> method on a <ph id="ph2">`cancellation_token`</ph> is used to receive notification of when cancellation occurs, a <ph id="ph3">`cancellation_token_registration`</ph> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <ph id="ph4">`deregister`</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cancellation_token_source Class<ept id="p1">](cancellation-token-source-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancellation_token_source`</ph> class represents the ability to cancel some cancelable operation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>choice Class<ept id="p1">](choice-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`choice`</ph> messaging block is a multi-source, single-target block that represents a control-flow interaction with a set of sources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The choice block will wait for any one of multiple sources to produce a message and will propagate the index of the source that produced the message.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>combinable Class<ept id="p1">](combinable-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`combinable&lt;T&gt;`</ph> object is intended to provide thread-private copies of data, to perform lock-free thread-local sub-computations during parallel algorithms.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>At the end of the parallel operation, the thread-private sub-computations can then be merged into a final result.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This class can be used instead of a shared variable, and can result in a performance improvement if there would otherwise be a lot of contention on that shared variable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_priority_queue Class<ept id="p1">](concurrent-priority-queue-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_priority_queue`</ph> class is a container that allows multiple threads to concurrently push and pop items.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Items are popped in priority order where priority is determined by a functor supplied as a template argument.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_queue Class<ept id="p1">](concurrent-queue-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_queue`</ph> class is a sequence container class that allows first-in, first-out access to its elements.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It enables a limited set of concurrency-safe operations, such as <ph id="ph1">`push`</ph> and <ph id="ph2">`try_pop`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_unordered_map Class<ept id="p1">](concurrent-unordered-map-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_map`</ph> class is a concurrency-safe container that controls a varying-length sequence of elements of type <ph id="ph2">`std::pair&lt;const K, _Element_type&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The sequence is represented in a way that enables concurrency-safe append, element access, iterator access, and iterator traversal operations.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_unordered_multimap Class<ept id="p1">](concurrent-unordered-multimap-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_multimap`</ph> class is an concurrency-safe container that controls a varying-length sequence of elements of type <ph id="ph2">`std::pair&lt;const K, _Element_type&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_unordered_multiset Class<ept id="p1">](concurrent-unordered-multiset-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_multiset`</ph> class is an concurrency-safe container that controls a varying-length sequence of elements of type K. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_unordered_set Class<ept id="p1">](concurrent-unordered-set-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_unordered_set`</ph> class is an concurrency-safe container that controls a varying-length sequence of elements of type K. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrent_vector Class<ept id="p1">](concurrent-vector-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`concurrent_vector`</ph> class is a sequence container class that allows random access to any element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It enables concurrency-safe append, element access, iterator access, and iterator traversal operations.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context Class<ept id="p1">](context-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for an execution context.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>context_self_unblock Class<ept id="p1">](context-self-unblock-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`Unblock`</ph> method of a <ph id="ph2">`Context`</ph> object is called from the same context.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This would indicate an attempt by a given context to unblock itself.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>context_unblock_unbalanced Class<ept id="p1">](context-unblock-unbalanced-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when calls to the <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> methods of a <ph id="ph3">`Context`</ph> object are not properly paired.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>critical_section Class<ept id="p1">](critical-section-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A non-reentrant mutex which is explicitly aware of the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CurrentScheduler Class<ept id="p1">](currentscheduler-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for the current scheduler associated with the calling context.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>default_scheduler_exists Class<ept id="p1">](default-scheduler-exists-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`Scheduler::SetDefaultSchedulerPolicy`</ph> method is called when a default scheduler already exists within the process.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>event Class<ept id="p1">](event-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A manual reset event which is explicitly aware of the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>improper_lock Class<ept id="p1">](improper-lock-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when a lock is acquired improperly.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>improper_scheduler_attach Class<ept id="p1">](improper-scheduler-attach-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`Attach`</ph> method is called on a <ph id="ph2">`Scheduler`</ph> object which is already attached to the current context.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>improper_scheduler_detach Class<ept id="p1">](improper-scheduler-detach-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`CurrentScheduler::Detach`</ph> method is called on a context which has not been attached to any scheduler using the <ph id="ph2">`Attach`</ph> method of a <ph id="ph3">`Scheduler`</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>improper_scheduler_reference Class<ept id="p1">](improper-scheduler-reference-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`Reference`</ph> method is called on a <ph id="ph2">`Scheduler`</ph> object that is shutting down, from a context that is not part of that scheduler.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_link_target Class<ept id="p1">](invalid-link-target-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`link_target`</ph> method of a messaging block is called and the messaging block is unable to link to the target.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This can be the result of exceeding the number of links the messaging block is allowed or attempting to link a specific target twice to the same source.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_multiple_scheduling Class<ept id="p1">](invalid-multiple-scheduling-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when a <ph id="ph1">`task_handle`</ph> object is scheduled multiple times using the <ph id="ph2">`run`</ph> method of a <ph id="ph3">`task_group`</ph> or <ph id="ph4">`structured_task_group`</ph> object without an intervening call to either the <ph id="ph5">`wait`</ph> or <ph id="ph6">`run_and_wait`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_operation Class<ept id="p1">](invalid-operation-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an invalid operation is performed that is not more accurately described by another exception type thrown by the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_oversubscribe_operation Class<ept id="p1">](invalid-oversubscribe-operation-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the <ph id="ph1">`Context::Oversubscribe`</ph> method is called with the <ph id="ph2">`_BeginOversubscription`</ph> parameter set to <ph id="ph3">`false`</ph> without a prior call to the <ph id="ph4">`Context::Oversubscribe`</ph> method with the <ph id="ph5">`_BeginOversubscription`</ph> parameter set to <ph id="ph6">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_scheduler_policy_key Class<ept id="p1">](invalid-scheduler-policy-key-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an invalid or unknown key is passed to a <ph id="ph1">`SchedulerPolicy`</ph> object constructor, or the <ph id="ph2">`SetPolicyValue`</ph> method of a <ph id="ph3">`SchedulerPolicy`</ph> object is passed a key that must be changed using other means such as the <ph id="ph4">`SetConcurrencyLimits`</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_scheduler_policy_thread_specification Class<ept id="p1">](invalid-scheduler-policy-thread-specification-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an attempt is made to set the concurrency limits of a <ph id="ph1">`SchedulerPolicy`</ph> object such that the value of the <ph id="ph2">`MinConcurrency`</ph> key is less than the value of the <ph id="ph3">`MaxConcurrency`</ph> key.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_scheduler_policy_value Class<ept id="p1">](invalid-scheduler-policy-value-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when a policy key of a <ph id="ph1">`SchedulerPolicy`</ph> object is set to an invalid value for that key.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISource Class<ept id="p1">](isource-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ISource`</ph> class is the interface for all source blocks.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Source blocks propagate messages to <ph id="ph1">`ITarget`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ITarget Class<ept id="p1">](itarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ITarget`</ph> class is the interface for all target blocks.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Target blocks consume messages offered to them by <ph id="ph1">`ISource`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>join Class<ept id="p1">](join-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`join`</ph> messaging block is a single-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> which combines together messages of type <ph id="ph3">`T`</ph> from each of its sources.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>location Class<ept id="p1">](location-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An abstraction of a physical location on hardware.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>message Class<ept id="p1">](message-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The basic message envelope containing the data payload being passed between messaging blocks.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>message_not_found Class<ept id="p1">](message-not-found-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when a messaging block is unable to find a requested message.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>message_processor Class<ept id="p1">](message-processor-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`message_processor`</ph> class is the abstract base class for processing of <ph id="ph2">`message`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>There is no guarantee on the ordering of the messages.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>missing_wait Class<ept id="p1">](missing-wait-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when there are tasks still scheduled to a <ph id="ph1">`task_group`</ph> or <ph id="ph2">`structured_task_group`</ph> object at the time that object's destructor executes.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This exception will never be thrown if the destructor is reached because of a stack unwinding as the result of an exception.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multi_link_registry Class<ept id="p1">](multi-link-registry-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`multi_link_registry`</ph> object is a <ph id="ph2">`network_link_registry`</ph> that manages multiple source blocks or multiple target blocks.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>multitype_join Class<ept id="p1">](multitype-join-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`multitype_join`</ph> messaging block is a multi-source, single-target messaging block that combines together messages of different types from each of its sources and offers a tuple of the combined messages to its targets.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nested_scheduler_missing_detach Class<ept id="p1">](nested-scheduler-missing-detach-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when the Concurrency Runtime detects that you neglected to call the <ph id="ph1">`CurrentScheduler::Detach`</ph> method on a context that attached to a second scheduler using the <ph id="ph2">`Attach`</ph> method of the <ph id="ph3">`Scheduler`</ph> object.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>network_link_registry Class<ept id="p1">](network-link-registry-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`network_link_registry`</ph> abstract base class manages the links between source and target blocks.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operation_timed_out Class<ept id="p1">](operation-timed-out-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an operation has timed out.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ordered_message_processor Class<ept id="p1">](ordered-message-processor-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`ordered_message_processor`</ph> is a <ph id="ph2">`message_processor`</ph> that allows message blocks to process messages in the order they were received.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>overwrite_buffer Class<ept id="p1">](overwrite-buffer-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`overwrite_buffer`</ph> messaging block is a multi-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> capable of storing a single message at a time.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>New messages overwrite previously held ones.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>progress_reporter Class<ept id="p1">](progress-reporter-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The progress reporter class allows reporting progress notifications of a specific type.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Each progress_reporter object is bound to a particular asynchronous action or operation.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>propagator_block Class<ept id="p1">](propagator-block-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`propagator_block`</ph> class is an abstract base class for message blocks that are both a source and target.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>It combines the functionality of both the <ph id="ph1">`source_block`</ph> and <ph id="ph2">`target_block`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reader_writer_lock Class<ept id="p1">](reader-writer-lock-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A writer-preference queue-based reader-writer lock with local only spinning.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The lock grants first in - first out (FIFO) access to writers and starves readers under a continuous load of writers.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ScheduleGroup Class<ept id="p1">](schedulegroup-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for a schedule group.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Schedule groups organize a set of related work that benefits from being scheduled close together either temporally, by executing another task in the same group before moving to another group, or spatially, by executing multiple items within the same group on the same NUMA node or physical socket.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler Class<ept id="p1">](scheduler-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for a Concurrency Runtime scheduler.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scheduler_not_attached Class<ept id="p1">](scheduler-not-attached-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an operation is performed which requires a scheduler to be attached to the current context and one is not.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scheduler_resource_allocation_error Class<ept id="p1">](scheduler-resource-allocation-error-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown because of a failure to acquire a critical resource in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scheduler_worker_creation_error Class<ept id="p1">](scheduler-worker-creation-error-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown because of a failure to create a worker execution context in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy Class<ept id="p1">](schedulerpolicy-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SchedulerPolicy`</ph> class contains a set of key/value pairs, one for each policy element, that control the behavior of a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>simple_partitioner Class<ept id="p1">](simple-partitioner-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`simple_partitioner`</ph> class represents a static partitioning of the range iterated over by <ph id="ph2">`parallel_for`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The partitioner divides the range into chunks such that each chunk has at least the number of iterations specified by the chunk size.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>single_assignment Class<ept id="p1">](single-assignment-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`single_assignment`</ph> messaging block is a multi-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> capable of storing a single, write-once <ph id="ph3">`message`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>single_link_registry Class<ept id="p1">](single-link-registry-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`single_link_registry`</ph> object is a <ph id="ph2">`network_link_registry`</ph> that manages only a single source or target block.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_block Class<ept id="p1">](source-block-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`source_block`</ph> class is an abstract base class for source-only blocks.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The class provides basic link management functionality as well as common error checks.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>source_link_manager Class<ept id="p1">](source-link-manager-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`source_link_manager`</ph> object manages messaging block network links to <ph id="ph2">`ISource`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>static_partitioner Class<ept id="p1">](static-partitioner-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static_partitioner`</ph> class represents a static partitioning of the range iterated over by <ph id="ph2">`parallel_for`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The partitioner divides the range into as many chunks as there are workers available to the underyling scheduler.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>structured_task_group Class<ept id="p1">](structured-task-group-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`structured_task_group`</ph> class represents a highly structured collection of parallel work.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can queue individual parallel tasks to a <ph id="ph1">`structured_task_group`</ph> using <ph id="ph2">`task_handle`</ph> objects, and wait for them to complete, or cancel the task group before they have finished executing, which will abort any tasks that have not begun execution.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>target_block Class<ept id="p1">](target-block-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`target_block`</ph> class is an abstract base class that provides basic link management functionality and error checking for target only blocks.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task Class (Concurrency Runtime)<ept id="p1">](task-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The Parallel Patterns Library (PPL) <ph id="ph1">`task`</ph> class.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`task`</ph> object represents work that can be executed asynchronously, and concurrently with other tasks and parallel work produced by parallel algorithms in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>It produces a result of type <ph id="ph1">`_ResultType`</ph> on successful completion.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Tasks of type <ph id="ph1">`task&lt;void&gt;`</ph> produce no result.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A task can be waited upon and canceled independently of other tasks.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>It can also be composed with other tasks using continuations(<ph id="ph1">`then`</ph>), and join(<ph id="ph2">`when_all`</ph>) and choice(<ph id="ph3">`when_any`</ph>) patterns.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_canceled Class<ept id="p1">](task-canceled-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown by the PPL tasks layer in order to force the current task to cancel.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It is also thrown by the <ph id="ph1">`get()`</ph> method on <bpt id="p1">[</bpt>task<ept id="p1">](http://msdn.microsoft.com/en-us/5389e8a5-5038-40b6-844a-55e9b58ad35f)</ept>, for a canceled task.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_completion_event Class<ept id="p1">](task-completion-event-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`task_completion_event`</ph> class allows you to delay the execution of a task until a condition is satisfied, or start a task in response to an external event.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_continuation_context Class<ept id="p1">](task-continuation-context-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`task_continuation_context`</ph> class allows you to specify where you would like a continuation to be executed.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>It is only useful to use this class from a Windows Store app.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For non-Windows Store apps, the task continuation's execution context is determined by the runtime, and not configurable.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_group Class<ept id="p1">](task-group-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`task_group`</ph> class represents a collection of parallel work which can be waited on or canceled.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_handle Class<ept id="p1">](task-handle-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`task_handle`</ph> class represents an individual parallel work item.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>It encapsulates the instructions and the data required to execute a piece of work.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>task_options Class (Concurrency Runtime)<ept id="p1">](task-options-class-concurrency-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Represents the allowed options for creating a task</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timer Class<ept id="p1">](timer-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`timer`</ph> messaging block is a single-target <ph id="ph2">`source_block`</ph> capable of sending a message to its target after a specified time period has elapsed or at specific intervals.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>transformer Class<ept id="p1">](transformer-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> messaging block is a single-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> which can accept messages of one type and is capable of storing an unbounded number of messages of a different type.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unbounded_buffer Class<ept id="p1">](unbounded-buffer-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`unbounded_buffer`</ph> messaging block is a multi-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> capable of storing an unbounded number of messages.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unsupported_os Class<ept id="p1">](unsupported-os-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This class describes an exception thrown when an unsupported operating system is used.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Structures</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DispatchState Structure<ept id="p1">](dispatchstate-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DispatchState`</ph> structure is used to transfer state to the <ph id="ph2">`IExecutionContext::Dispatch`</ph> method.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>It describes the circumstances under which the <ph id="ph1">`Dispatch`</ph> method is invoked on an <ph id="ph2">`IExecutionContext`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IExecutionContext Structure<ept id="p1">](iexecutioncontext-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An interface to an execution context which can run on a given virtual processor and be cooperatively context switched.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IExecutionResource Structure<ept id="p1">](iexecutionresource-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An abstraction for a hardware thread.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IResourceManager Structure<ept id="p1">](iresourcemanager-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>An interface to the Concurrency Runtime's Resource Manager.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This is the interface by which schedulers communicate with the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IScheduler Structure<ept id="p1">](ischeduler-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>An interface to an abstraction of a work scheduler.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime's Resource Manager uses this interface to communicate with work schedulers.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISchedulerProxy Structure<ept id="p1">](ischedulerproxy-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The interface by which schedulers communicate with the Concurrency Runtime's Resource Manager to negotiate resource allocation.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IThreadProxy Structure<ept id="p1">](ithreadproxy-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An abstraction for a thread of execution.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Depending on the <ph id="ph1">`SchedulerType`</ph> policy key of the scheduler you create, the Resource Manager will grant you a thread proxy that is backed by either a regular Win32 thread or a user-mode schedulable (UMS) thread.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>UMS threads are supported on 64-bit operating systems with version Windows 7 and higher.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ITopologyExecutionResource Structure<ept id="p1">](itopologyexecutionresource-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>An interface to an execution resource as defined by the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ITopologyNode Structure<ept id="p1">](itopologynode-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>An interface to a topology node as defined by the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A node contains one or more execution resources.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IUMSCompletionList Structure<ept id="p1">](iumscompletionlist-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Represents a UMS completion list.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When a UMS thread blocks, the scheduler's designated scheduling context is dispatched in order to make a decision of what to schedule on the underlying virtual processor root while the original thread is blocked.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>When the original thread unblocks, the operating system queues it to the completion list which is accessible through this interface.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The scheduler can query the completion list on the designated scheduling context or any other place it searches for work.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IUMSScheduler Structure<ept id="p1">](iumsscheduler-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>An interface to an abstraction of a work scheduler that wants the Concurrency Runtime's Resource Manager to hand it user-mode schedulable (UMS) threads.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The Resource Manager uses this interface to communicate with UMS thread schedulers.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IUMSScheduler`</ph> interface inherits from the <ph id="ph2">`IScheduler`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IUMSThreadProxy Structure<ept id="p1">](iumsthreadproxy-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>An abstraction for a thread of execution.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If you want your scheduler to be granted user-mode schedulable (UMS) threads, set the value for the scheduler policy element <ph id="ph1">`SchedulerKind`</ph> to <ph id="ph2">`UmsThreadDefault`</ph>, and implement the <ph id="ph3">`IUMSScheduler`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>UMS threads are only supported on 64-bit operating systems with version Windows 7 and higher.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IUMSUnblockNotification Structure<ept id="p1">](iumsunblocknotification-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Represents a notification from the Resource Manager that a thread proxy which blocked and triggered a return to the scheduler's designated scheduling context has unblocked and is ready to be scheduled.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This interface is invalid once the thread proxy's associated execution context, returned from the <ph id="ph1">`GetContext`</ph> method, is rescheduled.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IVirtualProcessorRoot Structure<ept id="p1">](ivirtualprocessorroot-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>An abstraction for a hardware thread on which a thread proxy can execute.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scheduler_interface Structure<ept id="p1">](scheduler-interface-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Scheduler Interface</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scheduler_ptr Structure (Concurrency Runtime)<ept id="p1">](scheduler-ptr-structure-concurrency-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Represents a pointer to a scheduler.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This class exists to allow the the specification of a shared lifetime by using shared_ptr or just a plain reference by using raw pointer.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>agent_status Enumeration<ept id="p1">](concurrency-namespace-enums.md#agent_status)</ept>|The valid states for an <ph id="ph2">`agent`</ph>.|</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>Agents_EventType Enumeration<ept id="p1">](concurrency-namespace-enums.md#agents_eventtype)</ept>|The types of events that can be traced using the tracing functionality offered by the Agents Library|</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ConcRT_EventType Enumeration<ept id="p1">](concurrency-namespace-enums.md#concrt_eventtype)</ept>|The types of events that can be traced using the tracing functionality offered by the Concurrency Runtime.|</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>Concrt_TraceFlags Enumeration<ept id="p1">](concurrency-namespace-enums.md#concrt_traceflags)</ept>|Trace flags for the event types|</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CriticalRegionType Enumeration<ept id="p1">](concurrency-namespace-enums.md#criticalregiontype)</ept>|The type of critical region a context is inside.|</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>DynamicProgressFeedbackType Enumeration<ept id="p1">](concurrency-namespace-enums.md#dynamicprogressfeedbacktype)</ept>|Used by the <ph id="ph2">`DynamicProgressFeedback`</ph> policy to describe whether resources for the scheduler will be rebalanced according to statistical information gathered from the scheduler or only based on virtual processors going in and out of the idle state through calls to the <ph id="ph3">`Activate`</ph> and <ph id="ph4">`Deactivate`</ph> methods on the <ph id="ph5">`IVirtualProcessorRoot`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For more information on available scheduler policies, see <bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md#policyelementkey)</ept>.|</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>join_type Enumeration<ept id="p1">](concurrency-namespace-enums.md#join_type)</ept>|The type of a <ph id="ph2">`join`</ph> messaging block.|</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>message_status Enumeration<ept id="p1">](concurrency-namespace-enums.md#message_status)</ept>|The valid responses for an offer of a <ph id="ph2">`message`</ph> object to a block.|</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md#policyelementkey)</ept>|Policy keys describing aspects of scheduler behavior.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Each policy element is described by a key-value pair.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>For more information about scheduler policies and their impact on schedulers, see <bpt id="p1">[</bpt>Task Scheduler<ept id="p1">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>.|</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>SchedulerType Enumeration<ept id="p1">](concurrency-namespace-enums.md#schedulertype)</ept>|Used by the <ph id="ph2">`SchedulerKind`</ph> policy to describe the type of threads that the scheduler should utilize for underlying execution contexts.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For more information on available scheduler policies, see <bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md#policyelementkey)</ept>.|</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>SchedulingProtocolType Enumeration<ept id="p1">](concurrency-namespace-enums.md#schedulingprotocoltype)</ept>|Used by the <ph id="ph2">`SchedulingProtocol`</ph> policy to describe which scheduling algorithm will be utilized for the scheduler.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For more information on available scheduler policies, see <bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md#policyelementkey)</ept>.|</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>SwitchingProxyState Enumeration<ept id="p1">](concurrency-namespace-enums.md#switchingproxystate)</ept>|Used to denote the state a thread proxy is in, when it is executing a cooperative context switch to a different thread proxy.|</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>task_group_status Enumeration<ept id="p1">](concurrency-namespace-enums.md#task_group_status)</ept>|Describes the execution status of a <ph id="ph2">`task_group`</ph> or <ph id="ph3">`structured_task_group`</ph> object.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A value of this type is returned by numerous methods that wait on tasks scheduled to a task group to complete.|</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>WinRTInitializationType Enumeration<ept id="p1">](concurrency-namespace-enums.md#winrtinitializationtype)</ept>|Used by the <ph id="ph2">`WinRTInitialization`</ph> policy to describe whether and how the Windows Runtime will be initialized on scheduler threads for an application which runs on operating systems with version Windows 8 or higher.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>For more information on available scheduler policies, see <bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md#policyelementkey)</ept>.|</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>Alloc Function<ept id="p1">](concurrency-namespace-functions.md#alloc)</ept>|Allocates a block of memory of the size specified from the Concurrency Runtime Caching Suballocator.|</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>asend Function<ept id="p1">](concurrency-namespace-functions.md#asend)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>An asynchronous send operation, which schedules a task to propagate the data to the target block.|</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>cancel_current_task Function<ept id="p1">](concurrency-namespace-functions.md#cancel_current_task)</ept>|Cancels the currently executing task.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>This function can be called from within the body of a task to abort the task's execution and cause it to enter the <ph id="ph1">`canceled`</ph> state.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>It is not a supported scenario to call this function if you are not within the body of a <ph id="ph1">`task`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Doing so will result in undefined behavior such as a crash or a hang in your application.|</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>create_async Function<ept id="p1">](concurrency-namespace-functions.md#create_async)</ept>|Creates a Windows Runtime asynchronous construct based on a user supplied lambda or function object.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The return type of <ph id="ph1">`create_async`</ph> is one of either <ph id="ph2">`IAsyncAction^`</ph>, <ph id="ph3">`IAsyncActionWithProgress&lt;TProgress&gt;^`</ph>, <ph id="ph4">`IAsyncOperation&lt;TResult&gt;^`</ph>, or <ph id="ph5">`IAsyncOperationWithProgress&lt;TResult, TProgress&gt;^`</ph> based on the signature of the lambda passed to the method.|</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>create_task Function<ept id="p1">](concurrency-namespace-functions.md#create_task)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Creates a PPL <bpt id="p1">[</bpt>task<ept id="p1">](http://msdn.microsoft.com/en-us/5389e8a5-5038-40b6-844a-55e9b58ad35f)</ept> object.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`create_task`</ph> can be used anywhere you would have used a task constructor.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>It is provided mainly for convenience, because it allows use of the <ph id="ph1">`auto`</ph> keyword while creating tasks.|</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CreateResourceManager Function<ept id="p1">](concurrency-namespace-functions.md#createresourcemanager)</ept>|Returns an interface that represents the singleton instance of the Concurrency Runtime's Resource Manager.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The Resource Manager is responsible for assigning resources to schedulers that want to cooperate with each other.|</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>DisableTracing Function<ept id="p1">](concurrency-namespace-functions.md#disabletracing)</ept>|Disables tracing in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This function is deprecated because ETW tracing is unregistered by default.|</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>EnableTracing Function<ept id="p1">](concurrency-namespace-functions.md#enabletracing)</ept>|Enables tracing in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This function is deprecated because ETW tracing is now on by default.|</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>Free Function<ept id="p1">](concurrency-namespace-functions.md#free)</ept>|Releases a block of memory previously allocated by the <ph id="ph2">`Alloc`</ph> method to the Concurrency Runtime Caching Suballocator.|</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>get_ambient_scheduler Function (Concurrency Runtime)<ept id="p1">](concurrency-namespace-functions.md#get_ambient_scheduler)</ept><ph id="ph2">||</ph></source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>GetExecutionContextId Function<ept id="p1">](concurrency-namespace-functions.md#getexecutioncontextid)</ept>|Returns a unique identifier that can be assigned to an execution context that implements the <ph id="ph2">`IExecutionContext`</ph> interface.|</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>GetOSVersion Function<ept id="p1">](concurrency-namespace-functions.md#getosversion)</ept>|Returns the operating system version.|</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>GetProcessorCount Function<ept id="p1">](concurrency-namespace-functions.md#getprocessorcount)</ept>|Returns the number of hardware threads on the underlying system.|</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>GetProcessorNodeCount Function<ept id="p1">](concurrency-namespace-functions.md#getprocessornodecount)</ept>|Returns the number of NUMA nodes or processor packages on the underlying system.|</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>GetSchedulerId Function<ept id="p1">](concurrency-namespace-functions.md#getschedulerid)</ept>|Returns a unique identifier that can be assigned to a scheduler that implements the <ph id="ph2">`IScheduler`</ph> interface.|</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>interruption_point Function<ept id="p1">](concurrency-namespace-functions.md#interruption_point)</ept>|Creates an interruption point for cancellation.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If a cancellation is in progress in the context where this function is called, this will throw an internal exception that aborts the execution of the currently executing parallel work.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If cancellation is not in progress, the function does nothing.|</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>is_current_task_group_canceling Function<ept id="p1">](concurrency-namespace-functions.md#is_current_task_group_canceling)</ept>|Returns an indication of whether the task group which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Note that if there is no task group currently executing inline on the current context, <ph id="ph1">`false`</ph> will be returned.|</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>make_choice Function<ept id="p1">](concurrency-namespace-functions.md#make_choice)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`choice`</ph> messaging block from an optional <ph id="ph2">`Scheduler`</ph> or <ph id="ph3">`ScheduleGroup`</ph> and two or more input sources.|</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>make_greedy_join Function<ept id="p1">](concurrency-namespace-functions.md#make_greedy_join)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`greedy multitype_join`</ph> messaging block from an optional <ph id="ph2">`Scheduler`</ph> or <ph id="ph3">`ScheduleGroup`</ph> and two or more input sources.|</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>make_join Function<ept id="p1">](concurrency-namespace-functions.md#make_join)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`non_greedy multitype_join`</ph> messaging block from an optional <ph id="ph2">`Scheduler`</ph> or <ph id="ph3">`ScheduleGroup`</ph> and two or more input sources.|</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>make_task Function<ept id="p1">](concurrency-namespace-functions.md#make_task)</ept>|A factory method for creating a <ph id="ph2">`task_handle`</ph> object.|</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_buffered_sort Function<ept id="p1">](concurrency-namespace-functions.md#parallel_buffered_sort)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Arranges the elements in a specified range into a nondescending order, or according to an ordering criterion specified by a binary predicate, in parallel.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>This function is semantically similar to <ph id="ph1">`std::sort`</ph> in that it is a compare-based, unstable, in-place sort except that it needs <ph id="ph2">`O(n)`</ph> additional space, and requires default initialization for the elements being sorted.|</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_for Function<ept id="p1">](concurrency-namespace-functions.md#parallel_for)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`parallel_for`</ph> iterates over a range of indices and executes a user-supplied function at each iteration, in parallel.|</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_for_each Function<ept id="p1">](concurrency-namespace-functions.md#parallel_for_each)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`parallel_for_each`</ph> applies a specified function to each element within a range, in parallel.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>It is semantically equivalent to the <ph id="ph1">`for_each`</ph> function in the <ph id="ph2">`std`</ph> namespace, except that iteration over the elements is performed in parallel, and the order of iteration is unspecified.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`_Func`</ph> must support a function call operator of the form <ph id="ph2">`operator()(T)`</ph> where the parameter <ph id="ph3">`T`</ph> is the item type of the container being iterated over.|</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_invoke Function<ept id="p1">](concurrency-namespace-functions.md#parallel_invoke)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Executes the function objects supplied as parameters in parallel, and blocks until they have finished executing.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Each function object could be a lambda expression, a pointer to function, or any object that supports the function call operator with the signature <ph id="ph1">`void operator()()`</ph>.|</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_radixsort Function<ept id="p1">](concurrency-namespace-functions.md#parallel_radixsort)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Arranges elements in a specified range into an non descending order using a radix sorting algorithm.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>This is a stable sort function which requires a projection function that can project elements to be sorted into unsigned integer-like keys.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Default initialization is required for the elements being sorted.|</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_reduce Function<ept id="p1">](concurrency-namespace-functions.md#parallel_reduce)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Computes the sum of all elements in a specified range by computing successive partial sums, or computes the result of successive partial results similarly obtained from using a specified binary operation other than sum, in parallel.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`parallel_reduce`</ph> is semantically similar to <ph id="ph2">`std::accumulate`</ph>, except that it requires the binary operation to be associative, and requires an identity value instead of an initial value.|</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_sort Function<ept id="p1">](concurrency-namespace-functions.md#parallel_sort)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Arranges the elements in a specified range into a nondescending order, or according to an ordering criterion specified by a binary predicate, in parallel.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>This function is semantically similar to <ph id="ph1">`std::sort`</ph> in that it is a compare-based, unstable, in-place sort.|</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>parallel_transform Function<ept id="p1">](concurrency-namespace-functions.md#parallel_transform)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Applies a specified function object to each element in a source range, or to a pair of elements from two source ranges, and copies the return values of the function object into a destination range, in parallel.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>This functional is semantically equivalent to <ph id="ph1">`std::transform`</ph>.|</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>receive Function<ept id="p1">](concurrency-namespace-functions.md#receive)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>A general receive implementation, allowing a context to wait for data from exactly one source and filter the values that are accepted.|</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>run_with_cancellation_token Function<ept id="p1">](concurrency-namespace-functions.md#run_with_cancellation_token)</ept>|Executes a function object immediately and synchronously in the context of a given cancellation token.|</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>send Function<ept id="p1">](concurrency-namespace-functions.md#send)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>A synchronous send operation, which waits until the target either accepts or declines the message.|</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>set_ambient_scheduler Function (Concurrency Runtime)<ept id="p1">](concurrency-namespace-functions.md#set_ambient_scheduler)</ept><ph id="ph2">||</ph></source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>set_task_execution_resources Function<ept id="p1">](concurrency-namespace-functions.md#set_task_execution_resources)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Restricts the execution resources used by the Concurrency Runtime internal worker threads to the affinity set specified.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>It is valid to call this method only before the Resource Manager has been created, or between two Resource Manager lifetimes.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>It can be invoked multiple times as long as the Resource Manager does not exist at the time of invocation.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>After an affinity limit has been set, it remains in effect until the next valid call to the <ph id="ph1">`set_task_execution_resources`</ph> method.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The affinity mask provided need not be a subset of the process affinity mask.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The process affinity will be updated if necessary.|</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>swap Function<ept id="p1">](concurrency-namespace-functions.md#swap)</ept>|Exchanges the elements of two <ph id="ph2">`concurrent_vector`</ph> objects.|</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>task_from_exception Function (Concurrency Runtime)<ept id="p1">](concurrency-namespace-functions.md#task_from_exception)</ept><ph id="ph2">||</ph></source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>task_from_result Function (Concurrency Runtime)<ept id="p1">](concurrency-namespace-functions.md#task_from_result)</ept><ph id="ph2">||</ph></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>Trace_agents_register_name Function<ept id="p1">](concurrency-namespace-functions.md#trace_agents_register_name)</ept>|Associates the given name to the message block or agent in the ETW trace.|</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>try_receive Function<ept id="p1">](concurrency-namespace-functions.md#try_receive)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A general try-receive implementation, allowing a context to look for data from exactly one source and filter the values that are accepted.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If the data is not ready, the method will return false.|</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>wait Function<ept id="p1">](concurrency-namespace-functions.md#wait)</ept>|Pauses the current context for a specified amount of time.|</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>when_all Function<ept id="p1">](concurrency-namespace-functions.md#when_all)</ept>|Creates a task that will complete successfully when all of the tasks supplied as arguments complete successfully.|</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>when_any Function<ept id="p1">](concurrency-namespace-functions.md#when_any)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Creates a task that will complete successfully when any of the tasks supplied as arguments completes successfully.|</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator!= Operator<ept id="p1">](concurrency-namespace-operators.md#operator_neq)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is not equal to the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&amp;&amp; Operator<ept id="p1">](concurrency-namespace-operators.md#operator_amp_amp)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Creates a task that will complete succesfully when both of the tasks supplied as arguments complete successfully.|</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&amp;#124;&amp;#124; Operator<ept id="p1">](concurrency-namespace-operators.md#operator_lor)</ept>|Overloaded.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Creates a task that will complete successfully when either of the tasks supplied as arguments completes successfully.|</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&lt; Operator<ept id="p1">](concurrency-namespace-operators.md#operator_lt)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is less than the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&lt;= Operator<ept id="p1">](concurrency-namespace-operators.md#operator_lt_eq)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is less than or equal to the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator== Operator<ept id="p1">](concurrency-namespace-operators.md#operator_eq_eq)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is equal to the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&gt; Operator<ept id="p1">](concurrency-namespace-operators.md#operator_gt)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is greater than the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>operator&gt;= Operator<ept id="p1">](concurrency-namespace-operators.md#operator_lt_eq)</ept>|Tests if the <ph id="ph2">`concurrent_vector`</ph> object on the left side of the operator is greater than or equal to the <ph id="ph3">`concurrent_vector`</ph> object on the right side.|</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Constants</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>AgentEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#agenteventguid)</ept>|A category GUID ({B9B5B78C-0713-4898-A21A-C67949DCED07}) describing ETW events fired by the Agents library in the Concurrency Runtime.|</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ChoreEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#choreeventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to chores or tasks.|</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ConcRT_ProviderGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#concrt_providerguid)</ept>|The ETW provider GUID for the Concurrency Runtime.|</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>CONCRT_RM_VERSION_1 Constant<ept id="p1">](concurrency-namespace-constants1.md#concrt_rm_version_1)</ept>|Indicates support of the Resource Manager interface defined in Visual Studio 2010.|</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ConcRTEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#concrteventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are not more specifically described by another category.|</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ContextEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#contexteventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to contexts.|</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>COOPERATIVE_TIMEOUT_INFINITE Constant<ept id="p1">](concurrency-namespace-constants1.md#cooperative_timeout_infinite)</ept>|Value indicating that a wait should never time out.|</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>COOPERATIVE_WAIT_TIMEOUT Constant<ept id="p1">](concurrency-namespace-constants1.md#cooperative_wait_timeout)</ept>|Value indicating that a wait timed out.|</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>INHERIT_THREAD_PRIORITY Constant<ept id="p1">](concurrency-namespace-constants1.md#inherit_thread_priority)</ept>|Special value for the policy key <ph id="ph2">`ContextPriority`</ph> indicating that the thread priority of all contexts in the scheduler should be the same as that of the thread which created the scheduler.|</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>LockEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#lockeventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to locks.|</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>MaxExecutionResources Constant<ept id="p1">](concurrency-namespace-constants1.md#maxexecutionresources)</ept>|Special value for the policy keys <ph id="ph2">`MinConcurrency`</ph> and <ph id="ph3">`MaxConcurrency`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Defaults to the number of hardware threads on the machine in the absence of other constraints.|</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>PPLParallelForeachEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#pplparallelforeacheventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id="ph2">`parallel_for_each`</ph> function.|</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>PPLParallelForEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#pplparallelforeventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id="ph2">`parallel_for`</ph> function.|</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>PPLParallelInvokeEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#pplparallelinvokeeventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id="ph2">`parallel_invoke`</ph> function.|</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ResourceManagerEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#resourcemanagereventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to the resource manager.|</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>ScheduleGroupEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#schedulegroupeventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to schedule groups.|</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>SchedulerEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#schedulereventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to scheduler activity.|</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">|</ph><bpt id="p1">[</bpt>VirtualProcessorEventGuid Constant<ept id="p1">](concurrency-namespace-constants1.md#virtualprocessoreventguid)</ept>|A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to virtual processors.|</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> agents.h, concrt.h, concrtrm.h, concurrent_priority_queue.h, concurrent_queue.h, concurrent_unordered_map.h, concurrent_unordered_set.h, concurrent_vector.h, internal_concurrent_hash.h, internal_split_ordered_list.h, ppl.h, pplcancellation_token.h, pplconcrt.h, pplinterface.h, ppltasks.h</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](reference-concurrency-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>