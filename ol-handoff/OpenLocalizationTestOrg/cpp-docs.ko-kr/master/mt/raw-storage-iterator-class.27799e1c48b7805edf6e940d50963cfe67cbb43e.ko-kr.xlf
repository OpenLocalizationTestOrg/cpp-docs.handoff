<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7aef3b83378d36ff5db1ec14c401112818c8de1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\raw-storage-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbb64ec1c8f28bfe0936b1449b42c06e37270331</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7398ae85055513f6cbab9bea23b60e65fbd5b7d7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>raw_storage_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>raw_storage_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An adaptor class that is provided to enable algorithms to store their results into uninitialized memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Specifies the output iterator for the object being stored.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Type<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type of object for which storage is being allocated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The class describes an output iterator that constructs objects of type <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> in the sequence it generates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An object of class <ph id="ph1">`raw_storage_iterator`</ph><ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>ForwardIterator<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Type<ept id="p2">**</ept>&gt; accesses storage through a forward iterator object, of class <bpt id="p3">**</bpt>ForwardIterator<ept id="p3">**</ept>, that you specify when you construct the object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For an object first of class <bpt id="p1">**</bpt>ForwardIterator<ept id="p1">**</ept>, the expression <bpt id="p2">**</bpt><ph id="ph1">&amp;</ph><ph id="ph2">\*</ph>first<ept id="p2">**</ept> must designate unconstructed storage for the next object (of type <bpt id="p3">**</bpt>Type<ept id="p3">**</ept>) in the generated sequence.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This adaptor class is used when it is necessary to separate memory allocation and object construction.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`raw_storage_iterator`</ph> can be used to copy objects into uninitialized storage, such as memory allocated using the <ph id="ph2">`malloc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>raw_storage_iterator<ept id="p1">](#raw_storage_iterator__raw_storage_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructs a raw storage iterator with a specified underlying output iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>element_type<ept id="p1">](#raw_storage_iterator__element_type)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Provides a type that describes an element to be stored a raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iter_type<ept id="p1">](#raw_storage_iterator__iter_type)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Provides a type that describes an iterator that underlies a raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator*<ept id="p1">](#raw_storage_iterator__operator_star)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A dereferencing operator used to implement the output iterator expression * <ph id="ph1">`ii`</ph><ph id="ph2"> = </ph><ph id="ph3">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](#raw_storage_iterator__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An assignment operator used to implement the raw storage iterator expression * <ph id="ph1">`i`</ph><ph id="ph2"> = </ph><ph id="ph3">`x`</ph> for storing in memory.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator++<ept id="p1">](#raw_storage_iterator__operator_add_add)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Preincrement and postincrement operators for raw storage iterators.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>memory&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__element_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::element_type</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Provides a type that describes an element to be stored a raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the raw_storage_iterator class template parameter <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__iter_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::iter_type</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Provides a type that describes an iterator that underlies a raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>ForwardIterator<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__operator_star"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A dereferencing operator used to implement the raw storage iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>ii<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A reference to the raw storage iterator</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The requirements for a <bpt id="p1">**</bpt>ForwardIterator<ept id="p1">**</ept> are that the raw storage iterator must satisfy require only the expression <ph id="ph1">\*</ph> <bpt id="p2">*</bpt>ii<ept id="p2">*</ept><ph id="ph2"> = </ph><bpt id="p3">*</bpt>t<ept id="p3">*</ept> be valid and that it says nothing about the <bpt id="p4">**</bpt>operator<ept id="p4">**</ept> or the <ph id="ph3">`operator=`</ph> on their own.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The member operators in this implementation returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>, so that <bpt id="p2">[</bpt>operator=<ept id="p2">](#raw_storage_iterator__operator_eq)</ept>( <bpt id="p3">**</bpt>constType<ept id="p3">**</ept>&amp;) can perform the actual store in an expression, such as <ph id="ph2">\*</ph> <bpt id="p4">*</bpt>ptr<ept id="p4">*</ept><ph id="ph3"> = </ph><ph id="ph4">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::operator=</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Assignment operator used to implement the raw storage iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>i<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept> for storing in memory.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The value of the object of type <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> to be inserted into memory.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The operator inserts <ph id="ph1">`val`</ph> into memory, and then returns a reference to the raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The requirements for a <bpt id="p1">**</bpt>ForwardIterator<ept id="p1">**</ept> state that the raw storage iterator must satisfy require only the expression <ph id="ph1">\*</ph> <bpt id="p2">*</bpt>ii<ept id="p2">*</ept><ph id="ph2"> = </ph><bpt id="p3">*</bpt>t<ept id="p3">*</ept> be valid, and that it says nothing about the <bpt id="p4">**</bpt>operator<ept id="p4">**</ept> or the <ph id="ph3">`operator=`</ph> on their own.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>These member operators return <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The assignment operator constructs the next object in the output sequence using the stored iterator value first, by evaluating the placement new expression <bpt id="p1">**</bpt>new<ept id="p1">**</ept> ( ( <ph id="ph1">`void`</ph> <ph id="ph2">\*</ph>)&amp;<ph id="ph3">\*</ph> <bpt id="p2">**</bpt>first<ept id="p2">**</ept>) <bpt id="p3">**</bpt>Type<ept id="p3">**</ept>( <ph id="ph4">`val`</ph>).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__operator_add_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Preincrement and postincrement operators for raw storage iterators.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An raw storage iterator or a reference to an raw storage iterator.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first operator eventually attempts to extract and store an object of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> from the associated input stream.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second operator makes a copy of the object, increments the object, and then returns the copy.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The first preincrement operator increments the stored output iterator object, and then returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The second postincrement operator makes a copy of <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>, increments the stored output iterator object, and then returns the copy.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The constructor stores <bpt id="p1">**</bpt>first<ept id="p1">**</ept> as the output iterator object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="raw_storage_iterator__raw_storage_iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  raw_storage_iterator::raw_storage_iterator</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Constructs a raw storage iterator with a specified underlying output iterator.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The forward iterator that is to underlie the <ph id="ph1">`raw_storage_iterator`</ph> object being constructed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>