<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df90128e0bb0df504d8065543b5ae7932b5cddf1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\iterator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b71dd1ca72f315ab9746a150c9ae9315a5698459</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15a05cf3851f318747ef608e09bcb16bccf94926</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>iterator<ph id="ph2">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>iterator<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines the iterator primitives, predefined iterators and stream iterators, as well as several supporting templates.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The predefined iterators include insert and reverse adaptors.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are three classes of insert iterator adaptors: front, back, and general.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They provide insert semantics rather than the overwrite semantics that the container member function iterators provide.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Iterators are a generalization of pointers, abstracting from their requirements in a way that allows a C++ program to work with different data structures in a uniform manner.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Iterators act as intermediaries between containers and generic algorithms.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instead of operating on specific data types, algorithms are defined to operate on a range specified by a type of iterator.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any data structure that satisfies the requirements of the iterator may then be operated on by the algorithm.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are five types or categories of iterator, each with its own set of requirements and resulting functionality:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Output: forward moving, may store but not retrieve values, provided by ostream and inserter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Input: forward moving, may retrieve but not store values, provided by istream.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Forward: forward moving, may store and retrieve values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Bidirectional: forward and backward moving, may store and retrieve values, provided by list, set, multiset, map, and multimap.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Random access: elements accessed in any order, may store and retrieve values, provided by vector, deque, string, and array.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Iterators that have greater requirements and so more powerful access to elements may be used in place of iterators with fewer requirements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if a forward iterator is called for, then a random-access iterator may used instead.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Visual Studio has added extensions to C++ Standard Library iterators to support a variety of debug mode situations for checked and unchecked iterators.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Safe Libraries: C++ Standard Library<ept id="p1">](../standard-library/safe-libraries-cpp-standard-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>advance<ept id="p1">](../standard-library/iterator-functions.md#advance)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Increments an iterator by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>back_inserter<ept id="p1">](../standard-library/iterator-functions.md#back_inserter)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creates an iterator that can insert elements at the back of a specified container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>begin<ept id="p1">](../standard-library/iterator-functions.md#begin)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves an iterator to the first element in a specified container.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cbegin<ept id="p1">](../standard-library/iterator-functions.md#cbegin)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves a constant iterator to the first element in a specified container.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cend<ept id="p1">](../standard-library/iterator-functions.md#cend)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves a constant iterator to the element that follows the last element in the specified container.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>distance<ept id="p1">](../standard-library/iterator-functions.md#distance)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Determines the number of increments between the positions addressed by two iterators.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>end<ept id="p1">](../standard-library/iterator-functions.md#end)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves an iterator to the element that follows the last element in the specified container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>front_inserter<ept id="p1">](../standard-library/iterator-functions.md#front_inserter)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates an iterator that can insert elements at the front of a specified container.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>inserter<ept id="p1">](../standard-library/iterator-functions.md#inserter)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An iterator adaptor that adds a new element to a container at a specified point of insertion.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>make_checked_array_iterator<ept id="p1">](../standard-library/iterator-functions.md#make_checked_array_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates a <bpt id="p1">[</bpt>checked_array_iterator<ept id="p1">](../standard-library/checked-array-iterator-class.md)</ept> that can be used by other algorithms.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  This function is a Microsoft extension of the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>make_move_iterator<ept id="p1">](../standard-library/iterator-functions.md#make_move_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a move iterator containing the provided iterator as its stored base iterator.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>make_unchecked_array_iterator<ept id="p1">](../standard-library/iterator-functions.md#make_unchecked_array_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">[</bpt>unchecked_array_iterator<ept id="p1">](../standard-library/unchecked-array-iterator-class.md)</ept> that can be used by other algorithms.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  This function is a Microsoft extension of the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>next<ept id="p1">](../standard-library/iterator-functions.md#next)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Iterates a specified number of times and returns the new iterator position.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>prev<ept id="p1">](../standard-library/iterator-functions.md#prev)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Iterates in reverse a specified number of times and returns the new iterator position.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!=<ept id="p1">](../standard-library/iterator-operators.md#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is not equal to the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator==<ept id="p1">](../standard-library/iterator-operators.md#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is equal to the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;<ept id="p1">](../standard-library/iterator-operators.md#operator_lt_)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is less than the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">\&lt;</ph><ph id="ph2">=</ph><ept id="p1">](../standard-library/iterator-operators.md#operator_lt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is less than or equal to the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;<ept id="p1">](../standard-library/iterator-operators.md#operator_gt_)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is greater than the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;=<ept id="p1">](../standard-library/iterator-operators.md#operator_gt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Tests if the iterator object on the left side of the operator is greater than or equal to the iterator object on the right side.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+<ept id="p1">](../standard-library/iterator-operators.md#operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Adds an offset to an iterator and returns the new <ph id="ph1">`reverse_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-<ept id="p1">](../standard-library/iterator-operators.md#operator-)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Subtracts one iterator from another and returns the difference.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>back_insert_iterator<ept id="p1">](../standard-library/back-insert-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The template class describes an output iterator object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It inserts elements into a container of type <bpt id="p1">**</bpt>Container<ept id="p1">**</ept>, which it accesses through the protected <bpt id="p2">**</bpt>pointer<ept id="p2">**</ept> object it stores called container.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bidirectional_iterator_tag<ept id="p1">](../standard-library/bidirectional-iterator-tag-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A class that provides a return type for an <bpt id="p1">**</bpt>iterator_category<ept id="p1">**</ept> function that represents a bidirectional iterator.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>checked_array_iterator<ept id="p1">](../standard-library/checked-array-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A class that accesses an array using a random access, checked iterator.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  This class is a Microsoft extension of the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>forward_iterator_tag<ept id="p1">](../standard-library/forward-iterator-tag-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A class that provides a return type for an <bpt id="p1">**</bpt>iterator_category<ept id="p1">**</ept> function that represents a forward iterator.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>front_insert_iterator<ept id="p1">](../standard-library/front-insert-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The template class describes an output iterator object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It inserts elements into a container of type <bpt id="p1">**</bpt>Container<ept id="p1">**</ept>, which it accesses through the protected <bpt id="p2">**</bpt>pointer<ept id="p2">**</ept> object it stores called container.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>input_iterator_tag<ept id="p1">](../standard-library/input-iterator-tag-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A class that provides a return type for an <bpt id="p1">**</bpt>iterator_category<ept id="p1">**</ept> function that represents an input iterator.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>insert_iterator<ept id="p1">](../standard-library/insert-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The template class describes an output iterator object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It inserts elements into a container of type <bpt id="p1">**</bpt>Container<ept id="p1">**</ept>, which it accesses through the protected <bpt id="p2">**</bpt>pointer<ept id="p2">**</ept> object it stores called container.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It also stores the protected <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> object, of class <bpt id="p2">**</bpt>Container::iterator<ept id="p2">**</ept>, called <bpt id="p3">**</bpt>iter<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>istream_iterator<ept id="p1">](../standard-library/istream-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The template class describes an input iterator object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It extracts objects of class <bpt id="p1">**</bpt>Ty<ept id="p1">**</ept> from an input stream, which it accesses through an object it stores, of type pointer to <ph id="ph1">`basic_istream`</ph><ph id="ph2">\&lt;</ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>istreambuf_iterator<ept id="p1">](../standard-library/istreambuf-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The template class describes an input iterator object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It inserts elements of class <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept> into an output stream buffer, which it accesses through an object it stores, of type <bpt id="p2">**</bpt>pointer<ept id="p2">**</ept> to <ph id="ph1">`basic_streambuf`</ph><ph id="ph2">\&lt;</ph><bpt id="p3">**</bpt>Elem<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Tr<ept id="p4">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iterator<ept id="p1">](../standard-library/iterator-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The template class is used as a base type for all iterators.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iterator_traits<ept id="p1">](../standard-library/iterator-traits-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A template helper class providing critical types that are associated with different iterator types so that they can be referred to in the same way.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>move_iterator<ept id="p1">](../standard-library/move-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`move_iterator`</ph> object stores a random-access iterator of type <ph id="ph2">`RandomIterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It behaves like a random-access iterator, except when dereferenced.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The result of <ph id="ph1">`operator*`</ph> is implicitly cast to <ph id="ph2">`value_type&amp;&amp;:`</ph> to make an <ph id="ph3">`rvalue reference`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ostream_iterator<ept id="p1">](../standard-library/ostream-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The template class describes an output iterator object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It inserts objects of class <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> into an output stream, which it accesses through an object it stores, of type <bpt id="p2">**</bpt>pointer<ept id="p2">**</ept> to <ph id="ph1">`basic_ostream`</ph><ph id="ph2">\&lt;</ph><bpt id="p3">**</bpt>Elem<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Tr<ept id="p4">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ostreambuf_iterator Class<ept id="p1">](../standard-library/ostreambuf-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The template class describes an output iterator object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It inserts elements of class <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept> into an output stream buffer, which it accesses through an object it stores, of type pointer to <ph id="ph1">`basic_streambuf`</ph><ph id="ph2">\&lt;</ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>output_iterator_tag<ept id="p1">](../standard-library/output-iterator-tag-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A class that provides a return type for <bpt id="p1">**</bpt>iterator_category<ept id="p1">**</ept> function that represents an output iterator.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>random_access_iterator_tag<ept id="p1">](../standard-library/random-access-iterator-tag-struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A class that provides a return type for <bpt id="p1">**</bpt>iterator_category<ept id="p1">**</ept> function that represents a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reverse_iterator<ept id="p1">](../standard-library/reverse-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The template class describes an object that behaves like a random-access iterator, only in reverse.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unchecked_array_iterator<ept id="p1">](../standard-library/unchecked-array-iterator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A class that accesses an array using a random access, unchecked iterator.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  This class is a Microsoft extension of the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>