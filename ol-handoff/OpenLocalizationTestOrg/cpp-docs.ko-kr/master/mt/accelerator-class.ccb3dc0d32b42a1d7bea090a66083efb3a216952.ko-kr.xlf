<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1093bf54b44fd1ca8a55b71b49ad87842607a47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\reference\accelerator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e5ceb6986c1b8c1a3e4a896e6337b752459d6a8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfc48d5b338e752162884a3697cbfca5e58b2053</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>accelerator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>accelerator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An accelerator is a hardware capability that is optimized for data-parallel computing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An accelerator may be a device attached to a PCIe bus (such as a GPU), or it might be an extended instruction set on the main CPU.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::accelerator Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">`accelerator`</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::~accelerator Destructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`accelerator`</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::create_view Method<ept id="p1">](#create_view)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates and returns an <ph id="ph1">`accelerator_view`</ph> object on this accelerator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_all Method<ept id="p1">](#get_all)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a vector of <ph id="ph1">`accelerator`</ph> objects that represent all the available accelerators.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_auto_selection_view Method<ept id="p1">](#get_auto_selection_view)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns the auto-selection <ph id="ph1">`accelerator_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_dedicated_memory Method<ept id="p1">](#get_dedicated_memory)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the dedicated memory for the <ph id="ph1">`accelerator`</ph>, in kilobytes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_default_cpu_access_type Method<ept id="p1">](#get_default_cpu_access_type)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the default <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept> for buffers created on this accelerator.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_default_view Method<ept id="p1">](#get_default_view)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the default <ph id="ph1">`accelerator_view`</ph> object that is associated with the <ph id="ph2">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_description Method<ept id="p1">](#get_description)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a short description of the <ph id="ph1">`accelerator`</ph> device.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_device_path Method<ept id="p1">](#get_device_path)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the path of the device.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_has_display Method<ept id="p1">](#get_has_display)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> is attached to a display.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_is_debug Method<ept id="p1">](#get_is_debug)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_is_emulated Method<ept id="p1">](#get_is_emulated)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> is emulated.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_supports_cpu_shared_memory Method<ept id="p1">](#get_supports_cpu_shared_memory)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> supports shared memory</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_supports_double_precision Method<ept id="p1">](#get_supports_double_precision)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> is attached to a display.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_supports_limited_double_precision Method<ept id="p1">](#get_supports_limited_double_precision)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">`accelerator`</ph> has limited support for double-precision math.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::get_version Method<ept id="p1">](#get_version)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns the version of the <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::set_default Method<ept id="p1">](#set_default)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns the path of the default accelerator.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::set_default_cpu_access_type Method<ept id="p1">](#set_default_cpu_access_type)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sets the default CPU <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::operator!= Operator<ept id="p1">](#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Compares this <ph id="ph1">`accelerator`</ph> object with another and returns <ph id="ph2">`false`</ph> if they are the same; otherwise, returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::operator= Operator<ept id="p1">](#operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <ph id="ph1">`accelerator`</ph> object to this one.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::operator== Operator<ept id="p1">](#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Compares this <ph id="ph1">`accelerator`</ph> object with another and returns <ph id="ph2">`true`</ph> if they are the same; otherwise, returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::cpu_accelerator Data Member<ept id="p1">](#cpu_accelerator)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets a string constant for the CPU <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::dedicated_memory Data Member<ept id="p1">](#dedicated_memory)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the dedicated memory for the <ph id="ph1">`accelerator`</ph>, in kilobytes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::default_accelerator Data Member<ept id="p1">](#default_accelerator)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets a string constant for the default <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::default_cpu_access_type Data Member<ept id="p1">](#default_cpu_access_type)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets or sets the default CPU <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::default_view Data Member<ept id="p1">](#default_view)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets the default <ph id="ph1">`accelerator_view`</ph> object that is associated with the <ph id="ph2">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::description Data Member<ept id="p1">](#description)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets a short description of the <ph id="ph1">`accelerator`</ph> device.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::device_path Data Member<ept id="p1">](#device_path)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets the path of the device.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::direct3d_ref Data Member<ept id="p1">](#direct3d_ref)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets a string constant for a Direct3D reference <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::direct3d_warp Data Member<ept id="p1">](#direct3d_warp)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets the string constant for an <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object that you can use for executing C++ AMP code on multi-core CPUs that use Streaming SIMD Extensions (SSE).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::has_display Data Member<ept id="p1">](#has_display)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the <ph id="ph1">`accelerator`</ph> is attached to a display.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::is_debug Data Member<ept id="p1">](#is_debug)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::is_emulated Data Member<ept id="p1">](#is_emulated)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`accelerator`</ph> is emulated.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::supports_cpu_shared_memory Data Member<ept id="p1">](#supports_cpu_shared_memory)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">`accelerator`</ph> supports shared memory.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::supports_double_precision Data Member<ept id="p1">](#supports_double_precision)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Indicates whether the accelerator supports double-precision math.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::supports_limited_double_precision Data Member<ept id="p1">](#supports_limited_double_precision)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indicates whether the accelerator has limited support for double-precision math.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator::version Data Member<ept id="p1">](#version)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets the version of the <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An accelerator is a hardware capability that is optimized for data-parallel computing.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An accelerator is often a discrete GPU, but it can also be a virtual host-side entity such as a DirectX REF device, a WARP (a CPU-side device that is accelerated by means of SSE instructions), or the CPU itself.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can construct an <ph id="ph1">`accelerator`</ph> object by enumerating the available devices, or by getting the default device, the reference device, or the WARP device.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> amprt.h</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> Concurrency</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> <ph id="ph1">&lt;/a&gt;</ph>  accelerator::~accelerator Destructor</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Destroys the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::accelerator Constructor</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">[</bpt>accelerator class<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The path of the physical device.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The accelerator to copy.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cpu_accelerator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::cpu_accelerator Data Member</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Gets a string constant for the CPU accelerator.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::create_view Method</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Creates and returns an <ph id="ph1">`accelerator_view`</ph> object on this accelerator, using the specified queuing mode.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When the queuing mode is not specified, the new <ph id="ph1">`accelerator_view`</ph> uses the <bpt id="p1">[</bpt>queuing_mode::immediate<ept id="p1">](concurrency-namespace-enums-amp.md#queuing_mode)</ept> queuing mode.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The queuing mode.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">`accelerator_view`</ph> object on this accelerator, using the specified queuing mode.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dedicated_memory"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::dedicated_memory Data Member</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets the dedicated memory for the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>, in kilobytes.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="default_accelerator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::default_accelerator Data Member</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Gets a string constant for the default <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="default_cpu_access_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::default_cpu_access_type Data Member</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The default cpu <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this this <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="default_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::default_view Data Member</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets the default accelerator view that is associated with the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="description"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::description Data Member</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets a short description of the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> device.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="device_path"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::device_path Data Member</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets the path of the accelerator.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The path is unique on the system.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="direct3d_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::direct3d_ref Data Member</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets a string constant for a Direct3D reference accelerator.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="direct3d_warp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::direct3d_warp Data Member</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets the string constant for an <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object that you can use for executing your C++ AMP code on multi-core CPUs using Streaming SIMD Extensions (SSE).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_all"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_all Method</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Returns a vector of <ph id="ph1">`accelerator`</ph> objects that represent all the available accelerators.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The vector of available accelerators</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_auto_selection_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_auto_selection_view Method</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Returns the auto selection accelerator_view, which when specified as the parallel_for_each target results in the target accelerator_view for executing the parallel_for_each kernel to be automatically selected by the runtime.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For all other purposes, the accelerator_view returned by this method is the same as the default accelerator_view of the default accelerator</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The auto selection accelerator_view.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_dedicated_memory"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_dedicated_memory Method</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns the dedicated memory for the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>, in kilobytes.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The dedicated memory for the <ph id="ph1">`accelerator`</ph>, in kilobytes.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_default_cpu_access_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_default_cpu_access_type Method</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Gets the default cpu access_type for buffers created on this accelerator</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The default cpu access_type for buffers created on this accelerator.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_default_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_default_view Method</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns the default <ph id="ph1">`accelerator_view`</ph> object that is associated with the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`accelerator_view`</ph> object that is associated with the <ph id="ph2">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_description"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_description Method</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Returns a short description of the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> device.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A short description of the <ph id="ph1">`accelerator`</ph> device.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_device_path"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_device_path Method</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns the path of the accelerator.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The path is unique on the system.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The system-wide unique device instance path.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_has_display"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_has_display Method</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> can output to a display.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`accelerator`</ph> can output to a display; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_is_debug"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_is_debug Method</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_is_emulated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_is_emulated Method</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> is emulated.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`accelerator`</ph> is emulated.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_supports_cpu_shared_memory"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_supports_cpu_shared_memory Method</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether the accelerator supports memory accessible both by the accelerator and the CPU.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the accelerator supports CPU shared memory; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_supports_double_precision"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_supports_double_precision Method</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the accelerator supports double precision math, including fused multiply add (FMA), division, reciprocal, and casting between <ph id="ph1">`int`</ph> and <ph id="ph2">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the accelerator supports double precision math; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_supports_limited_double_precision"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_supports_limited_double_precision Method</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the accelerator has limited support for double precision math.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between <ph id="ph1">`int`</ph> and <ph id="ph2">`double`</ph> are not supported.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the accelerator has limited support for double precision math; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_version"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::get_version Method</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns the version of the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The version of the <ph id="ph1">`accelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="has_display"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::has_display Data Member</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> can output to a display.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_debug"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::is_debug Data Member</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_emulated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::is_emulated Data Member</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> is emulated.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::operator!= Operator</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Compares this <ph id="ph1">`accelerator`</ph> object with another and returns <ph id="ph2">`false`</ph> if they are the same; otherwise, returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator`</ph> object to compare with this one.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the two <ph id="ph2">`accelerator`</ph> objects are the same; otherwise, <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::operator= Operator</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object to this one.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator`</ph> object to copy from.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A reference to this <ph id="ph1">`accelerator`</ph> object.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::operator== Operator</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Compares this <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object with another and returns <ph id="ph1">`true`</ph> if they are the same; otherwise, returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator`</ph> object to compare with this one.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the other <ph id="ph2">`accelerator`</ph> object is same as this <ph id="ph3">`accelerator`</ph> object; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="set_default"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::set_default Method</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Sets the default accelerator to be used for any operation that implicitly uses the default accelerator.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This method only succeeds if the runtime selected default accelerator has not already been used in an operation that implicitly uses the default accelerator</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The path to the accelerator.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the call succeeds at setting the default accelerator.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="set_default_cpu_access_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::set_default_cpu_access_type Method</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Set the default cpu access_type for arrays created on this accelerator or for implicit memory allocations as part of array_views accessed on this this accelerator.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This method only succeeds if the default_cpu_access_type for the accelerator has not already been overriden by a previous call to this method and the runtime selected default_cpu_access_type for this accelerator has not yet been used for allocating an array or for an implicit memory allocation backing an array_view accessed on this accelerator.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The default cpu access_type to be used for array/array_view memory allocations on this accelerator.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A boolean value indicating if the default cpu access_type for the accelerator was successfully set.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="supports_cpu_shared_memory"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::supports_cpu_shared_memory Data Member</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value indicating whether the <ph id="ph1">`accelerator`</ph> supports shared memory.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="supports_double_precision"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::supports_double_precision Data Member</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the accelerator supports double precision math.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="supports_limited_double_precision"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::supports_limited_double_precision Data Member</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the accelerator has limited support for double precision math.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between <ph id="ph1">`int`</ph> and <ph id="ph2">`double`</ph> are not supported.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="version"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator::version Data Member</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Gets the version of the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> <ph id="ph1">&lt;/a&gt;</ph>  accelerator_view::~accelerator_view Destructor</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Destroys the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="accelerator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::accelerator Data Member</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object for the <bpt id="p2">[</bpt>accelerator_view<ept id="p2">](accelerator-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::accelerator_view Constructor</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> class by copying an existing <ph id="ph1">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator_view`</ph> object to copy.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create_marker"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::create_marker Method</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Returns a future to track the completion of all commands submitted so far to this <ph id="ph1">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A future to track the completion of all commands submitted so far to this <ph id="ph1">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="flush"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::flush Method</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Submits all pending commands queued to the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object to the accelerator for execution.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_accelerator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::get_accelerator Method</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>accelerator<ept id="p1">](accelerator-class.md)</ept> object for the <bpt id="p2">[</bpt>accelerator_view<ept id="p2">](accelerator-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator`</ph> object for the <ph id="ph2">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_is_auto_selection"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::get_is_auto_selection Method</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id="p1">[</bpt>parallel_for_each<ept id="p1">](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the runtime will automatically select an appropriate accelerator; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_is_debug"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::get_is_debug Method</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A Boolean value that indicates whether the <ph id="ph1">`accelerator_view`</ph> object has the DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_queuing_mode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::get_queuing_mode Method</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns the queuing mode for the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The queuing mode for the <ph id="ph1">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_version"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::get_version Method</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Returns the version of the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The version of the <ph id="ph1">`accelerator_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_auto_selection"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::is_auto_selection Data Member</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id="p1">[</bpt>parallel_for_each<ept id="p1">](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)</ept>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="is_debug"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::is_debug Data Member</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value that indicates whether the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object has the  DEBUG layer enabled for extensive error reporting.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::operator!= Operator</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Compares this <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object with another and returns <ph id="ph1">`false`</ph> if they are the same; otherwise, returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator_view`</ph> object to compare with this one.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the two objects are the same; otherwise, <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::operator= Operator</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object into this one.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator_view`</ph> object to copy from.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>A reference to the modified <ph id="ph1">`accelerator_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::operator== Operator</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Compares this <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object with another and returns <ph id="ph1">`true`</ph> if they are the same; otherwise, returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`accelerator_view`</ph> object to compare with this one.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two objects are the same; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="queuing_mode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::queuing_mode Data Member</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Gets the queuing mode for the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="version"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::version Data Member</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Gets the version of the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="wait"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  accelerator_view::wait Method</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Waits for all commands submitted to the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> object to finish.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency Namespace (C++ AMP)<ept id="p1">](concurrency-namespace-cpp-amp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>