<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e09a6279b04213902f33dfc1cb5b1e22c3fb1797</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\reference\array-view-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">133c15c12a44109005dd599869f9074c8d743cc5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5af64c0d6e47624b16aa65e0a49a843fa262651</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>array_view Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>array_view Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an N-dimensional view over the data held in another container.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The data type of the elements in the <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The rank of the <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::array_view Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">`array_view`</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There is no default constructor for <ph id="ph1">`array&lt;T,N&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All constructors are restricted to run on the CPU only and cannot be executed on a Direct3D target.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::~array_view Destructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::copy_to Method<ept id="p1">](#copy_to)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Copies the contents of the <ph id="ph1">`array_view`</ph> object to the specified destination by calling <ph id="ph2">`copy(*this, dest)`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::data Method<ept id="p1">](#data)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the raw data of the <ph id="ph1">`array_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::discard_data Method<ept id="p1">](#discard_data)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Discards the current data underlying this view.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::get_extent Method<ept id="p1">](#get_extent)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the extent object of the array_view object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::get_ref Method<ept id="p1">](#get_ref)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a reference to the indexed element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::get_source_accelerator_view Method<ept id="p1">](#get_source_accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> where the data source of the <ph id="ph1">`array_view`</ph> is located.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::refresh Method<ept id="p1">](#refresh)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Notifies the <ph id="ph1">`array_view`</ph> object that its bound memory has been modified outside the <ph id="ph2">`array_view`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A call to this method renders all cached information stale.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::reinterpret_as Method<ept id="p1">](#reinterpret_as)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns a one-dimensional array that contains all the elements in the <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::section Method<ept id="p1">](#section)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a subsection of the <ph id="ph1">`array_view`</ph> object that's at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::synchronize Method<ept id="p1">](#synchronize)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Synchronizes any modifications made to the <ph id="ph1">`array_view`</ph> object back to its source data.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::synchronize_async Method<ept id="p1">](#synchronize_async)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Asynchronously synchronizes any modifications made to the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object back to its source data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::synchronize_to Method<ept id="p1">](#synchronize_to)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Synchronizes any modifications made to the <ph id="ph1">`array_view`</ph> object to the specified <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::synchronize_to_async Method<ept id="p1">](#synchronize_to_async)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Asynchronously synchronizes any modifications made to the <ph id="ph1">`array_view`</ph> object to the specified <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::view_as Method<ept id="p1">](#view_as)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Produces an <ph id="ph1">`array_view`</ph> object of a different rank using this <ph id="ph2">`array_view`</ph> object’s data.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::operator() Operator<ept id="p1">](#array_view__operator_call)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns the value of the element that is specified by the parameter or parameters.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::operator[] Operator<ept id="p1">](#operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns the element that is specified by the parameters.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::operator= Operator<ept id="p1">](#operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <ph id="ph1">`array_view`</ph> object into this one.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Public Constants</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::rank Constant<ept id="p1">](#rank)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Stores the rank of the <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::extent Data Member<ept id="p1">](#extent)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`extent`</ph> object that defines the shape of the <ph id="ph2">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::source_accelerator_view Data Member<ept id="p1">](#source_accelerator_view)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">[</bpt>accelerator_view<ept id="p1">](accelerator-view-class.md)</ept> where the data source of the <ph id="ph1">`array_view`</ph> is located</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view::value_type Data Member<ept id="p1">](#value_type)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The value type of the <ph id="ph1">`array_view`</ph> and the bound array.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`array_view`</ph> class represents a view into the data that is contained in an <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object or a subsection of an <ph id="ph2">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can access the <ph id="ph1">`array_view`</ph> object where the source data is located (locally) or on a different accelerator or a coherence domain (remotely).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you access the object remotely, views are copied and cached as necessary.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Except for the effects of automatic caching, <ph id="ph1">`array_view`</ph> objects have a performance profile similar to that of <ph id="ph2">`array`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>There is a small performance penalty when you access the data through views.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>There are three remote usage scenarios:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A view to a system memory pointer is passed by means of a <bpt id="p1">[</bpt>parallel_for_each<ept id="p1">](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)</ept> call to an accelerator and accessed on the accelerator.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A view to an array located on an accelerator is passed by means of a <ph id="ph1">`parallel_for_each`</ph> call to another accelerator and is accessed there.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A view to an array located on an accelerator is accessed on the CPU.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In any one of these scenarios, the referenced views are copied by the runtime to the remote location and, if modified by the calls to the <ph id="ph1">`array_view`</ph> object, are copied back to the local location.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The runtime might optimize the process of copying changes back, might copy only changed elements, or might copy unchanged portions also.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Overlapping <ph id="ph1">`array_view`</ph> objects on one data source are not guaranteed to maintain referential integrity in a remote location.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You must synchronize any multithreaded access to the same data source.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The runtime makes the following guarantees regarding the caching of data in <ph id="ph1">`array_view`</ph> objects:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>All well-synchronized accesses to an <ph id="ph1">`array`</ph> object and an <ph id="ph2">`array_view`</ph> object on it in program order obey a serial happens-before relationship.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>All well-synchronized accesses to overlapping <ph id="ph1">`array_view`</ph> objects on the same accelerator on a single <ph id="ph2">`array`</ph> object are aliased through the <ph id="ph3">`array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>They induce a total occurs-before relationship which obeys program order.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>There is no caching.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`array_view`</ph> objects are executing on different accelerators, the order of access is undefined, creating a race condition.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When you create an <ph id="ph1">`array_view`</ph> object using a pointer in system memory, you must change the view <ph id="ph2">`array_view`</ph> object only through the <ph id="ph3">`array_view`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Alternatively, you must call <ph id="ph1">`refresh()`</ph> on one of the <ph id="ph2">`array_view`</ph> objects that are attached to the system pointer, if the underlying native memory is changed directly, instead of through the <ph id="ph3">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Either action notifies the <ph id="ph1">`array_view`</ph> object that the underlying native memory is changed and that any copies that are located on an accelerator are outdated.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you follow these guidelines, the pointer-based views are identical to those provided to views of data-parallel arrays.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> amp.h</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> Concurrency</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::~array_view Destructor</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Destroys the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::array_view Constructor</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The element type of a C-style array from which data is supplied.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A template argument that must specify a linear container that supports <ph id="ph1">`data()`</ph> and <ph id="ph2">`size()`</ph> members.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The most significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The least significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The extent in each dimension of this <ph id="ph1">`array_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`array_view&lt;T,N&gt;`</ph> from which to initialize the new <ph id="ph2">`array_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The size of a C-style array from which data is supplied.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A pointer to the source data that will be copied into the new array.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="copy_to"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::copy_to Method</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Copies the contents of the <ph id="ph1">`array_view`</ph> object to the specified destination object by calling <ph id="ph2">`copy(*this, dest)`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object to copy to.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="data"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::data Method</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the raw data of the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A pointer to the raw data of the <ph id="ph1">`array_view`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="discard_data"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::discard_data Method</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Discards the current data underlying this view.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This is an optimization hint to the runtime used to avoid copying the current contents of the view to a target <ph id="ph1">`accelerator_view`</ph> that it is accessed on, and its use is recommended if the existing content is not needed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This method is a no-op when used in a restrict(amp) context</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="extent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::extent Data Member</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`extent`</ph> object that defines the shape of the <ph id="ph2">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_extent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::get_extent Method</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object of the <bpt id="p2">[</bpt>array_view<ept id="p2">](array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`extent`</ph> object of the <ph id="ph2">`array_view`</ph> object</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_ref"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::get_ref Method</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Get a reference to the element indexed by _Index.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Unlike the other indexing operators for accessing the array_view on the CPU, this method does not implicitly synchronize this array_view's contents to the CPU.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After accessing the array_view on a remote location or performing a copy operation involving this array_view users are responsible to explicitly synchronize the array_view to the CPU before calling this method.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Failure to do so results in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The index.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Reference to the element indexed by _Index</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="get_source_accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::get_source_accelerator_view Method</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Returns the accelerator_view where the data source of the array_view is located.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the array_view does not have a data source, this API throws a runtime_exception</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="array_view__operator_call"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::operator() Operator</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns the value of the element that is specified by the parameter or parameters.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The location of the element.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The index in the first dimension.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The index in the second dimension.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The index in the third dimension.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The location of the element.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The value of the element that is specified by the parameter or parameters.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::operator[] Operator</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns the element that is specified by the parameters.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The index.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The index.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The value of the element at the index, or an <ph id="ph1">`array_view`</ph> projected on the most-significant dimension.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::operator= Operator</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Copies the contents of the specified <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object to this one.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`array_view`</ph> object to copy from.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A reference to this <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="rank"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::rank Constant</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Stores the rank of the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="refresh"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::refresh Method</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Notifies the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object that its bound memory has been modified outside the <ph id="ph1">`array_view`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A call to this method renders all cached information stale.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="reinterpret_as"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> array_view::reinterpret_as Method</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Reinterprets the array_view through a one-dimensional array_view, which as an option can have a different value type than the source array_view.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The data type of the new <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`array_view`</ph> object or a const <ph id="ph2">`array_view`</ph> object that is based on this <ph id="ph3">`array_view`</ph>, with the element type converted from <ph id="ph4">`T`</ph> to <ph id="ph5">`_Value_type2`</ph>, and the rank reduced from <bpt id="p1">*</bpt>N<ept id="p1">*</ept> to 1.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Sometimes it is convenient to view a multi-dimensional array as a linear, one-dimensional array, which may have a different value type than the source array.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can achieve this on an <ph id="ph1">`array_view`</ph> by using this method.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Warning<ept id="p1">**</ept> Reinterpeting an array_view object by using a different value type is a potentially unsafe operation.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This functionality should be used with care.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="section"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::section Method</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Returns a subsection of the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object that's at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The most significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The least significant component of the extent of this section.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object that specifies the extent of the section.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The origin is 0.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>index<ept id="p1">](index-class.md)</ept> object that specifies the location of the origin.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The subsection is the rest of the extent.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The most significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The next-to-most-significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The least significant component of the origin of this section.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The rank of the section.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>extent<ept id="p1">](extent-class.md)</ept> object that specifies the extent of the section.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>index<ept id="p1">](index-class.md)</ept> object that specifies the location of the origin.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A subsection of the <ph id="ph1">`array_view`</ph> object that's at the specified origin and, optionally, that has the specified extent.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>When only the <ph id="ph1">`index`</ph> object is specified, the subsection contains all elements in the associated extent that have indexes that are larger than the indexes of the elements in the <ph id="ph2">`index`</ph> object.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="source_accelerator_view"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::source_accelerator_view Data Member</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Gets the source accelerator_view that this array_view is associated with.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="synchronize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::synchronize Method</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Synchronizes any modifications made to the <ph id="ph1">`array_view`</ph> object back to its source data.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The intended <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept> on the target <bpt id="p2">[</bpt>accelerator_view<ept id="p2">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This parameter has a default value of <ph id="ph1">`access_type_read`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="synchronize_async"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::synchronize_async Method</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Asynchronously synchronizes any modifications made to the <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object back to its source data.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The intended <bpt id="p1">[</bpt>access_type<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept> on the target <bpt id="p2">[</bpt>accelerator_view<ept id="p2">](accelerator-view-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This parameter has a default value of <ph id="ph1">`access_type_read`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A future upon which to wait for the operation to complete.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="synchronize_to"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::synchronize_to Method</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Synchronizes any modifications made to this array_view to the specified accelerator_view.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The target accelerator_view to synchronize to.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The desired access_type on the target accelerator_view.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This parameter has a default value of access_type_read.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="synchronize_to_async"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::synchronize_to_async Method</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Asynchronously synchronizes any modifications made to this array_view to the specified accelerator_view.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The target accelerator_view to synchronize to.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The desired access_type on the target accelerator_view.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This parameter has a default value of access_type_read.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A future upon which to wait for the operation to complete.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="value_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::value_type Data Member</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The value type of the array_view and the bound array.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="view_as"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  array_view::view_as Method</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Reinterprets this <ph id="ph1">`array_view`</ph> as an <ph id="ph2">`array_view`</ph> of a different rank.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The rank of the new <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The reshaping <ph id="ph1">`extent`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The data type of the elements in both the original <bpt id="p1">[</bpt>array<ept id="p1">](array-class.md)</ept> object and the returned <ph id="ph1">`array_view`</ph> object.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>array_view<ept id="p1">](array-view-class.md)</ept> object that is constructed.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency Namespace (C++ AMP)<ept id="p1">](concurrency-namespace-cpp-amp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>