<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcb55151ae849b42b3cb77923e6d959c4e0f46da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-ofstream-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48d77b638793c4c57e7ba453b15e228eb955c108</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d359ca132e6a600e6c3275157b1b38527b4f4021</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_ofstream Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_ofstream Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes an object that controls insertion of elements and encoded objects into a stream buffer of class <bpt id="p1">[</bpt>basic_filebuf<ept id="p1">](../standard-library/basic-filebuf-class.md)</ept><ph id="ph1">&lt; </ph><ph id="ph2">`Elem`</ph>, <ph id="ph3">`Tr`</ph>&gt;, with elements of type <ph id="ph4">`Elem`</ph>, whose character traits are determined by the class <ph id="ph5">`Tr`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The basic element of the file buffer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The traits of the basic element of the file buffer (usually <ph id="ph1">`char_traits`</ph><ph id="ph2">&lt; </ph><ph id="ph3">`Elem`</ph>&gt;).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`wchar_t`</ph> specialization of <ph id="ph2">`basic_ofstream`</ph> writes to the file, if the file is opened in text mode it will write a MBCS sequence.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The internal representation will use a buffer of <ph id="ph1">`wchar_t`</ph> characters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The object stores an object of class <ph id="ph1">`basic_filebuf`</ph><ph id="ph2">&lt; </ph><ph id="ph3">`Elem`</ph>, <ph id="ph4">`Tr`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <ph id="ph1">`basic_ofstream`</ph> object and write text to it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_ofstream<ept id="p1">](#basic_ofstream__basic_ofstream)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates an object of type <ph id="ph1">`basic_ofstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>close<ept id="p1">](#basic_ofstream__close)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Closes a file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is_open<ept id="p1">](#basic_ofstream__is_open)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Determines if a file is open.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>open<ept id="p1">](#basic_ofstream__open)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Opens a file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ofstream__rdbuf)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the address of the stored stream buffer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](#basic_ofstream__swap)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Exchange the contents of this <ph id="ph1">`basic_ofstream`</ph> for the contents of the provided <ph id="ph2">`basic_ofstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](#basic_ofstream__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Assigns the content of this stream object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is a move assignment involving an <ph id="ph1">`rvalue reference`</ph> that does not leave a copy behind.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>fstream&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__basic_ofstream"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::basic_ofstream</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Creates an object of type <ph id="ph1">`basic_ofstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The name of the file to open.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>One of the enumerations in <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default file opening protection, equivalent to the <ph id="ph1">`shflag`</ph> parameter in <bpt id="p1">[</bpt>_fsopen, _wfsopen<ept id="p1">](../c-runtime-library/reference/fsopen-wfsopen.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The rvalue reference to the <ph id="ph1">`basic_ofstream`</ph> object being used to initialize this <ph id="ph2">`basic_ofstream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the base class by calling <bpt id="p1">[</bpt>basic_ostream<ept id="p1">](../standard-library/basic-ostream-class.md)</ept>( <bpt id="p2">**</bpt>sb<ept id="p2">**</ept>), where <bpt id="p3">**</bpt>sb<ept id="p3">**</ept> is the stored object of class <bpt id="p4">[</bpt>basic_filebuf<ept id="p4">](../standard-library/basic-filebuf-class.md)</ept><ph id="ph1">&lt; </ph><ph id="ph2">`Elem`</ph>, <ph id="ph3">`Tr`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It also initializes <bpt id="p1">**</bpt>sb<ept id="p1">**</ept> by calling <ph id="ph1">`basic_filebuf`</ph><ph id="ph2">&lt; </ph><ph id="ph3">`Elem`</ph>, <ph id="ph4">`Tr`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The second and third constructors initializes the base class by calling <ph id="ph1">`basic_ostream`</ph>( <bpt id="p1">**</bpt>sb<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It also initializes <bpt id="p1">**</bpt>sb<ept id="p1">**</ept> by calling <ph id="ph1">`basic_filebuf`</ph><ph id="ph2">&lt; </ph><ph id="ph3">`Elem`</ph>, <ph id="ph4">`Tr`</ph>&gt; and then <bpt id="p2">**</bpt>sb<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>open<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept>( <ph id="ph1">`_Filename`</ph>, <ph id="ph2">`_Mode`</ph> &amp;#124; <ph id="ph3">`ios_base::out`</ph>).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the latter function returns a null pointer, the constructor calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The fourth constructor is a copy function.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It initializes the object with the contents of <ph id="ph1">`right`</ph>, treated as an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <ph id="ph1">`basic_ofstream`</ph> object and write text to it.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__close"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::close</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Closes a file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The member function calls <bpt id="p1">[</bpt>rdbuf<ept id="p1">](../standard-library/basic-ifstream-class.md#basic_ifstream__rdbuf)</ept><bpt id="p2">**</bpt><ph id="ph1">-&gt;</ph><ept id="p2">**</ept><bpt id="p3">[</bpt>close<ept id="p3">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_filebuf::close<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept> for an example that uses <bpt id="p2">**</bpt>close<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__is_open"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::is_open</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Indicates whether a file is open.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the file is open, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ofstream__rdbuf)</ept> <bpt id="p2">**</bpt><ph id="ph1">-&gt;</ph><ept id="p2">**</ept> <bpt id="p3">[</bpt>is_open<ept id="p3">](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__open"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::open</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Opens a file.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The name of the file to open.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>One of the enumerations in <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default file opening protection, equivalent to the <ph id="ph1">`shflag`</ph> parameter in <bpt id="p1">[</bpt>_fsopen, _wfsopen<ept id="p1">](../c-runtime-library/reference/fsopen-wfsopen.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The member function calls <bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ofstream__rdbuf)</ept> <bpt id="p2">**</bpt><ph id="ph1">-&gt;</ph><ept id="p2">**</ept> <bpt id="p3">[</bpt>open<ept id="p3">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept>(_ <bpt id="p4">*</bpt>Filename<ept id="p4">*</ept>, <ph id="ph2">`_Mode`</ph> &amp;#124; <ph id="ph3">`ios_base::out`</ph>).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If that function returns a null pointer, the function calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_filebuf::open<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept> for an example that uses <bpt id="p2">**</bpt>open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::operator=</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Assigns the content of this stream object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is a move assignment involving an <ph id="ph1">`rvalue reference`</ph> that does not leave a copy behind.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An rvalue reference to a <ph id="ph1">`basic_ofstream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The member operator replaces the contents of the object by using the contents of <ph id="ph1">`right`</ph>, treated as an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__rdbuf"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::rdbuf</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns the address of the stored stream buffer.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns the address of the stored stream buffer.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_filebuf::close<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept> for an example that uses <ph id="ph1">`rdbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_ofstream__swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_ofstream::swap</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exchanges the contents of two <ph id="ph1">`basic_ofstream`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`lvalue`</ph> reference to another <ph id="ph2">`basic_ofstream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The member function exchanges the contents of this object for the contents of <ph id="ph1">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_ostream Class<ept id="p1">](../standard-library/basic-ostream-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostream Programming<ept id="p1">](../standard-library/iostream-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostreams Conventions<ept id="p1">](../standard-library/iostreams-conventions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>