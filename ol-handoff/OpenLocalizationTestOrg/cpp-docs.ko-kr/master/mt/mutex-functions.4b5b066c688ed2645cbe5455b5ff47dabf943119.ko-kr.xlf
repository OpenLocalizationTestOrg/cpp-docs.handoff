<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7de335021782e4e0775a98416afbe2bafe383142</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\mutex-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2298892b9562b2ca47c5082f0ec81f9deaf4b34d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95f59ed3094e05772f633c8be3c9212bcdcbcc4c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>mutex<ph id="ph2">&amp;gt;</ph> functions and variables | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>mutex<ph id="ph2">&amp;gt;</ph> functions and variables</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>adopt_lock Variable<ept id="p1">](#adopt_lock_variable)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>call_once Function<ept id="p1">](#call_once_function)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>defer_lock Variable<ept id="p1">](#defer_lock_variable)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>lock Function<ept id="p1">](#lock_function)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try_to_lock Variable<ept id="p1">](#try_to_lock_variable)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="adopt_lock_variable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  adopt_lock Variable</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to constructors for <bpt id="p1">[</bpt>lock_guard<ept id="p1">](../standard-library/lock-guard-class.md)</ept> and <bpt id="p2">[</bpt>unique_lock<ept id="p2">](../standard-library/unique-lock-class.md)</ept> to indicate that the mutex object that is also being passed to the constructor is locked.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="call_once_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  call_once</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Provides a mechanism for calling a specified callable object exactly once during execution.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>once_flag<ept id="p1">](../standard-library/once-flag-structure.md)</ept> object that ensures that the callable object is only called once.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A callable object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An argument list.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Flag`</ph> is not valid, the function throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise, the template function uses its <ph id="ph1">`Flag`</ph> argument to ensure that it calls <ph id="ph2">`F(A...)`</ph> successfully exactly once, regardless of how many times the template function is called.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`F(A...)`</ph> exits by throwing an exception, the call was not successful.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="defer_lock_variable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  defer_lock Variable</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to the constructor for <bpt id="p1">[</bpt>unique_lock<ept id="p1">](../standard-library/unique-lock-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This indicates that the constructor should not lock the mutex object that's also being passed to it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="lock_function"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  lock</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attempts to lock all arguments without deadlock.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The arguments to the template function must be <bpt id="p1">*</bpt>mutex types<ept id="p1">*</ept>, except that calls to <ph id="ph1">`try_lock`</ph> might throw exceptions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The function locks all of its arguments without deadlock by calls to <ph id="ph1">`lock`</ph>, <ph id="ph2">`try_lock`</ph>, and <ph id="ph3">`unlock`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If a call to <ph id="ph1">`lock`</ph> or <ph id="ph2">`try_lock`</ph> throws an exception, the function calls <ph id="ph3">`unlock`</ph> on any of the mutex objects that were successfully locked before rethrowing the exception.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="try_to_lock_variable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  try_to_lock Variable</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Represents an object that can be passed to the constructor for <bpt id="p1">[</bpt>unique_lock<ept id="p1">](../standard-library/unique-lock-class.md)</ept> to indicate that the constructor should try to unlock the <ph id="ph1">`mutex`</ph> that is also being passed to it without blocking.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>mutex&gt;<ept id="p1">](../standard-library/mutex.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>