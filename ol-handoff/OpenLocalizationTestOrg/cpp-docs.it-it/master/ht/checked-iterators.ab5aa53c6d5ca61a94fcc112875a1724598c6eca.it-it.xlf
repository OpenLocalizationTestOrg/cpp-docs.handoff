<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5bdf6b7ea0fb279cd22e6c42cddd7eca8a132fc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\checked-iterators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e79d26415b50344e469b3d8c03205fe3445a8c2b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32d0da237b2378dced6e9b26ab14a1a83c6ed4ad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Checked Iterators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Checked Iterators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Checked iterators ensure that the bounds of your container are not overwritten.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Checked iterators apply to release builds and debug builds.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about how to use iterators when you compile in debug mode, see <bpt id="p1">[</bpt>Debug Iterator Support<ept id="p1">](../standard-library/debug-iterator-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information about how to disable warnings that are generated by checked iterators, see <bpt id="p1">[</bpt>_SCL_SECURE_NO_WARNINGS<ept id="p1">](../standard-library/scl-secure-no-warnings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use the following symbol with the checked iterators feature.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_SECURE_SCL`</ph> is defined as 1, unsafe use of iterators causes a runtime error and the program is terminated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If defined as 0, checked iterators are disabled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By default, the value for <ph id="ph1">`_SECURE_SCL`</ph> is 0 for release builds and 1 for debug builds.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`_ITERATOR_DEBUG_LEVEL`</ph> to control <bpt id="p1">[</bpt>_SECURE_SCL<ept id="p1">](../standard-library/secure-scl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_ITERATOR_DEBUG_LEVEL<ept id="p1">](../standard-library/iterator-debug-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_SECURE_SCL`</ph> is defined as 1, following SCL checks are performed:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All standard iterators (for example, <bpt id="p1">[</bpt>vector::iterator<ept id="p1">](../standard-library/vector-class.md#vector__iterator)</ept>) are checked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, <bpt id="p1">[</bpt>std::copy<ept id="p1">](http://msdn.microsoft.com/Library/f1fec7da-e01b-40f1-b5bd-6b81e304cae1)</ept>).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the output iterator is an unchecked iterator calls to the standard function will cause compiler warnings.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following functions will generate a runtime error if there is an access that is outside the bounds of the container:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>basic_string::operator</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>deque::back</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>deque::front</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>deque::operator</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>list::back</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>list::front</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>queue::back</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>queue::front</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>vector::operator</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>vector::back</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>vector::front</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_SECURE_SCL`</ph> is defined as 0:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>All standard iterators are unchecked (iterators can move beyond the container boundaries, which leads to undefined behavior).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If an output iterator is a checked iterator you will get checked behavior on calls to the standard function (for example, <ph id="ph1">`std::copy`</ph>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If an output iterator is an unchecked iterator you will get unchecked behavior on calls to the standard function (for example, <ph id="ph1">`std::copy`</ph>).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A checked iterator refers to an iterator that will call <ph id="ph1">`invalid_parameter_handler`</ph> if you attempt to move past the boundaries of the container.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`invalid_parameter_handler`</ph>, see <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>checked_array_iterator Class<ept id="p1">](../standard-library/checked-array-iterator-class.md)</ept> and <bpt id="p2">[</bpt>unchecked_array_iterator Class<ept id="p2">](../standard-library/unchecked-array-iterator-class.md)</ept> are the iterator adaptors that support checked iterators.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you compile by using <ph id="ph1">`_SECURE_SCL 1`</ph>, a runtime error will occur if you attempt to access an element that is outside the bounds of the container by using the indexing operator of certain classes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This program will print out "67" then pop an assertion failure dialog box with additional information about the failure.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Similarly, when you compile by using <ph id="ph1">`_SECURE_SCL 1`</ph>, a runtime error will occur if you attempt to access an element by using front or back of certain classes, when the container is empty.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This program will pop up an assertion failure dialog box with additional information about the failure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following code demonstrates various iterator use-case scenarios with comments about each.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Compiling the code shown in the previous section with <ph id="ph1">`cl.exe /EHsc /W4 /MTd`</ph> will result in the following compiler warning, but compiles without error into an executable:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Running the console app executable results in the following output:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>STL Overview</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Debug Iterator Support</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>