<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50870820e0f1772f4c88b372eba577ee6a202237</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccombstr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd4957bcb86c3ca7fcc9af16a7eb5b169d04649f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab0107c032e8401a084defbf51e959f2097d3688</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComBSTR Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComBSTR Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class is a wrapper for <ph id="ph1">`BSTR`</ph>s.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComBSTR::CComBSTR</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CComBSTR::~CComBSTR</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CComBSTR::Append</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Appends a string to <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CComBSTR::AppendBSTR</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Appends a <ph id="ph1">`BSTR`</ph> to <ph id="ph2">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CComBSTR::AppendBytes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Appends a specified number of bytes to <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CComBSTR::ArrayToBSTR</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`BSTR`</ph> from the first character of each element in the safearray and attaches it to the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CComBSTR::AssignBSTR</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Assigns a <ph id="ph1">`BSTR`</ph> to <ph id="ph2">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CComBSTR::Attach</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Attaches a <ph id="ph1">`BSTR`</ph> to the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CComBSTR::BSTRToArray</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates a zero-based one-dimensional safearray, where each element of the array is a character from the <ph id="ph1">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CComBSTR::ByteLength</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the length of <ph id="ph1">`m_str`</ph> in bytes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CComBSTR::Copy</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a copy of <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComBSTR::CopyTo</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns a copy of <ph id="ph1">`m_str`</ph> via an <bpt id="p1">**</bpt>[out]<ept id="p1">**</ept> parameter</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CComBSTR::Detach</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Detaches <ph id="ph1">`m_str`</ph> from the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CComBSTR::Empty</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Frees <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CComBSTR::Length</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the length of <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CComBSTR::LoadString</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Loads a string resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CComBSTR::ReadFromStream</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Loads a <ph id="ph1">`BSTR`</ph> object from a stream.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CComBSTR::ToLower</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Converts the string to lowercase.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CComBSTR::ToUpper</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Converts the string to uppercase.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CComBSTR::WriteToStream</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Saves <ph id="ph1">`m_str`</ph> to a stream.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator BSTR</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Casts a <ph id="ph1">`CComBSTR`</ph> object to a <ph id="ph2">`BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator !</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>, depending on whether <ph id="ph3">`m_str`</ph>is <ph id="ph4">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator !=</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Compares a <ph id="ph1">`CComBSTR`</ph> with a string.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator &amp;</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the address of <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator +=</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Appends a <ph id="ph1">`CComBSTR`</ph> to the object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator &lt;</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compares a <ph id="ph1">`CComBSTR`</ph> with a string.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator =</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Assigns a value to <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator ==</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Compares a <ph id="ph1">`CComBSTR`</ph> with a string.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator &gt;</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compares a <ph id="ph1">`CComBSTR`</ph> with a string.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CComBSTR::m_str</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Contains the <ph id="ph1">`BSTR`</ph> associated with the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComBSTR`</ph> class is a wrapper for <ph id="ph2">`BSTR`</ph>s, which are length-prefixed strings.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The length is stored as an integer at the memory location preceding the data in the string.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>BSTR<ept id="p1">](http://msdn.microsoft.com/en-us/1b2d7d2c-47af-4389-a6b6-b01b7e915228)</ept> is null-terminated after the last counted character but may also contain null characters embedded within the string.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The string length is determined by the character count, not the first null character.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComBSTR`</ph> class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The ANSI versions of these functions are less efficient than their Unicode counterparts because temporary Unicode strings are often created internally.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For efficiency, use the Unicode versions where possible.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Because of the improved lookup behavior implemented in Visual Studio .NET, code such as <ph id="ph1">`bstr = L"String2" + bstr;`</ph>, which may have compiled in previous releases, should instead be implemented as <ph id="ph2">`bstr = CStringW(L"String2") + bstr`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For a list of cautions when using <ph id="ph1">`CComBSTR`</ph>, see <bpt id="p1">[</bpt>Programming with CComBSTR<ept id="p1">](../../atl/programming-with-ccombstr-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlbase.h</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CComBSTR::Append</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Appends either <ph id="ph1">`lpsz`</ph> or the <ph id="ph2">`BSTR`</ph> member of <ph id="ph3">`bstrSrc`</ph> to <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`CComBSTR`</ph> object to append.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ch</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[in] A character to append.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>[in] A zero-terminated character string to append.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can pass a Unicode string via the <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept> overload or an ANSI string via the <ph id="ph1">`LPCSTR`</ph> version.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[in] The number of characters from <ph id="ph1">`lpsz`</ph> to append.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An ANSI string will be converted to Unicode before being appended.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#32</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CComBSTR::AppendBSTR</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Appends the specified <ph id="ph1">`BSTR`</ph> to <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`BSTR`</ph> to append.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Do not pass an ordinary wide-character string to this method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The compiler cannot catch the error and run time errors will occur.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#33</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CComBSTR::AppendBytes</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Appends the specified number of bytes to <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> without conversion.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>[in] A pointer to an array of bytes to append.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>[in] The number of bytes to append.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#34</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CComBSTR::ArrayToBSTR</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Frees any existing string held in the <ph id="ph1">`CComBSTR`</ph> object, then creates a <ph id="ph2">`BSTR`</ph> from the first character of each element in the safearray and attaches it to the <ph id="ph3">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[in] The safearray containing the elements used to create the string.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CComBSTR::AssignBSTR</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Assigns a <ph id="ph1">`BSTR`</ph> to <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`BSTR`</ph> to assign to the current <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CComBSTR::Attach</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Attaches a <ph id="ph1">`BSTR`</ph> to the <ph id="ph2">`CComBSTR`</ph> object by setting the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member to <bpt id="p2">*</bpt>src<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`BSTR`</ph> to attach to the object.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Do not pass an ordinary wide-character string to this method.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The compiler cannot catch the error and run time errors will occur.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This method will assert if <ph id="ph1">`m_str`</ph> is non- <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#35</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CComBSTR::BSTRToArray</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Creates a zero-based one-dimensional safearray, where each element of the array is a character from the <ph id="ph1">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>[out] The pointer to the safearray used to hold the results of the function.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>on success, or any standard <ph id="ph1">`HRESULT`</ph> error value.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CComBSTR::ByteLength</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes in <ph id="ph1">`m_str`</ph>, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The length of the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member in bytes.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Returns 0 if <ph id="ph1">`m_str`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#36</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CComBSTR::CComBSTR</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The default constructor sets the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>[in] The number of characters to copy from <ph id="ph1">`sz`</ph> or the initial size in characters for the <ph id="ph2">`CComBSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>[in] A string to copy.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The Unicode version specifies an <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept>; the ANSI version specifies an <ph id="ph1">`LPCSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>[in] A string to copy.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The Unicode version specifies an <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept>; the ANSI version specifies an <ph id="ph1">`LPCSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>[in] A reference to a <bpt id="p1">**</bpt>GUID<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The copy constructor sets <ph id="ph1">`m_str`</ph> to a copy of the <ph id="ph2">`BSTR`</ph> member of <bpt id="p1">*</bpt>src<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>REFGUID<ept id="p1">**</ept> constructor converts the <bpt id="p2">**</bpt>GUID<ept id="p2">**</ept> to a string using <bpt id="p3">**</bpt>StringFromGUID2<ept id="p3">**</ept> and stores the result.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The other constructors set <ph id="ph1">`m_str`</ph> to a copy of the specified string.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If you pass a value for <ph id="ph1">`nSize`</ph>, then only <ph id="ph2">`nSize`</ph> characters will be copied, followed by a terminating null character.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>supports move semantics.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You can use the move constructor (the constructor that takes an rvalue reference ( <ph id="ph1">`&amp;&amp;`</ph>) to create a new object that uses the same underlying data as the old object you pass in as an argument, without the overhead of copying the object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The destructor frees the string pointed to by <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#37</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CComBSTR::~CComBSTR</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The destructor frees the string pointed to by <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CComBSTR::Copy</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Allocates and returns a copy of <ph id="ph1">`m_str`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A copy of the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_str`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, returns <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#38</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CComBSTR::CopyTo</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Allocates and returns a copy of <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> via the parameter.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>pbstr</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>[out] The address of a <ph id="ph1">`BSTR`</ph> in which to return the string allocated by this method.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>[out] The address of a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> in which to return the string allocated by this method.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value indicating the success or failure of the copy.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>After calling this method, the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> pointed to by <ph id="ph1">`pvarDest`</ph> will be of type <ph id="ph2">`VT_BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#39</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CComBSTR::Detach</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Detaches <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> from the <ph id="ph1">`CComBSTR`</ph> object and sets <ph id="ph2">`m_str`</ph> to <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BSTR`</ph> associated with the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#40</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CComBSTR::Empty</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Frees the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#41</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>CComBSTR::Length</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in <ph id="ph1">`m_str`</ph>, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The length of the <bpt id="p1">[</bpt>m_str<ept id="p1">](#ccombstr__m_str)</ept> member.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#42</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CComBSTR::LoadString</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Loads a string resource specified by <ph id="ph1">`nID`</ph> and stores it in this object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>LoadString<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647486)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string is successfully loaded; otherwise, returns <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The first function loads the resource from the module identified by you via the <ph id="ph1">`hInst`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The second function loads the resource from the resource module associated with the <bpt id="p1">[</bpt>CComModule<ept id="p1">](../../atl/reference/ccommodule-class.md)</ept>-derived object used in this project.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#43</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>CComBSTR::m_str</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Contains the <ph id="ph1">`BSTR`</ph> associated with the <ph id="ph2">`CComBSTR`</ph> object.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#49</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>CComBSTR::operator BSTR</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Casts a <ph id="ph1">`CComBSTR`</ph> object to a <ph id="ph2">`BSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>```operator BSTR() const throw();</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>bool operator!() const throw();</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>bool operator!= (const CComBSTR&amp; bstrSrc) const throw(); bool operator!= (LPCOLESTR pszSrc) const;</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>BSTR* operator&amp;() throw();</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>CComBSTR&amp; operator+= (const CComBSTR&amp; bstrSrc);</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>bool operator&lt;(const CComBSTR&amp; bstrSrc) const throw(); bool operator&lt;(LPCOLESTR pszSrc) const throw(); bool operator&lt;(LPCSTR pszSrc) const throw();</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CComBSTR&amp; operator= (const CComBSTR&amp; src);</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>bool operator== (const CComBSTR&amp; bstrSrc) const throw(); bool operator== (LPCOLESTR pszSrc) const;</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>bool operator&gt;(const CComBSTR&amp; bstrSrc) const throw();</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>HRESULT ReadFromStream(IStream* pStream) throw();</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>HRESULT ToLower() throw();</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>HRESULT ToUpper() throw();</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>HRESULT WriteToStream(IStream* pStream) throw();</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>