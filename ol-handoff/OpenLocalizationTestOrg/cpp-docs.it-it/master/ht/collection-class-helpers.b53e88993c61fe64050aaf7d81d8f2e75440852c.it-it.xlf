<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c7858677404d2110b3af24f7f567db3d47f0696</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\collection-class-helpers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ea58ec7b491f5751a21166484708ed0ceee7b1e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d446d2b4f74de60a64adc3726098701077ab9b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Collection Class Helpers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collection Class Helpers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The collection classes <ph id="ph1">`CMap`</ph>, <ph id="ph2">`CList`</ph>, and <ph id="ph3">`CArray`</ph> use templated global helper functions for such purposes as comparing, copying, and serializing elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As part of your implementation of classes based on <ph id="ph1">`CMap`</ph>, <ph id="ph2">`CList`</ph>, and <ph id="ph3">`CArray`</ph>, you must override these functions as necessary with versions tailored to the type of data stored in your map, list, or array.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information on overriding helper functions such as <ph id="ph1">`SerializeElements`</ph>, see the article <bpt id="p1">[</bpt>Collections: How to Make a Type-Safe Collection<ept id="p1">](../../mfc/how-to-make-a-type-safe-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>ConstructElements<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DestructElements<ept id="p2">**</ept> have been deprecated.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library provides the following global functions to help you customize your collection classes:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Collection Class Helpers</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CompareElements</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Indicates whether elements are the same.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CopyElements</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Copies elements from one array to another.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DumpElements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Provides stream-oriented diagnostic output.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>HashKey</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calculates a hash key.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>SerializeElements</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Stores or retrieves elements to or from an archive.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CompareElements</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Called directly by [CList::Find](clist-class.md#not_found.md#clist__find and indirectly by <bpt id="p1">[</bpt>cmap__lookup<ept id="p1">](cmap-class.md#cmap__lookup)</ept> and <bpt id="p2">[</bpt>cmap__operator &amp;#91;&amp;#93;<ept id="p2">](cmap-class.md#cmap__operator_at)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of the first element to be compared.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Pointer to the first element to be compared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type of the second element to be compared.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pointer to the second element to be compared.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Nonzero if the object pointed to by <ph id="ph1">`pElement1`</ph> is equal to the object pointed to by <ph id="ph2">`pElement2`</ph>; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMap`</ph> calls use the <ph id="ph2">`CMap`</ph> template parameters <bpt id="p1">*</bpt>KEY<ept id="p1">*</ept> and <ph id="ph3">`ARG_KEY`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default implementation returns the result of the comparison of <bpt id="p1">*</bpt><ph id="ph1">\*</ph>pElement1<ept id="p1">*</ept> and <bpt id="p2">*</bpt><ph id="ph2">\*</ph>pElement2<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Override this function so that it compares the elements in a way that is appropriate for your application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The C++ language defines the comparison operator ( <ph id="ph1">`==`</ph>) for simple types ( <ph id="ph2">`char`</ph>, <ph id="ph3">`int`</ph>, <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, and so on) but does not define a comparison operator for classes and structures.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you want to use <ph id="ph1">`CompareElements`</ph> or to instantiate one of the collection classes that uses it, you must either define the comparison operator or overload <ph id="ph2">`CompareElements`</ph> with a version that returns appropriate values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CopyElements</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This function is called directly by <bpt id="p1">[</bpt>CArray::Append<ept id="p1">](carray-class.md#carray__append)</ept> and <bpt id="p2">[</bpt>CArray::Copy<ept id="p2">](carray-class.md#carray__copy)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Pointer to the destination where the elements will be copied.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Pointer to the source of the elements to be copied.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Number of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The default implementation uses the simple assignment operator ( <bpt id="p1">**</bpt><ph id="ph1">=</ph><ept id="p1">**</ept> ) to perform the copy operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the type being copied does not have an overloaded operator=, then the default implementation performs a bitwise copy.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For information on implementing this and other helper functions, see the article <bpt id="p1">[</bpt>Collections: How to Make a Type-Safe Collection<ept id="p1">](../how-to-make-a-type-safe-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>DumpElements</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Provides stream-oriented diagnostic output in text form for the elements of your collection when overridden.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Dump context for dumping elements.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the elements.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pointer to the elements to be dumped.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Number of elements to be dumped.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CArray::Dump<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CList::Dump<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>CMap::Dump<ept id="p3">**</ept> functions call this if the depth of the dump is greater than 0.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the elements of your collection are derived from <ph id="ph1">`CObject`</ph>, your override will typically iterate through the collection's elements, calling <ph id="ph2">`Dump`</ph> for each element in turn.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>HashKey</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Calculates a hash value for the given key.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the data type used to access map keys.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The key whose hash value is to be calculated.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The key's hash value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This function is called directly by <bpt id="p1">[</bpt>CMap::RemoveKey<ept id="p1">](cmap-class.md#cmap__removekey)</ept> and indirectly by <bpt id="p2">[</bpt>CMap::Lookup<ept id="p2">](cmap-class.md#cmap__lookup)</ept> and <bpt id="p3">[</bpt>CMap::Operator &amp;#91;&amp;#93;<ept id="p3">](cmap-class.md#cmap__operator_at)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default implementation creates a hash value by shifting <ph id="ph1">`key`</ph> right by four positions.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Override this function so that it returns hash values appropriate for your application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>SerializeElements</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CArray<ept id="p1">](carray-class.md)</ept>, <bpt id="p2">[</bpt>CList<ept id="p2">](clist-class.md)</ept>, and <bpt id="p3">[</bpt>CMap<ept id="p3">](cmap-class.md)</ept> call this function to serialize elements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the elements.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An archive object to archive to or from.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Pointer to the elements being archived.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Number of elements being archived</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default implementation does a bitwise read or write.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For information on implementing this and other helper functions, see the article <bpt id="p1">[</bpt>Collections: How to Make a Type-Safe Collection<ept id="p1">](../how-to-make-a-type-safe-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See the example in the article <bpt id="p1">[</bpt>Collections: How to Make a Type-Safe Collection<ept id="p1">](../how-to-make-a-type-safe-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CMap Class</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CList Class</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CArray Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>