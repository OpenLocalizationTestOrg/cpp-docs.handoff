<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d82ea9bb06b063ad98a6c8d166179cd16d8c517d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strerror-strerror-wcserror-wcserror.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">619cee53e242a58567c4165a414b6923fd9067a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5978a98dfe6c19d7f2c44fd9d05d12002b8d927</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strerror, _strerror, _wcserror, __wcserror | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strerror, _strerror, _wcserror, __wcserror</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets a system error message string (<ph id="ph1">`strerror`</ph>, <ph id="ph2">`_wcserror`</ph>) or formats a user-supplied error message string (<ph id="ph3">`_strerror`</ph>, <ph id="ph4">`__wcserror`</ph>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions are available; see <bpt id="p1">[</bpt>strerror_s, _strerror_s, _wcserror_s, <ph id="ph1">\_</ph>_wcserror_s<ept id="p1">](../../c-runtime-library/reference/strerror-s-strerror-s-wcserror-s-wcserror-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Error number.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>User-supplied message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All of these functions return a pointer to the error-message string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Subsequent calls can overwrite the string.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strerror`</ph> function maps <ph id="ph2">`errnum`</ph> to an error-message string and returns a pointer to the string.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`strerror`</ph> nor <ph id="ph2">`_strerror`</ph> actually prints the message: For that, you have to call an output function such as <bpt id="p1">[</bpt>fprintf<ept id="p1">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`strErrMsg`</ph> is passed as <ph id="ph2">`NULL`</ph>, <ph id="ph3">`_strerror`</ph> returns a pointer to a string that contains the system error message for the last library call that produced an error.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The error-message string is terminated by the newline character ('\n').</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`strErrMsg`</ph> is not equal to <ph id="ph2">`NULL`</ph>, then <ph id="ph3">`_strerror`</ph> returns a pointer to a string that contains (in order) your string message, a colon, a space, the system error message for the last library call that produces an error, and a newline character.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your string message can be, at most, 94 characters long.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The actual error number for <ph id="ph1">`_strerror`</ph> is stored in the variable <bpt id="p1">[</bpt>errno<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To produce accurate results, call <ph id="ph1">`_strerror`</ph> immediately after a library routine returns with an error.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Otherwise, subsequent calls to <ph id="ph1">`strerror`</ph> or <ph id="ph2">`_strerror`</ph> can overwrite the <ph id="ph3">`errno`</ph> value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`__wcserror`</ph> are wide-character versions of <ph id="ph2">`strerror`</ph> and <ph id="ph3">`_strerror`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_wcserror`</ph>, and <ph id="ph2">`__wcserror`</ph> are not part of the ANSI definition; they are Microsoft extensions and we recommend that you do not use them where you want portable code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For ANSI compatibility, use <ph id="ph1">`strerror`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To get error strings, we recommend <ph id="ph1">`strerror`</ph> or <ph id="ph2">`_wcserror`</ph> instead of the deprecated macros <bpt id="p1">[</bpt>_sys_errlist<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> and <bpt id="p2">[</bpt>_sys_nerr<ept id="p2">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> and the deprecated internal functions <ph id="ph3">`__sys_errlist`</ph> and <ph id="ph4">`__sys_nerr`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>perror<ept id="p1">](../../c-runtime-library/reference/perror-wperror.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>System::Exception::Message</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>clearerr</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ferror</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>perror, _wperror</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>