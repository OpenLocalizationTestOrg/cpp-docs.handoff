<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13ae448c79276c5b8d74605d66e237d328f70fd3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cgdiobject-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6beaf9a9326d88fe3a893088c1da6513b954c0ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85f6717ff7bfd617ebc43bbaad26aa5e2ec6c160</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CGdiObject Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CGdiObject Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a base class for various kinds of Windows graphics device interface (GDI) objects such as bitmaps, regions, brushes, pens, palettes, and fonts.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CGdiObject::CGdiObject</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CGdiObject::Attach</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches a Windows GDI object to a <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CGdiObject::CreateStockObject</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Retrieves a handle to one of the Windows predefined stock pens, brushes, or fonts.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CGdiObject::DeleteObject</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Deletes the Windows GDI object attached to the <ph id="ph1">`CGdiObject`</ph> object from memory by freeing all system storage associated with the object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CGdiObject::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Deletes any temporary <ph id="ph1">`CGdiObject`</ph> objects created by <ph id="ph2">`FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CGdiObject::Detach</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Detaches a Windows GDI object from a <ph id="ph1">`CGdiObject`</ph> object and returns a handle to the Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CGdiObject::FromHandle</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CGdiObject`</ph> object given a handle to a Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetObject</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Fills a buffer with data that describes the Windows GDI object attached to the <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetObjectType</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the type of the GDI object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetSafeHandle</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hObject`</ph> unless <ph id="ph2">`this`</ph> is <ph id="ph3">`NULL`</ph>, in which case <ph id="ph4">`NULL`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CGdiObject::UnrealizeObject</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Resets the origin of a brush or resets a logical palette.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator !=</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines if two GDI objects are logically not equal.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator ==</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Determines if two GDI objects are logically equal.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator HGDIOBJ</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Retrieves a <ph id="ph1">`HANDLE`</ph> to the attached Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CGdiObject::m_hObject</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> containing the <ph id="ph2">`HBITMAP`</ph>, <ph id="ph3">`HPALETTE`</ph>, <ph id="ph4">`HRGN`</ph>, <ph id="ph5">`HBRUSH`</ph>, <ph id="ph6">`HPEN`</ph>, or <ph id="ph7">`HFONT`</ph> attached to this object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You never create a <ph id="ph1">`CGdiObject`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Rather, you create an object from one of its derived classes, such as <ph id="ph1">`CPen`</ph> or <ph id="ph2">`CBrush`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CGdiObject`</ph>, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](../../mfc/graphic-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CGdiObject::Attach</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Attaches a Windows GDI object to a <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> to a Windows GDI object (for example, <ph id="ph2">`HPEN`</ph> or <ph id="ph3">`HBRUSH`</ph>).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Nonzero if attachment is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CGdiObject::CGdiObject</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You never create a <ph id="ph1">`CGdiObject`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Rather, you create an object from one of its derived classes, such as <ph id="ph1">`CPen`</ph> or <bpt id="p1">**</bpt>Cbrush<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CGdiObject::CreateStockObject</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Retrieves a handle to one of the predefined stock Windows GDI pens, brushes, or fonts, and attaches the GDI object to the <ph id="ph1">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A constant specifying the type of stock object desired.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See the parameter <bpt id="p1">*</bpt>fnObject<ept id="p1">*</ept> for <bpt id="p2">[</bpt>GetStockObject<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd144925)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of appropriate values.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Call this function with one of the derived classes that corresponds to the Windows GDI object type, such as <ph id="ph1">`CPen`</ph> for a stock pen.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CGdiObject::DeleteObject</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Deletes the attached Windows GDI object from memory by freeing all system storage associated with the Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Nonzero if the GDI object was successfully deleted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The storage associated with the <ph id="ph1">`CGdiObject`</ph> object is not affected by this call.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An application should not call <ph id="ph1">`DeleteObject`</ph> on a <ph id="ph2">`CGdiObject`</ph> object that is currently selected into a device context.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When a pattern brush is deleted, the bitmap associated with the brush is not deleted.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The bitmap must be deleted independently.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CGdiObject::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Called automatically by the <ph id="ph1">`CWinApp`</ph> idle-time handler, <ph id="ph2">`DeleteTempMap`</ph> deletes any temporary <ph id="ph3">`CGdiObject`</ph> objects created by <ph id="ph4">`FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>detaches the Windows GDI object attached to a temporary <ph id="ph1">`CGdiObject`</ph> object before deleting the <ph id="ph2">`CGdiObject`</ph> object.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#175</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CGdiObject::Detach</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Detaches a Windows GDI object from a <ph id="ph1">`CGdiObject`</ph> object and returns a handle to the Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> to the Windows GDI object detached; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no GDI object is attached.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CGdiObject::FromHandle</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CGdiObject`</ph> object given a handle to a Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> to a Windows GDI object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CGdiObject`</ph> that may be temporary or permanent.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CGdiObject`</ph> object is not already attached to the Windows GDI object, a temporary <ph id="ph2">`CGdiObject`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CGdiObject`</ph> object is only valid until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Another way of saying this is that the temporary object is only valid during the processing of one window message.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetObject</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Fills a buffer with data that defines a specified object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes to copy into the <ph id="ph1">`lpObject`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Points to a user-supplied buffer that is to receive the information.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The number of bytes retrieved; otherwise 0 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The function retrieves a data structure whose type depends on the type of graphic object, as shown by the following list:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Object</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Buffer type</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>LOGPEN</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>LOGBRUSH</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>LOGFONT</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>BITMAP</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>WORD</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the object is a <ph id="ph1">`CBitmap`</ph> object, <ph id="ph2">`GetObject`</ph> returns only the width, height, and color format information of the bitmap.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The actual bits can be retrieved by using <bpt id="p1">[</bpt>CBitmap::GetBitmapBits<ept id="p1">](../../mfc/reference/cbitmap-class.md#cbitmap__getbitmapbits)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the object is a <ph id="ph1">`CPalette`</ph> object, <ph id="ph2">`GetObject`</ph> retrieves a <bpt id="p1">**</bpt>WORD<ept id="p1">**</ept> that specifies the number of entries in the palette.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The function does not retrieve the <bpt id="p1">[</bpt>LOGPALETTE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145040)</ept> structure that defines the palette.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An application can get information on palette entries by calling <bpt id="p1">[</bpt>CPalette::GetPaletteEntries<ept id="p1">](../../mfc/reference/cpalette-class.md#cpalette__getpaletteentries)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetObjectType</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Retrieves the type of the GDI object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The type of the object, if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The value can be one of the following:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_BITMAP<ept id="p1">**</ept> Bitmap</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_BRUSH<ept id="p1">**</ept> Brush</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_FONT<ept id="p1">**</ept> Font</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_PAL<ept id="p1">**</ept> Palette</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_PEN<ept id="p1">**</ept> Pen</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_EXTPEN<ept id="p1">**</ept> Extended pen</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_REGION<ept id="p1">**</ept> Region</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_DC<ept id="p1">**</ept> Device context</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_MEMDC<ept id="p1">**</ept> Memory device context</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_METAFILE<ept id="p1">**</ept> Metafile</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_METADC<ept id="p1">**</ept> Metafile device context</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_ENHMETAFILE<ept id="p1">**</ept> Enhanced metafile</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBJ_ENHMETADC<ept id="p1">**</ept> Enhanced-metafile device context</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CGdiObject::GetSafeHandle</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hObject`</ph> unless <bpt id="p1">**</bpt>this<ept id="p1">**</ept> is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, in which case <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> to the attached Windows GDI object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no object is attached.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This is part of the general handle interface paradigm and is useful when <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is a valid or special value for a handle.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::IsWindowEnabled<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__iswindowenabled)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CGdiObject::m_hObject</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HANDLE`</ph> containing the <ph id="ph2">`HBITMAP`</ph>, <bpt id="p1">**</bpt>HRGN<ept id="p1">**</ept>, <ph id="ph3">`HBRUSH`</ph>, <ph id="ph4">`HPEN`</ph>, <ph id="ph5">`HPALETTE`</ph>, or <bpt id="p2">**</bpt>HFONT<ept id="p2">**</ept> attached to this object.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator !=</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Determines if two GDI objects are logically not equal.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A pointer to an existing <ph id="ph1">`CGdiObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Determines if a GDI object on the left side is not equal to a GDI object on the right side.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator ==</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Determines if two GDI objects are logically equal.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A reference to an existing <ph id="ph1">`CGdiObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Determines if a GDI object on the left side is equal to a GDI object on the right side.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CGdiObject::operator HGDIOBJ</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Retrieves a <ph id="ph1">`HANDLE`</ph> to the attached Windows GDI object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no object is attached.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CGdiObject::UnrealizeObject</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Resets the origin of a brush or resets a logical palette.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">`UnrealizeObject`</ph> is a member function of the <ph id="ph2">`CGdiObject`</ph> class, it should be invoked only on <ph id="ph3">`CBrush`</ph> or <ph id="ph4">`CPalette`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`CBrush`</ph> objects, <ph id="ph2">`UnrealizeObject`</ph> directs the system to reset the origin of the given brush the next time it is selected into a device context.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If the object is a <ph id="ph1">`CPalette`</ph> object, <ph id="ph2">`UnrealizeObject`</ph> directs the system to realize the palette as though it had not previously been realized.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The next time the application calls the <bpt id="p1">[</bpt>CDC::RealizePalette<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__realizepalette)</ept> function for the specified palette, the system completely remaps the logical palette to the system palette.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UnrealizeObject`</ph> function should not be used with stock objects.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UnrealizeObject`</ph> function must be called whenever a new brush origin is set (by means of the <bpt id="p1">[</bpt>CDC::SetBrushOrg<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__setbrushorg)</ept> function).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UnrealizeObject`</ph> function must not be called for the currently selected brush or currently selected palette of any display context.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>CBitmap Class</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CBrush Class</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>CFont Class</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CPalette Class</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CPen Class</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CRgn Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>