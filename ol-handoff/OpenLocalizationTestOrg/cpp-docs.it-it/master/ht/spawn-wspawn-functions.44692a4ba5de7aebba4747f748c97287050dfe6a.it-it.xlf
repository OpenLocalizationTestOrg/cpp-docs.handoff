<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a6c6a8d3fa5d66b03a306c4111224158a73cdaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\spawn-wspawn-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6e9ba84c9d1c6c2702937365719f961eecbb491</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6957d71b10683a339747891136667bdeb8cd555</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_spawn, _wspawn Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_spawn, _wspawn Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each of the <ph id="ph1">`_spawn`</ph> functions creates and executes a new process:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>_spawnl, _wspawnl</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>_spawnv, _wspawnv</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>_spawnle, _wspawnle</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>_spawnve, _wspawnve</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>_spawnlp, _wspawnlp</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>_spawnvp, _wspawnvp</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>_spawnlpe, _wspawnlpe</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>_spawnvpe, _wspawnvpe</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The letters at the end of the function name determine the variation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>, array of pointers to environment settings, is passed to new process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Command-line arguments are passed individually to <ph id="ph1">`_spawn`</ph> function.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This suffix is typically used when a number of parameters to a new process is known in advance.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>environment variable is used to find the file to execute.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>, array of pointers to command-line arguments, is passed to <ph id="ph1">`_spawn`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This suffix is typically used when a number of parameters to a new process is variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_spawn`</ph> functions each create and execute a new process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>They automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_wspawn`</ph> functions are wide-character versions of the <ph id="ph2">`_spawn`</ph> functions; they do not handle multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Otherwise, the <ph id="ph1">`_wspawn`</ph> functions behave identically to their <ph id="ph2">`_spawn`</ph> counterparts.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enough memory must be available for loading and executing the new process.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mode`</ph> argument determines the action taken by the calling process before and during <ph id="ph2">`_spawn`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following values for <ph id="ph1">`mode`</ph> are defined in Process.h:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Overlays a calling process with a new process, destroying the calling process (same effect as <ph id="ph1">`_exec`</ph> calls).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Suspends a calling thread until execution of the new process is complete (synchronous <ph id="ph1">`_spawn`</ph>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Continues to execute a calling process concurrently with the new process (asynchronous <ph id="ph1">`_spawn`</ph>).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Continues to execute the calling process; the new process is run in the background with no access to the console or keyboard.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Calls to <ph id="ph1">`_cwait`</ph> against the new process fail (asynchronous <ph id="ph2">`_spawn`</ph>).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cmdname`</ph> argument specifies the file that is executed as the new process and can specify a full path (from the root), a partial path (from the current working directory), or just a file name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> does not have a file name extension or does not end with a period (.), the <ph id="ph2">`_spawn`</ph> function first tries the .com file name extension and then the .exe file name extension, the .bat file name extension, and finally the .cmd file name extension.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> has a file name extension, only that extension is used.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> ends with a period, the <ph id="ph2">`_spawn`</ph> call searches for <ph id="ph3">`cmdname`</ph> with no file name extension.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_spawnlp`</ph>, <ph id="ph2">`_spawnlpe`</ph>, <ph id="ph3">`_spawnvp`</ph>, and <ph id="ph4">`_spawnvpe`</ph> functions search for <ph id="ph5">`cmdname`</ph> (using the same procedures) in the directories specified by the <ph id="ph6">`PATH`</ph> environment variable.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> contains a drive specifier or any slashes (that is, if it is a relative path), the <ph id="ph2">`_spawn`</ph> call searches only for the specified file; no path searching is done.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the past, some of these functions set <ph id="ph1">`errno`</ph> to zero on success; the current behavior is to leave <ph id="ph2">`errno`</ph> untouched on success, as specified by the C standard.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you need to emulate the old behavior, set <ph id="ph1">`errno`</ph> to zero just before calling these functions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To ensure proper overlay initialization and termination, do not use the <ph id="ph1">`setjmp`</ph> or <ph id="ph2">`longjmp`</ph> function to enter or leave an overlay routine.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Arguments for the Spawned Process</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To pass arguments to the new process, give one or more pointers to character strings as arguments in the <ph id="ph1">`_spawn`</ph> call.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These character strings form the argument list for the spawned process.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The combined length of the strings forming the argument list for the new process must not exceed 1024 bytes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The terminating null character ('\0') for each string is not included in the count, but space characters (automatically inserted to separate arguments) are included.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Spaces embedded in strings may cause unexpected behavior; for example, passing <ph id="ph1">`_spawn`</ph> the string <ph id="ph2">`"hi there"`</ph> will result in the new process getting two arguments, <ph id="ph3">`"hi"`</ph> and <ph id="ph4">`"there"`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the intent was to have the new process open a file named "hi there", the process would fail.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can avoid this by quoting the string: <ph id="ph1">`"\"hi there\""`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Do not pass user input to <ph id="ph1">`_spawn`</ph> without explicitly checking its content.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>will result in a call to <bpt id="p1">[</bpt>CreateProcess<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682425)</ept> so keep in mind that unqualified path names could lead to potential security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can pass argument pointers as separate arguments (in <ph id="ph1">`_spawnl`</ph>, <ph id="ph2">`_spawnle`</ph>, <ph id="ph3">`_spawnlp`</ph>, and <ph id="ph4">`_spawnlpe`</ph>) or as an array of pointers (in <ph id="ph5">`_spawnv`</ph>, <ph id="ph6">`_spawnve`</ph>, <ph id="ph7">`_spawnvp`</ph>, and <ph id="ph8">`_spawnvpe`</ph>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You must pass at least one argument, <ph id="ph1">`arg0`</ph> or <ph id="ph2">`argv`</ph>[0], to the spawned process.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>By convention, this argument is the name of the program as you would type it on the command line.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A different value does not produce an error.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_spawnl`</ph>, <ph id="ph2">`_spawnle`</ph>, <ph id="ph3">`_spawnlp`</ph>, and <ph id="ph4">`_spawnlpe`</ph> calls are typically used in cases where the number of arguments is known in advance.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`arg0`</ph> argument is usually a pointer to <ph id="ph2">`cmdname`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The arguments <ph id="ph1">`arg1`</ph> through <ph id="ph2">`argn`</ph> are pointers to the character strings forming the new argument list.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Following <ph id="ph1">`argn`</ph>, there must be a <ph id="ph2">`NULL`</ph> pointer to mark the end of the argument list.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_spawnv`</ph>, <ph id="ph2">`_spawnve`</ph>, <ph id="ph3">`_spawnvp`</ph>, and <ph id="ph4">`_spawnvpe`</ph> calls are useful when there is a variable number of arguments to the new process.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Pointers to the arguments are passed as an array, <ph id="ph1">`argv`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`argv`</ph>[0] is usually a pointer to a path in real mode or to the program name in protected mode, and <ph id="ph2">`argv`</ph>[1] through <ph id="ph3">`argv`</ph>[<ph id="ph4">`n`</ph>] are pointers to the character strings forming the new argument list.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`argv`</ph>[<ph id="ph2">`n`</ph> +1] must be a <ph id="ph3">`NULL`</ph> pointer to mark the end of the argument list.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Environment of the Spawned Process</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Files that are open when a <ph id="ph1">`_spawn`</ph> call is made remain open in the new process.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`_spawnl`</ph>, <ph id="ph2">`_spawnlp`</ph>, <ph id="ph3">`_spawnv`</ph>, and <ph id="ph4">`_spawnvp`</ph> calls, the new process inherits the environment of the calling process.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`_spawnle`</ph>, <ph id="ph2">`_spawnlpe`</ph>, <ph id="ph3">`_spawnve`</ph>, and <ph id="ph4">`_spawnvpe`</ph> calls to alter the environment for the new process by passing a list of environment settings through the <ph id="ph5">`envp`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`envp`</ph> is an array of character pointers, each element (except the final element) of which points to a null-terminated string defining an environment variable.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Such a string usually has the form <ph id="ph1">`NAME`=`value`</ph> where <ph id="ph2">`NAME`</ph> is the name of an environment variable and <ph id="ph3">`value`</ph> is the string value to which that variable is set.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(Note that <ph id="ph1">`value`</ph> is not enclosed in double quotation marks.) The final element of the <ph id="ph2">`envp`</ph> array should be <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`envp`</ph> itself is <ph id="ph2">`NULL`</ph>, the spawned process inherits the environment settings of the parent process.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_spawn`</ph> functions can pass all information about open files, including the translation mode, to the new process.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This information is passed in real mode through the <ph id="ph1">`C_FILE_INFO`</ph> entry in the environment.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The startup code normally processes this entry and then deletes it from the environment.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>However, if a <ph id="ph1">`_spawn`</ph> function spawns a non-C process, this entry remains in the environment.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Printing the environment shows graphics characters in the definition string for this entry because the environment information is passed in binary form in real mode.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It should not have any other effect on normal operations.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In protected mode, the environment information is passed in text form and therefore contains no graphics characters.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You must explicitly flush (using <ph id="ph1">`fflush`</ph> or <ph id="ph2">`_flushall`</ph>) or close any stream before calling a <ph id="ph3">`_spawn`</ph> function.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>New processes created by calls to <ph id="ph1">`_spawn`</ph> routines do not preserve signal settings.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Instead, the spawned process resets signal settings to the default.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Redirecting Output</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you are calling <ph id="ph1">`_spawn`</ph> from a DLL or a GUI application and want to redirect the output to a pipe, you have two options:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use the Win32 API to create a pipe, then call <bpt id="p1">[</bpt>AllocConsole<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms681944)</ept>, set the handle values in the startup structure, and call <bpt id="p2">[</bpt>CreateProcess<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms682425)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>_popen, _wpopen<ept id="p1">](../c-runtime-library/reference/popen-wpopen.md)</ept> which will create a pipe and invoke the app using <bpt id="p2">**</bpt>cmd.exe /c<ept id="p2">**</ept> (or <bpt id="p3">**</bpt>command.exe /c<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Process and Environment Control</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>abort</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>atexit</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>_exec, _wexec Functions</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>exit, _Exit, _exit</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>_flushall</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>_getmbcp</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>_onexit, _onexit_m</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>_setmbcp</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>system, _wsystem</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>