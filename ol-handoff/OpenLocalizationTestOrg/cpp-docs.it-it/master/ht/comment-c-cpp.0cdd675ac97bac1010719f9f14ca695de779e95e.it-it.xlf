<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9208ce2e68fbfe1bc9dfdc52abdf0b22482b9198</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\comment-c-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16304d771c329b32e211e4d4f5f479fccbfcd35c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70f30df2e39cde25937492f6acdc5042b878a684</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>comment (C-C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>comment (C/C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Places a comment record into an object file or executable file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>comment-type<ept id="p1">*</ept> is one of the predefined identifiers, described below, that specifies the type of comment record.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The optional <ph id="ph1">`commentstring`</ph> is a string literal that provides additional information for some comment types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`commentstring`</ph> is a string literal, it obeys all the rules for string literals with respect to escape characters, embedded quotation marks (<bpt id="p1">**</bpt>"<ept id="p1">**</ept>), and concatenation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>compiler</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Places the name and version number of the compiler in the object file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This comment record is ignored by the linker.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you supply a <ph id="ph1">`commentstring`</ph> parameter for this record type, the compiler generates a warning.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>exestr</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Places <ph id="ph1">`commentstring`</ph> in the object file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At link time this string is placed in the executable file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The string is not loaded into memory when the executable file is loaded; however, it can be found with a program that finds printable strings in files.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>One use for this comment-record type is to embed a version number or similar information in an executable file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>is deprecated and will be removed in a future release; the linker does not process the comment record.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>lib</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Places a library-search record in the object file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This comment type must be accompanied by a <ph id="ph1">`commentstring`</ph> parameter containing the name (and possibly the path) of the library that you want the linker to search.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The library name follows the default library-search records in the object file; the linker searches for this library just as if you had named it on the command line provided that the library is not specified with <bpt id="p1">[</bpt>/nodefaultlib<ept id="p1">](../build/reference/nodefaultlib-ignore-libraries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can place multiple library-search records in the same source file; each record appears in the object file in the same order in which it is encountered in the source file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the order of the default library and an added library is important, compiling with the <bpt id="p1">[</bpt>/Zl<ept id="p1">](../build/reference/zl-omit-default-library-name.md)</ept> switch will prevent the default library name from being placed in the object module.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A second comment pragma then can be used to insert the name of the default library after the added library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The libraries listed with these pragmas will appear in the object module in the same order they are found in the source code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>linker</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Places a <bpt id="p1">[</bpt>linker option<ept id="p1">](../build/reference/linker-options.md)</ept> in the object file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use this comment-type to specify a linker option instead of passing it to the command line or specifying it in the development environment.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, you can specify the /include option to force the inclusion of a symbol:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Only the following (<bpt id="p1">*</bpt>comment-type<ept id="p1">*</ept>) linker options are available to be passed to the linker identifier:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>/DEFAULTLIB</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>/EXPORT</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>/INCLUDE</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>/MANIFESTDEPENDENCY</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>/MERGE</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>/SECTION</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>user</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Places a general comment in the object file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`commentstring`</ph> parameter contains the text of the comment.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This comment record is ignored by the linker.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following pragma causes the linker to search for the EMAPI.LIB library while linking.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The linker searches first in the current working directory and then in the path specified in the LIB environment variable.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following pragma causes the compiler to place the name and version number of the compiler in the object file:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For comments that take a <ph id="ph1">`commentstring`</ph> parameter, you can use a macro in any place where you would use a string literal, provided that the macro expands to a string literal.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can also concatenate any combination of string literals and macros that expand to string literals.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following statement is acceptable:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>