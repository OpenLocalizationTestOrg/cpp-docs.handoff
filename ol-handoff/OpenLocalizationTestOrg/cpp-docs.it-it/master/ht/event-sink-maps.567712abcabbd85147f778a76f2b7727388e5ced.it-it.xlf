<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff16b03f2f39f03c66ec072aa8d845d069faef19</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\event-sink-maps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28bd8350617f14ebeaf03ee527d658b3434cda01</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9f296e1deb26ed84bcdc1bf2b6bbdab076dd15b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Event Sink Maps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Event Sink Maps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When an embedded OLE control fires an event, the control's container receives the event using a mechanism, called an "event sink map," supplied by MFC.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This event sink map designates handler functions for each specific event, as well as parameters of those events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information on event sink maps, see the article <bpt id="p1">[</bpt>ActiveX Control Containers<ept id="p1">](../../mfc/activex-control-containers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Event Sink Maps</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>BEGIN_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Starts the definition of an event sink map.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DECLARE_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Declares an event sink map.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>END_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Ends the definition of an event sink map.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ON_EVENT</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Defines an event handler for a specific event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>ON_EVENT_RANGE</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Defines an event handler for a specific event fired from a set of OLE controls.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>ON_EVENT_REFLECT</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Receives events fired by the control before they are handled by the control's container.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Defines a handler for handling property notifications from an OLE control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY_RANGE</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Defines a handler for handling property notifications from a set of OLE controls.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY_REFLECT</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Receives property notifications sent by the control before they are handled by the control's container.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>BEGIN_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Begins the definition of your event sink map.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies the name of the control class whose event sink map this is.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies the name of the base class of <ph id="ph1">`theClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the implementation (.cpp) file that defines the member functions for your class, start the event sink map with the <ph id="ph1">`BEGIN_EVENTSINK_MAP`</ph> macro, then add macro entries for each event to be notified of, and complete the event sink map with the <ph id="ph2">`END_EVENTSINK_MAP`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information on event sink maps and OLE control containers, see the article <bpt id="p1">[</bpt>ActiveX Control Containers<ept id="p1">](../../mfc/activex-control-containers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DECLARE_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An OLE container can provide an event sink map to specify the events your container will be notified of.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`DECLARE_EVENTSINK_MAP`</ph> macro at the end of your class declaration.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Then, in the .CPP file that defines the member functions for the class, use the <ph id="ph1">`BEGIN_EVENTSINK_MAP`</ph> macro, macro entries for each of the events to be notified of, and the <ph id="ph2">`END_EVENTSINK_MAP`</ph> macro to declare the end of the event sink list.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information on event sink maps, see the article <bpt id="p1">[</bpt>ActiveX Control Containers<ept id="p1">](../../mfc/activex-control-containers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>END_EVENTSINK_MAP</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Ends the definition of your event sink map.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ON_EVENT</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`ON_EVENT`</ph> macro to define an event handler function for an event fired by an OLE control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The control ID of the OLE control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the event fired by the control.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type, and parameter types that match the event's parameters (see <ph id="ph1">`vtsParams`</ph>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the event was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A sequence of <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants that specifies the types of the parameters for the event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These are the same constants that are used in dispatch map entries such as <ph id="ph1">`DISP_FUNCTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces (not commas) specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#11</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>specifies a list containing a short integer followed by a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants, see <bpt id="p2">[</bpt>EVENT_CUSTOM<ept id="p2">](event-maps.md#event_custom)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>ON_EVENT_RANGE</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`ON_EVENT_RANGE`</ph> macro to define an event handler function for an event fired by any OLE control having a control ID within a contiguous range of IDs.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The control ID of the first OLE control in the range.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The control ID of the last OLE control in the range.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the event fired by the control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the event.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type, a first parameter of type <bpt id="p2">**</bpt>UINT<ept id="p2">**</ept> (for the control ID), and additional parameter types that match the event's parameters (see <ph id="ph1">`vtsParams`</ph>).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the event was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A sequence of <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants that specifies the types of the parameters for the event.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The first constant should be of type <bpt id="p1">**</bpt>VTS_I4<ept id="p1">**</ept>, for the control ID.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These are the same constants that are used in dispatch map entries such as <ph id="ph1">`DISP_FUNCTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces (not commas) specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#11</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>specifies a list containing a short integer followed by a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants, see <bpt id="p2">[</bpt>EVENT_CUSTOM<ept id="p2">](event-maps.md#event_custom)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example demonstrates an event handler, for the MouseDown event, implemented for three controls ( <ph id="ph1">`IDC_MYCTRL1`</ph> through <ph id="ph2">`IDC_MYCTRL3`</ph>).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The event handler function, <ph id="ph1">`OnRangeMouseDown`</ph>, is declared in the header file of the dialog class ( <ph id="ph2">`CMyDlg`</ph>) as:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#12</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The code below is defined in the implementation file of the dialog class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#13</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>ON_EVENT_REFLECT</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ON_EVENT_REFLECT`</ph> macro, when used in the event sink map of an OLE control's wrapper class, receives events fired by the control before they are handled by the control's container.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>dispid</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the event fired by the control.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the event.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and parameter types that match the event's parameters (see <ph id="ph1">`vtsParams`</ph>).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the event was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A sequence of <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants that specifies the types of the parameters for the event.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>These are the same constants that are used in dispatch map entries such as <ph id="ph1">`DISP_FUNCTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces (not commas) specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#11</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>specifies a list containing a short integer followed by a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants, see <bpt id="p2">[</bpt>EVENT_CUSTOM<ept id="p2">](event-maps.md#event_custom)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`ON_PROPNOTIFY`</ph> macro to define an event sink map entry for handling property notifications from an OLE control.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The control ID of the OLE control.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the property involved in the notification.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnRequestEdit<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and a <bpt id="p2">**</bpt>BOOL<ph id="ph1">\*</ph><ept id="p2">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This function should set the parameter to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to allow the property to change and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to disallow.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnChanged<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and a <bpt id="p2">**</bpt>UINT<ept id="p2">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate that notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>One or more of these values separated by spaces (not commas) specifies the function's parameter list.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>NVC_MFCAutomation#11</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>specifies a list containing a short integer followed by a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For a list of the <bpt id="p1">**</bpt>VTS_<ept id="p1">**</ept> constants, see <bpt id="p2">[</bpt>EVENT_CUSTOM<ept id="p2">](event-maps.md#event_custom)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY_RANGE</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`ON_PROPNOTIFY_RANGE`</ph> macro to define an event sink map entry for handling property notifications from any OLE control having a control ID within a contiguous range of IDs.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The control ID of the first OLE control in the range.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The control ID of the last OLE control in the range.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the property involved in the notification.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnRequestEdit<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and <bpt id="p2">**</bpt>UINT<ept id="p2">**</ept> and <bpt id="p3">**</bpt>BOOL<ph id="ph1">\*</ph><ept id="p3">**</ept> parameters.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The function should set the parameter to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to allow the property to change and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to disallow.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate that notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnChanged<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and a <bpt id="p2">**</bpt>UINT<ept id="p2">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate that notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>ON_PROPNOTIFY_REFLECT</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ON_PROPNOTIFY_REFLECT`</ph> macro, when used in the event sink map of an OLE control's wrapper class, receives property notifications sent by the control before they are handled by the control's container.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The class to which this event sink map belongs.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the property involved in the notification.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnRequestEdit<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and a <bpt id="p2">**</bpt>BOOL<ph id="ph1">\*</ph><ept id="p2">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This function should set the parameter to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to allow the property to change and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to disallow.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Pointer to a member function that handles the <bpt id="p1">**</bpt>OnChanged<ept id="p1">**</ept> notification for this property.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The function should have a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> return type and no parameters.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The function should return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to indicate the notification was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>