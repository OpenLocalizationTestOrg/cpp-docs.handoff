<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e3ade09de5c031bb8892c7c7b148c9c0f51b076</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\walkthrough-creating-windows-desktop-applications-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fac2fba94aa2133a0f423872e33ebc0adf31614</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adc3c71f461cb253b67fdf8a4c8e844b2a1312ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating Windows Desktop Applications (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating Windows Desktop Applications (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how to create a traditional Windows desktop application using the C language API that has been in existence since the 1990s.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is not the modern way to create Windows programs but it is still supported and there are many applications today that still use this API.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example displays "Hello, World!"</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>in a window.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use the code that you develop in this walkthrough as a pattern to create other Windows desktop applications.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Win32 API (also known as the Windows API) is a C-based framework for creating Windows applications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about the Win32 API, see <bpt id="p1">[</bpt>Windows API<ept id="p1">](https://msdn.microsoft.com/en-us/library/cc433218.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For the sake of brevity, some code statements are omitted in the text.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Example<ept id="p1">**</ept> section at the end of this document shows the complete code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To complete this walkthrough, you must understand the fundamentals of the C++ language.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create a Win32-based project</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>New<ept id="p2">**</ept> and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the left pane, click <bpt id="p2">**</bpt>Installed Templates<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Visual C++<ept id="p3">**</ept>, and then select <bpt id="p4">**</bpt>Win32<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the middle pane, select <bpt id="p1">**</bpt>Win32 Project<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type a name for the project, for example, <ph id="ph1">`win32app`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On the Welcome page of the <bpt id="p1">**</bpt>Win32 Application Wizard<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Next<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>On the Application Settings page, under <bpt id="p1">**</bpt>Application type<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Windows application<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Additional options<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Empty project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> to create the project.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the Win32app project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>New Item<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>C++ File (.cpp)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type a name for the file, for example, <ph id="ph1">`GT_HelloWorldWin32.cpp`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To start a Windows desktop application</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Just as every C application and C++ application must have a <ph id="ph1">`main`</ph> function as its starting point, every Win32-based application must have a <ph id="ph2">`WinMain`</ph> function.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>has the following syntax.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about the parameters and return value of this function, see <bpt id="p1">[</bpt>WinMain Function<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633559)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Win32 programs require <ph id="ph1">\&lt;</ph>windows.h&gt;.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>tchar.h&gt; defines the TCHAR macro, which resolves ultimately to <ph id="ph1">`wchar_t`</ph> if the UNICODE symbol is defined in your project, otherwise it resolves to <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you always build with UNICODE enabled, you don't need TCHAR and can just use wchar_t directly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In addition to the <ph id="ph1">`WinMain`</ph> function, every Windows desktop application must also have a window-procedure function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This function is typically named <ph id="ph1">`WndProc`</ph> but you can name it whatever you like.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>has the following syntax.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this function you write code to handle <bpt id="p1">*</bpt>messages<ept id="p1">*</ept> that the application receives from Windows when <bpt id="p2">*</bpt>events<ept id="p2">*</ept> occur.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if a user clicks an OK button in your application, Windows will send a message to you and you can write code inside your <ph id="ph1">`WndProc`</ph> function that does whatever work is appropriate.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>handling<ept id="p1">*</ept> an event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You only handle the events that are relevant for your application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Window Procedures<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632593)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To add functionality to the WinMain function</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`WinMain`</ph> function, you populate a structure of type <bpt id="p1">[</bpt>WNDCLASSEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633577)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This structure contains information about the window, for example, the application icon, the background color of the window, the name to display in the title bar--and very importantly, a function pointer to your window procedure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example shows a typical <ph id="ph1">`WNDCLASSEX`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For information about the fields of this structure, see <bpt id="p1">[</bpt>WNDCLASSEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633577)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You must register the WNDCLASSEX with Windows so that it knows about your window and how to send messages to it.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>RegisterClassEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633587)</ept> function and pass the window class structure as an argument.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The _T macro is used because we use the TCHAR type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now you can create a window.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> function.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This function returns an HWND, which is a handle to a window.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A handle is somewhat like a pointer that Windows uses to keep track of open windows.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Data Types<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>At this point the window has been created, but we still need to tell Windows to make it visible.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>That's what this code does:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>At this point, the displayed window will not have much content because you have not yet implemented the <ph id="ph1">`WndProc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In other words, the application is not yet handling the messages that Windows is now sending to it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To handle the messages we first add a message loop to listen for the messages that Windows sends.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the application receives a message, this loop dispatches it to your <ph id="ph1">`WndProc`</ph> function to be handled.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The message loop resembles the following code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information about the structures and functions in the message loop, see <bpt id="p1">[</bpt>MSG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644958)</ept>, <bpt id="p2">[</bpt>GetMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644936)</ept>, <bpt id="p3">[</bpt>TranslateMessage<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept>, and <bpt id="p4">[</bpt>DispatchMessage<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>At this point, the <ph id="ph1">`WinMain`</ph> function should resemble the following code.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To add functionality to the WndProc function</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To enable the <ph id="ph1">`WndProc`</ph> function to handle the messages that the application receives, implement a switch statement.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One important message to handle is the <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The application receives this message when part of its displayed window must be updated.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This event can occur when a user moves a window in front of your window, then moves it away again.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Your application doesn't know when events like this occur; only Windows knows, so it notifies you with WM_PAINT.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the window is first displayed, all of it must be updated.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To handle a <ph id="ph1">`WM_PAINT`</ph> message, first call <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183362)</ept>, then handle all the logic to lay out the text, buttons, and other controls in the window, and then call <bpt id="p2">[</bpt>EndPaint<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162598)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For this application, the logic between the beginning call and the ending call is to display the string "Hello, World!"</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>in the window.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the following code, notice that the <bpt id="p1">[</bpt>TextOut<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145133)</ept> function is used to display the string.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>HDC in the previous code is a handle to a device context, which is a data structure that Windows uses to enable your application to communicate with the graphics subsystem.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The BeginPaint and EndPaint functions ensure that your application behaves like a good citizen and doesn't use the device context for longer than it needs to.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This helps ensure the graphics subsystem is available for use by other applications.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An application typically handles many other messages, for example, <bpt id="p1">[</bpt>WM_CREATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632619)</ept> when a window is first created, and <bpt id="p2">[</bpt>WM_DESTROY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632620)</ept> when the window is closed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following code shows a basic but complete <ph id="ph1">`WndProc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To build this example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Create a Win32-based project as shown in "To create a Win32-based project" earlier in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Copy the code that follows these steps and then paste it in the GT_HelloWorldWin32.cpp source file.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To run the application, press F5.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A window that contains the text "Hello World!"</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>should appear in the upper-left corner of the display.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Windows Desktop Applications</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>