<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2e2de831b7bcc6f87e78f9c1d02c77f432b953c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\handlers-for-message-map-ranges.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ab6412236441f124d89e6a73e6ce22e5764f110</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edfdb51711ddf01ee6abace107fa6a3ad2b08af5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Handlers for Message-Map Ranges | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Handlers for Message-Map Ranges</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how to map a range of messages to a single message handler function (instead of mapping one message to only one function).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are times when you need to process more than one message or control notification in exactly the same way.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At such times, you might wish to map all of the messages to a single handler function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Message-map ranges allow you to do this for a contiguous range of messages:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can map ranges of command IDs to:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A command handler function.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A command update handler function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can map control-notification messages for a range of control IDs to a message handler function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Topics covered in this article include:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing the message-map entry</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Declaring the handler function</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example for a range of command IDs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example for a range of control IDs</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Writing the Message-Map Entry</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the .CPP file, add your message-map entry, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#6</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The message-map entry consists of the following items:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The message-map range macro:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ON_COMMAND_RANGE</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ON_UPDATE_COMMAND_UI_RANGE</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ON_CONTROL_RANGE</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameters to the macro:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The first two macros take three parameters:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The command ID that starts the range</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The command ID that ends the range</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The name of the message handler function</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The range of command IDs must be contiguous.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The third macro, <ph id="ph1">`ON_CONTROL_RANGE`</ph>, takes an additional first parameter: a control-notification message, such as <bpt id="p1">**</bpt>EN_CHANGE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Declaring the Handler Function</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add your handler function declaration in the .H file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code shows how this might look, as shown below:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#7</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Handler functions for single commands normally take no parameters.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>With the exception of update handler functions, handler functions for message-map ranges require an extra parameter, <ph id="ph1">`nID`</ph>, of type <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This parameter is the first parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The extra parameter accommodates the extra command ID needed to specify which command the user actually chose.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about parameter requirements for updating handler functions, see <bpt id="p1">[</bpt>Example for a Range of Command IDs<ept id="p1">](#_core_example_for_a_range_of_command_ids)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example for a Range of Command IDs</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When might you use ranges One example is in handling commands like the Zoom command in the MFC sample <bpt id="p1">[</bpt>HIERSVR<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This command zooms the view, scaling it between 25% and 300% of its normal size.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>HIERSVR's view class uses a range to handle the Zoom commands with a message-map entry resembling this:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#8</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you write the message-map entry, you specify:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Two command IDs, beginning and ending a contiguous range.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Here they are <ph id="ph1">`ID_VIEW_ZOOM25`</ph> and <ph id="ph2">`ID_VIEW_ZOOM300`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The name of the handler function for the commands.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Here it's <ph id="ph1">`OnZoom`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The function declaration would resemble this:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#9</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The case of update handler functions is similar, and likely to be more widely useful.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It's quite common to write <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handlers for a number of commands and find yourself writing, or copying, the same code over and over.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The solution is to map a range of command IDs to one update handler function using the <ph id="ph1">`ON_UPDATE_COMMAND_UI_RANGE`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The command IDs must form a contiguous range.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">**</bpt>OnUpdateZoom<ept id="p1">**</ept> handler and its <ph id="ph1">`ON_UPDATE_COMMAND_UI_RANGE`</ph> message-map entry in the HIERSVR sample's view class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Update handler functions for single commands normally take a single parameter, <ph id="ph1">`pCmdUI`</ph>, of type <bpt id="p1">**</bpt>CCmdUI<ph id="ph2">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Unlike handler functions, update handler functions for message-map ranges do not require an extra parameter, <ph id="ph1">`nID`</ph>, of type <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The command ID, which is needed to specify which command the user actually chose, is found in the <ph id="ph1">`CCmdUI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example for a Range of Control IDs</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Another interesting case is mapping control-notification messages for a range of control IDs to a single handler.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Suppose the user can click any of 10 buttons.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To map all 10 buttons to one handler, your message-map entry would look like this:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#10</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you write the <ph id="ph1">`ON_CONTROL_RANGE`</ph> macro in your message map, you specify:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A particular control-notification message.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here it's <bpt id="p1">**</bpt>BN_CLICKED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The control ID values associated with the contiguous range of controls.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here these are <ph id="ph1">`IDC_BUTTON1`</ph> and <ph id="ph2">`IDC_BUTTON10`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The name of the message handler function.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Here it's <ph id="ph1">`OnButtonClicked`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you write the handler function, specify the extra <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> parameter, as shown in the following:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#11</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnButtonClicked`</ph> handler for a single <bpt id="p1">**</bpt>BN_CLICKED<ept id="p1">**</ept> message takes no parameters.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The same handler for a range of buttons takes one <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The extra parameter allows for identifying the particular control responsible for generating the <bpt id="p1">**</bpt>BN_CLICKED<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The code shown in the example is typical: converting the value passed to an <ph id="ph1">`int`</ph> within the message range and asserting that this is the case.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Then you might take some different action depending on which button was clicked.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Declaring Message Handler Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>