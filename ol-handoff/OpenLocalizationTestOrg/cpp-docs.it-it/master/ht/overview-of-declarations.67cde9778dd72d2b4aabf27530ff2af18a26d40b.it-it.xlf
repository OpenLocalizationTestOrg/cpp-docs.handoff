<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f25473d68e047ef30bf193964531f798f0efc537</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\overview-of-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d66c32a0b580ab4d5b871b4f439365d86b25b286</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bad042f2b6a82e8c31145895760ef4a58b6b2f1a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overview of Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overview of Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A "declaration" specifies the interpretation and attributes of a set of identifiers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A declaration that also causes storage to be reserved for the object or function named by the identifier is called a "definition."</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C declarations for variables, functions, and types have this syntax:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers<ept id="p1">*</ept> <bpt id="p2">*</bpt>attribute-seq<ept id="p2">*</ept>opt<bpt id="p3">*</bpt>init-declarator-list<ept id="p3">*</ept>opt<bpt id="p4">**</bpt>;<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept>opt is Microsoft specific */</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>init-declarator</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept> , <bpt id="p2">*</bpt>init-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>declarator</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>initializer<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This syntax for <ph id="ph1">`declaration`</ph> is not repeated in the following sections.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Syntax in the following sections usually begins with the <ph id="ph1">`declarator`</ph> nonterminal.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The declarations in the <bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept> contain the identifiers being named; <bpt id="p2">*</bpt>init<ept id="p2">*</ept> is an abbreviation for initializer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept> is a comma-separated sequence of declarators, each of which can have additional type information, or an initializer, or both.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`declarator`</ph> contains the identifiers, if any, being declared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept> nonterminal consists of a sequence of type and storage-class specifiers that indicate the linkage, storage duration, and at least part of the type of the entities that the declarators denote.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, declarations are made up of some combination of storage-class specifiers, type specifiers, type qualifiers, declarators, and initializers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Declarations can contain one or more of the optional attributes listed in <bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept>; <bpt id="p2">*</bpt>seq<ept id="p2">*</ept> is an abbreviation for sequence.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These Microsoft-specific attributes perform a variety of functions, which are discussed in detail throughout this book.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the general form of a variable declaration, <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> gives the data type of the variable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> can be a compound, as when the type is modified by <bpt id="p2">**</bpt>const<ept id="p2">**</ept> or <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`declarator`</ph> gives the name of the variable, possibly modified to declare an array or a pointer type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>declares a variable named <ph id="ph1">`fp`</ph> as a pointer to a nonmodifiable (<bpt id="p1">**</bpt>const<ept id="p1">**</ept>) <ph id="ph2">`int`</ph> value.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can define more than one variable in a declaration by using multiple declarators, separated by commas.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A declaration must have at least one declarator, or its type specifier must declare a structure tag, union tag, or members of an enumeration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Declarators provide any remaining information about an identifier.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A declarator is an identifier that can be modified with brackets (<bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>), asterisks (<bpt id="p2">**</bpt><ph id="ph1">\*</ph><ept id="p2">**</ept>), or parentheses ( <bpt id="p3">**</bpt>( )<ept id="p3">**</ept> ) to declare an array, pointer, or function type, respectively.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you declare simple variables (such as character, integer, and floating-point items), or structures and unions of simple variables, the <ph id="ph1">`declarator`</ph> is just an identifier.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information on declarators, see <bpt id="p1">[</bpt>Declarators and Variable Declarations<ept id="p1">](../c-language/declarators-and-variable-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>All definitions are implicitly declarations, but not all declarations are definitions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, variable declarations that begin with the <ph id="ph1">`extern`</ph> storage-class specifier are "referencing," rather than "defining" declarations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If an external variable is to be referred to before it is defined, or if it is defined in another source file from the one where it is used, an <ph id="ph1">`extern`</ph> declaration is necessary.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Storage is not allocated by "referencing" declarations, nor can variables be initialized in declarations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A storage class or a type (or both) is required in variable declarations.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Except for <ph id="ph1">`__declspec`</ph>, only one storage-class specifier is allowed in a declaration and not all storage-class specifiers are permitted in every context.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__declspec`</ph> storage class is allowed with other storage-class specifiers, and it is allowed more than once.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The storage-class specifier of a declaration affects how the declared item is stored and initialized, and which parts of a program can reference the item.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>storage-class-specifier<ept id="p1">*</ept> terminals defined in C include <bpt id="p2">**</bpt>auto<ept id="p2">**</ept>, <ph id="ph1">`extern`</ph>, <bpt id="p3">**</bpt>register<ept id="p3">**</ept>, <bpt id="p4">**</bpt>static<ept id="p4">**</ept>, and <ph id="ph2">`typedef`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In addition, Microsoft C includes the <bpt id="p1">*</bpt>storage-class-specifier<ept id="p1">*</ept> terminal <ph id="ph1">`__declspec`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All <bpt id="p1">*</bpt>storage-class-specifier<ept id="p1">*</ept> terminals except <ph id="ph1">`typedef`</ph> and <ph id="ph2">`__declspec`</ph> are discussed in <bpt id="p2">[</bpt>Storage Classes<ept id="p2">](../c-language/c-storage-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Typedef Declarations<ept id="p1">](../c-language/typedef-declarations.md)</ept> for information about <ph id="ph1">`typedef`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Extended Storage-Class Attributes<ept id="p1">](../c-language/c-extended-storage-class-attributes.md)</ept> for information about <ph id="ph1">`__declspec`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The location of the declaration within the source program and the presence or absence of other declarations of the variable are important factors in determining the lifetime of variables.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>There can be multiple redeclarations but only one definition.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, a definition can appear in more than one translation unit.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For objects with internal linkage, this rule applies separately to each translation unit, because internally linked objects are unique to a translation unit.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For objects with external linkage, this rule applies to the entire program.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id="p1">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept> for more information about visibility.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type specifiers provide some information about the data types of identifiers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default type specifier is <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type Specifiers<ept id="p1">](../c-language/c-type-specifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Type specifiers can also define type tags, structure and union component names, and enumeration constants.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Enumeration Declarations<ept id="p1">](../c-language/c-enumeration-declarations.md)</ept>, <bpt id="p2">[</bpt>Structure Declarations<ept id="p2">](../c-language/structure-declarations.md)</ept>, and <bpt id="p3">[</bpt>Union Declarations<ept id="p3">](../c-language/union-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>There are two <bpt id="p1">*</bpt>type-qualifier<ept id="p1">*</ept> terminals: <bpt id="p2">**</bpt>const<ept id="p2">**</ept> and <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>These qualifiers specify additional properties of types that are relevant only when accessing objects of that type through l-values.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information on <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph>, see <bpt id="p2">[</bpt>Type Qualifiers<ept id="p2">](../c-language/type-qualifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For a definition of l-values, see <bpt id="p1">[</bpt>L-Value and R-Value Expressions<ept id="p1">](../c-language/l-value-and-r-value-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>C Language Syntax Summary</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Declarations and Types</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Summary of Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>