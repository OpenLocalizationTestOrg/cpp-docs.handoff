<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">271a199adaa6977d4259015b5bc75ae889bac41b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn062-message-reflection-for-windows-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8f5f305dc60851661fb3d697046e0730d033630</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16441c5060f5c5413542eb6aa4c16b9d4ed624b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN062: Message Reflection for Windows Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN062: Message Reflection for Windows Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This technical note describes message reflection, a new feature in MFC 4.0.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It also contains directions for creating a simple reusable control that uses message reflection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This technical note does not discuss message reflection as it applies to ActiveX controls (formerly called OLE controls).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Please see the article <bpt id="p1">[</bpt>ActiveX Controls: Subclassing a Windows Control<ept id="p1">](../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What Is Message Reflection</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows controls frequently send notification messages to their parent windows.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For instance, many controls send a control color notification message (<ph id="ph1">`WM_CTLCOLOR`</ph> or one of its variants) to their parent to allow the parent to supply a brush for painting the background of the control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Windows and in MFC before version 4.0, the parent window, often a dialog box, is responsible for handling these messages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This means that the code for handling the message needs to be in the parent window's class and that it has to be duplicated in every class that needs to handle that message.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the case above, every dialog box that wanted controls with custom backgrounds would have to handle the control color notification message.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It would be much easier to reuse code if a control class could be written that would handle its own background color.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In MFC 4.0, the old mechanism still works — parent windows can handle notification messages.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In addition, however, MFC 4.0 facilitates reuse by providing a feature called "message reflection" that allows these notification messages to be handled in either the child control window or the parent window, or in both.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the control background color example, you can now write a control class that sets its own background color by handling the reflected <ph id="ph1">`WM_CTLCOLOR`</ph> message — all without relying on the parent.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(Note that since message reflection is implemented by MFC, not by Windows, the parent window class must be derived from <ph id="ph1">`CWnd`</ph> for message reflection to work.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Older versions of MFC did something similar to message reflection by providing virtual functions for a few messages, such as messages for owner-drawn list boxes (<ph id="ph1">`WM_DRAWITEM`</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The new message reflection mechanism is generalized and consistent.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Message reflection is backward compatible with code written for versions of MFC before 4.0.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you have supplied a handler for a specific message, or for a range of messages, in your parent window's class, it will override reflected message handlers for the same message provided you don't call the base class handler function in your own handler.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if you handle <ph id="ph1">`WM_CTLCOLOR`</ph> in your dialog box class, your handling will override any reflected message handlers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If, in your parent window class, you supply a handler for a specific <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message or a range of <bpt id="p2">**</bpt>WM_NOTIFY<ept id="p2">**</ept> messages, your handler will be called only if the child control sending those messages does not have a reflected message handler through <bpt id="p3">**</bpt>ON_NOTIFY_REFLECT()<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">**</bpt>ON_NOTIFY_REFLECT_EX()<ept id="p1">**</ept> in your message map, your message handler may or may not allow the parent window to handle the message.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the handler returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the message will be handled by the parent as well, while a call that returns <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> does not allow the parent to handle it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that the reflected message is handled before the notification message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message is sent, the control is offered the first chance to handle it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If any other reflected message is sent, the parent window has the first chance to handle it and the control will receive the reflected message.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To do so, it will need a handler function and an appropriate entry in the control's class message map.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The message-map macro for reflected messages is slightly different than for regular notifications: it has <bpt id="p1">**</bpt>_REFLECT<ept id="p1">**</ept> appended to its usual name.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For instance, to handle a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message in the parent, you use the macro <ph id="ph1">`ON_NOTIFY`</ph> in the parent's message map.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To handle the reflected message in the child control, use the <bpt id="p1">**</bpt>ON_NOTIFY_REFLECT<ept id="p1">**</ept> macro in the child control's message map.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In some cases, the parameters are different, as well.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that ClassWizard can usually add the message-map entries for you and provide skeleton function implementations with correct parameters.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>TN061: ON_NOTIFY and WM_NOTIFY Messages<ept id="p1">](../mfc/tn061-on-notify-and-wm-notify-messages.md)</ept> for information on the new <bpt id="p2">**</bpt>WM_NOTIFY<ept id="p2">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Message-Map Entries and Handler Function Prototypes for Reflected Messages</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To handle a reflected control notification message, use the message-map macros and function prototypes listed in the table below.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ClassWizard can usually add these message-map entries for you and provide skeleton function implementations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Defining a Message Handler for a Reflected Message<ept id="p1">](../mfc/reference/defining-a-message-handler-for-a-reflected-message.md)</ept> for information about how to define handlers for reflected messages.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To convert from the message name to the reflected macro name, prepend <bpt id="p1">**</bpt>ON_<ept id="p1">**</ept> and append <bpt id="p2">**</bpt>_REFLECT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`WM_CTLCOLOR`</ph> becomes <bpt id="p1">**</bpt>ON_WM_CTLCOLOR_REFLECT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(To see which messages can be reflected, do the opposite conversion on the macro entries in the table below.)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The three exceptions to the rule above are as follows:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The macro for <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> notifications is <bpt id="p2">**</bpt>ON_CONTROL_REFLECT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The macro for <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> reflections is <bpt id="p2">**</bpt>ON_NOTIFY_REFLECT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The macro for <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> reflections is <bpt id="p1">**</bpt>ON_UPDATE_COMMAND_UI_REFLECT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In each of the above special cases, you must specify the name of the handler member function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the other cases, you must use the standard name for your handler function.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The meanings of the parameters and return values of the functions are documented under either the function name or the function name with <bpt id="p1">**</bpt>On<ept id="p1">**</ept> prepended.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For instance, <bpt id="p1">**</bpt>CtlColor<ept id="p1">**</ept> is documented in <ph id="ph1">`OnCtlColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Several reflected message handlers need fewer parameters than the similar handlers in a parent window.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Just match the names in the table below with the names of the formal parameters in the documentation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Map entry</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Function prototype</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CONTROL_REFLECT(<ept id="p1">**</ept> <ph id="ph1">`wNotifyCode`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`memberFxn`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>( );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_NOTIFY_REFLECT(<ept id="p1">**</ept> <ph id="ph1">`wNotifyCode`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`memberFxn`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>( NMHDR <ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNotifyStruct`</ph> <bpt id="p3">**</bpt>, LRESULT<ph id="ph4">\*</ph><ept id="p3">**</ept> <bpt id="p4">*</bpt>result<ept id="p4">*</ept> <bpt id="p5">**</bpt>);<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_UPDATE_COMMAND_UI_REFLECT(<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>( CCmdUI<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pCmdUI`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ON_WM_CTLCOLOR_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg HBRUSH CtlColor ( CDC<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`pDC`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph3">`nCtlColor`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ON_WM_DRAWITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void DrawItem ( LPDRAWITEMSTRUCT<ept id="p1">**</ept> <ph id="ph1">`lpDrawItemStruct`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>ON_WM_MEASUREITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void MeasureItem ( LPMEASUREITEMSTRUCT<ept id="p1">**</ept> <ph id="ph1">`lpMeasureItemStruct`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ON_WM_DELETEITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void DeleteItem ( LPDELETEITEMSTRUCT<ept id="p1">**</ept> <ph id="ph1">`lpDeleteItemStruct`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>ON_WM_COMPAREITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg int CompareItem ( LPCOMPAREITEMSTRUCT<ept id="p1">**</ept> <ph id="ph1">`lpCompareItemStruct`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>ON_WM_CHARTOITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg int CharToItem ( UINT<ept id="p1">**</ept> <ph id="ph1">`nKey`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`nIndex`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ON_WM_VKEYTOITEM_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg int VKeyToItem ( UINT<ept id="p1">**</ept> <ph id="ph1">`nKey`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`nIndex`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ON_WM_HSCROLL_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void HScroll ( UINT<ept id="p1">**</ept> <ph id="ph1">`nSBCode`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`nPos`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ON_WM_VSCROLL_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void VScroll ( UINT<ept id="p1">**</ept> <ph id="ph1">`nSBCode`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`nPos`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>ON_WM_PARENTNOTIFY_REFLECT( )</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg void ParentNotify ( UINT<ept id="p1">**</ept> <ph id="ph1">`message`</ph> <bpt id="p2">**</bpt>, LPARAM<ept id="p2">**</ept> <ph id="ph2">`lParam`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ON_NOTIFY_REFLECT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ON_CONTROL_REFLECT<ept id="p2">**</ept> macros have variations that allow more than one object (such as the control and its parent) to handle a given message.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Map entry</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Function prototype</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_NOTIFY_REFLECT_EX(<ept id="p1">**</ept> <ph id="ph1">`wNotifyCode`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`memberFxn`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg BOOL<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>( NMHDR <ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNotifyStruct`</ph> <bpt id="p3">**</bpt>, LRESULT<ph id="ph4">\*</ph><ept id="p3">**</ept> <bpt id="p4">*</bpt>result<ept id="p4">*</ept> <bpt id="p5">**</bpt>);<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CONTROL_REFLECT_EX(<ept id="p1">**</ept> <ph id="ph1">`wNotifyCode`</ph> <bpt id="p2">**</bpt>,<ept id="p2">**</ept> <ph id="ph2">`memberFxn`</ph> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg BOOL<ept id="p1">**</ept> <ph id="ph1">`memberFxn`</ph> <bpt id="p2">**</bpt>( );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Handling Reflected Messages: An Example of a Reusable control</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This simple example creates a reusable control called <ph id="ph1">`CYellowEdit`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The control works the same as a regular edit control except that it displays black text on a yellow background.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It would be easy to add member functions that would allow the <ph id="ph1">`CYellowEdit`</ph> control to display different colors.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To try the example that creates a reusable control</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Create a new dialog box in an existing application.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>dialog editor<ept id="p1">](../mfc/dialog-editor.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You must have an application in which to develop the reusable control.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you don't have an existing application to use, create a dialog-based application using AppWizard.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>With your project loaded into Visual C++, use ClassWizard to create a new class called <ph id="ph1">`CYellowEdit`</ph> based on <ph id="ph2">`CEdit`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Add three member variables to your <ph id="ph1">`CYellowEdit`</ph> class.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The first two will be <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> variables to hold the text color and the background color.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The third will be a <ph id="ph1">`CBrush`</ph> object that will hold the brush for painting the background.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBrush`</ph> object allows you to create the brush once, merely referencing it after that, and to destroy the brush automatically when the <ph id="ph2">`CYellowEdit`</ph> control is destroyed.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Initialize the member variables by writing the constructor as follows:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Using ClassWizard, add a handler for the reflected <ph id="ph1">`WM_CTLCOLOR`</ph> message to your <ph id="ph2">`CYellowEdit`</ph> class.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Note that the equal sign in front of the message name in the list of messages you can handle indicates that the message is reflected.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is described in <bpt id="p1">[</bpt>Defining a Message Handler for a Reflected Message<ept id="p1">](../mfc/reference/defining-a-message-handler-for-a-reflected-message.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>ClassWizard adds the following message-map macro and skeleton function for you:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Replace the body of the function with the following code.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The code specifies the text color, the text background color, and the background color for rest of the control.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Create an edit control in your dialog box, then attach it to a member variable by double-clicking the edit control while holding a control key down.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In the Add Member Variable dialog box, finish the variable name and choose "Control" for the category, then "CYellowEdit" for the variable type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Don't forget to set the tab order in the dialog box.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Also, be sure to include the header file for the <ph id="ph1">`CYellowEdit`</ph> control in your dialog box's header file.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Build and run your application.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The edit control will have a yellow background.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>