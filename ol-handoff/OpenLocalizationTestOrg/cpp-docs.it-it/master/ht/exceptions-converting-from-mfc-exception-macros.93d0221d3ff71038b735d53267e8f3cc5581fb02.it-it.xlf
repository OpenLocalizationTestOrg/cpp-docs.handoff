<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b01e72700e27d12541a9eead846cef5b1a253568</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\exceptions-converting-from-mfc-exception-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46bfc464f0d2d07bd0c536b95fbe3d2b26ceef71</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">756ff0c78e96d2e341a824aa90c8d2f3be91627c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exceptions: Converting from MFC Exception Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exceptions: Converting from MFC Exception Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is an advanced topic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article explains how to convert existing code written with Microsoft Foundation Class macros — <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CATCH<ept id="p2">**</ept>, <bpt id="p3">**</bpt>THROW<ept id="p3">**</ept>, and so on — to use the C++ exception-handling keywords <bpt id="p4">**</bpt>try<ept id="p4">**</ept>, <bpt id="p5">**</bpt>catch<ept id="p5">**</ept>, and <ph id="ph1">`throw`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Topics include:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Conversion advantages</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Converting code with exception macros to use C++ exceptions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Advantages of Converting</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You probably do not need to convert existing code, although you should be aware of differences between the macro implementations in MFC version 3.0 and the implementations in earlier versions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These differences and subsequent changes in code behavior are discussed in <bpt id="p1">[</bpt>Exceptions: Changes to Exception Macros in Version 3.0<ept id="p1">](../mfc/exceptions-changes-to-exception-macros-in-version-3-0.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The principal advantages of converting are:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Code that uses the C++ exception-handling keywords compiles to a slightly smaller .EXE or .DLL.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The C++ exception-handling keywords are more versatile: They can handle exceptions of any data type that can be copied (<ph id="ph1">`int`</ph>, <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <ph id="ph2">`char`</ph>, and so on), whereas the macros handle exceptions only of class <ph id="ph3">`CException`</ph> and classes derived from it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The major difference between the macros and the keywords is that code using the macros "automatically" deletes a caught exception when the exception goes out of scope.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Code using the keywords does not, so you must explicitly delete a caught exception.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Exceptions: Catching and Deleting Exceptions<ept id="p1">](../mfc/exceptions-catching-and-deleting-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Another difference is syntax.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The syntax for macros and keywords differs in three respects:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Macro arguments and exception declarations:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro invocation has the following syntax:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CATCH(<ept id="p1">**</ept> <bpt id="p2">*</bpt>exception_class<ept id="p2">*</ept>, <bpt id="p3">*</bpt>exception_object_pointer_name<ept id="p3">*</ept> <bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Notice the comma between the class name and the object pointer name.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The exception declaration for the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> keyword uses this syntax:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>catch(<ept id="p1">**</ept> <bpt id="p2">*</bpt>exception_type<ept id="p2">*</ept> <bpt id="p3">*</bpt>exception_name<ept id="p3">*</ept><bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This exception declaration statement indicates the type of exception the catch block handles.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Delimitation of catch blocks:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With the macros, the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro (with its arguments) begins the first catch block; the <ph id="ph1">`AND_CATCH`</ph> macro begins subsequent catch blocks, and the <ph id="ph2">`END_CATCH`</ph> macro terminates the sequence of catch blocks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>With the keywords, the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> keyword (with its exception declaration) begins each catch block.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There is no counterpart to the <ph id="ph1">`END_CATCH`</ph> macro; the catch block ends with its closing brace.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The throw expression:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The macros use <ph id="ph1">`THROW_LAST`</ph> to re-throw the current exception.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`throw`</ph> keyword, with no argument, has the same effect.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Doing the Conversion</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To convert code using macros to use the C++ exception-handling keywords</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Locate all occurrences of the MFC macros <bpt id="p1">**</bpt>TRY<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CATCH<ept id="p2">**</ept>, <ph id="ph1">`AND_CATCH`</ph>, <ph id="ph2">`END_CATCH`</ph>, <bpt id="p3">**</bpt>THROW<ept id="p3">**</ept>, and <ph id="ph3">`THROW_LAST`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replace or delete all occurrences of the following macros:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRY<ept id="p1">**</ept> (Replace it with <bpt id="p2">**</bpt>try<ept id="p2">**</ept>)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> (Replace it with <bpt id="p2">**</bpt>catch<ept id="p2">**</ept>)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Replace it with <bpt id="p1">**</bpt>catch<ept id="p1">**</ept>)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(Delete it)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>THROW<ept id="p1">**</ept> (Replace it with <ph id="ph1">`throw`</ph>)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Replace it with <ph id="ph1">`throw`</ph>)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Modify the macro arguments so that they form valid exception declarations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, change</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#6</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>to</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#7</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Modify the code in the catch blocks so that it deletes exception objects as necessary.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Exceptions: Catching and Deleting Exceptions<ept id="p1">](../mfc/exceptions-catching-and-deleting-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Here is an example of exception-handling code using MFC exception macros.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Note that because the code in the following example uses the macros, the exception <ph id="ph1">`e`</ph> is deleted automatically:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#8</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The code in the next example uses the C++ exception keywords, so the exception must be explicitly deleted:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#9</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exceptions: Using MFC Macros and C++ Exceptions<ept id="p1">](../mfc/exceptions-using-mfc-macros-and-cpp-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>