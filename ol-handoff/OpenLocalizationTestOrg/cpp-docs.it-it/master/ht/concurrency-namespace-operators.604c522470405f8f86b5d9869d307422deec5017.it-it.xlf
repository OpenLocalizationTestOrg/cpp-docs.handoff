<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fc7b500d882bb4e023904a147a7736996b5c5de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\concurrency-namespace-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">608bf642e699c386577dbe1c6e95ae862e8bdf3f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01283200981eb978531c407259f41323e9284733</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>concurrency namespace Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>concurrency namespace Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>operator!= Operator</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;amp;&amp;amp;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;gt;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;gt;</ph>= Operator</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;lt;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;lt;</ph>= Operator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>operator== Operator</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[operator</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Operator](#operator_lor)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>operator&amp;#124;&amp;#124; Operator</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creates a task that will complete successfully when either of the tasks supplied as arguments completes successfully.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of the returned task.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The first task to combine into the resulting task.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The second task to combine into the resulting task.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A task that completes sucessfully when either of the input tasks has completed successfully.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the input tasks are of type <ph id="ph1">`T`</ph>, the output of this function will be a <ph id="ph2">`task&lt;std::vector&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the input tasks are of type <ph id="ph1">`void`</ph> the output task will also be a <ph id="ph2">`task&lt;void&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If both of the tasks are canceled or throw exceptions, the returned task will complete in the canceled state, and one of the exceptions, if any are encountered, will be thrown when you call <ph id="ph1">`get()`</ph> or <ph id="ph2">`wait()`</ph> on that task.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;amp;&amp;amp;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a task that will complete succesfully when both of the tasks supplied as arguments complete successfully.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The type of the returned task.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The first task to combine into the resulting task.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The second task to combine into the resulting task.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A task that completes successfully when both of the input tasks have completed successfully.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the input tasks are of type <ph id="ph1">`T`</ph>, the output of this function will be a <ph id="ph2">`task&lt;std::vector&lt;T&gt;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the input tasks are of type <ph id="ph1">`void`</ph> the output task will also be a <ph id="ph2">`task&lt;void&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If one of the tasks is canceled or throws an exception, the returned task will complete early, in the canceled state, and the exception, if one is encoutered, will be thrown if you call <ph id="ph1">`get()`</ph> or <ph id="ph2">`wait()`</ph> on that task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>operator== Operator</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is equal to the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>if the concurrent vector on the left side of the operator is equal to the concurrent vector on the right side of the operator; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Two concurrent vectors are equal if they have the same number of elements and their respective elements have the same values.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Otherwise, they are unequal.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>operator!= Operator</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is not equal to the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>if the concurrent vectors are not equal; <ph id="ph1">`false`</ph> if the concurrent vectors are equal.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Two concurrent vectors are equal if they have the same number of elements and their respective elements have the same values.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Otherwise, they are unequal.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;lt;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is less than the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>if the concurrent vector on the left side of the operator is less than the concurrent vector on the right side of the operator; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The behavior of this operator is identical to the equivalent operator for the <ph id="ph1">`vector`</ph> class in the <ph id="ph2">`std`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;lt;</ph>= Operator</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is less than or equal to the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>if the concurrent vector on the left side of the operator is less than or equal to the concurrent vector on the right side of the operator; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The behavior of this operator is identical to the equivalent operator for the <ph id="ph1">`vector`</ph> class in the <ph id="ph2">`std`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;gt;</ph> Operator</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is greater than the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>if the concurrent vector on the left side of the operator is greater than the concurrent vector on the right side of the operator; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The behavior of this operator is identical to the equivalent operator for the <ph id="ph1">`vector`</ph> class in the <ph id="ph2">`std`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>operator<ph id="ph1">&amp;gt;</ph>= Operator</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`concurrent_vector`</ph> object on the left side of the operator is greater than or equal to the <ph id="ph2">`concurrent_vector`</ph> object on the right side.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The data type of the elements stored in the concurrent vectors.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The allocator type of the first <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The allocator type of the second <ph id="ph1">`concurrent_vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`concurrent_vector`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>if the concurrent vector on the left side of the operator is greater than or equal to the concurrent vector on the right side of the operator; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The behavior of this operator is identical to the equivalent operator for the <ph id="ph1">`vector`</ph> class in the <ph id="ph2">`std`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This method is not concurrency-safe with respect to other methods that could modify either of the concurrent vectors <ph id="ph1">`_A`</ph> or <ph id="ph2">`_B`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>concurrency Namespace</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>