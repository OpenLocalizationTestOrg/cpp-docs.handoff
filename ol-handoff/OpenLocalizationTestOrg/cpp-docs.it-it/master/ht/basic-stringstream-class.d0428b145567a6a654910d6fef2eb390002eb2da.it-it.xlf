<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94f21f488e0a246bc8e69b213e188cef5922ca85</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-stringstream-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04d9ecd092fa03b241f66870e47f4e62d8def249</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">528bd0e6805db4b755c97fe010a4707e1ccebccc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_stringstream Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_stringstream Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt; </ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The allocator class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of the basic element of the string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Tr</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The character traits specialized on the basic element of the string.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The template class describes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt; </ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;, with elements of type <bpt id="p4">**</bpt>Elem<ept id="p4">**</ept>, whose character traits are determined by the class <bpt id="p5">**</bpt>Tr<ept id="p5">**</ept>, and whose elements are allocated by an allocator of class <ph id="ph3">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The object stores an object of class basic_stringbuf&lt; <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Tr<ept id="p2">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>basic_stringstream</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_stringstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>rdbuf</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the address of the stored stream buffer of type <ph id="ph1">`pointer`</ph> to <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph2">&lt; `Elem`</ph>, <ph id="ph3">`Tr`</ph>, <ph id="ph4">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>str</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sets or gets the text in a string buffer without changing the write position.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>sstream&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>basic_stringstream::allocator_type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>basic_stringstream::basic_stringstream</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_stringstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>One of the enumerations in <bpt id="p1">[</bpt>ios_base::openmode<ept id="p1">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`basic_string`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the base class by calling <bpt id="p1">[</bpt>basic_iostream<ept id="p1">](../standard-library/basic-iostream-class.md)</ept>( <bpt id="p2">**</bpt>sb<ept id="p2">**</ept>), where <bpt id="p3">**</bpt>sb<ept id="p3">**</ept> is the stored object of class <bpt id="p4">[</bpt>basic_stringbuf<ept id="p4">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt; </ph><bpt id="p5">**</bpt>Elem<ept id="p5">**</ept>, <bpt id="p6">**</bpt>Tr<ept id="p6">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It also initializes <bpt id="p1">**</bpt>sb<ept id="p1">**</ept> by calling basic_stringbuf&lt; <bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;( <ph id="ph2">`_Mode`</ph>).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the base class by calling basic_iostream( <bpt id="p1">**</bpt>sb<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also initializes <bpt id="p1">**</bpt>sb<ept id="p1">**</ept> by calling basic_stringbuf&lt; <bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;(_ <bpt id="p4">*</bpt>Str<ept id="p4">*</ept>, <ph id="ph2">`_Mode`</ph>).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>basic_stringstream::rdbuf</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns the address of the stored stream buffer of type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> to <bpt id="p2">[</bpt>basic_stringbuf<ept id="p2">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt; </ph><bpt id="p3">**</bpt>Elem<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Tr<ept id="p4">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The address of the stored stream buffer of type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> to basic_stringbuf&lt; <bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph1">`Alloc`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_filebuf::close<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept> for an example that uses <ph id="ph1">`rdbuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>basic_stringstream::str</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Sets or gets the text in a string buffer without changing the write position.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The new string.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Returns an object of class <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept><ph id="ph1">&lt; </ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;, whose controlled sequence is a copy of the sequence controlled by <bpt id="p4">**</bpt><ph id="ph3">\*</ph>this<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first member function returns <bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_stringstream__rdbuf)</ept><ph id="ph1"> -&gt; </ph><bpt id="p2">[</bpt>str<ept id="p2">](../standard-library/basic-stringbuf-class.md#basic_stringbuf__str)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second member function calls <ph id="ph1">`rdbuf` -&gt; </ph><bpt id="p1">**</bpt>str<ept id="p1">**</ept>( <ph id="ph2">`_Newstr`</ph>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_stringbuf::str<ept id="p1">](../standard-library/basic-stringbuf-class.md#basic_stringbuf__str)</ept> for an example that uses <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>