<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3629075e5659cb89ab751b011f3ce2cbf89397cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\tool-errors\linker-tools-error-lnk2001.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc29ed20095f67e24dd6260c8f01c795a8ef38b9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">783c1a2b280e8d3f8c881ce49777e180e716f1e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Linker Tools Error LNK2001 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Linker Tools Error LNK2001</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>unresolved external symbol "symbol"</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Code references something (such as a function, variable, or label) that the linker can't find in the libraries and object files.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This error message is followed by fatal error <bpt id="p1">[</bpt>LNK1120<ept id="p1">](../../error-messages/tool-errors/linker-tools-error-lnk1120.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Possible Causes</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When upgrading a managed library or web service project from Visual C++ 2003, the <bpt id="p1">**</bpt>/Zl<ept id="p1">**</ept> compiler option is added to the <bpt id="p2">**</bpt>Command Line<ept id="p2">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This will cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To resolve this error, either add msvcrt.lib and msvcmrt.lib to the linker's Additional Dependencies property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Or, remove <bpt id="p1">**</bpt>/Zl<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Command Line<ept id="p2">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/Zl (Omit Default Library Name)<ept id="p1">](../../build/reference/zl-omit-default-library-name.md)</ept> and <bpt id="p2">[</bpt>Working with Project Properties<ept id="p2">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>What the code asks for doesn't exist (the symbol is spelled incorrectly or uses the wrong case, for example).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code asks for the wrong thing (you are using mixed versions of the libraries, some from one version of the product, others from another version).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Specific Causes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Coding Problems</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the LNK2001 diagnostic text reports that <ph id="ph1">`__check_commonlanguageruntime_version`</ph> is an unresolved external symbol, see <bpt id="p1">[</bpt>LNK2019<ept id="p1">](../../error-messages/tool-errors/linker-tools-error-lnk2019.md)</ept> for information on how to resolve.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The definition of member template is outside the class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Visual C++ has a limitation in which member templates must be fully defined within the enclosing class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See KB article Q239436 for more information about LNK2001 and member templates.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Mismatched case in your code or module-definition (.def) file can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you named a variable <ph id="ph1">`var1`</ph> in one C++ source file and tried to access it as <ph id="ph2">`VAR1`</ph> in another.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A project that uses <bpt id="p1">[</bpt>function inlining<ept id="p1">](../../error-messages/tool-errors/function-inlining-problems.md)</ept> yet defines the functions in a .cpp file rather than in the header file can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling a C function from a C++ program without using <ph id="ph1">`extern`</ph> "C" (which causes the compiler to use the C naming convention) can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiler options <bpt id="p1">[</bpt>/Tp<ept id="p1">](../../build/reference/tc-tp-tc-tp-specify-source-file-type.md)</ept> and <bpt id="p2">[</bpt>/Tc<ept id="p2">](../../build/reference/tc-tp-tc-tp-specify-source-file-type.md)</ept> cause the compiler to compile files as C++ or C, respectively, regardless of the filename extension.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These options can cause function names different from what you expect.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Attempting to reference functions or data that don't have external linkage can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In C++, inline functions and <ph id="ph1">`const`</ph> data have internal linkage unless explicitly specified as <ph id="ph2">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>missing function body or variable<ept id="p1">](../../error-messages/tool-errors/missing-function-body-or-variable.md)</ept> can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>With just a function prototype or <ph id="ph1">`extern`</ph> declaration the compiler can continue without error, but the linker cannot resolve a call to an address or reference to a variable because there is no function code or variable space reserved.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Calling a function with parameter types that do not match those in the function declaration can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Name decoration<ept id="p1">](../../error-messages/tool-errors/name-decoration.md)</ept> incorporates the parameters of a function into the final decorated function name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Incorrectly included prototypes, which cause the compiler to expect a function body that is not provided can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you have both a class and non-class implementation of a function <ph id="ph1">`F`</ph>, beware of C++ scope-resolution rules.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When using C++, including a function prototype in a class definition and failing to <bpt id="p1">[</bpt>include the implementation<ept id="p1">](../../error-messages/tool-errors/missing-function-body-or-variable.md)</ept> of the function for that class can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Attempting to call a pure virtual function from the constructor or destructor of an abstract base class can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A pure virtual function has no base class implementation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Trying to use a variable declared within a function (<bpt id="p1">[</bpt>a local variable<ept id="p1">](../../error-messages/tool-errors/automatic-function-scope-variables.md)</ept>) outside the scope of that function can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When building a Release version of an ATL project, indicates that CRT startup code is required.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To fix, do one of the following,</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remove <ph id="ph1">`_ATL_MIN_CRT`</ph> from the list of preprocessor defines to allow CRT startup code to be included.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>General Configuration Settings Property Page<ept id="p1">](../../ide/general-property-page-project.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If possible, remove calls to CRT functions that require CRT startup code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instead, use their Win32 equivalents.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, use <ph id="ph1">`lstrcmp`</ph> instead of <ph id="ph2">`strcmp`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Known functions that require CRT startup code are some of the string and floating point functions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Compiling and Linking Problems</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The project is missing a reference to a library (.LIB) or object (.OBJ) file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.lib Files as Linker Input<ept id="p1">](../../build/reference/dot-lib-files-as-linker-input.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">[</bpt>/NODEFAULTLIB<ept id="p1">](../../build/reference/nodefaultlib-ignore-libraries.md)</ept> or <bpt id="p2">[</bpt>/Zl<ept id="p2">](../../build/reference/zl-omit-default-library-name.md)</ept>, libraries containing required code will not be linked into the project unless you have explicitly included them.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(When compiling with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, you will see a reference to .cctor; see <bpt id="p3">[</bpt>Initialization of Mixed Assemblies<ept id="p3">](../../dotnet/initialization-of-mixed-assemblies.md)</ept> for more information.)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you are using Unicode and MFC, you will get an unresolved external on <ph id="ph1">`_WinMain@16`</ph> if you don't create an entrypoint to <ph id="ph2">`wWinMainCRTStartup`</ph>; use the <bpt id="p1">[</bpt>/ENTRY<ept id="p1">](../../build/reference/entry-entry-point-symbol.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Unicode Programming Summary<ept id="p1">](../../text/unicode-programming-summary.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See the following Knowledge Base articles, located in the MSDN Library, for more information.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the MSDN Library, click the <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> tab, paste the article number or article title into the text box, and then click <bpt id="p2">**</bpt>List Topics<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you search on the article number, make sure the <bpt id="p1">**</bpt>Search titles only<ept id="p1">**</ept> option is clear.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Q125750   "PRB: Error LNK2001: '_WinMain@16': Unresolved External Symbol"</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Q131204   "PRB: Wrong Project Selection Causes LNK2001 on _WinMain@16"</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Q100639   "Unicode Support in the Microsoft Foundation Class Library"</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Q291952    "PRB: Link Error LNK2001: Unresolved External Symbol _main"</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Linking code compiled with /MT with the library LIBC.lib causes LNK2001 on <ph id="ph1">`_beginthread`</ph>, <ph id="ph2">`_beginthreadex`</ph>, <ph id="ph3">`_endthread`</ph>, and <ph id="ph4">`_endthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Linking code requiring the multithreaded libraries (any MFC code or code compiled with <bpt id="p1">[</bpt>/MT<ept id="p1">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept>) causes LNK2001 on <bpt id="p2">[</bpt>_beginthread<ept id="p2">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept>, <ph id="ph1">`_beginthreadex`</ph>, <bpt id="p3">[</bpt>_endthread<ept id="p3">](../../c-runtime-library/reference/endthread-endthreadex.md)</ept>, and <ph id="ph2">`_endthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See the following Knowledge Base article for more information:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Q126646 "PRB: Error Msg: LNK2001 on __beginthreadex and <ph id="ph1">\_</ph>_endthreadex"</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Q128641 "INFO: /Mx Compiler Options and the LIBC, LIBCMT, MSVCRT Libs"</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Q166504 "PRB: MFC and CRT Must Match in debug/release and static/dynamic"</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When compiling with <bpt id="p1">**</bpt>/MD<ept id="p1">**</ept>, a reference to "func" in your source becomes a reference "<ph id="ph1">`__imp__func`</ph>" in the object since all the run-time is now held within a DLL.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you try to link with the static libraries LIBC.lib or LIBCMT.lib, you will get LNK2001 on <ph id="ph1">`__imp__func`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you try to link with MSVCxx.lib when compiling without /MD you will not always get LNK2001, but you will likely have other problems.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Linking with the release mode libraries when building a debug version of an application can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Similarly, using an <bpt id="p1">**</bpt>/Mxd<ept id="p1">**</ept> option (<bpt id="p2">**</bpt>/MTd<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>/MDd<ept id="p3">**</ept>) and/or defining <ph id="ph1">`_DEBUG`</ph> and then linking with the release libraries will give you potential unresolved externals (among other problems).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Linking a release mode build with the debug libraries will also cause similar problems.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Mixing versions of Microsoft libraries and compiler products can be problematic.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A new compiler version's libraries may contain new symbols that cannot be found in the libraries included with previous versions.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You may want to change the order of the directories in the search path, or changing them to point to the current version.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The Tools &amp;#124; Options &amp;#124; Projects &amp;#124; VC++ Directories dialog, under the Library files selection, allows you to change the search order.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Linker folder in the project's Property Pages dialog box may also contain paths that could be out of date.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This problem may appear when a new SDK is installed (perhaps to a different location), and the search order is not updated to point to the new location.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Normally, you should put the path to new SDKs' include and lib directories in front of the default Visual C++ location.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Also, a project containing embedded paths may still point to old paths that are valid, but out of date for new functionality added by the new version that is installed to a different location.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There is currently no standard for <bpt id="p1">[</bpt>C++ naming<ept id="p1">](../../error-messages/tool-errors/name-decoration.md)</ept> between compiler vendors or even between different versions of a compiler.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Therefore, linking object files compiled with other compilers may not produce the same naming scheme and thus cause error LNK2001.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mixing inline and non-inline compile options<ept id="p1">](../../error-messages/tool-errors/function-inlining-problems.md)</ept> on different modules can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If a C++ library is created with function inlining turned on (<bpt id="p1">**</bpt>/Ob1<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/Ob2<ept id="p2">**</ept>) but the corresponding header file describing the functions has inlining turned off (no <ph id="ph1">`inline`</ph> keyword), you will get this error.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To prevent this problem, have the inline functions defined with <ph id="ph1">`inline`</ph> in the header file you are going to include in other files.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you are using the <ph id="ph1">`#pragma inline_depth`</ph> compiler directive, make sure you have a <bpt id="p1">[</bpt>value of 2 or greater set<ept id="p1">](../../error-messages/tool-errors/function-inlining-problems.md)</ept>, and make sure you are using the <bpt id="p2">[</bpt>/Ob1<ept id="p2">](../../build/reference/ob-inline-function-expansion.md)</ept> or <bpt id="p3">[</bpt>/Ob2<ept id="p3">](../../build/reference/ob-inline-function-expansion.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Omitting the LINK option /NOENTRY when creating a resource-only DLL will cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Using incorrect /SUBSYSTEM or /ENTRY settings can cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, if you write a character-based application (a console application) and specify /SUBSYSTEM:WINDOWS, you will get an unresolved external for <ph id="ph1">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information on these options and entry points, see the <bpt id="p1">[</bpt>/SUBSYSTEM<ept id="p1">](../../build/reference/subsystem-specify-subsystem.md)</ept> and <bpt id="p2">[</bpt>/ENTRY<ept id="p2">](../../build/reference/entry-entry-point-symbol.md)</ept> linker options.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Export Problems</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When you are porting an application from 16 to 32 or 64 bits, LNK2001 can occur.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The current module-definition (.def) file syntax requires that <ph id="ph1">`__cdecl`</ph>, <ph id="ph2">`__stdcall`</ph>, and <ph id="ph3">`__fastcall`</ph> functions be listed in the EXPORTS section without underscores (undecorated).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This differs from the 16-bit syntax, where they must be listed with underscores (decorated).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see the description of the <bpt id="p1">[</bpt>EXPORTS<ept id="p1">](../../build/reference/exports.md)</ept> section of module-definition files.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Any export listed in the .def file and not found will cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This could be because it does not exist, is spelled incorrectly, or uses C++ decorated names (.def files do not take decorated names)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Interpreting the Output</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When a symbol is unresolved, you can get information about the function by the following guidelines:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>On x86 platforms, the calling convention decoration for names compiled in C, or for extern "C" names in C++, is:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Function has an underscore (_) prefix.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Function has an underscore (_) prefix and an @ suffix followed by the dword aligned size of parameters on the stack.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Function has an @ prefix and an @ suffix followed by the dword aligned size of parameters on the stack.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use undname.exe to get the undecorated form of a decorated name.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For more information on some of the causes listed above, see <bpt id="p1">[</bpt>Name decoration<ept id="p1">](../../error-messages/tool-errors/name-decoration.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>