<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b36884b2236770cffa790766e228a6d30770181</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\text\using-tchar-h-data-types-with-mbcs-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15d2eccd1973c01b7199224788ab0f0167e866d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">791765a006e996d2751c6f1ee006bc35e4da5ca1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using TCHAR.H Data Types with _MBCS Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using TCHAR.H Data Types with _MBCS Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the manifest constant <bpt id="p1">**</bpt>_MBCS<ept id="p1">**</ept> is defined, a given generic-text routine maps to one of the following kinds of routines:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An SBCS routine that handles multibyte bytes, characters, and strings appropriately.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this case, the string arguments are expected to be of type <bpt id="p1">**</bpt>char<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`_tprintf`</ph> maps to <ph id="ph2">`printf`</ph>; the string arguments to <ph id="ph3">`printf`</ph> are of type <bpt id="p1">**</bpt>char<ph id="ph4">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>_TCHAR<ept id="p1">**</ept> generic-text data type for your string types, the formal and actual parameter types for <ph id="ph1">`printf`</ph> match because <bpt id="p2">**</bpt>_TCHAR<ept id="p2">**</ept><ph id="ph2">\*</ph> maps to <bpt id="p3">**</bpt>char<ph id="ph3">\*</ph><ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An MBCS-specific routine.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this case, the string arguments are expected to be of type <ph id="ph1">`unsigned`</ph> <bpt id="p1">**</bpt>char<ph id="ph2">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`_tcsrev`</ph> maps to <ph id="ph2">`_mbsrev`</ph>, which expects and returns a string of type <ph id="ph3">`unsigned`</ph> <bpt id="p1">**</bpt>char<ph id="ph4">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>_TCHAR<ept id="p1">**</ept> generic-text data type for your string types, there is a potential type conflict because <bpt id="p2">**</bpt>_TCHAR<ept id="p2">**</ept> maps to type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Following are three solutions for preventing this type conflict (and the C compiler warnings or C++ compiler errors that would result):</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the default behavior.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Tchar.h provides generic-text routine prototypes for routines in the run-time libraries, as in the following example.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the default case, the prototype for <ph id="ph1">`_tcsrev`</ph> maps to <ph id="ph2">`_mbsrev`</ph> through a thunk in Libc.lib.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This changes the types of the <ph id="ph1">`_mbsrev`</ph> incoming parameters and outgoing return value from <bpt id="p1">**</bpt>_TCHAR <ph id="ph2">\*</ph><ept id="p1">**</ept> (that is, <ph id="ph3">`char`</ph> <bpt id="p2">**</bpt><ph id="ph4">\*</ph><ept id="p2">**</ept>) to <ph id="ph5">`unsigned`</ph> <ph id="ph6">`char`</ph> <bpt id="p3">**</bpt><ph id="ph7">\*</ph><ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method ensures type matching when you are using <bpt id="p1">**</bpt>_TCHAR<ept id="p1">**</ept>, but it is relatively slow due to the function call overhead.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use function inlining by incorporating the following preprocessor statement in your code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method causes an inline function thunk, provided in Tchar.h, to map the generic-text routine directly to the appropriate MBCS routine.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code excerpt from Tchar.h provides an example of how this is done.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you can use inlining, this is the best solution, because it guarantees type matching and has no additional time cost.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use direct mapping by incorporating the following preprocessor statement in your code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This approach provides a fast alternative if you do not want to use the default behavior or cannot use inlining.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It causes the generic-text routine to be mapped by a macro directly to the MBCS version of the routine, as in the following example from Tchar.h.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you take this approach, you must be careful to ensure use of appropriate data types for string arguments and string return values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use type casting to ensure proper type matching or you can use the <bpt id="p1">**</bpt>_TXCHAR<ept id="p1">**</ept> generic-text data type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_TXCHAR<ept id="p1">**</ept> maps to type <ph id="ph1">`char`</ph> in SBCS code but maps to type <ph id="ph2">`unsigned`</ph> <ph id="ph3">`char`</ph> in MBCS code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about generic-text macros, see <bpt id="p1">[</bpt>Generic-Text Mappings<ept id="p1">](../c-runtime-library/generic-text-mappings.md)</ept> in the <bpt id="p2">*</bpt>Run-Time Library Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Generic-Text Mappings in Tchar.h</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>