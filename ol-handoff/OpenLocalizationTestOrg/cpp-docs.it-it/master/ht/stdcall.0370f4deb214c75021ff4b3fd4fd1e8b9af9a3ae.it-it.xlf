<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b3e420c54682fea141a0c532bbfe7a74f8fad5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\stdcall.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6799b04e641412bc9b9f86ae197bde6040dd86fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0b767d81c8d3151028574b9e628de45d4b3a809</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__stdcall | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__stdcall</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__stdcall`</ph> calling convention is used to call Win32 API functions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The callee cleans the stack, so the compiler makes <bpt id="p1">**</bpt>vararg<ept id="p1">**</ept> functions <ph id="ph1">`__cdecl`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functions that use this calling convention require a function prototype.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following list shows the implementation of this calling convention.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Implementation</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Argument-passing order</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Right to left.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Argument-passing convention</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By value, unless a pointer or reference type is passed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Stack-maintenance responsibility</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Called function pops its own arguments from the stack.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name-decoration convention</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An underscore (_) is prefixed to the name.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The name is followed by the at sign (@) followed by the number of bytes (in decimal) in the argument list.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, the function declared as <ph id="ph1">`int func( int a, double b )`</ph> is decorated as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Case-translation convention</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/Gz<ept id="p1">](../build/reference/gd-gr-gv-gz-calling-convention.md)</ept> compiler option specifies <ph id="ph1">`__stdcall`</ph> for all functions not explicitly declared with a different calling convention.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Functions declared using the <ph id="ph1">`__stdcall`</ph> modifier return values the same way as functions declared using <bpt id="p1">[</bpt>__cdecl<ept id="p1">](../cpp/cdecl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On ARM and x64 processors, <ph id="ph1">`__stdcall`</ph> is accepted and ignored by the compiler; on ARM and x64 architectures, by convention, arguments are passed in registers when possible, and subsequent arguments are passed on the stack.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Given this class definition,</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>this</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>is equivalent to this</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, use of __<bpt id="p1">**</bpt>stdcall<ept id="p1">**</ept> results in all <ph id="ph1">`WINAPI`</ph> function types being handled as a standard call:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Argument Passing and Naming Conventions</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>