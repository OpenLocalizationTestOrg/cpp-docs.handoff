<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e588980cbee5cc0f8a4c1499d667cf114df86568</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\security\security-best-practices-for-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1d45f24dea19fa5e1e1745b7e5a19f7f58a8921</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccc7c7a7005597b4b99f042b65096ff576e2afa6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Security Best Practices for C++ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security Best Practices for C++</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article contains information about security tools and practices.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using them does not make applications immune from attack, but it makes successful attacks less likely.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual C++ Security Features</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These security features are built into the Visual C++ compiler and linker:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>/guard (Enable Control Flow Guard)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Causes the compiler to to analyze control flow for indirect call targets at compile time, and then to insert code to verify the targets at runtime.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>/GS (Buffer Security Check)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instructs the compiler to insert overrun detection code into functions that are at risk of being exploited.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When an overrun is detected, execution is stopped.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By default, this option is on.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>/SAFESEH (Image has Safe Exception Handlers)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instructs the linker to include in the output image a table that contains the address of each exception handler.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At run time, the operating system uses this table to make sure that only legitimate exception handlers are executed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This helps prevent the execution of exception handlers that are introduced by a malicious attack at run time.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, this option is off.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/NXCOMPAT<ept id="p1">](../build/reference/nxcompat.md)</ept>, <bpt id="p2">[</bpt>/NXCOMPAT (Compatible with Data Execution Prevention)<ept id="p2">](../build/reference/nxcompat-compatible-with-data-execution-prevention.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These compiler and linker options enable Data Execution Prevention (DEP) compatibility.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DEP guards the CPU against the execution of non-code pages.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>/analyze (Code Analysis)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This compiler option activates code analysis that reports potential security issues such as buffer overrun, un-initialized memory, null pointer dereferencing, and memory leaks.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, this option is off.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Analysis for C/C++ Overview<ept id="p1">](/visualstudio/code-quality/code-analysis-for-c-cpp-overview)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>/DYNAMICBASE (Use address space layout randomization)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This linker option enables the building of an executable image that can be loaded at different locations in memory at the beginning of execution.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This option also makes the stack location in memory much less predictable.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Security-Enhanced CRT</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The C Runtime Library (CRT) has been augmented to include secure versions of functions that pose security risksâ€”for example, the unchecked <ph id="ph1">`strcpy`</ph> string copy function.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because the older, nonsecure versions of these functions are deprecated, they cause compile-time warnings.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We encourage you to use the secure versions of these CRT functions instead of suppressing the compilation warnings.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Security Features in the CRT<ept id="p1">](../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>SafeInt Library</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SafeInt Library<ept id="p1">](../windows/safeint-library.md)</ept> helps prevent integer overflows and other exploitable errors that might occur when the application performs mathematical operations.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SafeInt`</ph> library includes the <bpt id="p1">[</bpt>SafeInt Class<ept id="p1">](../windows/safeint-class.md)</ept>, the <bpt id="p2">[</bpt>SafeIntException Class<ept id="p2">](../windows/safeintexception-class.md)</ept>, and several <bpt id="p3">[</bpt>SafeInt Functions<ept id="p3">](../windows/safeint-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SafeInt`</ph> class protects against integer overflow and divide-by-zero exploits.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use it to handle comparisons between values of different types.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>I provides two error handling policies.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default policy is for the <ph id="ph1">`SafeInt`</ph> class to throw a <ph id="ph2">`SafeIntException`</ph> class exception to report why a mathematical operation cannot be completed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The second policy is for the <ph id="ph1">`SafeInt`</ph> class to stop program execution.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can also define a custom policy.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`SafeInt`</ph> function protects one mathematical operation from an exploitable error.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use two different kinds of parameters without converting them to the same type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To protect multiple mathematical operations, use the <ph id="ph1">`SafeInt`</ph> class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Checked Iterators</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A checked iterator enforces container boundaries.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, when a checked iterator is out of bounds, it generates an exception and ends program execution.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A checked iterator provides other levels of response that depend on values that are assigned to preprocessor defines such as <bpt id="p1">**</bpt>_SECURE_SCL_THROWS<ept id="p1">**</ept> and <bpt id="p2">**</bpt>_ITERATOR_DEBUG_LEVEL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, at <bpt id="p1">**</bpt>_ITERATOR_DEBUG_LEVEL=2<ept id="p1">**</ept>, a checked iterator provides comprehensive correctness checks in debug mode, which are made available by using asserts.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Code Analysis for Managed Code</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Code Analysis for Managed Code, also known as FxCop, checks assemblies for conformance to the.NET Framework design guidelines.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>FxCop analyzes the code and metadata in each assembly to check for defects in the following areas:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Library design</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Localization</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Windows Application Verifier</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The Application Verifier (AppVerifier) can help you identify potential application compatibility, stability, and security issues.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The AppVerifier monitors how an application uses the operating system.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It watches the file system, registry, memory, and APIs while the application is running, and recommends source-code fixes for issues that it uncovers.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can use the AppVerifier to:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Test for potential application compatibility errors that are caused by common programming mistakes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Examine an application for memory-related issues.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>s</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Identify potential security issues in an application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The AppVerifier is part of the Application Compatibility Toolkit, which is available from the <bpt id="p1">[</bpt>Application Compatibility<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=91277)</ept> on the TechNet web site.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>.NET Framework Security Features</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NIB: Configuring Security Policy<ept id="p1">](http://msdn.microsoft.com/en-us/0f130bcd-1bba-4346-b231-0bcca7dab1a4)</ept> describes guidelines and tools for adjusting the .NET Framework security policies.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Windows User Accounts</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Using Windows user accounts that belong to the Administrators group exposes developers and--by extension--customers to security risks.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Running as a Member of the Users Group<ept id="p1">](running-as-a-member-of-the-users-group.md)</ept> and <bpt id="p2">[</bpt>How User Account Control (UAC) Affects Your Application<ept id="p2">](how-user-account-control-uac-affects-your-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Security&gt;</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>How User Account Control (UAC) Affects Your Application</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>