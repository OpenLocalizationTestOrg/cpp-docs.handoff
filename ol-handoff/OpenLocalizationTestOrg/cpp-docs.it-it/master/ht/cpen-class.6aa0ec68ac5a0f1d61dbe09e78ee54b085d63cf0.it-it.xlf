<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3de5b27804f8bf0f598cf384a898c35a7c9f5ea4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cpen-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5c4ad7d5f629b13fe9920b9fd0d5d0d60ac00a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f6d6ae89ee15583033fb178d51aa9cdedaf61a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CPen Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CPen Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates a Windows graphics device interface (GDI) pen.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CPen::CPen</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CPen::CreatePen</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CPen::CreatePenIndirect</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creates a pen with the style, width, and color given in a <bpt id="p1">[</bpt>LOGPEN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> structure, and attaches it to the <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CPen::FromHandle</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CPen`</ph> object when given a Windows <ph id="ph2">`HPEN`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CPen::GetExtLogPen</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets an <bpt id="p1">[</bpt>EXTLOGPEN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162711)</ept> underlying structure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CPen::GetLogPen</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">[</bpt>LOGPEN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> underlying structure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CPen::operator HPEN</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the Windows handle attached to the <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CPen`</ph>, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](../../mfc/graphic-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CGdiObject</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CPen::CPen</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specifies the pen style.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This parameter in the first version of the constructor can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_SOLID<ept id="p1">**</ept> Creates a solid pen.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_DASH<ept id="p1">**</ept> Creates a dashed pen.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Valid only when the pen width is 1 or less, in device units.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_DOT<ept id="p1">**</ept> Creates a dotted pen.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Valid only when the pen width is 1 or less, in device units.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_DASHDOT<ept id="p1">**</ept> Creates a pen with alternating dashes and dots.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Valid only when the pen width is 1 or less, in device units.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_DASHDOTDOT<ept id="p1">**</ept> Creates a pen with alternating dashes and double dots.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Valid only when the pen width is 1 or less, in device units.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_NULL<ept id="p1">**</ept> Creates a null pen.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_INSIDEFRAME<ept id="p1">**</ept> Creates a pen that draws a line inside the frame of closed shapes produced by the Windows GDI output functions that specify a bounding rectangle (for example, the <bpt id="p2">**</bpt>Ellipse<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Rectangle<ept id="p3">**</ept>, <ph id="ph1">`RoundRect`</ph>, <ph id="ph2">`Pie`</ph>, and <ph id="ph3">`Chord`</ph> member functions).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When this style is used with Windows GDI output functions that do not specify a bounding rectangle (for example, the <ph id="ph1">`LineTo`</ph> member function), the drawing area of the pen is not limited by a frame.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second version of the <ph id="ph1">`CPen`</ph> constructor specifies a combination of type, style, end cap, and join attributes.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The values from each category should be combined by using the bitwise OR operator (&amp;#124;).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The pen type can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_GEOMETRIC<ept id="p1">**</ept> Creates a geometric pen.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept> Creates a cosmetic pen.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The second version of the <ph id="ph1">`CPen`</ph> constructor adds the following pen styles for <ph id="ph2">`nPenStyle`</ph>:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_ALTERNATE<ept id="p1">**</ept> Creates a pen that sets every other pixel.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>(This style is applicable only for cosmetic pens.)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_USERSTYLE<ept id="p1">**</ept> Creates a pen that uses a styling array supplied by the user.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The end cap can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_ENDCAP_ROUND<ept id="p1">**</ept> End caps are round.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_ENDCAP_SQUARE<ept id="p1">**</ept> End caps are square.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_ENDCAP_FLAT<ept id="p1">**</ept> End caps are flat.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The join can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_JOIN_BEVEL<ept id="p1">**</ept> Joins are beveled.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_JOIN_MITER<ept id="p1">**</ept> Joins are mitered when they are within the current limit set by the <bpt id="p2">[</bpt>SetMiterLimit<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145076)</ept> function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the join exceeds this limit, it is beveled.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PS_JOIN_ROUND<ept id="p1">**</ept> Joins are round.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specifies the width of the pen.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For the first version of the constructor, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For the second version of the constructor, if <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_GEOMETRIC<ept id="p1">**</ept>, the width is given in logical units.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept>, the width must be set to 1.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Contains an RGB color for the pen.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`LOGBRUSH`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept>, the <ph id="ph2">`lbColor`</ph> member of the <ph id="ph3">`LOGBRUSH`</ph> structure specifies the color of the pen and the <ph id="ph4">`lbStyle`</ph> member of the <ph id="ph5">`LOGBRUSH`</ph> structure must be set to <bpt id="p2">**</bpt>BS_SOLID<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_GEOMETRIC<ept id="p1">**</ept>, all members must be used to specify the brush attributes of the pen.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Specifies the length, in doubleword units, of the <ph id="ph1">`lpStyle`</ph> array.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This value must be zero if <ph id="ph1">`nPenStyle`</ph> is not <bpt id="p1">**</bpt>PS_USERSTYLE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Points to an array of doubleword values.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This pointer must be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if <ph id="ph1">`nPenStyle`</ph> is not <bpt id="p2">**</bpt>PS_USERSTYLE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you use the constructor with no arguments, you must initialize the resulting <ph id="ph1">`CPen`</ph> object with the <ph id="ph2">`CreatePen`</ph>, <ph id="ph3">`CreatePenIndirect`</ph>, or <ph id="ph4">`CreateStockObject`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If you use the constructor that takes arguments, then no further initialization is necessary.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The constructor with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#99</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CPen::CreatePen</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies the style for the pen.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see the <ph id="ph1">`nPenStyle`</ph> parameter in the <bpt id="p1">[</bpt>CPen<ept id="p1">](#cpen__cpen)</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies the width of the pen.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For the first version of <ph id="ph1">`CreatePen`</ph>, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For the second version of <ph id="ph1">`CreatePen`</ph>, if <ph id="ph2">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_GEOMETRIC<ept id="p1">**</ept>, the width is given in logical units.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept>, the width must be set to 1.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Contains an RGB color for the pen.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>LOGBRUSH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>lbColor<ept id="p2">**</ept> member of the <ph id="ph2">`LOGBRUSH`</ph> structure specifies the color of the pen and the <ph id="ph3">`lbStyle`</ph> member of the <ph id="ph4">`LOGBRUSH`</ph> structure must be set to <bpt id="p3">**</bpt>BS_SOLID<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>nPenStyle<ept id="p1">**</ept> is <bpt id="p2">**</bpt>PS_GEOMETRIC<ept id="p2">**</ept>, all members must be used to specify the brush attributes of the pen.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies the length, in doubleword units, of the <ph id="ph1">`lpStyle`</ph> array.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This value must be zero if <ph id="ph1">`nPenStyle`</ph> is not <bpt id="p1">**</bpt>PS_USERSTYLE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Points to an array of doubleword values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This pointer must be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if <ph id="ph1">`nPenStyle`</ph> is not <bpt id="p2">**</bpt>PS_USERSTYLE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Nonzero if successful, or zero if the method fails.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`CreatePen`</ph> initializes a pen with the specified style, width, and color.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The pen can be subsequently selected as the current pen for any device context.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Pens that have a width greater than 1 pixel should always have either the <bpt id="p1">**</bpt>PS_NULL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>PS_SOLID<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>PS_INSIDEFRAME<ept id="p3">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If a pen has the <bpt id="p1">**</bpt>PS_INSIDEFRAME<ept id="p1">**</ept> style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PS_SOLID<ept id="p1">**</ept> pen style cannot be used to create a pen with a dithered color.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The style <bpt id="p1">**</bpt>PS_INSIDEFRAME<ept id="p1">**</ept> is identical to <bpt id="p2">**</bpt>PS_SOLID<ept id="p2">**</ept> if the pen width is less than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The second version of <ph id="ph1">`CreatePen`</ph> initializes a logical cosmetic or geometric pen that has the specified style, width, and brush attributes.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The width of a cosmetic pen is always 1; the width of a geometric pen is always specified in world units.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>After an application creates a logical pen, it can select that pen into a device context by calling the <bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> function.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>After a pen is selected into a device context, it can be used to draw lines and curves.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_COSMETIC<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PS_USERSTYLE<ept id="p2">**</ept>, the entries in the <ph id="ph2">`lpStyle`</ph> array specify lengths of dashes and spaces in style units.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A style unit is defined by the device in which the pen is used to draw a line.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_GEOMETRIC<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PS_USERSTYLE<ept id="p2">**</ept>, the entries in the <ph id="ph2">`lpStyle`</ph> array specify lengths of dashes and spaces in logical units.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nPenStyle`</ph> is <bpt id="p1">**</bpt>PS_ALTERNATE<ept id="p1">**</ept>, the style unit is ignored and every other pixel is set.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When an application no longer requires a given pen, it should call the <bpt id="p1">[</bpt>CGdiObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function or destroy the <ph id="ph1">`CPen`</ph> object so the resource is no longer in use.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An application should not delete a pen when the pen is selected in a device context.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#100</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CPen::CreatePenIndirect</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Initializes a pen that has the style, width, and color given in the structure pointed to by <ph id="ph1">`lpLogPen`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Points to the Windows <bpt id="p1">[</bpt>LOGPEN<ept id="p1">](../../mfc/reference/logpen-structure.md)</ept> structure that contains information about the pen.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Pens that have a width greater than 1 pixel should always have either the <bpt id="p1">**</bpt>PS_NULL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>PS_SOLID<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>PS_INSIDEFRAME<ept id="p3">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If a pen has the <bpt id="p1">**</bpt>PS_INSIDEFRAME<ept id="p1">**</ept> style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PS_INSIDEFRAME<ept id="p1">**</ept> style is identical to <bpt id="p2">**</bpt>PS_SOLID<ept id="p2">**</ept> if the pen width is less than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#101</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CPen::FromHandle</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CPen`</ph> object given a handle to a Windows GDI pen object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>hPen</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>handle to Windows GDI pen.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CPen`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CPen`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CPen`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CPen`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In other words, the temporary object is only valid during the processing of one window message.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#105</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CPen::GetExtLogPen</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets an <bpt id="p1">**</bpt>EXTLOGPEN<ept id="p1">**</ept> underlying structure.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Points to an <bpt id="p1">[</bpt>EXTLOGPEN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162711)</ept> structure that contains information about the pen.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EXTLOGPEN<ept id="p1">**</ept> structure defines the style, width, and brush attributes of a pen.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For example, call <ph id="ph1">`GetExtLogPen`</ph> to match the particular style of a pen.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>See the following topics in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about pen attributes:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>GetObject</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>EXTLOGPEN</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>LOGPEN</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>ExtCreatePen</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates calling <ph id="ph1">`GetExtLogPen`</ph> to retrieve a pen's attributes, and then create a new, cosmetic pen with the same color.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#102</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>CPen::GetLogPen</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">`LOGPEN`</ph> underlying structure.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>LOGPEN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> structure to contain information about the pen.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LOGPEN`</ph> structure defines the style, color, and pattern of a pen.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, call <ph id="ph1">`GetLogPen`</ph> to match the particular style of pen.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>See the following topics in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about pen attributes:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>GetObject</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>LOGPEN</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates calling <ph id="ph1">`GetLogPen`</ph> to retrieve a pen character, and then create a new, solid pen with the same color.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#103</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CPen::operator HPEN</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Gets the attached Windows GDI handle of the <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If successful, a handle to the Windows GDI object represented by the <ph id="ph1">`CPen`</ph> object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This operator is a casting operator, which supports direct use of an <ph id="ph1">`HPEN`</ph> object.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information about using graphic objects, see the article <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#104</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CGdiObject Class</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>CBrush Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>