<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1dba17cea1da14ca69a1f9573eb88cd7206cf7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\decltype-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7674e8a2a9bde6981a4afd7521f87c8b2a8e3d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf172b9e8c95da4201a276b28fa573ddf619d7e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>decltype  (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>decltype  (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decltype`</ph> type specifier yields the type of a specified expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decltype`</ph> type specifier, together with the <bpt id="p1">[</bpt>auto keyword<ept id="p1">](../cpp/auto-cpp.md)</ept>, is useful primarily to developers who write template libraries.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`auto`</ph> and <ph id="ph2">`decltype`</ph> to declare a template function whose return type depends on the types of its template arguments.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Or, use <ph id="ph1">`auto`</ph> and <ph id="ph2">`decltype`</ph> to declare a template function that wraps a call to another function, and then returns the return type of the wrapped function.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Expressions<ept id="p1">](../cpp/expressions-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">`expression`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decltype`</ph> type specifier is supported in Visual C++ 2010 or later versions, and can be used with native or managed code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(C++14) is supported in Visual Studio 2015 and later.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compiler uses the following rules to determine the type of the <ph id="ph1">`expression`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`expression`</ph> parameter is an identifier or a <bpt id="p1">[</bpt>class member access<ept id="p1">](../cpp/member-access-operators-dot-and.md)</ept>, <ph id="ph2">`decltype(``expression``)`</ph> is the type of the entity named by <ph id="ph3">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If there is no such entity or the <ph id="ph1">`expression`</ph> parameter names a set of overloaded functions, the compiler yields an error message.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`expression`</ph> parameter is a call to a function or an overloaded operator function, <ph id="ph2">`decltype(``expression``)`</ph> is the return type of the function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parentheses around an overloaded operator are ignored.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`expression`</ph> parameter is an <bpt id="p1">[</bpt>rvalue<ept id="p1">](../cpp/lvalues-and-rvalues-visual-cpp.md)</ept>, <ph id="ph2">`decltype(``expression``)`</ph> is the type of <ph id="ph3">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`expression`</ph> parameter is an <bpt id="p1">[</bpt>lvalue<ept id="p1">](../cpp/lvalues-and-rvalues-visual-cpp.md)</ept>, <ph id="ph2">`decltype(``expression``)`</ph> is an <bpt id="p2">[</bpt>lvalue reference<ept id="p2">](../cpp/lvalue-reference-declarator-amp.md)</ept> to the type of <ph id="ph3">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates some uses of the <ph id="ph1">`decltype`</ph> type specifier.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>First, assume that you have coded the following statements.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Next, examine the types that are returned by the four <ph id="ph1">`decltype`</ph> statements in the following table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Statement</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>rvalue reference<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept> to a <ph id="ph1">`const int`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of variable <ph id="ph1">`var`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type of the member access.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The inner parentheses cause the statement to be evaluated as an expression instead of a member access.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>And because <ph id="ph1">`a`</ph> is declared as a <ph id="ph2">`const`</ph> pointer, the type is a reference to <ph id="ph3">`const double`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Decltype and Auto</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In C++14, you can use <ph id="ph1">`decltype(auto)`</ph> with no trailing return type to declare a template function whose return type depends on the types of its template arguments.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In C++11, you can use the <ph id="ph1">`decltype`</ph> type specifier on a trailing return type, together with the <ph id="ph2">`auto`</ph> keyword, to declare a template function whose return type depends on the types of its template arguments.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, consider the following code example in which the return type of the template function depends on the types of the template arguments.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the code example, the <bpt id="p1">*</bpt>UNKNOWN<ept id="p1">*</ept> placeholder indicates that the return type cannot be specified.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The introduction of the <ph id="ph1">`decltype`</ph> type specifier enables a developer to obtain the type of the expression that the template function returns.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">*</bpt>alternative function declaration syntax<ept id="p1">*</ept> that is shown later, the <ph id="ph1">`auto`</ph> keyword, and the <ph id="ph2">`decltype`</ph> type specifier to declare a <bpt id="p2">*</bpt>late-specified<ept id="p2">*</ept> return type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The late-specified return type is determined when the declaration is compiled, instead of when it is coded.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following prototype illustrates the syntax of an alternative function declaration.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`const`</ph> and <ph id="ph2">`volatile`</ph> qualifiers, and the <ph id="ph3">`throw`</ph><bpt id="p1">[</bpt>exception specification<ept id="p1">](../cpp/exception-specifications-throw-cpp.md)</ept> are optional.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>function_body<ept id="p1">*</ept> placeholder represents a compound statement that specifies what the function does.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As a best coding practice, the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> placeholder in the <ph id="ph1">`decltype`</ph> statement should match the expression specified by the <ph id="ph2">`return`</ph> statement, if any, in the <bpt id="p2">*</bpt>function_body<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>function_name<ept id="p1">*</ept> <ph id="ph1">`(`</ph> <bpt id="p2">*</bpt>parameters<ept id="p2">*</ept>opt<ph id="ph2">`)``const`</ph>opt<ph id="ph3">`volatile`</ph>opt<ph id="ph4">`−&gt;``decltype(`</ph><bpt id="p3">*</bpt>expression<ept id="p3">*</ept><ph id="ph5">`)``throw`</ph>opt<ph id="ph6">`{`</ph><bpt id="p4">*</bpt>function_body<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the following code example, the late-specified return type of the <ph id="ph1">`myFunc`</ph> template function is determined by the types of the <ph id="ph2">`t`</ph> and <ph id="ph3">`u`</ph> template arguments.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As a best coding practice, the code example also uses rvalue references and the <ph id="ph1">`forward`</ph> function template, which support <bpt id="p1">*</bpt>perfect forwarding<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Decltype and Forwarding Functions (C++11)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Forwarding functions wrap calls to other functions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Consider a function template that forwards its arguments, or the results of an expression that involves those arguments, to another function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Furthermore, the forwarding function returns the result of calling the other function.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this scenario, the return type of the forwarding function should be the same as the return type of the wrapped function.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this scenario, you cannot write an appropriate type expression without the <ph id="ph1">`decltype`</ph> type specifier.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decltype`</ph> type specifier enables generic forwarding functions because it does not lose required information about whether a function returns a reference type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For a code example of a forwarding function, see the previous <ph id="ph1">`myFunc`</ph> template function example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following code example declares the late-specified return type of template function <ph id="ph1">`Plus()`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Plus`</ph> function processes its two operands with the <ph id="ph2">`operator+`</ph> overload.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Consequently, the interpretation of the plus operator (+) and the return type of the <ph id="ph1">`Plus`</ph> function depends on the types of the function arguments.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This code example yields the following results.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>13.5</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Hello, world!</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>42</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Visual C++ 2010 or later versions.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>decltype(auto) requires Visual Studio 2015 or later</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>