<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b03e7be56e3e3353f24bb42d6fcffd3b59751d0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\data-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f3f78c16378350ce5a28fef698d968e33c94815</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da9683f8722174d8ac5ccd720e38614d478d9803</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data Conversion | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These routines convert data from one form to another.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generally these routines execute faster than conversions you might write.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each routine that begins with a <ph id="ph1">`to`</ph> prefix is implemented as a function and as a macro.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Choosing Between Functions and Macros<ept id="p1">](../c-runtime-library/recommendations-for-choosing-between-functions-and-macros.md)</ept> for information about choosing an implementation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Data-Conversion Routines</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>.NET Framework equivalent</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>abs</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Find absolute value of integer</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>System::Math::Abs</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>atof, _atof_l, _wtof, _wtof_l</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Convert string to</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>System::Convert::ToDouble</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>atoi, _atoi_l, _wtoi, _wtoi_l</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Convert string to</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Convert::ToInt32<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.convert.toint32.aspx)</ept>, <bpt id="p2">[</bpt>System::Convert::ToUInt32<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.convert.touint32.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>_atoi64, _atoi64_l, _wtoi64, _wtoi64_l</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Convert string to</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Convert::ToInt64<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.convert.toint64.aspx)</ept>, <bpt id="p2">[</bpt>System::Convert::ToUInt64<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.convert.touint64.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>atol, _atol_l, _wtol, _wtol_l</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Convert string to</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Convert::ToInt64<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.convert.toint64.aspx)</ept>, <bpt id="p2">[</bpt>System::Convert::ToUInt64<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.convert.touint64.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ecvt<ept id="p1">](../c-runtime-library/reference/ecvt.md)</ept>, <bpt id="p2">[</bpt>_ecvt_s<ept id="p2">](../c-runtime-library/reference/ecvt-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`double`</ph> to string of specified length</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_fcvt<ept id="p1">](../c-runtime-library/reference/fcvt.md)</ept>, <bpt id="p2">[</bpt>_fcvt_s<ept id="p2">](../c-runtime-library/reference/fcvt-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`double`</ph> to string with specified number of digits following decimal point</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_gcvt<ept id="p1">](../c-runtime-library/reference/gcvt.md)</ept>, <bpt id="p2">[</bpt>_gcvt_s<ept id="p2">](../c-runtime-library/reference/gcvt-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`double`</ph> number to string; store string in buffer</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow<ept id="p1">](../c-runtime-library/reference/itoa-i64toa-ui64toa-itow-i64tow-ui64tow.md)</ept>, <bpt id="p2">[</bpt>_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s<ept id="p2">](../c-runtime-library/reference/itoa-s-i64toa-s-ui64toa-s-itow-s-i64tow-s-ui64tow-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`int`</ph> or <ph id="ph2">`__int64`</ph> to string</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>labs</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Find absolute value of <ph id="ph1">`long`</ph> integer</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>System::Math::Abs</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>llabs</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Find absolute value of <ph id="ph1">`long long`</ph> integer</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System::Math::Abs</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ltoa, _ltow<ept id="p1">](../c-runtime-library/reference/ltoa-ltow.md)</ept>, <bpt id="p2">[</bpt>_ltoa_s, _ltow_s<ept id="p2">](../c-runtime-library/reference/ltoa-s-ltow-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`long`</ph> to string</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>_mbbtombc, _mbbtombc_l</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Convert 1-byte multibyte character to corresponding 2-byte multibyte character</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_mbcjistojms, _mbcjistojms_l, _mbcjmstojis, _mbcjmstojis_l</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Convert Japan Industry Standard (JIS) character to Japan Microsoft (JMS) character</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_mbcjistojms, _mbcjistojms_l, _mbcjmstojis, _mbcjmstojis_l</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Convert JMS character to JIS character</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>_mbctohira, _mbctohira_l, _mbctokata, _mbctokata_l</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Convert multibyte character to 1-byte hiragana code</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>_mbctohira, _mbctohira_l, _mbctokata, _mbctokata_l</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Convert multibyte character to 1-byte katakana code</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>_mbctombb, _mbctombb_l</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Convert 2-byte multibyte character to corresponding 1-byte multibyte character</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>mbstowcs, _mbstowcs_l<ept id="p1">](../c-runtime-library/reference/mbstowcs-mbstowcs-l.md)</ept>, <bpt id="p2">[</bpt>mbstowcs_s, _mbstowcs_s_l<ept id="p2">](../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Convert sequence of multibyte characters to corresponding sequence of wide characters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>mbtowc, _mbtowc_l</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Convert multibyte character to corresponding wide character</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>strtod, _strtod_l, wcstod, _wcstod_l</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Convert string to</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>System::Convert::ToDouble</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>strtol, wcstol, _strtol_l, _wcstol_l</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Convert string to <ph id="ph1">`long`</ph> integer</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>System::Convert::ToInt32</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>strtoul, _strtoul_l, wcstoul, _wcstoul_l</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Convert string to <ph id="ph1">`unsigned long`</ph> integer</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>System::Convert::ToUInt32</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Transform string into collated form based on locale-specific information</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>System::IFormattable::ToString</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>toascii, __toascii</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Convert character to ASCII code</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tolower, _tolower, towlower, _tolower_l, _towlower_l<ept id="p1">](../c-runtime-library/reference/tolower-tolower-towlower-tolower-l-towlower-l.md)</ept>, <bpt id="p2">[</bpt>_mbctolower, _mbctolower_l, _mbctoupper, _mbctoupper_l<ept id="p2">](../c-runtime-library/reference/mbctolower-mbctolower-l-mbctoupper-mbctoupper-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Test character and convert to lowercase if currently uppercase</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>System::Char::ToLower</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>tolower, _tolower, towlower, _tolower_l, _towlower_l</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Convert character to lowercase unconditionally</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>System::String::ToLower</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>toupper, _toupper, towupper, _toupper_l, _towupper_l<ept id="p1">](../c-runtime-library/reference/toupper-toupper-towupper-toupper-l-towupper-l.md)</ept>, <bpt id="p2">[</bpt>_mbctolower, _mbctolower_l, _mbctoupper, _mbctoupper_l<ept id="p2">](../c-runtime-library/reference/mbctolower-mbctolower-l-mbctoupper-mbctoupper-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Test character and convert to uppercase if currently lowercase</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>System::Char::ToUpper</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>toupper, _toupper, towupper, _toupper_l, _towupper_l</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Convert character to uppercase unconditionally</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>System::String::ToUpper</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_ultoa, _ultow<ept id="p1">](../c-runtime-library/reference/ultoa-ultow.md)</ept>, <bpt id="p2">[</bpt>_ultoa_s, _ultow_s<ept id="p2">](../c-runtime-library/reference/ultoa-s-ultow-s.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Convert <ph id="ph1">`unsigned``long`</ph> to string</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>System::Convert::ToString</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcstombs, _wcstombs_l<ept id="p1">](../c-runtime-library/reference/wcstombs-wcstombs-l.md)</ept>, <bpt id="p2">[</bpt>wcstombs_s, _wcstombs_s_l<ept id="p2">](../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Convert sequence of wide characters to corresponding sequence of multibyte characters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wctomb, _wctomb_l<ept id="p1">](../c-runtime-library/reference/wctomb-wctomb-l.md)</ept>, <bpt id="p2">[</bpt>wctomb_s, _wctomb_s_l<ept id="p2">](../c-runtime-library/reference/wctomb-s-wctomb-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Convert wide character to corresponding multibyte character</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>atof, _atof_l, _wtof, _wtof_l</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Convert wide-character string to a</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Convert::ToInt64<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.convert.toint64.aspx)</ept>, <bpt id="p2">[</bpt>System::Convert::ToUInt64<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.convert.touint64.aspx)</ept>, <bpt id="p3">[</bpt>System::Convert::ToSingle<ept id="p3">](https://msdn.microsoft.com/en-us/library/system.convert.tosingle.aspx)</ept>, <bpt id="p4">[</bpt>System::Convert::ToDouble<ept id="p4">](https://msdn.microsoft.com/en-us/library/system.convert.todouble.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>atoi, _atoi_l, _wtoi, _wtoi_l</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Convert wide-character string to</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>_atoi64, _atoi64_l, _wtoi64, _wtoi64_l</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Convert wide-character string to</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>atol, _atol_l, _wtol, _wtol_l</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Convert wide-character string to</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Run-Time Routines by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>