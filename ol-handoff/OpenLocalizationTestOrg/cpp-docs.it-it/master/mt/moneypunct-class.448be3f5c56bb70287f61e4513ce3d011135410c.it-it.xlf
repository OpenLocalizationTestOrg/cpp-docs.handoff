<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bf4f8f69073e6c445f416a24b00e19b4a20adc4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\moneypunct-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fe25be87ba6dac5a6aa77d90215b9443488b9d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4c10d48183a1aa30e856c1f03d9e7e9766e36e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>moneypunct Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>moneypunct Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that can serve as a locale facet to describe the sequences of type <ph id="ph1">`CharType`</ph> used to represent a monetary input field or a monetary output field.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the template parameter <ph id="ph1">`Intl`</ph> is <ph id="ph2">`true`</ph>, international conventions are observed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A flag specifying whether international conventions are to be observed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The const static object intl stores the value of the template parameter <bpt id="p1">**</bpt>Intl<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>moneypunct<ept id="p1">](#moneypunct__moneypunct)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructor of objects of type <ph id="ph1">`moneypunct`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>char_type<ept id="p1">](#moneypunct__char_type)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>string_type<ept id="p1">](#moneypunct__string_type)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type that describes a string containing characters of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>curr_symbol<ept id="p1">](#moneypunct__curr_symbol)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a currency symbol.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>decimal_point<ept id="p1">](#moneypunct__decimal_point)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_curr_symbol<ept id="p1">](#moneypunct__do_curr_symbol)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_decimal_point<ept id="p1">](#moneypunct__do_decimal_point)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_frac_digits<ept id="p1">](#moneypunct__do_frac_digits)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns a locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_grouping<ept id="p1">](#moneypunct__do_grouping)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_neg_format<ept id="p1">](#moneypunct__do_neg_format)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_negative_sign<ept id="p1">](#moneypunct__do_negative_sign)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_pos_format<ept id="p1">](#moneypunct__do_pos_format)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_positive_sign<ept id="p1">](#moneypunct__do_positive_sign)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific sequence of elements to use as a positive sign symbol.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do_thousands_sep<ept id="p1">](#moneypunct__do_thousands_sep)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific sequence of elements to use as a thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>frac_digits<ept id="p1">](#moneypunct__frac_digits)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>grouping<ept id="p1">](#moneypunct__grouping)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>neg_format<ept id="p1">](#moneypunct__neg_format)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for formatting outputs with negative amounts.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>negative_sign<ept id="p1">](#moneypunct__negative_sign)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a negative sign symbol.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pos_format<ept id="p1">](#moneypunct__pos_format)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for formatting outputs with positive amounts.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>positive_sign<ept id="p1">](#moneypunct__positive_sign)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a positive sign symbol.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>thousands_sep<ept id="p1">](#moneypunct__thousands_sep)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__char_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::char_type</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__curr_symbol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::curr_symbol</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a currency symbol.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A string containing the currency symbol.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_curr_symbol<ept id="p1">](#moneypunct__do_curr_symbol)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__decimal_point"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::decimal_point</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_decimal_point<ept id="p1">](#moneypunct__do_decimal_point)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_curr_symbol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_curr_symbol</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>curr_symbol<ept id="p1">](#moneypunct__curr_symbol)</ept>, where the virtual member function is called by <ph id="ph1">`curr_symbol`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_decimal_point"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_decimal_point</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a decimal point symbol.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>decimal_point<ept id="p1">](#moneypunct__decimal_point)</ept>, where the virtual member function is called by <ph id="ph1">`decimal_point`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_frac_digits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_frac_digits</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>frac_digits<ept id="p1">](#moneypunct__frac_digits)</ept>, where the virtual member function is called by <ph id="ph1">`frac_digits`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_grouping"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_grouping</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>grouping<ept id="p1">](#moneypunct__grouping)</ept>, where the virtual member function is called by <bpt id="p2">**</bpt>grouping<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_neg_format"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_neg_format</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a negative amount.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Each of the four elements of <bpt id="p1">**</bpt>pattern::field<ept id="p1">**</ept> can have the values:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>none<ept id="p1">**</ept> to match zero or more spaces or generate nothing.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sign<ept id="p1">**</ept> to match or generate a positive or negative sign.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>space<ept id="p1">**</ept> to match zero or more spaces or generate a space.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>symbol<ept id="p1">**</ept> to match or generate a currency symbol.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>value<ept id="p1">**</ept> to match or generate a monetary value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Components of a monetary output field are generated and components of a monetary input field are matched in the order in which these elements appear in <bpt id="p1">**</bpt>pattern::field<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Each of the values <bpt id="p1">**</bpt>sign<ept id="p1">**</ept>, <bpt id="p2">**</bpt>symbol<ept id="p2">**</ept>, <bpt id="p3">**</bpt>value<ept id="p3">**</ept>, and either <bpt id="p4">**</bpt>none<ept id="p4">**</ept> or <bpt id="p5">**</bpt>space<ept id="p5">**</ept> must appear exactly once.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The value <bpt id="p1">**</bpt>none<ept id="p1">**</ept> must not appear first.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The value space <bpt id="p1">**</bpt>must<ept id="p1">**</ept> not appear first or last.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Intl<ept id="p1">**</ept> is true, the order is <bpt id="p2">**</bpt>symbol<ept id="p2">**</ept>, <bpt id="p3">**</bpt>sign<ept id="p3">**</ept>, <bpt id="p4">**</bpt>none<ept id="p4">**</ept>, then <bpt id="p5">**</bpt>value<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The template version of <ph id="ph1">`moneypunct`</ph><ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Intl<ept id="p2">**</ept>&gt; returns <ph id="ph3">`{`</ph><bpt id="p3">**</bpt>money_base::symbol<ept id="p3">**</ept>, <bpt id="p4">**</bpt>money_base::sign<ept id="p4">**</ept>, <bpt id="p5">**</bpt>money_base::value<ept id="p5">**</ept>, <bpt id="p6">**</bpt>money_base::none<ept id="p6">**</ept><ph id="ph4">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>neg_format<ept id="p1">](#moneypunct__neg_format)</ept>, where the virtual member function is called by <ph id="ph1">`neg_format`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_negative_sign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_negative_sign</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a negative sign.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>negative_sign<ept id="p1">](#moneypunct__negative_sign)</ept>, where the virtual member function is called by <ph id="ph1">`negative_sign`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_pos_format"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_pos_format</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a positive amount.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>(It also determines how to match the components of a monetary input field.) The encoding is the same as for <bpt id="p1">[</bpt>do_neg_format<ept id="p1">](#moneypunct__do_neg_format)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The template version of moneypunct<ph id="ph1">\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Inputlterator<ept id="p2">**</ept>&gt; returns <ph id="ph2">`{`</ph><bpt id="p3">**</bpt>money_base::symbol<ept id="p3">**</ept>, <bpt id="p4">**</bpt>money_base::sign<ept id="p4">**</ept>, <bpt id="p5">**</bpt>money_base::value<ept id="p5">**</ept>, <bpt id="p6">**</bpt>money_base::none<ept id="p6">**</ept><ph id="ph3">`}`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>pos_format<ept id="p1">](#moneypunct__pos_format)</ept>, where the virtual member function is called by <ph id="ph1">`pos_format`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_positive_sign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_positive_sign</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific sequence of elements to use as a positive sign.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a positive sign.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>positive_sign<ept id="p1">](#moneypunct__positive_sign)</ept>, where the virtual member function is called by <ph id="ph1">`positive_sign`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__do_thousands_sep"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::do_thousands_sep</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a locale-specific element to use as a group separator to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A locale-specific element to use as a group separator to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>thousands_sep<ept id="p1">](#moneypunct__thousands_sep)</ept>, where the virtual member function is called by <ph id="ph1">`thousands_sep`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__frac_digits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::frac_digits</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A locale-specific count of the number of digits to display to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_frac_digits<ept id="p1">](#moneypunct__do_frac_digits)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__grouping"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::grouping</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A locale-specific rule for determining how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_grouping<ept id="p1">](#moneypunct__do_grouping)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__moneypunct"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::moneypunct</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Constructor of objects of type <ph id="ph1">`moneypunct`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&gt;</ph> 0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base object with <bpt id="p1">[</bpt>locale::facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept>(_ <bpt id="p2">*</bpt>Refs<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__neg_format"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::neg_format</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for formatting outputs with negative amounts.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A locale-specific rule for formatting outputs with negative amounts.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_neg_format<ept id="p1">](#moneypunct__do_neg_format)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__negative_sign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::negative_sign</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a negative sign symbol.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a negative sign symbol.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_negative_sign<ept id="p1">](#moneypunct__do_negative_sign)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__pos_format"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::pos_format</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific rule for formatting outputs with positive amounts.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A locale-specific rule for formatting outputs with positive amounts.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_pos_format<ept id="p1">](#moneypunct__do_pos_format)</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__positive_sign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::positive_sign</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a positive sign symbol.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a positive sign symbol.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_positive_sign<ept id="p1">](#moneypunct__do_positive_sign)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__string_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::string_type</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A type that describes a string containing characters of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept> whose objects can store copies of the punctuation sequences.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="moneypunct__thousands_sep"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  moneypunct::thousands_sep</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Returns a locale-specific sequence of elements to use as a thousands separator symbol.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A locale-specific sequence of elements to use as a thousands separator</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>do_thousands_sep<ept id="p1">](#moneypunct__do_thousands_sep)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>locale&gt;<ept id="p1">](../standard-library/locale.md)</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>