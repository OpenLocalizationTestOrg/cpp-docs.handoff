<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0af01d923d9d4ffd32ba0ad772896c8b273cccc4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\dupenv-s-dbg-wdupenv-s-dbg.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d82945406de1bb0a3d9bc635f726529e25f08fa2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">906687a3b7b61c9323cc5f1cb9c844892a9beda4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_dupenv_s_dbg, _wdupenv_s_dbg | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_dupenv_s_dbg, _wdupenv_s_dbg</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get a value from the current environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Versions of <bpt id="p1">[</bpt>_dupenv_s, _wdupenv_s<ept id="p1">](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md)</ept> that allocate memory with <bpt id="p2">[</bpt>_malloc_dbg<ept id="p2">](../../c-runtime-library/reference/malloc-dbg.md)</ept> to provide additional debugging information.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Buffer to store the variable's value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Size of <ph id="ph1">`buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Environment variable name.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Requested type of the memory block: <ph id="ph1">`_CLIENT_BLOCK`</ph> or <ph id="ph2">`_NORMAL_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pointer to the name of the source file or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Line number in source file or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Zero on success, an error code on failure.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These functions validate their parameters; if <ph id="ph1">`buffer`</ph> or <ph id="ph2">`varname`</ph> is <ph id="ph3">`NULL`</ph>, the invalid parameter handler is invoked as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the functions set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and return <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If these functions cannot allocate enough memory, they set <ph id="ph1">`buffer`</ph> to <ph id="ph2">`NULL`</ph> and <ph id="ph3">`numberOfElements`</ph> to 0, and return <ph id="ph4">`ENOMEM`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_dupenv_s_dbg`</ph> and <ph id="ph2">`_wdupenv_s_dbg`</ph> functions are identical to <ph id="ph3">`_dupenv_s`</ph> and <ph id="ph4">`_wdupenv_s`</ph> except that, when <ph id="ph5">`_DEBUG`</ph> is defined, these functions use the debug version of <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept>, <bpt id="p2">[</bpt>_malloc_dbg<ept id="p2">](../../c-runtime-library/reference/malloc-dbg.md)</ept>, to allocate memory for the value of the environment variable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For information on the debugging features of <ph id="ph1">`_malloc_dbg`</ph>, see <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You do not need to call these functions explicitly in most cases.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Instead, you can define the flag <ph id="ph1">`_CRTDBG_MAP_ALLOC`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id="ph2">`_dupenv_s`</ph> and <ph id="ph3">`_wdupenv_s`</ph> are remapped to <ph id="ph4">`_dupenv_s_dbg`</ph> and <ph id="ph5">`_wdupenv_s_dbg`</ph>, respectively, with the <ph id="ph6">`blockType`</ph> set to <ph id="ph7">`_NORMAL_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id="ph1">`_CLIENT_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information on block types, see <bpt id="p1">[</bpt>Types of blocks on the debug heap<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Environment::GetEnvironmentVariable<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process and Environment Control<ept id="p1">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Environmental Constants<ept id="p1">](../../c-runtime-library/environmental-constants.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>getenv_s, _wgetenv_s<ept id="p1">](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_putenv_s, _wputenv_s<ept id="p1">](../../c-runtime-library/reference/putenv-s-wputenv-s.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>