<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8422a31f1f710797ba7adf16bc7ea1716d669d8a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\coblist-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f3c32d06573b7d87e08a2d5e6bd2a915f4761a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">def2a67631bc0c15f0b25976c37dda58b7d2ac20</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CObList Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CObList Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>fSupports ordered lists of nonunique <ph id="ph1">`CObject`</ph> pointers accessible sequentially or by pointer value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs an empty list for <ph id="ph1">`CObject`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::AddHead<ept id="p1">](#coblist__addhead)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the head of the list (makes a new head).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::AddTail<ept id="p1">](#coblist__addtail)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::Find<ept id="p1">](#coblist__find)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the position of an element specified by pointer value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::FindIndex<ept id="p1">](#coblist__findindex)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the position of an element specified by a zero-based index.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetAt<ept id="p1">](#coblist__getat)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetCount<ept id="p1">](#coblist__getcount)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetHead<ept id="p1">](#coblist__gethead)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the head element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetHeadPosition<ept id="p1">](#coblist__getheadposition)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the position of the head element of the list.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetNext<ept id="p1">](#coblist__getnext)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the next element for iterating.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetPrev<ept id="p1">](#coblist__getprev)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the previous element for iterating.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetSize<ept id="p1">](#coblist__getsize)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetTail<ept id="p1">](#coblist__gettail)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the tail element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::GetTailPosition<ept id="p1">](#coblist__gettailposition)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the position of the tail element of the list.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::InsertAfter<ept id="p1">](#coblist__insertafter)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Inserts a new element after a given position.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::InsertBefore<ept id="p1">](#coblist__insertbefore)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inserts a new element before a given position.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::IsEmpty<ept id="p1">](#coblist__isempty)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Tests for the empty list condition (no elements).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::RemoveAll<ept id="p1">](#coblist__removeall)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this list.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::RemoveAt<ept id="p1">](#coblist__removeat)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Removes an element from this list, specified by position.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::RemoveHead<ept id="p1">](#coblist__removehead)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::RemoveTail<ept id="p1">](#coblist__removetail)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObList::SetAt<ept id="p1">](#coblist__setat)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CObList`</ph> lists behave like doubly-linked lists.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> variable both as an iterator to traverse a list sequentially and as a bookmark to hold a place.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A position is not the same as an index, however.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Element insertion is very fast at the list head, at the tail, and at a known <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A sequential search is necessary to look up an element by value or index.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This search can be slow if the list is long.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CObList`</ph> incorporates the <ph id="ph2">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If a list of <ph id="ph1">`CObject`</ph> pointers is stored to an archive, either with an overloaded insertion operator or with the <ph id="ph2">`Serialize`</ph> member function, each <ph id="ph3">`CObject`</ph> element is serialized in turn.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you need a dump of individual <ph id="ph1">`CObject`</ph> elements in the list, you must set the depth of the dump context to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CObList`</ph> object is deleted, or when its elements are removed, only the <ph id="ph2">`CObject`</ph> pointers are removed, not the objects they reference.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can derive your own classes from <ph id="ph1">`CObList`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Your new list class, designed to hold pointers to objects derived from <ph id="ph1">`CObject`</ph>, adds new data members and new member functions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Note that the resulting list is not strictly type safe, because it allows insertion of any <ph id="ph1">`CObject`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You must use the <bpt id="p1">[</bpt>IMPLEMENT_SERIAL<ept id="p1">](run-time-object-model-services.md#implement_serial)</ept> macro in the implementation of your derived class if you intend to serialize the list.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CObList`</ph>, see the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcoll.h</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__addhead"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::AddHead</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Adds a new element or list of elements to the head of this list.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A pointer to another <ph id="ph1">`CObList`</ph> list.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::AddHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddHead( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void AddHead( CPtrList<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`pNewList`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddHead(const CString&amp;<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddHead(LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void AddHead(CStringList<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`pNewList`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The list can be empty before the operation.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#89<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__addtail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::AddTail</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Adds a new element or list of elements to the tail of this list.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A pointer to another <ph id="ph1">`CObList`</ph> list.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The list can be empty before the operation.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::AddTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddTail( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void AddTail( CPtrList<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`pNewList`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddTail( const CString&amp;<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION AddTail( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void AddTail( CStringList<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`pNewList`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#90<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__coblist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::CObList</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Constructs an empty <ph id="ph1">`CObject`</ph> pointer list.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The memory-allocation granularity for extending the list.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>As the list grows, memory is allocated in units of <ph id="ph1">`nBlockSize`</ph> entries.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If a memory allocation fails, a <ph id="ph1">`CMemoryException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::CObList`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CPtrList( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CStringList( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nBlockSize`</ph> <bpt id="p2">**</bpt>= 10 );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Below is a listing of the <ph id="ph1">`CObject`</ph>-derived class <ph id="ph2">`CAge`</ph> used in all the collection examples:</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#91<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_3.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Below is an example of <ph id="ph1">`CObList`</ph> constructor usage:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#92<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__find"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::Find</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Searches the list sequentially to find the first <ph id="ph1">`CObject`</ph> pointer matching the specified <ph id="ph2">`CObject`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The object pointer to be found in this list.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The start position for the search.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the object is not found.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Note that the pointer values are compared, not the contents of the objects.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::Find`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION Find( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`searchValue`</ph> <bpt id="p2">**</bpt>, POSITION<ept id="p2">**</ept> <ph id="ph3">`startAfter`</ph> <bpt id="p3">**</bpt>= NULL ) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION Find( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`searchValue`</ph> <bpt id="p2">**</bpt>, POSITION<ept id="p2">**</ept> <ph id="ph2">`startAfter`</ph> <bpt id="p3">**</bpt>= NULL ) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#93<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__findindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::FindIndex</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Uses the value of <ph id="ph1">`nIndex`</ph> as an index into the list.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The zero-based index of the list element to be found.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if <ph id="ph1">`nIndex`</ph> is too large.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>(The framework generates an assertion if <ph id="ph1">`nIndex`</ph> is negative.)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>It starts a sequential scan from the head of the list, stopping on the <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th element.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::FindIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION FindIndex( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION FindIndex( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#94<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetAt</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>position<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetHeadPosition`</ph> or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>See the return value description for <bpt id="p1">[</bpt>GetHead<ept id="p1">](#coblist__gethead)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetAt`</ph> retrieves the <ph id="ph2">`CObject`</ph> pointer associated with a given position.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const void<ph id="ph1">\*</ph>&amp; GetAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; GetAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const CString&amp; GetAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>) const;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString&amp; GetAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>FindIndex<ept id="p1">](#coblist__findindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetCount</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>An integer value containing the element count.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetCount( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#95<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__gethead"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetHead</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`CObject`</ph> pointer that represents the head element of this list.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CObList<ept id="p1">**</ept>, then <ph id="ph1">`GetHead`</ph> returns a <ph id="ph2">`CObject`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CObList`</ph>, then <ph id="ph2">`GetHead`</ph> returns a reference to a <ph id="ph3">`CObject`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const void<ph id="ph1">\*</ph>&amp; GetHead( ) const; void<ph id="ph2">\*</ph>&amp; GetHead( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const CString&amp; GetHead( ) const; CString&amp; GetHead( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of <ph id="ph1">`GetHead`</ph> on the left side of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#96<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getheadposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetHeadPosition</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets the position of the head element of this list.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetHeadPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetHeadPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetHeadPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#97<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getnext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetNext</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <ph id="ph3">`POSITION`</ph> value of the next entry in the list.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`POSITION`</ph> value returned by a previous <ph id="ph2">`GetNext`</ph>, <ph id="ph3">`GetHeadPosition`</ph>, or other member function call.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>See the return value description for <bpt id="p1">[</bpt>GetHead<ept id="p1">](#coblist__gethead)</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNext`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id="ph2">`GetHeadPosition`</ph> or <ph id="ph3">`Find`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You must ensure that your <ph id="ph1">`POSITION`</ph> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>It is possible to remove an element during an iteration.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>RemoveAt<ept id="p1">](#coblist__removeat)</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>As of MFC 8.0 the const version of this method has changed to return <ph id="ph1">`const CObject*`</ph> instead of <ph id="ph2">`const CObject*&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This change was made to bring the compiler into conformance with the C++ standard.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetNext`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void*&amp; GetNext( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`);`</ph></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`const void* GetNext( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`) const;`</ph></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CString&amp; GetNext( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`);`</ph></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`const CString&amp; GetNext( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`) const;`</ph></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#98<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getprev"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetPrev</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <ph id="ph3">`POSITION`</ph> value of the previous entry in the list.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`POSITION`</ph> value returned by a previous <ph id="ph2">`GetPrev`</ph> or other member function call.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>See the return value description for <bpt id="p1">[</bpt>GetHead<ept id="p1">](#coblist__gethead)</ept>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetPrev`</ph> in a reverse iteration loop if you establish the initial position with a call to <ph id="ph2">`GetTailPosition`</ph> or <ph id="ph3">`Find`</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>You must ensure that your <ph id="ph1">`POSITION`</ph> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the first in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <ph id="ph2">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>As of MFC 8.0 the const version of this method has changed to return <ph id="ph1">`const CObject*`</ph> instead of <ph id="ph2">`const CObject*&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>This change was made to bring the compiler into conformance with the C++ standard.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetPrev`</ph>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`void*&amp; GetPrev( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`);`</ph></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`const void* GetPrev( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`) const;`</ph></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CString&amp; GetPrev( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`);`</ph></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`const CString&amp; GetPrev( POSITION&amp;`</ph> <ph id="ph2">`rPosition`</ph> <ph id="ph3">`) const;`</ph></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#99<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__getsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetSize</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Returns the number of list elements.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The number of items in the list.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the number of elements in the list.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR GetSize( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#100<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__gettail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetTail</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`CObject`</ph> pointer that represents the tail element of this list.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>See the return value description for <bpt id="p1">[</bpt>GetHead<ept id="p1">](#coblist__gethead)</ept>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const void<ph id="ph1">\*</ph>&amp; GetTail( ) const; void<ph id="ph2">\*</ph>&amp; GetTail( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>const CString&amp; GetTail( ) const; CString&amp; GetTail( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#101<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__gettailposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::GetTailPosition</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets the position of the tail element of this list; <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::GetTailPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetTailPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION GetTailPosition( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#102<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__insertafter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::InsertAfter</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Adds an element to this list after the element at the specified position.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>position<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <ph id="ph2">`GetPrev`</ph>, or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::InsertAfter`</ph>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertAfter( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, void<ph id="ph1">\*</ph><ept id="p3">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertAfter( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, const CString&amp;<ept id="p3">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertAfter( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, LPCTSTR<ept id="p3">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value which is the same as the <bpt id="p2">*</bpt>position<ept id="p2">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#103<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_15.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__insertbefore"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::InsertBefore</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Adds an element to this list before the element at the specified position.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>position<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <ph id="ph2">`GetPrev`</ph>, or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::InsertBefore`</ph>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertBefore( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, void<ph id="ph1">\*</ph><ept id="p3">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertBefore( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, const CString&amp;<ept id="p3">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POSITION InsertBefore( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>, LPCTSTR<ept id="p3">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p4">**</bpt>);<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#104<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_16.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__isempty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::IsEmpty</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Indicates whether this list contains no elements.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Nonzero if this list is empty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::IsEmpty`</ph>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL IsEmpty( ) const;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>RemoveAll<ept id="p1">](#coblist__removeall)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__removeall"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::RemoveAll</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this list and frees the associated <ph id="ph1">`CObList`</ph> memory.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>No error is generated if the list is already empty.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>When you remove elements from a <ph id="ph1">`CObList`</ph>, you remove the object pointers from the list.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>It is your responsibility to delete the objects themselves.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::RemoveAll`</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAll( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#105<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_17.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__removeat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::RemoveAt</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Removes the specified element from this list.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>position<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The position of the element to be removed from the list.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>When you remove an element from a <ph id="ph1">`CObList`</ph>, you remove the object pointer from the list.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>It is your responsibility to delete the objects themselves.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::RemoveAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( POSITION<ept id="p1">**</ept> <bpt id="p2">*</bpt>position<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Be careful when removing an element during a list iteration.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The following example shows a removal technique that guarantees a valid <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value for <bpt id="p2">[</bpt>GetNext<ept id="p2">](#coblist__getnext)</ept>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#106<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_18.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__removehead"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::RemoveHead</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer previously at the head of the list.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::RemoveHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph> RemoveHead( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString RemoveHead( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#107<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_19.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__removetail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::RemoveTail</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>A pointer to the object that was at the tail of the list.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::RemoveTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph> RemoveTail( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString RemoveTail( );<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#108<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_20.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="coblist__setat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CObList::SetAt</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Sets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> of the element to be set.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer to be written to the list.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetAt`</ph> writes the <ph id="ph2">`CObject`</ph> pointer to the specified position in the list.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObList::SetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPtrList<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( POSITION<ept id="p1">**</ept> <ph id="ph1">`pos`</ph> <bpt id="p2">**</bpt>, const CString&amp;<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( POSITION<ept id="p1">**</ept> <ph id="ph1">`pos`</ph> <bpt id="p2">**</bpt>, LPCTSTR<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCCollections#109<ept id="p2">](../../mfc/codesnippet/cpp/coblist-class_21.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CStringList Class<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CPtrList Class<ept id="p1">](../../mfc/reference/cptrlist-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>