<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdc112bd71b7ccfaf0258f0d6b954abf3e9824ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\scheduler-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5123db745cf4625e6ba74face4be705621234a60</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ae68dc8f5b2b759c800d3db9cc408750ab4adb0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scheduler Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Scheduler Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for a Concurrency Runtime scheduler.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Scheduler Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An object of the <ph id="ph1">`Scheduler`</ph> class can only created using factory methods, or implicitly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::~Scheduler Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An object of the <ph id="ph1">`Scheduler`</ph> class is implicitly destroyed when all external references to it cease to exist.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Attach Method<ept id="p1">](#attach)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Attaches the scheduler to the calling context.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Create Method<ept id="p1">](#create)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates a new scheduler whose behavior is described by the <ph id="ph1">`_Policy`</ph> parameter, places an initial reference on the scheduler, and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::CreateScheduleGroup Method<ept id="p1">](#createschedulegroup)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a new schedule group within the scheduler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The version that takes the parameter <ph id="ph1">`_Placement`</ph> causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::GetNumberOfVirtualProcessors Method<ept id="p1">](#getnumberofvirtualprocessors)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the current number of virtual processors for the scheduler.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::GetPolicy Method<ept id="p1">](#getpolicy)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a copy of the policy that the scheduler was created with.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Id Method<ept id="p1">](#id)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the scheduler.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::IsAvailableLocation Method<ept id="p1">](#isavailablelocation)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Determines whether a given location is available on the scheduler.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Reference Method<ept id="p1">](#reference)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Increments the scheduler reference count.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::RegisterShutdownEvent Method<ept id="p1">](#registershutdownevent)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Causes the Windows event handle passed in the <ph id="ph1">`_Event`</ph> parameter to be signaled when the scheduler shuts down and destroys itself.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At the time the event is signaled, all work that had been scheduled to the scheduler is complete.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Multiple shutdown events can be registered through this method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::Release Method<ept id="p1">](#release)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Decrements the scheduler reference count.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::ResetDefaultSchedulerPolicy Method<ept id="p1">](#resetdefaultschedulerpolicy)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Resets the default scheduler policy to the runtime default.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The next time a default scheduler is created, it will use the runtime default policy settings.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::ScheduleTask Method<ept id="p1">](#scheduletask)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Schedules a light-weight task within the scheduler.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The light-weight task will be placed in a schedule group determined by the runtime.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The version that takes the parameter <ph id="ph1">`_Placement`</ph> causes the task to be biased towards executing at the specified location.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scheduler::SetDefaultSchedulerPolicy Method<ept id="p1">](#setdefaultschedulerpolicy)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Allows a user defined policy to be used to create the default scheduler.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This method can be called only when no default scheduler exists within the process.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>After a default policy has been set, it remains in effect until the next valid call to either the <ph id="ph1">`SetDefaultSchedulerPolicy`</ph> or the <bpt id="p1">[</bpt>ResetDefaultSchedulerPolicy<ept id="p1">](#resetdefaultschedulerpolicy)</ept> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime scheduler uses execution contexts, which map to the operating system execution contexts, such as a thread, to execute the work queued to it by your application.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>At any time, the concurrency level of a scheduler is equal to the number of virtual processor granted to it by the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Only a single scheduler context can execute on a virtual processor at a given time.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime will create a default scheduler per process to execute parallel work.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In addition you can create your own scheduler instances and manipulate it using this class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> concrt.h</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="attach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Attach Method</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Attaches the scheduler to the calling context.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Attaching a scheduler implicitly places a reference on the scheduler.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>At some point in the future, you must call the <bpt id="p1">[</bpt>CurrentScheduler::Detach<ept id="p1">](currentscheduler-class.md#detach)</ept> method in order to allow the scheduler to shut down.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If this method is called from a context that is already attached to a different scheduler, the existing scheduler is remembered as the previous scheduler, and the newly created scheduler becomes the current scheduler.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`CurrentScheduler::Detach`</ph> method at a later point, the previous scheduler is restored as the current scheduler.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This method will throw an <bpt id="p1">[</bpt>improper_scheduler_attach<ept id="p1">](improper-scheduler-attach-class.md)</ept> exception if this scheduler is the current scheduler of the calling context.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Create Method</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Creates a new scheduler whose behavior is described by the <ph id="ph1">`_Policy`</ph> parameter, places an initial reference on the scheduler, and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The scheduler policy that describes behavior of the newly created scheduler.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A pointer to a newly created scheduler.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`Scheduler`</ph> object has an initial reference count placed on it.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>After a scheduler is created with the <ph id="ph1">`Create`</ph> method, you must call the <ph id="ph2">`Release`</ph> method at some point in the future in order to remove the initial reference count and allow the scheduler to shut down.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A scheduler created with this method is not attached to the calling context.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It can be attached to a context using the <bpt id="p1">[</bpt>Attach<ept id="p1">](#attach)</ept> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This method can throw a variety of exceptions, including <bpt id="p1">[</bpt>scheduler_resource_allocation_error<ept id="p1">](scheduler-resource-allocation-error-class.md)</ept> and <bpt id="p2">[</bpt>invalid_scheduler_policy_value<ept id="p2">](invalid-scheduler-policy-value-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="createschedulegroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::CreateScheduleGroup Method</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Creates a new schedule group within the scheduler.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The version that takes the parameter <ph id="ph1">`_Placement`</ph> causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A reference to a location where the tasks within the schedule group will biased towards executing at.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A pointer to the newly created schedule group.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ScheduleGroup`</ph> object has an initial reference count placed on it.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You must invoke the <bpt id="p1">[</bpt>Release<ept id="p1">](schedulegroup-class.md#release)</ept> method on a schedule group when you are done scheduling work to it.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The scheduler will destroy the schedule group when all work queued to it has completed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Note that if you explicitly created this scheduler, you must release all references to schedule groups within it, before you release your references on the scheduler.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getnumberofvirtualprocessors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::GetNumberOfVirtualProcessors Method</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the current number of virtual processors for the scheduler.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The current number of virtual processors for the scheduler.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getpolicy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::GetPolicy Method</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a copy of the policy that the scheduler was created with.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A copy of the policy that the scheduler was created with.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="id"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Id Method</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the scheduler.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A unique identifier for the scheduler.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="isavailablelocation"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::IsAvailableLocation Method</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Determines whether a given location is available on the scheduler.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A reference to the location to query the scheduler about.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An indication of whether or not the location specified by the <ph id="ph1">`_Placement`</ph> argument is available on the scheduler.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Note that the return value is an instantaneous sampling of whether the given location is available.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the presence of multiple schedulers, dynamic resource management can add or take away resources from schedulers at any point.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Should this happen, the given location can change availability.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Reference Method</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Increments the scheduler reference count.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The newly incremented reference count.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is typically used to manage the lifetime of the scheduler for composition.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The method will throw an <bpt id="p1">[</bpt>improper_scheduler_reference<ept id="p1">](improper-scheduler-reference-class.md)</ept> exception if the reference count prior to calling the <ph id="ph1">`Reference`</ph> method was zero and the call is made from a context that is not owned by the scheduler.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="registershutdownevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::RegisterShutdownEvent Method</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Causes the Windows event handle passed in the <ph id="ph1">`_Event`</ph> parameter to be signaled when the scheduler shuts down and destroys itself.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>At the time the event is signaled, all work that had been scheduled to the scheduler is complete.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Multiple shutdown events can be registered through this method.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A handle to a Windows event object which will be signaled by the runtime when the scheduler shuts down and destroys itself.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="release"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Release Method</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Decrements the scheduler reference count.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The newly decremented reference count.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This is typically used to manage the lifetime of the scheduler for composition.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="resetdefaultschedulerpolicy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::ResetDefaultSchedulerPolicy Method</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Resets the default scheduler policy to the runtime default.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The next time a default scheduler is created, it will use the runtime default policy settings.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This method can be called while a default scheduler exists within the process.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It will not affect the policy of the existing default scheduler.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>However, if the default scheduler were to shutdown, and a new default were to be created at a later point, the new scheduler would use the runtime default policy settings.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::Scheduler Constructor</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>An object of the <ph id="ph1">`Scheduler`</ph> class can only created using factory methods, or implicitly.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The process' default scheduler is created implicitly when you utilize many of the runtime functions which require a scheduler to be attached to the calling context.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Methods within the <ph id="ph1">`CurrentScheduler`</ph> class and features of the PPL and agents layers typically perform implicit attachment.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can also create a scheduler explicitly through either the <ph id="ph1">`CurrentScheduler::Create`</ph> method or the <ph id="ph2">`Scheduler::Create`</ph> method.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::~Scheduler Destructor</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An object of the <ph id="ph1">`Scheduler`</ph> class is implicitly destroyed when all external references to it cease to exist.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="scheduletask"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::ScheduleTask Method</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Schedules a light-weight task within the scheduler.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The light-weight task will be placed in a schedule group determined by the runtime.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The version that takes the parameter <ph id="ph1">`_Placement`</ph> causes the task to be biased towards executing at the specified location.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A pointer to the function to execute to perform the body of the light-weight task.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A void pointer to the data that will be passed as a parameter to the body of the task.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A reference to a location where the light-weight task will be biased towards executing at.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setdefaultschedulerpolicy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Scheduler::SetDefaultSchedulerPolicy Method</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Allows a user defined policy to be used to create the default scheduler.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This method can be called only when no default scheduler exists within the process.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>After a default policy has been set, it remains in effect until the next valid call to either the <ph id="ph1">`SetDefaultSchedulerPolicy`</ph> or the <bpt id="p1">[</bpt>ResetDefaultSchedulerPolicy<ept id="p1">](#resetdefaultschedulerpolicy)</ept> method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The policy to be set as the default scheduler policy.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SetDefaultSchedulerPolicy`</ph> method is called when a default scheduler already exists within the process, the runtime will throw a <bpt id="p1">[</bpt>default_scheduler_exists<ept id="p1">](default-scheduler-exists-class.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scheduler Class<ept id="p1">](scheduler-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Task Scheduler<ept id="p1">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>