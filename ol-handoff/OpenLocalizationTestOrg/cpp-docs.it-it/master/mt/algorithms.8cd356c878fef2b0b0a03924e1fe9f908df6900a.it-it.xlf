<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5875bfd3c2be9a9a03585f14e6604d9b68355f97</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\algorithms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bc6d3ac1e68548bbb4522629048f0e3aa7648b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6dc982ed302a0c0656797cf3b4ba144d93dae68</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Algorithms | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Algorithms</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Algorithms are a fundamental part of the Standard Template Library.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Algorithms do not work with containers themselves but rather with iterators.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, the same algorithm can be used by most if not all of the STL containers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section discusses the conventions and terminology of the STL algorithms.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The descriptions of the algorithm template functions employ several shorthand phrases:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The phrase "in the range [<bpt id="p1">*</bpt>A<ept id="p1">*</ept>, <bpt id="p2">*</bpt>B<ept id="p2">*</ept>)" means the sequence of zero or more discrete values beginning with <bpt id="p3">*</bpt>A<ept id="p3">*</ept> up to but not including <bpt id="p4">*</bpt>B<ept id="p4">*</ept>. A range is valid only if <bpt id="p5">*</bpt>B<ept id="p5">*</ept> is reachable from <bpt id="p6">*</bpt>A;<ept id="p6">*</ept> you can store <bpt id="p7">*</bpt>A<ept id="p7">*</ept> in an object <bpt id="p8">*</bpt>N<ept id="p8">*</ept> (<bpt id="p9">*</bpt>N<ept id="p9">*</ept><ph id="ph1"> = </ph><bpt id="p10">*</bpt>A<ept id="p10">*</ept>), increment the object zero or more times (++<bpt id="p11">*</bpt>N<ept id="p11">*</ept>), and have the object compare equal to <bpt id="p12">*</bpt>B<ept id="p12">*</ept> after a finite number of increments (N == B<bpt id="p13">*</bpt>).<ept id="p13">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The phrase "each <bpt id="p1">*</bpt>N<ept id="p1">*</ept> in the range [<bpt id="p2">*</bpt>A<ept id="p2">*</ept>, <bpt id="p3">*</bpt>B<ept id="p3">*</ept>)" means that <bpt id="p4">*</bpt>N<ept id="p4">*</ept> begins with the value <bpt id="p5">*</bpt>A<ept id="p5">*</ept> and is incremented zero or more times until it equals the value <bpt id="p6">*</bpt>B<ept id="p6">*</ept>. The case <bpt id="p7">*</bpt>N<ept id="p7">*</ept><ph id="ph1"> == </ph><bpt id="p8">*</bpt>B<ept id="p8">*</ept> is not in the range.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The phrase "the lowest value of <bpt id="p1">*</bpt>N<ept id="p1">*</ept> in the range [<bpt id="p2">*</bpt>A<ept id="p2">*</ept>, <bpt id="p3">*</bpt>B<ept id="p3">*</ept>) such that <bpt id="p4">*</bpt>X<ept id="p4">*</ept>" means that the condition <bpt id="p5">*</bpt>X<ept id="p5">*</ept> is determined for each <bpt id="p6">*</bpt>N<ept id="p6">*</ept> in the range [<bpt id="p7">*</bpt>A<ept id="p7">*</ept>, <bpt id="p8">*</bpt>B<ept id="p8">*</ept>) until the condition <bpt id="p9">*</bpt>X<ept id="p9">*</ept> is met.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The phrase "the highest value of <bpt id="p1">*</bpt>N<ept id="p1">*</ept> in the range [<bpt id="p2">*</bpt>A<ept id="p2">*</ept>, <bpt id="p3">*</bpt>B<ept id="p3">*</ept>) such that <bpt id="p4">*</bpt>X<ept id="p4">*</ept> means that <bpt id="p5">*</bpt>X<ept id="p5">*</ept> is determined for each <bpt id="p6">*</bpt>N<ept id="p6">*</ept> in the range [<bpt id="p7">*</bpt>A<ept id="p7">*</ept>, <bpt id="p8">*</bpt>B<ept id="p8">*</ept>).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The function stores in <ph id="ph1">`K`</ph> a copy of <bpt id="p1">*</bpt>N<ept id="p1">*</ept> each time the condition <bpt id="p2">*</bpt>X<ept id="p2">*</ept> is met.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If any such store occurs, the function replaces the final value of <bpt id="p1">*</bpt>N<ept id="p1">*</ept>, which equals <bpt id="p2">*</bpt>B<ept id="p2">*</ept>, with the value of <ph id="ph1">`K`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For a bidirectional or random-access iterator, however, it can also mean that <bpt id="p1">*</bpt>N<ept id="p1">*</ept> begins with the highest value in the range and is decremented over the range until the condition <bpt id="p2">*</bpt>X<ept id="p2">*</ept> is met.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Expressions such as <bpt id="p1">*</bpt>X<ept id="p1">*</ept><ph id="ph1"> - </ph><bpt id="p2">*</bpt>Y<ept id="p2">*</ept>, where <bpt id="p3">*</bpt>X<ept id="p3">*</ept> and <bpt id="p4">*</bpt>Y<ept id="p4">*</ept> can be iterators other than random-access iterators, are intended in the mathematical sense.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The function does not necessarily evaluate operator<bpt id="p1">**</bpt><ph id="ph1">-</ph><ept id="p1">**</ept> if it must determine such a value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The same is also true for expressions such as <bpt id="p1">*</bpt>X<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>N<ept id="p2">*</ept> and <bpt id="p3">*</bpt>X<ept id="p3">*</ept><ph id="ph2"> - </ph><bpt id="p4">*</bpt>N<ept id="p4">*</ept>, where <bpt id="p5">*</bpt>N<ept id="p5">*</ept> is an integer type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Several algorithms make use of a predicate that performs a pairwise comparison, such as with <ph id="ph1">`operator==`</ph>, to yield a <ph id="ph2">`bool`</ph> result.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The predicate function <ph id="ph1">`operator==`</ph>, or any replacement for it, must not alter either of its operands.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It must yield the same <ph id="ph1">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Several algorithms make use of a predicate that must impose a strict weak ordering on pairs of elements from a sequence.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For the predicate <ph id="ph1">`pr`</ph>(<bpt id="p1">*</bpt>X<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>):</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Strict means that <ph id="ph1">`pr`</ph>(<bpt id="p1">*</bpt>X<ept id="p1">*</ept>, <bpt id="p2">*</bpt>X<ept id="p2">*</ept>) is false.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Weak means that <bpt id="p1">*</bpt>X<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Y<ept id="p2">*</ept> have an equivalent ordering if !<ph id="ph1">`pr`</ph>(<bpt id="p3">*</bpt>X<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Y<ept id="p4">*</ept>) &amp;&amp; !<ph id="ph2">`pr`</ph>(<bpt id="p5">*</bpt>Y<ept id="p5">*</ept>, <bpt id="p6">*</bpt>X<ept id="p6">*</ept>) (<bpt id="p7">*</bpt>X<ept id="p7">*</ept><ph id="ph3"> == </ph><bpt id="p8">*</bpt>Y<ept id="p8">*</ept> does not need to be defined).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Ordering means that <ph id="ph1">`pr`</ph>(<bpt id="p1">*</bpt>X<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) &amp;&amp; <ph id="ph2">`pr`</ph>(<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>, Z) implies <ph id="ph3">`pr`</ph>(<bpt id="p4">*</bpt>X<ept id="p4">*</ept>, Z).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Some of these algorithms implicitly use the predicate <bpt id="p1">*</bpt>X<ept id="p1">*</ept> <ph id="ph1">\&lt;</ph> <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>. Other predicates that typically satisfy the strict weak ordering requirement are <bpt id="p3">*</bpt>X<ept id="p3">*</ept><ph id="ph2"> &gt; </ph><bpt id="p4">*</bpt>Y<ept id="p4">*</ept>, <bpt id="p5">**</bpt>less<ept id="p5">**</ept>(<bpt id="p6">*</bpt>X<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Y<ept id="p7">*</ept>), and <ph id="ph3">`greater`</ph>(<bpt id="p8">*</bpt>X<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Y<ept id="p9">*</ept>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note, however, that predicates such as <bpt id="p1">*</bpt>X<ept id="p1">*</ept> <ph id="ph1">\&lt;</ph><ph id="ph2">= </ph><bpt id="p2">*</bpt>Y<ept id="p2">*</ept> and <bpt id="p3">*</bpt>X<ept id="p3">*</ept><ph id="ph3"> &gt;= </ph><bpt id="p4">*</bpt>Y<ept id="p4">*</ept> do not satisfy this requirement.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A sequence of elements designated by iterators in the range [<ph id="ph1">`First`</ph>, <ph id="ph2">`Last`</ph>) is a sequence ordered by operator<bpt id="p1">**</bpt><ph id="ph3">&lt;</ph><ept id="p1">**</ept> if, for each <bpt id="p2">*</bpt>N<ept id="p2">*</ept> in the range [0, <ph id="ph4">`Last`</ph><ph id="ph5"> - </ph><ph id="ph6">`First`</ph>) and for each <bpt id="p3">*</bpt>M<ept id="p3">*</ept> in the range (N, <ph id="ph7">`Last`</ph><ph id="ph8"> - </ph><ph id="ph9">`First`</ph>) the predicate !(<ph id="ph10">\*</ph>(<ph id="ph11">`First`</ph><ph id="ph12"> + </ph><bpt id="p4">*</bpt>M<ept id="p4">*</ept>) &lt; <ph id="ph13">\*</ph>(<bpt id="p5">*</bpt>First<ept id="p5">*</ept><ph id="ph14"> + </ph><bpt id="p6">*</bpt>N<ept id="p6">*</ept>)) is true.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(Note that the elements are sorted in ascending order.) The predicate function <bpt id="p1">**</bpt>operator&lt;<ept id="p1">**</ept>, or any replacement for it, must not alter either of its operands.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It must yield the same <ph id="ph1">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Moreover, it must impose a strict weak ordering on the operands it compares.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A sequence of elements designated by iterators in the range [<ph id="ph1">`First`</ph>, <ph id="ph2">`Last`</ph>) is a heap ordered by <bpt id="p1">**</bpt>operator&lt;<ept id="p1">**</ept> if, for each <bpt id="p2">*</bpt>N<ept id="p2">*</ept> in the range [1, <ph id="ph3">`Last`</ph><ph id="ph4"> - </ph><ph id="ph5">`First`</ph>) the predicate !(<ph id="ph6">\*</ph><ph id="ph7">`First`</ph><ph id="ph8"> &lt; </ph><ph id="ph9">\*</ph>(<ph id="ph10">`First`</ph><ph id="ph11"> + </ph><bpt id="p3">*</bpt>N<ept id="p3">*</ept>)) is true.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(The first element is the largest.) Its internal structure is otherwise known only to the template functions <bpt id="p1">[</bpt>make_heap<ept id="p1">](http://msdn.microsoft.com/Library/b09f795c-f368-4aa8-b57e-61ee6100ddc2)</ept>, [pop_heap]--brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#pop_heap), and [push_heap]-brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#push_heap).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As with an ordered sequence, the predicate function <bpt id="p1">**</bpt>operator&lt;<ept id="p1">**</ept>, or any replacement for it, must not alter either of its operands, and it must impose a strict weak ordering on the operands it compares.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It must yield the same <ph id="ph1">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The STL algorithms are located in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>algorithm&gt;<ept id="p1">](../standard-library/algorithm.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>numeric&gt;<ept id="p2">](../standard-library/numeric.md)</ept> header files.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>