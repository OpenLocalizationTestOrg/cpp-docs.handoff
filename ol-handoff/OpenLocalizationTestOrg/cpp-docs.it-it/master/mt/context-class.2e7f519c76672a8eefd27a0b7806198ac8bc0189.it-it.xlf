<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2fe5d969765006b3c35f9f8e3a0349932f762f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\context-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2da85df1fc5542172ab9da79b0d76e30c742eced</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">957c00024ebd9aa7f94a213aef43d13b0c2ba8a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Context Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Context Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an abstraction for an execution context.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::~Context Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::Block Method<ept id="p1">](#block)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Blocks the current context.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::CurrentContext Method<ept id="p1">](#currentcontext)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the current context.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::GetId Method<ept id="p1">](#getid)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the context that is unique within the scheduler to which the context belongs.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::GetScheduleGroupId Method<ept id="p1">](#getschedulegroupid)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the schedule group that the context is currently working on.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::GetVirtualProcessorId Method<ept id="p1">](#getvirtualprocessorid)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the virtual processor that the context is currently executing on.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::Id Method<ept id="p1">](#id)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::IsCurrentTaskCollectionCanceling Method<ept id="p1">](#iscurrenttaskcollectioncanceling)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::IsSynchronouslyBlocked Method<ept id="p1">](#issynchronouslyblocked)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Determines whether or not the context is synchronously blocked.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::Oversubscribe Method<ept id="p1">](#oversubscribe)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::ScheduleGroupId Method<ept id="p1">](#schedulegroupid)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the schedule group that the current context is working on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::Unblock Method<ept id="p1">](#unblock)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unblocks the context and causes it to become runnable.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::VirtualProcessorId Method<ept id="p1">](#virtualprocessorid)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the virtual processor that the current context is executing on.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Context::Yield Method<ept id="p1">](#yield)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Yields execution so that another context can execute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If no other context is available to yield to, the scheduler can yield to another operating system thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime scheduler (see <bpt id="p1">[</bpt>Scheduler<ept id="p1">](scheduler-class.md)</ept>) uses execution contexts to execute the work queued to it by your application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A Win32 thread is an example of an execution context on a Windows operating system.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>At any time, the concurrency level of a scheduler is equal to the number of virtual processors granted to it by the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Only a single scheduler context can execute on a virtual processor at a given time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The scheduler is cooperative in nature and an executing context can yield its virtual processor to a different context at any time if it wishes to enter a wait state.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When its wait it satisfied, it cannot resume until an available virtual processor from the scheduler begins executing it.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> concrt.h</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="block"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::Block Method</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Blocks the current context.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the calling context is running on a virtual processor, the virtual processor will find another runnable context to execute or can potentially create a new one.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Block`</ph> method has been called or will be called, you must pair it with a call to the <bpt id="p1">[</bpt>Unblock<ept id="p1">](#unblock)</ept> method from another execution context in order for it to run again.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the <ph id="ph1">`Unblock`</ph> method and the point where the actual method call to <ph id="ph2">`Block`</ph> is made.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Calls to the <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> method do not track the reason for the blocking and unblocking.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Only one object should have ownership of a <ph id="ph1">`Block`</ph><ph id="ph2">- </ph><ph id="ph3">`Unblock`</ph> pair.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This method can throw a variety of exceptions, including <bpt id="p1">[</bpt>scheduler_resource_allocation_error<ept id="p1">](scheduler-resource-allocation-error-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::~Context Destructor</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="currentcontext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::CurrentContext Method</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the current context.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A pointer to the current context.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::GetId Method</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the context that is unique within the scheduler to which the context belongs.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An identifier for the context that is unique within the scheduler to which the context belongs.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getschedulegroupid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::GetScheduleGroupId Method</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the schedule group that the context is currently working on.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An identifier for the schedule group the context is currently working on.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The return value from this method is an instantaneous sampling of the schedule group that the context is executing on.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If this method is called on a context other than the current context, the value can be stale the moment it is returned and cannot be relied upon.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Typically, this method is used for debugging or tracing purposes only.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getvirtualprocessorid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::GetVirtualProcessorId Method</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the virtual processor that the context is currently executing on.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the context is currently executing on a virtual processor, an identifier for the virtual processor that the context is currently executing on; otherwise, the value <ph id="ph1">`-1`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The return value from this method is an instantaneous sampling of the virtual processor that the context is executing on.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This value can be stale the moment it is returned and cannot be relied upon.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Typically, this method is used for debugging or tracing purposes only.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="id"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::Id Method</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If the current context is attached to a scheduler, an identifier for the current context that is unique within the scheduler to which the current context belongs; otherwise, the value <ph id="ph1">`-1`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iscurrenttaskcollectioncanceling"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::IsCurrentTaskCollectionCanceling Method</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If a scheduler is attached to the calling context and a task group is executing a task inline on that context, an indication of whether that task group is in the midst of an active cancellation (or will be shortly); otherwise, the value <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="issynchronouslyblocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::IsSynchronouslyBlocked Method</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Determines whether or not the context is synchronously blocked.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Whether the context is synchronously blocked.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>On the thread scheduler, this would indicate a direct call to the <ph id="ph1">`Context::Block`</ph> method or a synchronization object which was built using the <ph id="ph2">`Context::Block`</ph> method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The return value from this method is an instantaneous sample of whether the context is synchronously blocked.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This value may be stale the moment it is returned and can only be used under very specific circumstances.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_delete"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::operator delete Operator</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Context`</ph> object is destroyed internally by the runtime.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It can not be explicitly deleted.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A pointer to the object to be deleted.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="oversubscribe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::Oversubscribe Method</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, an indication that an extra virtual processor should be added for the duration of the oversubscription.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, an indication that the oversubscription should end and the previously added virtual processor should be removed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="schedulegroupid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::ScheduleGroupId Method</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the schedule group that the current context is working on.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the current context is attached to a scheduler and working on a schedule group, an identifier for the scheduler group that the current context is working on; otherwise, the value <ph id="ph1">`-1`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="unblock"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::Unblock Method</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Unblocks the context and causes it to become runnable.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It is perfectly legal for a call to the <ph id="ph1">`Unblock`</ph> method to come before a corresponding call to the <bpt id="p1">[</bpt>Block<ept id="p1">](#block)</ept> method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>As long as calls to the <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> methods are properly paired, the runtime properly handles the natural race of either ordering.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Unblock`</ph> call coming before a <ph id="ph2">`Block`</ph> call simply negates the effect of the <ph id="ph3">`Block`</ph> call.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>There are several exceptions which can be thrown from this method.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If a context attempts to call the <ph id="ph1">`Unblock`</ph> method on itself, a <bpt id="p1">[</bpt>context_self_unblock<ept id="p1">](context-self-unblock-class.md)</ept> exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If calls to <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> are not properly paired (for example, two calls to <ph id="ph3">`Unblock`</ph> are made for a context which is currently running), a <bpt id="p1">[</bpt>context_unblock_unbalanced<ept id="p1">](context-unblock-unbalanced-class.md)</ept> exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the <ph id="ph1">`Unblock`</ph> method and the point where the actual method call to <ph id="ph2">`Block`</ph> is made.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock).</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Calls to the <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> method do not track the reason for the blocking and unblocking.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Only one object should have ownership of a <ph id="ph1">`Block`</ph> and <ph id="ph2">`Unblock`</ph> pair.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="virtualprocessorid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::VirtualProcessorId Method</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns an identifier for the virtual processor that the current context is executing on.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the current context is attached to a scheduler, an identifier for the virtual processor that the current context is executing on; otherwise, the value <ph id="ph1">`-1`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The return value from this method is an instantaneous sampling of the virtual processor that the current context is executing on.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This value can be stale the moment it is returned and cannot be relied upon.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Typically, this method is used for debugging or tracing purposes only.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="yield"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::Yield Method</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Yields execution so that another context can execute.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If no other context is available to yield to, the scheduler can yield to another operating system thread.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="yieldexecution"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  Context::YieldExecution Method</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Yields execution so that another context can execute.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If no other context is available to yield to, the scheduler can yield to another operating system thread.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This function is new in <ph id="ph1">[!INCLUDE[vs_dev14](../../../ide/includes/vs_dev14_md.md)]</ph> and is identical to the <bpt id="p1">[</bpt>Yield<ept id="p1">](#yield)</ept> function but does not conflict with the Yield macro in Windows.h.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scheduler Class<ept id="p1">](scheduler-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Task Scheduler<ept id="p1">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>