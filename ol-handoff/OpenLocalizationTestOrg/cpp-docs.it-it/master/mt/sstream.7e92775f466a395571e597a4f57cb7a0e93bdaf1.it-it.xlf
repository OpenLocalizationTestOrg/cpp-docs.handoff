<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">736a3a9eed879f9ea77a4a4ae1a2c4d45457a1df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\sstream.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c35d5b1eb3f149febc0e2be7cb16e19ba88d2a33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7578151c4facc51d8a2e421b83a192fc8ad2fb1a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>sstream<ph id="ph2">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>sstream<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines several template classes that support iostreams operations on sequences stored in an allocated array object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Such sequences are easily converted to and from objects of template class <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reference to an <ph id="ph1">`sstream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reference to an <ph id="ph1">`sstream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Objects of type <ph id="ph1">`char *`</ph> can use the functionality in <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>strstream&gt;<ept id="p1">](../standard-library/strstream.md)</ept> for streaming.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`&lt;strstream&gt;`</ph> is deprecated and the use of <ph id="ph2">`&lt;sstream&gt;`</ph> is encouraged.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>istringstream<ept id="p1">](../standard-library/sstream-typedefs.md#istringstream)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_istringstream`</ph> specialized on a <ph id="ph2">`char`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ostringstream<ept id="p1">](../standard-library/sstream-typedefs.md#ostringstream)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_ostringstream`</ph> specialized on a <ph id="ph2">`char`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>stringbuf<ept id="p1">](../standard-library/sstream-typedefs.md#stringbuf)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_stringbuf`</ph> specialized on a <ph id="ph2">`char`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>stringstream<ept id="p1">](../standard-library/sstream-typedefs.md#stringstream)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_stringstream`</ph> specialized on a <ph id="ph2">`char`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wistringstream<ept id="p1">](../standard-library/sstream-typedefs.md#wistringstream)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_istringstream`</ph> specialized on a <ph id="ph2">`wchar_t`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wostringstream<ept id="p1">](../standard-library/sstream-typedefs.md#wostringstream)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_ostringstream`</ph> specialized on a <ph id="ph2">`wchar_t`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wstringbuf<ept id="p1">](../standard-library/sstream-typedefs.md#wstringbuf)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_stringbuf`</ph> specialized on a <ph id="ph2">`wchar_t`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wstringstream<ept id="p1">](../standard-library/sstream-typedefs.md#wstringstream)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creates a type <ph id="ph1">`basic_stringstream`</ph> specialized on a <ph id="ph2">`wchar_t`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Manipulators</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/sstream-functions.md#sstream_swap)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exchanges the values between two <ph id="ph1">`sstream`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Describes a stream buffer that controls the transmission of elements of type <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, whose character traits are determined by the class <bpt id="p2">**</bpt>Tr<ept id="p2">**</ept>, to and from a sequence of elements stored in an array object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_istringstream<ept id="p1">](../standard-library/basic-istringstream-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Describes an object that controls extraction of elements and encoded objects from a stream buffer of class <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt;</ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;, with elements of type <bpt id="p4">**</bpt>Elem<ept id="p4">**</ept>, whose character traits are determined by the class <bpt id="p5">**</bpt>Tr<ept id="p5">**</ept>, and whose elements are allocated by an allocator of class <ph id="ph3">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_ostringstream<ept id="p1">](../standard-library/basic-ostringstream-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Describes an object that controls insertion of elements and encoded objects into a stream buffer of class <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt;</ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;, with elements of type <bpt id="p4">**</bpt>Elem<ept id="p4">**</ept>, whose character traits are determined by the class <bpt id="p5">**</bpt>Tr<ept id="p5">**</ept>, and whose elements are allocated by an allocator of class <ph id="ph3">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_stringstream<ept id="p1">](../standard-library/basic-stringstream-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Describes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt;</ph><bpt id="p2">**</bpt>Elem<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, <ph id="ph2">`Alloc`</ph>&gt;, with elements of type <bpt id="p4">**</bpt>Elem<ept id="p4">**</ept>, whose character traits are determined by the class <bpt id="p5">**</bpt>Tr<ept id="p5">**</ept>, and whose elements are allocated by an allocator of class <ph id="ph3">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>sstream&gt;</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostream Programming<ept id="p1">](../standard-library/iostream-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostreams Conventions<ept id="p1">](../standard-library/iostreams-conventions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>