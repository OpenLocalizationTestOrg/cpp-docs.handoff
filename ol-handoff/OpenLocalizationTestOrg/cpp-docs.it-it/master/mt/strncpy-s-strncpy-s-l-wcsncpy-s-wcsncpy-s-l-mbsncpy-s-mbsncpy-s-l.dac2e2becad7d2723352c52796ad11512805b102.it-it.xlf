<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">894903b82a5c3cdc844e86cda19676c1fefa17df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db623bae5b3974f6b64e50b90575733b36f0bdfe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8553f43d2b2266725f70eab2be7de8fae45d1a3a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Copies characters of one string to another.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These versions of <bpt id="p1">[</bpt>strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l<ept id="p1">](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)</ept> have security enhancements, as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `_mbsncpy_s`</ph> and <ph id="ph2">`_mbsncpy_s_l`</ph> cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Destination string.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The size of the destination string, in characters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Source string.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Number of characters to be copied, or <bpt id="p1">[</bpt>_TRUNCATE<ept id="p1">](../../c-runtime-library/truncate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Zero if successful, <ph id="ph1">`STRUNCATE`</ph> if truncation occurred, otherwise an error code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Error Conditions</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Contents of <ph id="ph1">`strDest`</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>not modified</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strDest`</ph>[0] set to 0</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>not modified</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>not <ph id="ph1">`NULL`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>too small</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strDest`</ph>[0] set to 0</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These functions try to copy the first <ph id="ph1">`D`</ph> characters of <ph id="ph2">`strSource`</ph> to <ph id="ph3">`strDest`</ph>, where <ph id="ph4">`D`</ph> is the lesser of <ph id="ph5">`count`</ph> and the length of <ph id="ph6">`strSource`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If those <ph id="ph1">`D`</ph> characters will fit within <ph id="ph2">`strDest`</ph> (whose size is given as <ph id="ph3">`numberOfElements`</ph>) and still leave room for a null terminator, then those characters are copied and a terminating null is appended; otherwise, <ph id="ph4">`strDest`</ph>[0] is set to the null character and the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There is an exception to the above paragraph.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count`</ph> is <ph id="ph2">`_TRUNCATE`</ph>, then as much of <ph id="ph3">`strSource`</ph> as will fit into <ph id="ph4">`strDest`</ph> is copied while still leaving room for the terminating null which is always appended.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>means that we are asking <ph id="ph1">`strncpy_s`</ph> to copy five characters into a buffer five bytes long; this would leave no space for the null terminator, hence <ph id="ph2">`strncpy_s`</ph> zeroes out the string and calls the invalid parameter handler.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If truncation behavior is needed, use <ph id="ph1">`_TRUNCATE`</ph> or (<ph id="ph2">`size`</ph> â€“ 1):</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that unlike <ph id="ph1">`strncpy`</ph>, if <ph id="ph2">`count`</ph> is greater than the length of <ph id="ph3">`strSource`</ph>, the destination string is NOT padded with null characters up to length <ph id="ph4">`count`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The behavior of <ph id="ph1">`strncpy_s`</ph> is undefined if the source and destination strings overlap.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`strDest`</ph> or <ph id="ph2">`strSource`</ph> is <ph id="ph3">`NULL`</ph>, or <ph id="ph4">`numberOfElements`</ph> is 0, the invalid parameter handler is invoked.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns <ph id="ph1">`EINVAL`</ph> and sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcsncpy_s`</ph> and <ph id="ph2">`_mbsncpy_s`</ph> are wide-character and multibyte-character versions of <ph id="ph3">`strncpy_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The arguments and return value of <ph id="ph1">`wcsncpy_s`</ph> and <ph id="ph2">`mbsncpy_s`</ph>do vary accordingly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These six functions behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The output value is affected by the setting of the <ph id="ph1">`LC_CTYPE`</ph> category setting of the locale; see <bpt id="p1">[</bpt>setlocale<ept id="p1">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The versions of these functions without the <ph id="ph1">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id="ph2">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The debug versions of these functions first fill the buffer with 0xFD.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To disable this behavior, use <bpt id="p1">[</bpt>_CrtSetDebugFillThreshold<ept id="p1">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_strncpy_s_l, <ph id="ph1">`_wcsncpy_s_l`</ph> and <ph id="ph2">`_mbsncpy_s_l`</ph> have no locale dependence and are provided just for <ph id="ph3">`_tcsncpy_s_l`</ph> and are not intended to be called directly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strncpy_s`</ph>, <ph id="ph2">`_strncpy_s_l`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcsncpy_s`</ph>, <ph id="ph2">`_wcsncpy_s_l`</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt; or <ph id="ph2">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbsncpy_s`</ph>, <ph id="ph2">`_mbsncpy_s_l`</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::String::Copy<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.string.copy.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Manipulation<ept id="p1">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interpretation of Multibyte-Character Sequences<ept id="p1">](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_mbsnbcpy, _mbsnbcpy_l<ept id="p1">](../../c-runtime-library/reference/mbsnbcpy-mbsnbcpy-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strcat_s, wcscat_s, _mbscat_s<ept id="p1">](../../c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strcmp, wcscmp, _mbscmp<ept id="p1">](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strcpy_s, wcscpy_s, _mbscpy_s<ept id="p1">](../../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l<ept id="p1">](../../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strncmp, wcsncmp, _mbsncmp, _mbsncmp_l<ept id="p1">](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l<ept id="p1">](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strrchr, wcsrchr, _mbsrchr, _mbsrchr_l<ept id="p1">](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l<ept id="p1">](../../c-runtime-library/reference/strset-strset-l-wcsset-wcsset-l-mbsset-mbsset-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strspn, wcsspn, _mbsspn, _mbsspn_l<ept id="p1">](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>