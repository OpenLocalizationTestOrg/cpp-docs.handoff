<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27a35d56ca9b31120dd5c239f328dc69084f39cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwaitcursor-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebff829e5a464d5aab6407ff767732ca23559587</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b048b8add39bc1fe79d14e0f1336827cb227a41</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWaitCursor Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWaitCursor Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a one-line way to show a wait cursor, which is usually displayed as an hourglass, while you're doing a lengthy operation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWaitCursor::CWaitCursor<ept id="p1">](#cwaitcursor__cwaitcursor)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWaitCursor`</ph> object and displays the wait cursor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWaitCursor::Restore<ept id="p1">](#cwaitcursor__restore)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Restores the wait cursor after it's been changed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWaitCursor`</ph> does not have a base class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Good Windows programming practices require that you display a wait cursor whenever you're performing an operation that takes a noticeable amount of time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To display a wait cursor, just define a <ph id="ph1">`CWaitCursor`</ph> variable before the code that performs the lengthy operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The object's constructor automatically causes the wait cursor to be displayed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the object goes out of scope (at the end of the block in which the <ph id="ph1">`CWaitCursor`</ph> object is declared), its destructor sets the cursor to the previous cursor.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In other words, the object performs the necessary clean-up automatically.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because of how their constructors and destructors work, <ph id="ph1">`CWaitCursor`</ph> objects are always declared as local variables â€” they're never declared as global variables nor are they allocated with <bpt id="p1">**</bpt>new<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you perform an operation which might cause the cursor to be changed, such as displaying a message box or dialog box, call the <bpt id="p1">[</bpt>Restore<ept id="p1">](#cwaitcursor__restore)</ept> member function to restore the wait cursor.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It is okay to call <bpt id="p1">**</bpt>Restore<ept id="p1">**</ept> even when a wait cursor is currently displayed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Another way to display a wait cursor is to use the combination of <bpt id="p1">[</bpt>CCmdTarget::BeginWaitCursor<ept id="p1">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor)</ept>, <bpt id="p2">[</bpt>CCmdTarget::EndWaitCursor<ept id="p2">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor)</ept>, and perhaps <bpt id="p3">[</bpt>CCmdTarget::RestoreWaitCursor<ept id="p3">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`CWaitCursor`</ph> is easier to use because you don't need to set the cursor to the previous cursor when you're done with the lengthy operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>MFC sets and restores the cursor using the <bpt id="p1">[</bpt>CWinApp::DoWaitCursor<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__dowaitcursor)</ept> virtual function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can override this function to provide custom behavior.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#62<ept id="p2">](../../mfc/reference/codesnippet/cpp/cwaitcursor-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwaitcursor__cwaitcursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWaitCursor::CWaitCursor</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To display a wait cursor, just declare a <ph id="ph1">`CWaitCursor`</ph> object before the code that performs the lengthy operation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The constructor automatically causes the wait cursor to be displayed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the object goes out of scope (at the end of the block in which the <ph id="ph1">`CWaitCursor`</ph> object is declared), its destructor sets the cursor to the previous cursor.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In other words, the object performs the necessary clean-up automatically.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can take advantage of the fact that the destructor is called at the end of the block (which might be before the end of the function) to make the wait cursor active in only part of your function.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This technique is shown in the second example below.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because of how their constructors and destructors work, <ph id="ph1">`CWaitCursor`</ph> objects are always declared as local variables â€” they're never declared as global variables, nor are they allocated with <bpt id="p1">**</bpt>new<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#63<ept id="p2">](../../mfc/reference/codesnippet/cpp/cwaitcursor-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cwaitcursor__restore"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CWaitCursor::Restore</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To restore the wait cursor, call this function after performing an operation, such as displaying a message box or dialog box, which might change the wait cursor to another cursor.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It is OK to call <bpt id="p1">**</bpt>Restore<ept id="p1">**</ept> even when the wait cursor is currently displayed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you need to restore the wait cursor while in a function other than the one in which the <ph id="ph1">`CWaitCursor`</ph> object is declared, you can call <bpt id="p1">[</bpt>CCmdTarget::RestoreWaitCursor<ept id="p1">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCWindowing#64<ept id="p2">](../../mfc/reference/codesnippet/cpp/cwaitcursor-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget::BeginWaitCursor<ept id="p1">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget::EndWaitCursor<ept id="p1">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget::RestoreWaitCursor<ept id="p1">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWinApp::DoWaitCursor<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__dowaitcursor)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How Do I: Change the Mouse Cursor in an Microsoft Foundation Class Application<ept id="p1">](http://go.microsoft.com/fwlink/linkid=128044)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>