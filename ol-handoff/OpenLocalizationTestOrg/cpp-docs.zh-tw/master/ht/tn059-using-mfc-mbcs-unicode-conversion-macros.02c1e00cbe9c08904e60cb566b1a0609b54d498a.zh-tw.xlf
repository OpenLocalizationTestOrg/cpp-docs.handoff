<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08d8d1252dcf016ea9bb596ac986a3a649f2f44a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn059-using-mfc-mbcs-unicode-conversion-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77c2a53ab4d2f4d992f6868eb79330aa3bfd66b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52e131b46bfba001c0d5a429f8ff77b0ca0d2ee2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN059: Using MFC MBCS-Unicode Conversion Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN059: Using MFC MBCS/Unicode Conversion Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes how to use the macros for MBCS/Unicode conversion, which are defined in AFXPRIV.H.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These macros are most useful if your application deals directly with the OLE API or for some reason, often needs to convert between Unicode and MBCS.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In MFC 3.x, a special DLL was used (MFCANS32.DLL) to automatically convert between Unicode and MBCS when OLE interfaces were called.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This DLL was an almost transparent layer that allowed OLE applications to be written as if the OLE APIs and interfaces were MBCS, even though they are always Unicode (except on the Macintosh).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>While this layer was convenient and allowed applications to be quickly ported from Win16 to Win32 (MFC, Microsoft Word, Microsoft Excel, and VBA, are just some of the Microsoft applications that used this technology), it had a sometimes significant performance hit.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For this reason, MFC 4.x does not use this DLL and instead talks directly to the Unicode OLE interfaces.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To do this, MFC needs to convert to Unicode to MBCS when making a call to an OLE interface, and often needs to convert to MBCS from Unicode when implementing an OLE interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In order to handle this efficiently and easily, a number of macros were created to make this conversion easier.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One of the biggest hurdles of creating such a set of macros is memory allocation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because the strings cannot be converted in place, new memory to hold the converted results must be allocated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This could have been done with code similar to the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This approach as a number of problems.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The main problem is that it is a lot of code to write, test, and debug.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Something that was a simple function call, is now much more complex.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition, there is a significant runtime overhead in doing so.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Memory has to be allocated on the heap and freed each time a conversion is done.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Finally, the code above would need to have appropriate <ph id="ph1">`#ifdefs`</ph> added for Unicode and Macintosh builds (which don't require this conversion to take place).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The solution we came up with is to create some macros which 1) mask the difference between the various platforms, and 2) use an efficient memory allocation scheme, and 3) are easy to insert into the existing source code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is an example of one of the definitions:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using this macro instead of the code above and things are much simpler:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There are extra calls where conversion is necessary, but using the macros is simple and effective.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The implementation of each macro uses the _alloca() function to allocate memory from the stack instead of the heap.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Allocating memory from the stack is much faster than allocating memory on the heap, and the memory is automatically freed when the function is exited.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition, the macros avoid calling <bpt id="p1">**</bpt>MultiByteToWideChar<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>WideCharToMultiByte<ept id="p2">**</ept>) more than one time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is done by allocating a little bit more memory than is necessary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We know that an MBC will convert into at most one <bpt id="p1">**</bpt>WCHAR<ept id="p1">**</ept> and that for each <bpt id="p2">**</bpt>WCHAR<ept id="p2">**</ept> we will have a maximum of two MBC bytes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By allocating a little more than necessary, but always enough to handle the conversion the second call second call to the conversion function is avoided.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The call to the helper function <bpt id="p1">**</bpt>AfxA2Whelper<ept id="p1">**</ept> reduces the number of argument pushes that must be done in order to perform the conversion (this results in smaller code, than if it called <bpt id="p2">**</bpt>MultiByteToWideChar<ept id="p2">**</ept> directly).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In order to for the macros to have space to store the a temporary length, it is necessary to declare a local variable called _convert that does this in each function that uses the conversion macros.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is done by invoking the <bpt id="p1">**</bpt>USES_CONVERSION<ept id="p1">**</ept> macro as seen above in the example.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There are both generic conversion macros and OLE specific macros.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These two different macro sets are discussed below.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All of the macros reside in AFXPRIV.H.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generic Conversion Macros</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The generic conversion macros form the underlying mechanism.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The macro example and implementation shown in the previous section, A2W, is one such "generic" macro.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is not related to OLE specifically.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The set of generic macros is listed below:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Besides doing text conversions, there are also macros and helper functions for converting <ph id="ph1">`TEXTMETRIC`</ph>, <ph id="ph2">`DEVMODE`</ph>, <ph id="ph3">`BSTR`</ph>, and OLE allocated strings.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>These macros are beyond the scope of this discussion – refer to AFXPRIV.H for more information on those macros.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>OLE Conversion Macros</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The OLE conversion macros are designed specifically for handling functions that expect <bpt id="p1">**</bpt>OLESTR<ept id="p1">**</ept> characters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you examine the OLE headers, you will see many references to <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OLECHAR<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These types are used to refer to the type of characters used in OLE interfaces in a way that is not specific to the platform.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OLECHAR<ept id="p1">**</ept> maps to <ph id="ph1">`char`</ph> in Win16 and Macintosh platforms and <bpt id="p2">**</bpt>WCHAR<ept id="p2">**</ept> in Win32.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order to keep the number of <bpt id="p1">**</bpt>#ifdef<ept id="p1">**</ept> directives in the MFC code to a minimum we have a similar macro for each conversion that where OLE strings are involved.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following macros are the most commonly used:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Again, there are similar macros for doing <ph id="ph1">`TEXTMETRIC`</ph>, <ph id="ph2">`DEVMODE`</ph>, <ph id="ph3">`BSTR`</ph>, and OLE allocated strings.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Refer to AFXPRIV.H for more information.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Other Considerations</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Do not use the macros in a tight loop.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, you do not want to write the following kind of code:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The code above could result in allocating megabytes of memory on the stack depending on what the contents of the string <ph id="ph1">`lpsz`</ph> is!</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It also takes time to convert the string for each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, move such constant conversions out of the loop:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the string is not constant, then encapsulate the method call into a function.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This will allow the conversion buffer to be freed each time.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Never return the result of one of the macros, unless the return value implies making a copy of the data before the return.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, this code is bad:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The code above could be fixed by changing the return value to something that copies the value:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The macros are easy to use and easy to insert into your code, but as you can tell from the caveats above, you need to be careful when using them.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>