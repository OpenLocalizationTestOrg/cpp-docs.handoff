<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8947cec93fd8000d9908b6dbcb472c33a14455d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwinappex-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6dff612e644e0b210079222d4886fe23a90fa8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">093df5889466a96b9e10500a4a06663f1be2c8a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWinAppEx Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWinAppEx Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>handles the application state, saves the state to the registry, loads the state from the registry, initializes application managers, and provides links to those same application managers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CWinAppEx::CWinAppEx</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinAppEx`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CWinAppEx::CleanState</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Removes information about the application from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableLoadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies whether the application will load the initial size and location of the main frame window from the registry.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableTearOffMenus</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Enables tear-off menus for the application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableUserTools</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enables the user to create custom menu commands in the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ExitInstance</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called by the framework from within the <ph id="ph1">`Run`</ph> member function to exit this instance of the application.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CWinApp::ExitInstance<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__exitinstance)</ept>.)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetBinary</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reads binary data that is associated with the specified registry value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetContextMenuManager</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersion</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersionMajor</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the major version of the application saved in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersionMinor</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the minor version of the application saved in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetInt</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reads numeric data that is associated with the specified value from the registry.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetKeyboardManager</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CKeyboardManager<ept id="p1">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetMouseManager</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CMouseManager<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetObject</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Reads <ph id="ph1">`CObject`</ph>-derived data that is associated with the specified value from the registry.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetRegSectionPath</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns a string that is the path of a registry key.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This path concatenates the supplied relative path with the application path.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetRegistryBase</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns the registry path for the application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionBinary</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Reads binary data that is associated with the specified key and value from the registry.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionInt</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Reads numeric data from the registry associated with the specified key and value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionObject</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reads <ph id="ph1">`CObject`</ph> data that is associated with the specified key and value from the registry.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionString</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Reads string data that is associated with the specified key and value from the registry.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetShellManager</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CShellManager<ept id="p1">](../../mfc/reference/cshellmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetString</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Reads string data that is associated with the specified value from the registry.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetTooltipManager</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CTooltipManager<ept id="p1">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetUserToolsManager</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CUserToolsManager<ept id="p1">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitContextMenuManager</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitKeyboardManager</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CKeyboardManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitMouseManager</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CMouseManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitShellManager</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CShellManager`</ph> class</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitTooltipManager</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">`CTooltipManager`</ph> class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CWinAppEx::IsResourceSmartUpdate</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CWinAppEx::IsStateExists</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified key is in the registry.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadState</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Loads the application state from the registry.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnAppContextHelp</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user requests context help for the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnViewDoubleClick</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Calls the user-defined command when the user double-clicks anywhere in the application.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnWorkspaceIdle</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SaveState</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Writes the state of the application framework to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SetRegistryBase</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sets the path of the default registry key.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This key will serve as a root for all subsequent registry calls.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ShowPopupMenu</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Displays a popup menu.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteBinary</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Writes the binary data to the specified registry value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteInt</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Writes the numeric data to the specified registry value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteObject</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Writes data that is derived from the <bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> to the specified registry value.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionBinary</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Writes the binary data to a value of the specified registry key.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionInt</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Writes the numeric data to a value of the specified registry key.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionObject</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Writes data derived from the <ph id="ph1">`CObject`</ph> class to a value of the specified registry key.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionString</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Writes the string data to a value of the specified registry key.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteString</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Writes the string data to the specified registry value.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadCustomState</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Called by the framework when the application state has been loaded.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Called by the framework when it loads the size and location of your application from the registry.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The loaded data includes the size and location of the main frame at the time your application last closed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnClosingMainFrame</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Called by the framework when a main frame window is processing <ph id="ph1">`WM_CLOSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CWinAppEx::PreLoadState</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Called by the framework immediately before the application state is loaded.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CWinAppEx::PreSaveState</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Called by the framework immediately before the application state is saved.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ReloadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Reloads the size and location of the supplied window from the registry</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SaveCustomState</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Called by the framework after it writes the application state to the registry.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CWinAppEx::StoreWindowPlacement</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Called by the framework to write the size and location of the main frame to the registry.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CWinAppEx::m_bForceImageReset</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specifies whether the framework will reset all toolbar images when the frame window that contains the toolbar is loaded.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Much of the functionality provided by the MFC framework depends on the <ph id="ph1">`CWinAppEx`</ph> class.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can incorporate the <ph id="ph1">`CWinAppEx`</ph> class into your application in one of two ways:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CWinAppEx`</ph> class in the main thread.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Derive the main application class from <ph id="ph1">`CWinAppEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After you incorporate <ph id="ph1">`CWinAppEx`</ph> into your application, you can initialize any one of the application managers.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Before you use an application manager, you must initialize it by calling the appropriate initialize method.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To obtain a pointer to a specific manager, call the associated get method.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinAppEx`</ph> class manages the following application managers: <bpt id="p1">[</bpt>CMouseManager Class<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id="p2">[</bpt>CContextMenuManager Class<ept id="p2">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id="p3">[</bpt>CKeyboardManager Class<ept id="p3">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, <bpt id="p4">[</bpt>CUserToolsManager Class<ept id="p4">](../../mfc/reference/cusertoolsmanager-class.md)</ept>, and <bpt id="p5">[</bpt>CMenuTearOffManager Class<ept id="p5">](../../mfc/reference/cmenutearoffmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CWinThread</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CWinApp</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CWinAppEx</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwinappex.h</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CWinAppEx::CleanState</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Removes all the information about the application from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A string that contains a path of a registry key.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Nonzero if the method was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This method clears application data from a specific section of the registry.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can specify the section to clear by using the parameter <ph id="ph1">`lpszSectionName`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszSectionName`</ph> is <ph id="ph2">`NULL`</ph>, this method will use the default registry path stored in the <ph id="ph3">`CWinAppEx`</ph> object.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To get the default registry path, use <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>CWinAppEx::CWinAppEx</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinAppEx`</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that specifies whether the workspace object should detect and handle resource updates.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinAppEx`</ph> class has initialization methods, provides functionality for saving and loading application information to the registry, and controls global application settings.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>It also enables you to use global managers such as the <bpt id="p1">[</bpt>CKeyboardManager Class<ept id="p1">](../../mfc/reference/ckeyboardmanager-class.md)</ept> and the <bpt id="p2">[</bpt>CUserToolsManager Class<ept id="p2">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Each application can have only one instance of the <ph id="ph1">`CWinAppEx`</ph> class.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableLoadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Specifies whether the application will load the initial size and location of the main frame window from the registry.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Specifies whether the application loads the initial size and location of the main frame window from the registry.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>By default, the size and location of the main frame is loaded from the registry together with other application settings.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This occurs during <bpt id="p1">[</bpt>CWinAppEx::LoadState<ept id="p1">](#cwinappex__loadstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If you do not want to load the initial window placement from the registry, call this method with <ph id="ph1">`bEnable`</ph> set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableTearOffMenus</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Creates and initializes a <bpt id="p1">[</bpt>CMenuTearOffManager<ept id="p1">](../../mfc/reference/cmenutearoffmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A string that contains the path of a registry key.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The application uses this registry key to store information for the tear-off menus.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The first tear off menu ID.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The last tear off menu ID.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>if the <ph id="ph1">`CMenuTearOffManager`</ph> is created and initialized successfully; <ph id="ph2">`false`</ph> if an error occurs or if the <ph id="ph3">`CMenuTearOffManager`</ph> already exists.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Use this function to enable tear-off menus in your application.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>You should call this function from <ph id="ph1">`InitInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>CWinAppEx::EnableUserTools</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Enables the user to create custom menu commands that reduce keystrokes in your application.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This method creates a <bpt id="p1">[</bpt>CUserToolsManager<ept id="p1">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>An unsigned integer that the framework uses as a placeholder for the command ID of the user tools menu.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The command ID for the first user tool command.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The command ID for the last user tool command.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A class that the <ph id="ph1">`CUserToolsManager`</ph> object uses to create new user tools.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The argument menu ID.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The menu ID for the initial tool directory.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>if the method creates and initializes a <ph id="ph1">`CUserToolsManager`</ph> object; <ph id="ph2">`FALSE`</ph> if the method fails or if a <ph id="ph3">`CUserToolsManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>When you enable user-defined tools, the framework automatically supports a dynamic menu that can be extended during customization.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The framework associates each new item with an external command.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The framework invokes these commands when the user selects the appropriate item from the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Every time the user adds a new item, the framework creates a new object.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The class type for the new object is defined by <ph id="ph1">`pToolRTC`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pToolRTC`</ph> class type must be derived from the <bpt id="p1">[</bpt>CUserTool Class<ept id="p1">](../../mfc/reference/cusertool-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For more information about user tools and how to incorporate them into your application, see <bpt id="p1">[</bpt>User-defined Tools<ept id="p1">](../../mfc/user-defined-tools.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ExitInstance</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetBinary</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Reads binary data from a specified registry key.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A pointer to the buffer that the method fills with the binary data.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A pointer to an unsigned integer that the method uses to write the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>if successful; <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This method reads binary data written to the registry.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To write data to the registry, use the methods <bpt id="p1">[</bpt>CWinAppEx::WriteBinary<ept id="p1">](#cwinappex__writebinary)</ept> and <bpt id="p2">[</bpt>CWinAppEx::WriteSectionBinary<ept id="p2">](#cwinappex__writesectionbinary)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetContextMenuManager</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If the CContextMenuManager object is not initialized, this function calls <bpt id="p1">[</bpt>CWinAppEx::InitContextMenuManager<ept id="p1">](#cwinappex__initcontextmenumanager)</ept> before it returns a pointer.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersion</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersionMajor</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Returns the major version of the application that is saved in the Windows registry when you call <bpt id="p1">[</bpt>CWinAppEx::SaveState<ept id="p1">](#cwinappex__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>An integer value that contains the major version number.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetDataVersionMinor</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Returns the minor version of the application that is saved in the Windows registry when you call <bpt id="p1">[</bpt>CWinAppEx::SaveState<ept id="p1">](#cwinappex__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An integer value that contains the minor version number.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetInt</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Reads integer data from a specified registry key.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry entry.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The default value that the method returns if the specified registry entry does not exist.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The registry data if the method was successful; otherwise <ph id="ph1">`nDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This method reads integer data from the registry.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>If there is no integer data associated with the registry key indicated by <ph id="ph1">`lpszEntry`</ph>, this method returns <ph id="ph2">`nDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>To write data to the registry, use the methods <bpt id="p1">[</bpt>CWinAppEx::WriteSectionInt<ept id="p1">](#cwinappex__writesectionint)</ept> and <bpt id="p2">[</bpt>CWinAppEx::WriteInt<ept id="p2">](#cwinappex__writeint)</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetKeyboardManager</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CKeyboardManager<ept id="p1">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CKeyboardManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If the keyboard manager is not initialized, this function calls <bpt id="p1">[</bpt>CWinAppEx::InitKeyboardManager<ept id="p1">](#cwinappex__initkeyboardmanager)</ept> before it returns a pointer.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetMouseManager</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CMouseManager<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CMouseManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>If the mouse manager is not initialized,, this function calls <bpt id="p1">[</bpt>CWinAppEx::InitMouseManager<ept id="p1">](#cwinappex__initmousemanager)</ept> before it returns a pointer.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetObject</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Reads <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept>-dervied data from the registry.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry entry.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The method uses this reference to store the registry data.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Nonzero if the method was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This method reads data from the registry that is derived from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>To write <ph id="ph1">`CObject`</ph> data to the registry, use either <bpt id="p1">[</bpt>CWinAppEx::WriteObject<ept id="p1">](#cwinappex__writeobject)</ept> or <bpt id="p2">[</bpt>CWinAppEx::WriteSectionObject<ept id="p2">](#cwinappex__writesectionobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry that is located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetRegistryBase</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Retrieves the default registry path for the application.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A string that contains the path of the default registry location.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>All methods of the <bpt id="p1">[</bpt>CWinAppEx Class<ept id="p1">](../../mfc/reference/cwinappex-class.md)</ept> that access the registry start in a default location.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Use this method to retrieve a path of the default registry location.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CWinAppEx::SetRegistryBase<ept id="p1">](#cwinappex__setregistrybase)</ept> to change the default registry location.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetRegSectionPath</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Creates and returns the absolute path of a registry key.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> that contains the absolute path of a registry key.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This method defines the registry key's absolute path by appending the relative path in <ph id="ph1">`szSectionAdd`</ph> to the default registry location for your application.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>To get the default registry key, use the method <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionBinary</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Reads binary data from the registry.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A string that contains the value to read.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A pointer to the buffer where the method stores the data.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A pointer to an unsigned integer.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The method writes the size of <ph id="ph1">`ppData`</ph> to this parameter.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>if successful; otherwise <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This method reads binary data that is written to the registry using the methods <bpt id="p1">[</bpt>CWinAppEx::WriteBinary<ept id="p1">](#cwinappex__writebinary)</ept> and <bpt id="p2">[</bpt>CWinAppEx::WriteSectionBinary<ept id="p2">](#cwinappex__writesectionbinary)</ept>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionInt</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Reads integer data from the registry.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>A string that contains the value to read.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The default value to return if the specified value does not exist.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The integer data that is stored in the specified registry value; <ph id="ph1">`nDefault`</ph> if the data does not exist.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Use the methods <bpt id="p1">[</bpt>CWinAppEx::WriteInt<ept id="p1">](#cwinappex__writeint)</ept> and <bpt id="p2">[</bpt>CWinAppEx::WriteSectionInt<ept id="p2">](#cwinappex__writesectionint)</ept> to write integer data to the registry.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path of a registry entry.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>It is a relative path that is added to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionObject</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Reads <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> registry data from the registry.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>A string that contains the value to read.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The method uses this <ph id="ph1">`CObject`</ph> to store the registry data.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>This method reads data from the registry.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The data read is <ph id="ph1">`CObject`</ph> data, or data for a class derived from <ph id="ph2">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>To write <ph id="ph1">`CObject`</ph> data to the registry, use either <bpt id="p1">[</bpt>CWinAppEx::WriteObject<ept id="p1">](#cwinappex__writeobject)</ept> or <bpt id="p2">[</bpt>CWinAppEx::WriteSectionObject<ept id="p2">](#cwinappex__writesectionobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetSectionString</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Reads string data from the registry.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>A string that contains the value to read.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The default value to return if the specified value does not exist.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The string data stored in the specified registry value if the data exists; otherwise <ph id="ph1">`lpszDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>This method reads string data written to the registry.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CWinAppEx::WriteString<ept id="p1">](#cwinappex__writestring)</ept> and <bpt id="p2">[</bpt>CWinAppEx::WriteSectionString<ept id="p2">](#cwinappex__writesectionstring)</ept> to write string data to the registry.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetShellManager</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CShellManager<ept id="p1">](../../mfc/reference/cshellmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CShellManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CShellManager`</ph> object is not initialized, this function calls <bpt id="p1">[</bpt>CWinAppEx::InitShellManager<ept id="p1">](#cwinappex__initshellmanager)</ept> before it returns a pointer.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetString</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Reads string data from a specified registry key.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The default value that the method returns if the specified registry entry does not exist.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The string data stored in the registry if successful; <ph id="ph1">`lpszDefault`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>This method reads string data written to the registry.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>To write data to the registry, use the methods <bpt id="p1">[</bpt>CWinAppEx::WriteString<ept id="p1">](#cwinappex__writestring)</ept> or <bpt id="p2">[</bpt>CWinAppEx::WriteSectionString<ept id="p2">](#cwinappex__writesectionstring)</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetTooltipManager</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CTooltipManager<ept id="p1">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CTooltipManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CTooltipManager`</ph> object is not initialized, this function calls <bpt id="p1">[</bpt>CWinAppEx::InitTooltipManager<ept id="p1">](#cwinappex__inittooltipmanager)</ept> before it returns a pointer.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>CWinAppEx::GetUserToolsManager</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the global <bpt id="p1">[</bpt>CUserToolsManager<ept id="p1">](../../mfc/reference/cusertoolsmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>A pointer to the global <ph id="ph1">`CUserToolsManager`</ph> object; <ph id="ph2">`NULL`</ph> if user tools management is not enabled for the application.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Before you retrieve a pointer to the <ph id="ph1">`CUserToolsManager`</ph> object, you must initialize the manager by calling <bpt id="p1">[</bpt>CWinAppEx::EnableUserTools<ept id="p1">](#cwinappex__enableusertools)</ept>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitContextMenuManager</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Nonzero if the method creates the CContextMenuManager object; 0 if the <ph id="ph1">`CContextMenuManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CWinAppEx::GetContextMenuManager<ept id="p1">](#cwinappex__getcontextmenumanager)</ept>, the default implementation of that method calls <ph id="ph1">`InitContextMenuManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>If your application already has a context menu manager and you call <ph id="ph1">`InitContextMenuManager`</ph>, your application will have an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Therefore, you should not call <ph id="ph1">`InitContextMenuManager`</ph> if you create a <ph id="ph2">`CContextMenuManager`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If you are not using a custom <ph id="ph1">`CContextMenuManager`</ph>, you should use <ph id="ph2">`GetContextMenuManager`</ph> to create a <ph id="ph3">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitKeyboardManager</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">[</bpt>CKeyboardManager<ept id="p1">](../../mfc/reference/ckeyboardmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Nonzero if the method creates the <ph id="ph1">`CKeyboardManager`</ph> object; 0 if the <ph id="ph2">`CKeyboardManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CWinAppEx::GetKeyboardManager<ept id="p1">](#cwinappex__getkeyboardmanager)</ept>, the default implementation of that method calls <ph id="ph1">`InitKeyboardManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>If your application already has a keyboard manager and you call <ph id="ph1">`InitKeyboardManager`</ph>, your application will have an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Therefore, you should not call <ph id="ph1">`InitKeyboardManager`</ph> if you create a <ph id="ph2">`CKeyboardManager`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>If you are not using a custom <ph id="ph1">`CKeyboardManager`</ph>, you should use <ph id="ph2">`GetKeyboardManager`</ph> to create a <ph id="ph3">`CKeyboardManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitMouseManager</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">[</bpt>CMouseManager<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Nonzero if the method creates the <ph id="ph1">`CMouseManager`</ph> object; 0 if the <ph id="ph2">`CMouseManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CWinAppEx::GetMouseManager<ept id="p1">](#cwinappex__getmousemanager)</ept>, the default implementation of that method calls <ph id="ph1">`InitMouseManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>If your application already has a mouse manager and you call <ph id="ph1">`InitMouseManager`</ph>, your application will have an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Therefore you should not call <ph id="ph1">`InitMouseManager`</ph> if you create a <ph id="ph2">`CMouseManager`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>If you are not using a custom <ph id="ph1">`CMouseManager`</ph>, you should use <ph id="ph2">`GetMouseManager`</ph> to create a <ph id="ph3">`CMouseManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitShellManager</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">[</bpt>CShellManager<ept id="p1">](../../mfc/reference/cshellmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Nonzero if the method creates the <ph id="ph1">`CShellManager`</ph> object; 0 if the <ph id="ph2">`CShellManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CWinAppEx::GetShellManager<ept id="p1">](#cwinappex__getshellmanager)</ept>, the default implementation of that method calls <ph id="ph1">`InitShellManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>If your application already has a shell manager and you call <ph id="ph1">`InitShellManager`</ph>, your application raises an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Therefore, do not call <ph id="ph1">`InitShellManager`</ph> if you create a <ph id="ph2">`CShellManager`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>If you are not using a custom <ph id="ph1">`CShellManager`</ph>, use <ph id="ph2">`GetShellManager`</ph> to create a <ph id="ph3">`CShellManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>CWinAppEx::InitTooltipManager</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">[</bpt>CTooltipManager<ept id="p1">](../../mfc/reference/ctooltipmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Nonzero if the method creates the <ph id="ph1">`CTooltipManager`</ph> object; 0 if the <ph id="ph2">`CTooltipManager`</ph> object already exists.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CWinAppEx::GetTooltipManager<ept id="p1">](#cwinappex__gettooltipmanager)</ept>, the default implementation of that method calls <ph id="ph1">`InitTooltipManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>If your application already has a tooltip manager and you call <ph id="ph1">`InitTooltipManager`</ph>, your application will have an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> failure.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Therefore, you should not call <ph id="ph1">`InitTooltipManager`</ph> if you create a <ph id="ph2">`CTooltipManager`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>If you are not using a custom <ph id="ph1">`CTooltipManager`</ph>, you should use <ph id="ph2">`GetTooltipManager`</ph> to create a <ph id="ph3">`CTooltipManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>CWinAppEx::IsResourceSmartUpdate</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>CWinAppEx::IsStateExists</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified key is in the registry.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>A string that contains a path of a registry key.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Nonzero if the key is in the registry; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadCustomState</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The framework calls this method after it loads the state of the application from the registry.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Override this method if you want to do any processing after the application loads the state from the registry.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>By default, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>In order to load custom state information from the registry, the information must first be saved by using <bpt id="p1">[</bpt>CWinAppEx::SaveCustomState<ept id="p1">](#cwinappex__savecustomstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadState</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Reads the application state from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window object.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The method applies the state information in the registry to this frame window.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CFrameImpl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The method applies the state information in the registry to this frame window.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>This method loads the state of the application and any state information for a frame window.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The loaded information for the frame window is applied to the supplied frame window.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>If you do not supply a frame window, only the application state information is loaded.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The application information includes the state of the <bpt id="p1">[</bpt>CMouseManager Class<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id="p2">[</bpt>CContextMenuManager Class<ept id="p2">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id="p3">[</bpt>CKeyboardManager Class<ept id="p3">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, and the <bpt id="p4">[</bpt>CUserToolsManager Class<ept id="p4">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`CFrameImpl::OnLoadFrame`</ph> calls <ph id="ph2">`LoadState`</ph>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSectionName`</ph> parameter is not the absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>It is a relative path that is added to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>CWinAppEx::LoadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Called by the framework when it loads the size and location of the main frame window from the registry.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>A rectangle that contains the coordinates of the main frame window when it is in the restored position.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>An integer that specifies the show state of the window.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>For more information about possible values, see <bpt id="p1">[</bpt>CWnd::ShowWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>By default, MFC automatically loads the previous position and state of the main frame window when the application starts.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>For more information about how this information is stored in the registry, see <bpt id="p1">[</bpt>CWinAppEx::StoreWindowPlacement<ept id="p1">](#cwinappex__storewindowplacement)</ept>.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Override this method if you want to load additional information about the main frame window.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>CWinAppEx::m_bForceImageReset</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Specifies whether the framework resets all toolbar images when it reloads the frame window that contains the toolbar.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_bForceImageReset`</ph> data member is a protected variable.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnAppContextHelp</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user requests context help for the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A pointer to a window object for which the user invoked context help.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>A reserved value.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>This method is currently reserved for future use.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing and it is currently not called by the framework.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnClosingMainFrame</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a frame window is processing <ph id="ph1">`WM_CLOSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CFrameImpl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The default implementation of this method saves the state of <ph id="ph1">`pFrameImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnViewDoubleClick</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Calls the user-defined command that is associated with a view when the user double-clicks anywhere within that view.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>A pointer to an object derived from the <bpt id="p1">[</bpt>CView Class<ept id="p1">](../../mfc/reference/cview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The view ID.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>if the framework finds a command; otherwise false.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>In order to support custom mouse behavior, you must call this function when you process the <ph id="ph1">`WM_LBUTTONDBLCLK`</ph> message.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This method will execute the command associated with the view ID supplied by <ph id="ph1">`iViewId`</ph>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>For more information about custom mouse behavior, see <bpt id="p1">[</bpt>Keyboard and Mouse Customization<ept id="p1">](../../mfc/keyboard-and-mouse-customization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>CWinAppEx::OnWorkspaceIdle</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>CWinAppEx::PreLoadState</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The framework calls this method immediately before it loads the state of the application from the registry.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Override this method if you want to do any processing immediately before the framework loads the application state.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>CWinAppEx::PreSaveState</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The framework calls this method immediately before it saves the application state.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Override this method if you want to do any processing immediately before the framework saves the application state.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ReloadWindowPlacement</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Reloads the size and location of a window from the registry.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Nonzero if the method was successful; 0 if the load failed or there is no data to load.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Use the function <bpt id="p1">[</bpt>CWinAppEx::StoreWindowPlacement<ept id="p1">](#cwinappex__storewindowplacement)</ept> to write the size and location of a window to the registry.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SaveCustomState</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The framework calls this method after it saves the state of the application to the registry.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Override this method if you want to do any processing after the application saves the state to the registry.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>By default, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SaveState</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Writes the application state to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CFrameImpl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>This frame is saved to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window object.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>This frame is saved to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>if successful; <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>This method saves the state of the application and any state information for the provided frame window.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>If you do not provide a frame window, the method only saves the application state.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The application information includes the state of the <bpt id="p1">[</bpt>CMouseManager Class<ept id="p1">](../../mfc/reference/cmousemanager-class.md)</ept>, <bpt id="p2">[</bpt>CContextMenuManager Class<ept id="p2">](../../mfc/reference/ccontextmenumanager-class.md)</ept>, <bpt id="p3">[</bpt>CKeyboardManager Class<ept id="p3">](../../mfc/reference/ckeyboardmanager-class.md)</ept>, and the <bpt id="p4">[</bpt>CUserToolsManager Class<ept id="p4">](../../mfc/reference/cusertoolsmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSectionName`</ph> parameter is not the absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>CWinAppEx::SetRegistryBase</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Sets the default registry path for the application.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>A string that contains the path of a registry key.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>A string that contains the path of the default registry location.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>All methods of the <bpt id="p1">[</bpt>CWinAppEx Class<ept id="p1">](../../mfc/reference/cwinappex-class.md)</ept> that access the registry start in a default location.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Use this method to change that default registry location.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> to retrieve the default registry location.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>CWinAppEx::ShowPopupMenu</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Displays a popup menu.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A menu resource ID.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> that specifies the position of the menu in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>A pointer to the window that owns the popup menu.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Nonzero if the popup menu is displayed successfully; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>This method displays the menu associated with <ph id="ph1">`uiMenuResId`</ph>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>To support popup menus, you must have a <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>If you have not initialized the <ph id="ph1">`CContextMenuManager`</ph> object, <ph id="ph2">`ShowPopupMenu`</ph> will fail.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>CWinAppEx::StoreWindowPlacement</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Called by the framework to write the size and location of the main frame window to the registry.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Flags that control the position of the minimized window and how the operating system switches between a minimized window and a restored window.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>An integer that specifies the show state of the window.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>For more information about possible values, see <bpt id="p1">[</bpt>CWnd::ShowWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>A rectangle that contains the coordinates of the main frame window when it is in the restored state.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>By default, MFC automatically saves the position and state of the main frame window before the application exits.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>This information is stored in the Windows registry under the WindowPlacement key in the default registry location for your application.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>For more information about the default registry location of your application, see <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Override this method if you want to store additional information about the main frame window.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteBinary</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Writes binary data to the registry.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The data to store.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>The size of <ph id="ph1">`pData`</ph> in bytes.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry that is located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>If the key specified by <ph id="ph1">`lpszEntry`</ph> does not exist, this method will create it.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteInt</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Writes numeric data to the registry.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The data to store.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>If the key specified by <ph id="ph1">`lpszEntry`</ph> does not exist, this method will create it.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteObject</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Writes data derived from the <bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> to the registry.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>A string that contains the value to set.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`CObject`</ph> data that the method will store.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>This method writes the <ph id="ph1">`obj`</ph> data to the specified value under the default registry key.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> to determine the current registry key.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionBinary</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Writes binary data to a value in the registry.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>A string that contains the value to set.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The data to write to the registry.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>The size of <ph id="ph1">`pData`</ph> in bytes.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not the absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>If the key specified by <ph id="ph1">`lpszEntry`</ph> does not exist, this method will create it.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionInt</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Writes numeric data to the registry.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>A string that contains the value to set.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The data to write to the registry.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>If the key specified by <ph id="ph1">`lpszEntry`</ph> does not exist, this method will create it.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionObject</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Writes data derived from the <bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> to a specific registry value.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>A string that contains the name of the value to set.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>The data to store.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>If the value specified by <ph id="ph1">`lpszEntry`</ph> does not exist under the registry key specified by <ph id="ph2">`lpszSubSection`</ph>, this method will create that value.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteSectionString</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Writes string data to a value in the registry.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>A string that contains the value to set.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The string data to write to the registry.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszSubSection`</ph> parameter is not an absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>It is a relative path that is appended to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>If the value specified by <ph id="ph1">`lpszEntry`</ph> does not exist under <ph id="ph2">`lpszSubSection`</ph>, this method will create it.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>CWinAppEx::WriteString</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Writes string data to the registry.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>A string that contains the name of a registry key.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>The data to store.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszEntry`</ph> parameter is the name of a registry entry located under the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>If the key specified by <ph id="ph1">`lspzEntry`</ph> does not exist, this method will create it.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>CWinApp Class</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>CMouseManager Class</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>CContextMenuManager Class</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>CKeyboardManager Class</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>CUserToolsManager Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>