<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">586c7b306489c8b060cc3bec25832c9b6ea9c0ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\text\support-for-multibyte-character-sets-mbcss.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a823626e3e3272fc4c2d56bea8516abe33cb0ef0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f321155c12432327135e91e0f6fad334dacf5aee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Support for Multibyte Character Sets (MBCSs) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Support for Multibyte Character Sets (MBCSs)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multibyte character sets (MBCSs) are an older approach to the need to support character sets, like Japanese and Chinese, that cannot be represented in a single byte.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you are doing new development, you should use Unicode for all text strings except perhaps system strings that are not seen by end users.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>MBCS is a legacy technology and is not recommended for new development.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The most common MBCS implementation is double-byte character sets (DBCSs).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual C++ in general, and MFC in particular, is fully enabled for DBCS.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2013 and later, the MFC libraries for multi-byle character encoding (MBCS) will be provided as an add-on to Visual Studio and will be available free of charge to Visual Studio customers (Professional and Enterprise editions only) from the MSDN download site.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The libraries require about 440 MB on your drive, and the installation includes all localized versions of the libraries.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can install it on any machine on which Visual Studio Community, Professional, or Enterprise edition is installed, and which has the in-box MFC feature enabled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you uninstall or repair Visual Studio, the MBCS libraries will also be uninstalled or repaired.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, if you just remove the MFC feature, the MBCS libraries will remain on your system.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you repair the MBCS libraries, Visual Studio is not modified in any way.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Redistributable Packages for Visual Studio 2013 and later will still include the MBCS MFC DLLs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>No additional steps are required to redistribute the DLLs to your customers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For samples, see the MFC source code files.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For platforms used in markets whose languages use large character sets, the best alternative to Unicode is MBCS.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MFC supports MBCS by using internationalizable data types and C run-time functions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You should do the same in your code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Under MBCS, characters are encoded in either 1 or 2 bytes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In 2-byte characters, the first, or lead byte, signals that both it and the following byte are to be interpreted as one character.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first byte comes from a range of codes reserved for use as lead bytes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Which ranges of bytes can be lead bytes depends on the code page in use.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, Japanese code page 932 uses the range 0x81 through 0x9F as lead bytes, but Korean code page 949 uses a different range.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consider all the following in your MBCS programming.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>MBCS characters in the environment</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>MBCS characters can appear in strings such as file and directory names.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Editing operations</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Editing operations in MBCS applications should operate on characters, not bytes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The caret should not split a character, the RIGHT ARROW key should move right one character, and so on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> should delete a character; <bpt id="p2">**</bpt>Undo<ept id="p2">**</ept> should reinsert it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>String handling</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In an application that uses MBCS, string handling poses special problems.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Characters of both widths are mixed in a single string; therefore, you must remember to check for lead bytes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Run-time library support</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The C run-time library and MFC support single-byte, MBCS, and Unicode programming.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Single-byte strings are processed with the <ph id="ph1">`str`</ph> family of run-time functions, MBCS strings are processed with corresponding <ph id="ph2">`_mbs`</ph> functions, and Unicode strings are processed with corresponding <bpt id="p1">*</bpt>wcs<ept id="p1">*</ept> functions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>MFC class member function implementations use portable run-time functions that map, under the right circumstances, to the normal <ph id="ph1">`str`</ph> family of functions, the MBCS functions, or the Unicode functions, as described in "MBCS/Unicode portability."</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>MBCS/Unicode portability</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using the Tchar.h header file, you can build single-byte, MBCS, and Unicode applications from the same sources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Tchar.h defines macros prefixed with <bpt id="p1">*</bpt>_tcs<ept id="p1">*</ept> , which map to <ph id="ph1">`str`</ph>, <ph id="ph2">`_mbs`</ph>, or <bpt id="p2">*</bpt>wcs<ept id="p2">*</ept> functions, as appropriate.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To build MBCS, define the symbol <bpt id="p1">**</bpt>_MBCS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To build Unicode, define the symbol <bpt id="p1">**</bpt>_UNICODE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>_MBCS<ept id="p1">**</ept> is defined for MFC applications.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generic-Text Mappings in Tchar.h<ept id="p1">](../text/generic-text-mappings-in-tchar-h.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Behavior is undefined if you define both <bpt id="p1">**</bpt>_UNICODE<ept id="p1">**</ept> and <bpt id="p2">**</bpt>_MBCS<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Mbctype.h and Mbstring.h header files define MBCS-specific functions and macros, which you might need in some cases.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`_ismbblead`</ph> tells you whether a specific byte in a string is a lead byte.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For international portability, code your program with <bpt id="p1">[</bpt>Unicode<ept id="p1">](../text/support-for-unicode.md)</ept> or multibyte character sets (MBCSs).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enable MBCS in my program</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Enable both Unicode and MBCS in my program</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use MBCS to create an internationalized program</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See a summary of MBCS programming</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Learn about generic-text mappings for byte-width portability</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Text and Strings</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>MBCS Support in Visual C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>