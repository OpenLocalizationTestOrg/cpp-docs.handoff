<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5aec484f7451f56cdf477aa5361a280f72e4d43</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn071-mfc-iolecommandtarget-implementation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a56fd8d8fb4d7f40cf5739f39d6e044fbf17fb03</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a12b06555a8fdde44f84d0f2086a342d9459756</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN071: MFC IOleCommandTarget Implementation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN071: MFC IOleCommandTarget Implementation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IOleCommandTarget`</ph> interface enables objects and their containers to dispatch commands to each other.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, an object's toolbars may contain buttons for commands such as <bpt id="p1">**</bpt>Print<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Print Preview<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>, <ph id="ph1">`New`</ph>, and <bpt id="p4">**</bpt>Zoom<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If such an object were embedded in a container that supports <ph id="ph1">`IOleCommandTarget`</ph>, the object could enable its buttons and forward the commands to the container for processing when the user clicked them.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a container wanted the embedded object to print itself, it could make this request by sending a command through the <ph id="ph1">`IOleCommandTarget`</ph> interface of the embedded object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>is an Automation-like interface in that it is used by a client to invoke methods on a server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, using <ph id="ph1">`IOleCommandTarget`</ph> saves the overhead of making calls via Automation interfaces because programmers don't have to use the typically expensive <ph id="ph2">`Invoke`</ph> method of <ph id="ph3">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In MFC, the <ph id="ph1">`IOleCommandTarget`</ph> interface is used by Active document servers to allow Active document containers to dispatch commands to the server.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Active document server class, <ph id="ph1">`CDocObjectServerItem`</ph>, uses MFC interface maps (see <bpt id="p1">[</bpt>TN038: MFC/OLE IUnknown Implementation<ept id="p1">](../mfc/tn038-mfc-ole-iunknown-implementation.md)</ept>) to implement the <ph id="ph2">`IOleCommandTarget`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>is also implemented in the <bpt id="p1">**</bpt>COleFrameHook<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleFrameHook<ept id="p1">**</ept> is an undocumented MFC class that implements the frame window functionality of in-place editing containers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleFrameHook<ept id="p1">**</ept> also uses MFC interface maps to implement the <ph id="ph1">`IOleCommandTarget`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleFrameHook<ept id="p1">**</ept>'s implementation of <ph id="ph1">`IOleCommandTarget`</ph> forwards OLE commands to <ph id="ph2">`COleDocObjectItem`</ph>-derived Active document containers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This allows any MFC Active document container to receive messages from contained Active document servers.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>MFC OLE Command Maps</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MFC developers can take advantage of <ph id="ph1">`IOleCommandTarget`</ph> by using MFC OLE command maps.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>OLE command maps are like message maps because they can be used to map OLE commands to member functions of the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To make this work, place macros in the command map to specify the OLE command group of the command you want to handle, the OLE command, and the command ID of the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message that will be sent when the OLE command is received.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>MFC also provides a number of predefined macros for standard OLE commands.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For a list of the standard OLE commands that were originally designed for use with Microsoft Office applications, see the OLECMDID enumeration, which is defined in docobj.h.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When an OLE command is received by an MFC application that contains an OLE command map, MFC tries to find the command ID and command group for the requested command in the OLE command map of the application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a match is found, a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message is dispatched to the application containing the command map with the ID of the requested command.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(See the description of <ph id="ph1">`ON_OLECMD`</ph> below.) In this way, OLE commands dispatched to an application are turned into <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages by MFC.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages are then routed through the application's message maps using the MFC standard <bpt id="p2">[</bpt>command routing<ept id="p2">](../mfc/command-routing.md)</ept> architecture.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Unlike message maps, MFC OLE command maps are not supported by ClassWizard.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>MFC developers must add OLE command map support and OLE command map entries by hand.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>OLE command maps can be added to MFC Active document servers in any class that is in the <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message-routing chain at the time the Active document is in-place active in a container.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These classes include the application's classes derived from <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../mfc/reference/cwinapp-class.md)</ept>, <bpt id="p2">[</bpt>CView<ept id="p2">](../mfc/reference/cview-class.md)</ept>, <bpt id="p3">[</bpt>CDocument<ept id="p3">](../mfc/reference/cdocument-class.md)</ept>, and <bpt id="p4">[</bpt>COleIPFrameWnd<ept id="p4">](../mfc/reference/coleipframewnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In Active document containers, OLE command maps can only be added to the <bpt id="p1">[</bpt>COleDocObjectItem<ept id="p1">](../mfc/reference/coledocobjectitem-class.md)</ept>-derived class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Also, in Active document containers, the <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages will only be dispatched to the message map in the <ph id="ph1">`COleDocObjectItem`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>OLE Command Map Macros</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the following macros to add command map functionality to your class:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This macro goes in the class declaration (typically in the header file) of the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Name of the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Name of the base class of the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This macro marks the beginning of the command map.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use this macro in the implementation file for the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This macro marks the end of the command map.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use this macro in the implementation file for the class that contains the command map.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This macro must always follow the <bpt id="p1">**</bpt>BEGIN_OLECMD_MAP<ept id="p1">**</ept> macro.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pointer to the GUID of the OLE command's command group.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for the standard OLE command group.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>olecmdid</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>OLE command ID of the command to be invoked.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ID of the <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to be sent to the application containing the command map when this OLE command is invoked.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`ON_OLECMD`</ph> macro in the command map to add entries for the OLE commands you want to handle.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the OLE commands are received, they will be converted to the specified <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message and routed through the application's message map using the standard MFC command-routing architecture.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example shows how to add OLE command-handling capability to an MFC Active document server to handle the <bpt id="p1">[</bpt>OLECMDID_PRINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms691264)</ept> OLE command.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assumes that you used AppWizard to generate an MFC application that is an Active document server.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">`CView`</ph>-derived class's header file, add the <ph id="ph2">`DECLARE_OLECMD_MAP`</ph> macro to the class declaration.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CView`</ph>-derived class because it is one of the classes in the Active document server that is in the <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message-routing chain.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the implementation file for the <ph id="ph1">`CView`</ph>-derived class, add the <ph id="ph2">`BEGIN_OLECMD_MAP`</ph> and <ph id="ph3">`END_OLECMD_MAP`</ph> macros:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To handle the standard OLE print command, add an <bpt id="p1">[</bpt>ON_OLECMD<ept id="p1">](http://msdn.microsoft.com/library/6c86327c-3d48-42ac-9dae-e0ccd3a81793)</ept> macro to the command map specifying the OLE command ID for the standard print command and <bpt id="p2">**</bpt>ID_FILE_PRINT<ept id="p2">**</ept> for the <bpt id="p3">**</bpt>WM_COMMAND<ept id="p3">**</ept> ID.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_FILE_PRINT<ept id="p1">**</ept> is the standard print command ID used by AppWizard-generated MFC applications:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that one of the standard OLE command macros, defined in afxdocob.h, could be used in place of the <ph id="ph1">`ON_OLECMD`</ph> macro because <bpt id="p1">**</bpt>OLECMDID_PRINT<ept id="p1">**</ept> is a standard OLE command ID.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ON_OLECMD_PRINT`</ph> macro will accomplish the same task as the <ph id="ph2">`ON_OLECMD`</ph> macro shown above.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When a container application sends this server an <bpt id="p1">**</bpt>OLECMDID_PRINT<ept id="p1">**</ept> command through the server's <ph id="ph1">`IOleCommandTarget`</ph> interface, the MFC printing command handler will be invoked in the server, causing the server to print the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The Active document container's code to invoke the print command added in the steps above would look something like this:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>