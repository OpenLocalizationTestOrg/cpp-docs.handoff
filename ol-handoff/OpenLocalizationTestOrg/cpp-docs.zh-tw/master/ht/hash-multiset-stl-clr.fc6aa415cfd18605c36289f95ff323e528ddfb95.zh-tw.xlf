<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c85dfc98ce8226a63a2b346cd49ee1f0f81b2431</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\hash-multiset-stl-clr.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ddc7ab388c1c431f331fd0c9f45095d662d24df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f16b2eeae6c8ce5dda24ede93940f157cfa0847</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>hash_multiset (STL-CLR) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>hash_multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that controls a varying-length sequence of elements that has bidirectional access.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use the container <ph id="ph1">`hash_multiset`</ph> to manage a sequence of elements as a hash table, each table entry storing a bidirectional linked list of nodes, and each node storing one element.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The value of each element is used as a key, for ordering the sequence.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the description below, <ph id="ph1">`GValue`</ph> is the same as <ph id="ph2">`GKey`</ph>, which in turn is the same as <ph id="ph3">`Key`</ph> unless the latter is a ref type, in which case it is <ph id="ph4">`Key^`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of the key component of an element in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Type Definition</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of a constant iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_reference (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of a constant reference to an element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type of a constant reverse iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>hash_multiset::difference_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type of a (possibly signed) distance between two elements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_container (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type of an iterator for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The type of a reverse iterator for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_value (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type of an element for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>hash_multiset::hasher (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The hashing delegate for a key.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>hash_multiset::iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type of an iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_compare (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The ordering delegate for two keys.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type of an ordering key.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>hash_multiset::reference (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The type of a reference to an element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>hash_multiset::reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The type of a reverse iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>hash_multiset::size_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type of a (non-negative) distance between two elements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_compare (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The ordering delegate for two element values.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The type of an element.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>hash_multiset::begin (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Designates the beginning of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>hash_multiset::bucket_count (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Counts the number of buckets.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>hash_multiset::clear (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Removes all elements.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>hash_multiset::count (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Counts elements matching a specified key.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>hash_multiset::empty (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Tests whether no elements are present.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>hash_multiset::end (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Designates the end of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>hash_multiset::equal_range (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Finds range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>hash_multiset::erase (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Removes elements at specified positions.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>hash_multiset::find (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Finds an element that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>hash_multiset::hash_delegate (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Copies the hashing delegate for a key.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>hash_multiset::hash_multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Constructs a container object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>hash_multiset::insert (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Adds elements.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_comp (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Copies the ordering delegate for two keys.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>hash_multiset::load_factor (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Counts the average elements per bucket.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>hash_multiset::lower_bound (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Finds beginning of range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>hash_multiset::make_value (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Constructs a value object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>hash_multiset::max_load_factor (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum elements per bucket.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>hash_multiset::rbegin (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Designates the beginning of the reversed controlled sequence.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>hash_multiset::rehash (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Rebuilds the hash table.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>hash_multiset::rend (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Designates the end of the reversed controlled sequence.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>hash_multiset::size (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Counts the number of elements.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>hash_multiset::swap (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Swaps the contents of two containers.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>hash_multiset::to_array (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Copies the controlled sequence to a new array.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>hash_multiset::upper_bound (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Finds end of range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_comp (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Copies the ordering delegate for two element values.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>hash_multiset::operator= (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Replaces the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Interface</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ICloneable&gt;</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Duplicate an object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerable&gt;</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sequence through elements.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.ICollection&gt;</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Maintain group of elements.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Sequence through typed elements.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.ICollection%601&gt;</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Maintain group of typed elements.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>IHash<ph id="ph1">\&lt;</ph>Key, Value&gt;</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Maintain generic container.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The object allocates and frees storage for the sequence it controls as individual nodes in a bidirectional linked list.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To speed access, the object also maintains a varying-length array of pointers into the list (the hash table), effectively managing the whole list as a sequence of sublists, or buckets.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>It inserts elements into a bucket that it keeps ordered by altering the links between nodes, never by copying the contents of one node to another.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>That means you can insert and remove elements freely without disturbing remaining elements.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The object orders each bucket it controls by calling a stored delegate object of type <bpt id="p1">[</bpt>hash_set::key_compare (STL/CLR)<ept id="p1">](../dotnet/hash-set-key-compare-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can specify the stored delegate object when you construct the hash_set; if you specify no delegate object, the default is the comparison <ph id="ph1">`operator&lt;=(key_type, key_type)`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You access the stored delegate object by calling the member function <bpt id="p1">[</bpt>hash_set::key_comp (STL/CLR)<ept id="p1">](../dotnet/hash-set-key-comp-stl-clr.md)</ept><ph id="ph1">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Such a delegate object must define equivalent ordering between keys of type <bpt id="p1">[</bpt>hash_set::key_type (STL/CLR)<ept id="p1">](../dotnet/hash-set-key-type-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>That means, for any two keys <ph id="ph1">`X`</ph> and <ph id="ph2">`Y`</ph>:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>returns the same Boolean result on every call.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`key_comp()(X, Y) &amp;&amp; key_comp()(Y, X)`</ph> is true, then <ph id="ph2">`X`</ph> and <ph id="ph3">`Y`</ph> are said to have equivalent ordering.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Any ordering rule that behaves like <ph id="ph1">`operator&lt;=(key_type, key_type)`</ph>, <ph id="ph2">`operator&gt;=(key_type, key_type)`</ph> or <ph id="ph3">`operator==(key_type, key_type)`</ph> defines eqivalent ordering.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Note that the container ensures only that elements whose keys have equivalent ordering (and which hash to the same integer value) are adjacent within a bucket.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Unlike template class <bpt id="p1">[</bpt>hash_set (STL/CLR)<ept id="p1">](../dotnet/hash-set-stl-clr.md)</ept>, an object of template class <ph id="ph1">`hash_multiset`</ph> does not require that keys for all elements are unique.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>(Two or more keys can have equivalent ordering.)</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The object determines which bucket should contain a given ordering key by calling a stored delegate object of type <bpt id="p1">[</bpt>hash_set::hasher (STL/CLR)<ept id="p1">](../dotnet/hash-set-hasher-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You access this stored object by calling the member function <bpt id="p1">[</bpt>hash_set::hash_delegate (STL/CLR)<ept id="p1">](../dotnet/hash-set-hash-delegate-stl-clr.md)</ept><ph id="ph1">`()`</ph> to obtain an integer value that depends on the key value.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can specify the stored delegate object when you construct the hash_set; if you specify no delegate object, the default is the function <ph id="ph1">`System::Object::hash_value(key_type)`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>That means, for any keys <ph id="ph1">`X`</ph> and <ph id="ph2">`Y`</ph>:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>returns the same integer result on every call.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`X`</ph> and <ph id="ph2">`Y`</ph> have equivalent ordering, then <ph id="ph3">`hash_delegate()(X)`</ph> should return the same integer result as <ph id="ph4">`hash_delegate()(Y)`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Each element serves as both a key and a value.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The sequence is represented in a way that permits lookup, insertion, and removal of an arbitrary element with a number of operations that is independent of the number of elements in the sequence (constant time) -- at least in the best of cases.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Moreover, inserting an element invalidates no iterators, and removing an element invalidates only those iterators which point at the removed element.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If hashed values are not uniformly distributed, however, a hash table can degenerate.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In the extreme -- for a hash function that always returns the same value -- lookup, insertion, and removal are proportional to the number of elements in the sequence (linear time).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The container endeavors to choose a reasonable hash function, mean bucket size, and hash-table size (total number of buckets), but you can override any or all of these choices.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>See, for example, the functions <bpt id="p1">[</bpt>hash_set::max_load_factor (STL/CLR)<ept id="p1">](../dotnet/hash-set-max-load-factor-stl-clr.md)</ept> and <bpt id="p2">[</bpt>hash_set::rehash (STL/CLR)<ept id="p2">](../dotnet/hash-set-rehash-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A hash_multiset supports bidirectional iterators, which means you can step to adjacent elements given an iterator that designates an element in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A special head node corresponds to the iterator returned by <bpt id="p1">[</bpt>hash_multiset::end (STL/CLR)<ept id="p1">](../dotnet/hash-multiset-end-stl-clr.md)</ept><ph id="ph1">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can decrement this iterator to reach the last element in the controlled sequence, if present.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can increment a hash_multiset iterator to reach the head node, and it will then compare equal to <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>But you cannot dereference the iterator returned by <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note that you cannot refer to a hash_multiset element directly given its numerical position -- that requires a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A hash_multiset iterator stores a handle to its associated hash_multiset node, which in turn stores a handle to its associated container.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can use iterators only with their associated container objects.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A hash_multiset iterator remains valid so long as its associated hash_multiset node is associated with some hash_multiset.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Moreover, a valid iterator is dereferencable -- you can use it to access or alter the element value it designates -- so long as it is not equal to <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Erasing or removing an element calls the destructor for its stored value.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Destroying the container erases all elements.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Thus, a container whose element type is a ref class ensures that no elements outlive the container.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Note, however, that a container of handles does <ph id="ph1">`not`</ph> destroy its elements.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>cliext/hash_set&gt;</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> cliext</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>hash_map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>hash_multiset</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>hash_set (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>set (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>STL/CLR Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>