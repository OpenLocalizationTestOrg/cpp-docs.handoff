<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">454e81f501903c4652724798ad14ab24c27c3560</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\text\international-enabling.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5869da52cf43c8e6acaed6982376b732f5604eb5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">008961c5ff48bced3d38103dcbe7ab5cbcb9fb4c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>International Enabling | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>International Enabling</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Most traditional C and C++ code makes assumptions about character and string manipulation that do not work well for international applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>While both MFC and the run-time library support Unicode or MBCS, there is still work for you to do.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To guide you, this section explains the meaning of "international enabling" in Visual C++:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Both Unicode and MBCS are enabled by means of portable data types in MFC function parameter lists and return types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These types are conditionally defined in the appropriate ways, depending on whether your build defines the symbol <bpt id="p1">**</bpt>_UNICODE<ept id="p1">**</ept> or the symbol <bpt id="p2">**</bpt>_MBCS<ept id="p2">**</ept> (which means DBCS).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Different variants of the MFC libraries are automatically linked with your application, depending on which of these two symbols your build defines.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Class library code uses portable run-time functions and other means to ensure correct Unicode or MBCS behavior.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You still must handle certain kinds of internationalization tasks in your code:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the same portable run-time functions that make MFC portable under either environment.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Make literal strings and characters portable under either environment, using the <bpt id="p1">**</bpt>_T<ept id="p1">**</ept> macro.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generic-Text Mappings in Tchar.h<ept id="p1">](../text/generic-text-mappings-in-tchar-h.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Take precautions when parsing strings under MBCS.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These precautions are not needed under Unicode.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MBCS Programming Tips<ept id="p1">](../text/mbcs-programming-tips.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Take care if you mix ANSI (8-bit) and Unicode (16-bit) characters in your application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is possible to use ANSI characters in some parts of your program and Unicode characters in others, but you cannot mix them in the same string.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Do not hard-code strings in your application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead, make them STRINGTABLE resources by adding them to the application's .rc file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Your application can then be localized without requiring source code changes or recompilation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information about STRINGTABLE resources, see <bpt id="p1">[</bpt>String Editor<ept id="p1">](../mfc/string-editor.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>European and MBCS character sets have some characters, such as accented letters, with character codes greater than 0x80.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because most code uses signed characters, these characters greater than 0x80 are sign-extended when converted to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is a problem for array indexing because the sign-extended characters, being negative, indexes outside the array.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Languages that use MBCS, such as Japanese, are also unique.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because a character might consist of 1 or 2 bytes, you should always manipulate both bytes at the same time.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Unicode and MBCS</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Internationalization Strategies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>