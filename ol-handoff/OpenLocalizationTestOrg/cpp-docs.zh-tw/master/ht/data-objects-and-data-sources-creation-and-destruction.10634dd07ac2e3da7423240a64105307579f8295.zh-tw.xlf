<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8a5fc7db2c25f11e976fbda6a4c05d386cecf79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\data-objects-and-data-sources-creation-and-destruction.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79ab1baddc26fbb42ca64ead41974b767530f2fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a90fa73cedf3ed73c45ff4047a26713e6d6f67c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data Objects and Data Sources: Creation and Destruction | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Objects and Data Sources: Creation and Destruction</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As explained in the article <bpt id="p1">[</bpt>Data Objects and Data Sources (OLE)<ept id="p1">](../mfc/data-objects-and-data-sources-ole.md)</ept>, data objects and data sources represent both sides of a data transfer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article explains when to create and destroy these objects and sources to perform your data transfers properly, including:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating data objects</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Destroying data objects</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating data sources</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Destroying data sources</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating Data Objects</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data objects are used by the destination application â€” either the client or the server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A data object in the destination application is one end of a connection between the source application and the destination application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A data object in the destination application is used to access and interact with the data in the data source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are two common situations where a data object is needed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first situation is when data is dropped in your application using drag and drop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The second situation is when Paste or Paste Special is chosen from the Edit menu.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In a drag-and-drop situation, you do not need to create a data object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A pointer to an existing data object will be passed to your <ph id="ph1">`OnDrop`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This data object is created by the framework as part of the drag-and-drop operation and will also be destroyed by it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is not always the case when pasting is done by another method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Destroying Data Objects<ept id="p1">](#_core_destroying_data_objects)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the application is performing a paste or paste special operation, you should create a <ph id="ph1">`COleDataObject`</ph> object and call its <ph id="ph2">`AttachClipboard`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This associates the data object with the data on the Clipboard.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can then use this data object in your paste function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Destroying Data Objects</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you follow the scheme described in <bpt id="p1">[</bpt>Creating Data Objects<ept id="p1">](#_core_creating_data_objects)</ept>, destroying data objects is a trivial aspect of data transfers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The data object that was created in your paste function will be destroyed by MFC when your paste function returns.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you follow another method of handling paste operations, make sure the data object is destroyed after your paste operation is complete.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Until the data object is destroyed, it will be impossible for any application to successfully copy data to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating Data Sources</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Data sources are used by the source of the data transfer, which can be either the client or the server side of the data transfer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A data source in the source application is one end of a connection between the source application and the destination application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A data object in the destination application is used to interact with the data in the data source.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data sources are created when an application needs to copy data to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A typical scenario runs like this:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The user selects some data.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The user chooses <bpt id="p1">**</bpt>Copy<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>Cut<ept id="p2">**</ept>) from the <bpt id="p3">**</bpt>Edit<ept id="p3">**</ept> menu or begins a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Depending on the design of the program, the application creates either a <ph id="ph1">`COleDataSource`</ph> object or an object from a class derived from <ph id="ph2">`COleDataSource`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The selected data is inserted into the data source by calling one of the functions in the <ph id="ph1">`COleDataSource::CacheData`</ph> or <ph id="ph2">`COleDataSource::DelayRenderData`</ph> groups.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The application calls the <ph id="ph1">`SetClipboard`</ph> member function (or the <ph id="ph2">`DoDragDrop`</ph> member function if this is a drag-and-drop operation) belonging to the object created in step 3.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If this is a <bpt id="p1">**</bpt>Cut<ept id="p1">**</ept> operation or <ph id="ph1">`DoDragDrop`</ph> returns <ph id="ph2">`DROPEFFECT_MOVE`</ph>, the data selected in step 1 is deleted from the document.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This scenario is implemented by the MFC OLE samples <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept> and <bpt id="p2">[</bpt>HIERSVR<ept id="p2">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Look at the source for each application's <ph id="ph1">`CView`</ph>-derived class for all but the <ph id="ph2">`GetClipboardData`</ph> and <ph id="ph3">`OnGetClipboardData`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These two functions are in either the <ph id="ph1">`COleClientItem`</ph> or <ph id="ph2">`COleServerItem`</ph>-derived class implementations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These sample programs provide a good example of how to implement these concepts.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>One other situation in which you might want to create a <ph id="ph1">`COleDataSource`</ph> object occurs if you are modifying the default behavior of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Drag and Drop: Customizing<ept id="p1">](../mfc/drag-and-drop-customizing.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Destroying Data Sources</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Data sources must be destroyed by the application currently responsible for them.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In situations where you hand the data source to OLE, such as calling <bpt id="p1">[</bpt>COleDataSource::DoDragDrop<ept id="p1">](../mfc/reference/coledatasource-class.md#coledatasource__dodragdrop)</ept>, you need to call <bpt id="p2">**</bpt>pDataSrc-&gt;InternalRelease<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>NVC_MFCListView#1</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you have not handed your data source to OLE, then you are responsible for destroying it, as with any typical C++ object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Drag and Drop<ept id="p1">](../mfc/drag-and-drop-ole.md)</ept>, <bpt id="p2">[</bpt>Clipboard<ept id="p2">](../mfc/clipboard.md)</ept>, and <bpt id="p3">[</bpt>Manipulating Data Objects and Data Sources<ept id="p3">](../mfc/data-objects-and-data-sources-manipulation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Data Objects and Data Sources (OLE)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>COleDataObject Class</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>COleDataSource Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>