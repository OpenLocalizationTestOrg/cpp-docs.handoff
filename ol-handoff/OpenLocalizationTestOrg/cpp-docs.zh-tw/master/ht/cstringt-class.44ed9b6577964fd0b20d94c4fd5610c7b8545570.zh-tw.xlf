<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd8c34127b567b6849b6efc136e0d7fe8b58d55d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\reference\cstringt-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36163c21bf41dfa2f2ffaa9c6af29bf33d77eb51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5804af12ad66a3b3edd1cf5aec919f5486cb05c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CStringT Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CStringT Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class represents a <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The character type of the string class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(for ANSI character strings).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(for Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TCHAR<ept id="p1">**</ept> (for both ANSI and Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Determines if the string class needs C Run-Time (CRT) Library support and where string resources are located.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StrTraitATL&lt; wchar_t<ept id="p1">**</ept> &amp;#124; <ph id="ph1">`char`</ph> &amp;#124; <bpt id="p2">**</bpt>TCHAR, ChTraitsCRT&lt; wchar_t<ept id="p2">**</ept> &amp;#124; <ph id="ph2">`char`</ph> &amp;#124; <bpt id="p3">**</bpt>TCHAR &gt; &gt;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The class requires CRT support and searches for resource strings in the module specified by <ph id="ph1">`m_hInstResource`</ph> (a member of the application's module class).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StrTraitATL&lt; wchar_t<ept id="p1">**</ept> &amp;#124; <ph id="ph1">`char`</ph> &amp;#124; <bpt id="p2">**</bpt>TCHAR, ChTraitsOS&lt; wchar_t<ept id="p2">**</ept> &amp;#124; <ph id="ph2">`char`</ph> &amp;#124; <bpt id="p3">**</bpt>TCHAR &gt; &gt;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The class does not require CRT support and searches for resource strings in the module specified by <ph id="ph1">`m_hInstResource`</ph> (a member of the application's module class).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StrTraitMFC&lt; wchar_t<ept id="p1">**</ept> &amp;#124; <ph id="ph1">`char`</ph> &amp;#124; <bpt id="p2">**</bpt>TCHAR, ChTraitsCRT&lt; wchar_t<ept id="p2">**</ept> &amp;#124; <ph id="ph2">`char`</ph> &amp;#124; <bpt id="p3">**</bpt>TCHAR &gt; &gt;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The class requires CRT support and searches for resource strings using the standard MFC search algorithm.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StrTraitMFC&lt; wchar_t<ept id="p1">**</ept> &amp;#124; <ph id="ph1">`char`</ph> &amp;#124; <bpt id="p2">**</bpt>TCHAR, ChTraitsOS&lt; wchar_t<ept id="p2">**</ept> &amp;#124; <ph id="ph2">`char`</ph> &amp;#124; <bpt id="p3">**</bpt>TCHAR &gt; &gt;<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The class does not require CRT support and searches for resource strings using the standard MFC search algorithm.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CStringT::CStringT</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CStringT`</ph> object in various ways.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CStringT::~CStringT</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Destroys a <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CStringT::AllocSysString</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Allocates a <ph id="ph1">`BSTR`</ph> from <ph id="ph2">`CStringT`</ph> data.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CStringT::AnsiToOem</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Makes an in-place conversion from the ANSI character set to the OEM character set.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CStringT::AppendFormat</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Appends formatted data to an existing <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CStringT::Collate</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Compares two strings (case sensitive, uses locale-specific information).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CStringT::CollateNoCase</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Compares two strings (case insensitive, uses locale-specific information).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CStringT::Compare</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Compares two strings (case sensitive).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CStringT::CompareNoCase</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Compares two strings (case insensitive).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CStringT::Delete</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Deletes a character or characters from a string.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CStringT::Find</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Finds a character or substring inside a larger string.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CStringT::FindOneOf</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Finds the first matching character from a set.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CStringT::Format</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Formats the string as <ph id="ph1">`sprintf`</ph> does.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CStringT::FormatMessage</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Formats a message string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CStringT::FormatMessageV</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Formats a message string using a variable argument list.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CStringT::FormatV</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Formats the string using a variable list of arguments.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CStringT::GetEnvironmentVariable</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sets the string to the value of the specified environment variable.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CStringT::Insert</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Inserts a single character or a substring at the given index within the string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CStringT::Left</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Extracts the left part of a string.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CStringT::LoadString</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Loads an existing <ph id="ph1">`CStringT`</ph> object from a Windows resource.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CStringT::MakeLower</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Converts all the characters in this string to lowercase characters.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CStringT::MakeReverse</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Reverses the string.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CStringT::MakeUpper</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Converts all the characters in this string to uppercase characters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CStringT::Mid</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Extracts the middle part of a string.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CStringT::OemToAnsi</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Makes an in-place conversion from the OEM character set to the ANSI character set.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CStringT::Remove</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Removes indicated characters from a string.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CStringT::Replace</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Replaces indicated characters with other characters.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CStringT::ReverseFind</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Finds a character inside a larger string; starts from the end.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CStringT::Right</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Extracts the right part of a string.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CStringT::SetSysString</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Sets an existing <ph id="ph1">`BSTR`</ph> object with data from a <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CStringT::SpanExcluding</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Extracts characters from the string, starting with the first character, that are not in the set of characters identified by <ph id="ph1">`pszCharSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CStringT::SpanIncluding</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Extracts a substring that contains only the characters in a set.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CStringT::Tokenize</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Extracts specified tokens in a target string.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CStringT::Trim</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Trims all leading and trailing whitespace characters from the string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CStringT::TrimLeft</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Trims leading whitespace characters from the string.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CStringT::TrimRight</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Trims trailing whitespace characters from the string.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>operator =</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Assigns a new value to a <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CStringT::operator +</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Concatenates two strings or a character and a string.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CStringT::operator +=</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Concatenates a new string to the end of an existing string.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CStringT::operator ==</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Determines if two strings are logically equal.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CStringT::operator !=</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Determines if two strings are logically not equal.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Determines if the string on the left side of the operator is less than to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Determines if the string on the left side of the operator is greater than to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Determines if the string on the left side of the operator is less than or equal to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Determines if the string on the left side of the operator is greater than or equal to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>inherits from <bpt id="p1">[</bpt>CSimpleStringT Class<ept id="p1">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Advanced features, such as character manipulation, ordering, and searching, are implemented by <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>objects are capable of throwing exceptions.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This occurs when a <ph id="ph1">`CStringT`</ph> object runs out of memory for any reason.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> object consists of a variable-length sequence of characters.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>provides functions and operators using syntax similar to that of Basic.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Concatenation and comparison operators, together with simplified memory management, make <ph id="ph1">`CStringT`</ph> objects easier to use than ordinary character arrays.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Although it is possible to create <ph id="ph1">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Calling methods and operators on <ph id="ph1">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>By using different combinations of the <ph id="ph1">`BaseType`</ph> and <ph id="ph2">`StringTraits`</ph> parameters, <ph id="ph3">`CStringT`</ph> objects can come in the following types, which are have been predefined by the ATL libraries.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If using in an ATL application:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`CStringA`</ph>, and <ph id="ph2">`CStringW`</ph> are exported from the MFC DLL (MFC90.DLL), never from user DLLs.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This is done to prevent <ph id="ph1">`CStringT`</ph> from being multiply defined.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If you encountered linker errors when exporting a <ph id="ph1">`CString`</ph>-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, "Linking Errors When You Import CString-Derived Classes" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can find Knowledge Base articles on the MSDN Library CD-ROM or at <bpt id="p1">[</bpt>http://support.microsoft.com/support<ept id="p1">](http://support.microsoft.com/support)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following string types are available within MFC-based applications:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CStringT type</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Declaration</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An ANSI character type string with CRT support.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A Unicode character type string with CRT support.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Both ANSI and Unicode character types with CRT support.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The following string types are available in projects where <bpt id="p1">**</bpt>ATL_CSTRING_NO_CRT<ept id="p1">**</ept> is defined:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CStringT type</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Declaration</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CAtlStringA</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An ANSI character type string without CRT support.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CAtlStringW</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A Unicode character type string without CRT support.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CAtlString</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Both ANSI and Unicode character types without CRT support.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following string types are available in projects where <bpt id="p1">**</bpt>ATL_CSTRING_NO_CRT<ept id="p1">**</ept> is not defined:</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CStringT type</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Declaration</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CAtlStringA</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An ANSI character type string with CRT support.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CAtlStringW</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A Unicode character type string with CRT support.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CAtlString</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Both ANSI and Unicode character types with CRT support.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>objects also have the following characteristics:</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>objects can grow as a result of concatenation operations.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>objects follow "value semantics."</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Think of a <ph id="ph1">`CStringT`</ph> object as an actual string, not as a pointer to a string.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can freely substitute <ph id="ph1">`CStringT`</ph> objects for <ph id="ph2">`PCXSTR`</ph> function arguments.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Custom memory management for string buffers.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Memory Management and CStringT<ept id="p1">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CStringT Predefined Types</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CStringT`</ph> uses a template argument to define the character type (either <bpt id="p1">[</bpt>wchar_t<ept id="p1">](../../c-runtime-library/standard-types.md)</ept> or <bpt id="p2">[</bpt>char<ept id="p2">](../../c-runtime-library/standard-types.md)</ept>) supported, method parameter types can be complicated at times.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To simplify this issue, a set of predefined types is defined and used throughout the <ph id="ph1">`CStringT`</ph> class.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following table lists the various types:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A single character (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the same character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>YCHAR</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A single character (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the opposite character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A pointer to a character string (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the same character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>PYSTR</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A pointer to a character string (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the opposite character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> character string (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the same character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>PCYSTR</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> character string (either <ph id="ph1">`wchar_t`</ph> or <ph id="ph2">`char`</ph>) with the opposite character type as the <ph id="ph3">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Code that previously used undocumented methods of <ph id="ph1">`CString`</ph> (such as <bpt id="p1">**</bpt>AssignCopy<ept id="p1">**</ept>) must be replaced with code that uses the following documented methods of <ph id="ph2">`CStringT`</ph> (such as <ph id="ph3">`GetBuffer`</ph> or <ph id="ph4">`ReleaseBuffer`</ph>).</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>These methods are inherited from <ph id="ph1">`CSimpleStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CSimpleStringT</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Header</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Use for</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>cstringt.h</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>MFC-only string objects</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>atlstr.h</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Non-MFC string objects</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>CStringT::AllocSysString</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Allocates an Automation-compatible string of the type <ph id="ph1">`BSTR`</ph> and copies the contents of the <ph id="ph2">`CStringT`</ph> object into it, including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The newly allocated string.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In MFC programs, a <bpt id="p1">[</bpt>CMemoryException Class<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> is thrown if insufficient memory exists.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In ATL programs, a <bpt id="p1">[</bpt>CAtlException<ept id="p1">](../../atl/reference/catlexception-class.md)</ept> is thrown.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This function is normally used to return strings for Automation.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Commonly, if this string is passed to a COM function as an [in] parameter, then this requires the caller to free the string.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This can be done by using <bpt id="p1">[</bpt>SysFreeString<ept id="p1">](http://msdn.microsoft.com/en-us/8f230ee3-5f6e-4cb9-a910-9c90b754dcd3)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Allocating and Releasing Memory for a BSTR<ept id="p1">](../../atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For more information about OLE allocation functions in Windows, see <bpt id="p1">[</bpt>SysAllocString<ept id="p1">](http://msdn.microsoft.com/en-us/9e0437a2-9b4a-4576-88b0-5cb9d08ca29b)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CStringT::AllocSysString`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#105</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CStringT::AnsiToOem</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Converts all the characters in this <ph id="ph1">`CStringT`</ph> object from the ANSI character set to the OEM character set.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The function is not available if <ph id="ph1">`_UNICODE`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#106</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CStringT::AppendFormat</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Appends formatted data to an existing <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A format-control string.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The string resource identifier that contains the format-control string.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Optional arguments.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This function formats and appends a series of characters and values in the <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Each optional argument (if any) is converted and appended according to the corresponding format specification in <ph id="ph1">`pszFormat`</ph> or from the string resource identified by <ph id="ph2">`nFormatID`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#107</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CStringT::Collate</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Compares two strings using the generic-text function <ph id="ph1">`_tcscoll`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The other string used for comparison.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Zero if the strings are identical, &lt; 0 if this <ph id="ph1">`CStringT`</ph> object is less than <ph id="ph2">`psz`</ph>, or &gt; 0 if this <ph id="ph3">`CStringT`</ph> object is greater than <ph id="ph4">`psz`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The generic-text function <ph id="ph1">`_tcscoll`</ph>, which is defined in TCHAR.H, maps to either <ph id="ph2">`strcoll`</ph>, <ph id="ph3">`wcscoll`</ph>, or <ph id="ph4">`_mbscoll`</ph>, depending on the character set that is defined at compile time.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Each function performs a case-sensitive comparison of the strings according to the code page currently in use.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id="p1">](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>CStringT::CollateNoCase</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Compares two strings using the generic-text function <ph id="ph1">`_tcscoll`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The other string used for comparison.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Zero if the strings are identical (ignoring case), &lt; 0 if this <ph id="ph1">`CStringT`</ph> object is less than <ph id="ph2">`psz`</ph> (ignoring case), or &gt; 0 if this <ph id="ph3">`CStringT`</ph> object is greater than <ph id="ph4">`psz`</ph> (ignoring case).</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The generic-text function <ph id="ph1">`_tcscoll`</ph>, which is defined in TCHAR.H, maps to either <ph id="ph2">`stricoll`</ph>, <ph id="ph3">`wcsicoll`</ph>, or <ph id="ph4">`_mbsicoll`</ph>, depending on the character set that is defined at compile time.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Each function performs a case-insensitive comparison of the strings, according to the code page currently in use.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id="p1">](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#109</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CStringT::Compare</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Compares two strings (case sensitive).</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The other string used for comparison.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Zero if the strings are identical, &lt; 0 if this <ph id="ph1">`CStringT`</ph> object is less than <ph id="ph2">`psz`</ph>, or &gt; 0 if this <ph id="ph3">`CStringT`</ph> object is greater than <ph id="ph4">`psz`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The generic-text function <ph id="ph1">`_tcscmp`</ph>, which is defined in TCHAR.H, maps to either <ph id="ph2">`strcmp`</ph>, <ph id="ph3">`wcscmp`</ph>, or <ph id="ph4">`_mbscmp`</ph>, depending on the character set that is defined at compile time.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Each function performs a case-sensitive comparison of the strings and is not affected by locale.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>strcmp, wcscmp, _mbscmp<ept id="p1">](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>If the string contains embedded nulls, for purposes of comparison the string is considered to be truncated at the first embedded null character.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of <ph id="ph1">`CStringT::Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#110</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>CStringT::CompareNoCase</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Compares two strings (case insensitive).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The other string used for comparison.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Zero if the strings are identical (ignoring case), &lt;0 if this <ph id="ph1">`CStringT`</ph> object is less than <ph id="ph2">`psz`</ph> (ignoring case), or &gt;0 if this <ph id="ph3">`CStringT`</ph> object is greater than <ph id="ph4">`psz`</ph> (ignoring case).</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The generic-text function <ph id="ph1">`_tcsicmp`</ph>, which is defined in TCHAR.H, maps to either <ph id="ph2">`_stricmp`</ph>, <ph id="ph3">`_wcsicmp`</ph> or <ph id="ph4">`_mbsicmp`</ph>, depending on the character set that is defined at compile time.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Each function performs a case-insensitive comparison of the strings.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The comparison depends on the <ph id="ph1">`LC_CTYPE`</ph> aspect of the locale but not <ph id="ph2">`LC_COLLATE`</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l<ept id="p1">](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#111</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>CStringT::CStringT</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A pointer to an array of characters of length <ph id="ph1">`nLength`</ph>, not null-terminated.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A count of the number of characters in <ph id="ph1">`pch`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>A single character.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A null-terminated string to be copied into this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>A pointer to the memory manager for the <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`IAtlStringMgr`</ph> and memory management for <ph id="ph2">`CStringT`</ph>, see <bpt id="p1">[</bpt>Memory Management with CStringT<ept id="p1">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`CStringT`</ph> object to be copied into this <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CThisString`</ph> and <ph id="ph2">`CThisSimpleString`</ph>, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A variant object to be copied into this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The character type of the string class.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>(for ANSI character strings).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>(for Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>(for both ANSI and Unicode character strings).</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Boolean that specifies whether the project is an MFC DLL (TRUE) or not (FALSE).</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Must be <ph id="ph1">`System::String`</ph>, and the project must be compiled with /clr.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A handle for a <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Because the constructors copy the input data into new allocated storage, you should be aware that memory exceptions may result.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Note that some of these constructors act as conversion functions.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This allows you to substitute, for example, an <ph id="ph1">`LPTSTR`</ph> where a <ph id="ph2">`CStringT`</ph> object is expected.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`LPCSTR`</ph> <ph id="ph2">`lpsz`</ph> ): Constructs a Unicode <ph id="ph3">`CStringT`</ph> from an ANSI string.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also use this constructor to load a string resource as shown in the example below.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>): Constructs a <ph id="ph1">`CStringT`</ph> from a Unicode string.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`const unsigned char*`</ph> <ph id="ph2">`psz`</ph> ): Allows you to construct a <ph id="ph3">`CStringT`</ph> from a pointer to <ph id="ph4">`unsigned char`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Define the <bpt id="p1">**</bpt>_CSTRING_DISABLE_NARROW_WIDE_CONVERSION<ept id="p1">**</ept> macro to turn off implicit string conversion between <ph id="ph1">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> strings.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The macro excludes from compilation constructors that support conversion.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`strSrc`</ph> parameter can be either a <ph id="ph2">`CStringT`</ph> or <ph id="ph3">`CThisSimpleString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`CStringT`</ph>, use one of its default instantiations ( <ph id="ph2">`CString`</ph>, <ph id="ph3">`CStringA`</ph>, or <ph id="ph4">`CStringW`</ph>); for <ph id="ph5">`CThisSimpleString`</ph>, use a <ph id="ph6">`this`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>declares an instance of the <bpt id="p1">[</bpt>CSimpleStringT Class<ept id="p1">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>, which is a smaller string class with less built-in functionality than the <ph id="ph1">`CStringT`</ph> class.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The overload operator <ph id="ph1">`CSimpleStringT&lt;&gt;&amp;()`</ph> constructs a <ph id="ph2">`CStringT`</ph> object from a <ph id="ph3">`CSimpleStringT`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Although it is possible to create <ph id="ph1">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Calling methods and operators on <ph id="ph1">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#112</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>CStringT::~CStringT</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CStringT::Delete</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Deletes a character or characters from a string starting with the character at the given index.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first character in the <ph id="ph1">`CStringT`</ph> object to delete.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The number of characters to be removed.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The length of the changed string.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is longer than the string, the rest of the string will be removed.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#113</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>CStringT::Find</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Searches this string for the first match of a character or substring.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>A substring to search for.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The index of the character in the string to begin the search with, or 0 to start from the beginning.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>A single character to search for.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first character in this <ph id="ph1">`CStringT`</ph> object that matches the requested substring or characters; -1 if the substring or character is not found.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The function is overloaded to accept both single characters (similar to the run-time function <ph id="ph1">`strchr`</ph>) and strings (similar to <ph id="ph2">`strstr`</ph>).</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#114</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>CStringT::FindOneOf</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Searches this string for the first character that matches any character contained in <ph id="ph1">`pszCharSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>String containing characters for matching.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first character in this string that is also in <ph id="ph1">`pszCharSet`</ph>; –1 if there is no match.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of any of the characters in <ph id="ph1">`pszCharSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#115</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>CStringT::Format</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Writes formatted data to a <ph id="ph1">`CStringT`</ph> in the same way that <bpt id="p1">[</bpt>sprintf_s<ept id="p1">](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)</ept> formats data into a C-style character array.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The string resource identifier that contains the format-control string.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A format-control string.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Optional arguments.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>This function formats and stores a series of characters and values in the <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Each optional argument (if any) is converted and output according to the corresponding format specification in <ph id="ph1">`pszFormat`</ph> or from the string resource identified by <ph id="ph2">`nFormatID`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The call will fail if the string object itself is offered as a parameter to <ph id="ph1">`Format`</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>For example, the following code will cause unpredictable results:</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#116</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Format Specification Syntax: printf and wprintf Functions<ept id="p1">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#117</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>CStringT::FormatMessage</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Formats a message string.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The string resource identifier that contains the unformatted message text.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Points to the format-control string.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>It will be scanned for inserts and formatted accordingly.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The format string is similar to run-time function <ph id="ph1">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Optional arguments.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The function requires a message definition as input.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The message definition is determined by <ph id="ph1">`pszFormat`</ph> or from the string resource identified by <ph id="ph2">`nFormatID`</ph>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The function copies the formatted message text to the <ph id="ph1">`CStringT`</ph> object, processing any embedded insert sequences if requested.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>attempts to allocate system memory for the newly formatted string.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>If this attempt fails, a memory exception is automatically thrown.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Each insert must have a corresponding parameter following the <ph id="ph1">`pszFormat`</ph> or <ph id="ph2">`nFormatID`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Within the message text, several escape sequences are supported for dynamically formatting the message.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows <bpt id="p1">[</bpt>FormatMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679351)</ept> function in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#118</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>CStringT::FormatMessageV</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Formats a message string using a variable argument list.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Points to the format-control string.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>It will be scanned for inserts and formatted accordingly.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The format string is similar to run-time function <ph id="ph1">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Pointer to a list of arguments.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The function requires a message definition as input, determined by <ph id="ph1">`pszFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The function copies the formatted message text and a variable list of arguments to the <ph id="ph1">`CStringT`</ph> object, processing any embedded insert sequences if requested.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>calls <bpt id="p1">[</bpt>CStringT::FormatMessage<ept id="p1">](#cstringt__formatmessage)</ept>, which attempts to allocate system memory for the newly formatted string.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>If this attempt fails, a memory exception is automatically thrown.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows <bpt id="p1">[</bpt>FormatMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679351)</ept> function in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CStringT::FormatV</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Formats a message string using a variable argument list.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Points to the format-control string.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>It will be scanned for inserts and formatted accordingly.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The format string is similar to run-time function <ph id="ph1">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Pointer to a list of arguments.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Writes a formatted string and a variable list of arguments to a <ph id="ph1">`CStringT`</ph> string in the same way that <ph id="ph2">`vsprintf_s`</ph> formats data into a C-style character array.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#119</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#120</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>CStringT::GetEnvironmentVariable</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Sets the string to the value of the specified environment variable.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that specifies the environment variable.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the specified variable from the environment block of the calling process.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The value is in the form of a null-terminated string of characters.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#121</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>CStringT::Insert</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Inserts a single character or a substring at the given index within the string.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The index of the character before which the insertion will take place.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>A pointer to the substring to be inserted.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The character to be inserted.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The length of the changed string.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`iIndex`</ph> parameter identifies the first character that will be moved to make room for the character or substring.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> is zero, the insertion will occur before the entire string.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> is higher than the length of the string, the function will concatenate the present string and the new material provided by either <ph id="ph2">`ch`</ph> or <ph id="ph3">`psz`</ph>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#122</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CStringT::Left</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Extracts the leftmost <ph id="ph1">`nCount`</ph> characters from this <ph id="ph2">`CStringT`</ph> object and returns a copy of the extracted substring.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The number of characters to extract from this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> object that contains a copy of the specified range of characters.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">`CStringT`</ph> object may be empty.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> exceeds the string length, then the entire string is extracted.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>is similar to the Basic <ph id="ph1">`Left`</ph> function.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>For multi-byte character sets (MBCS), <ph id="ph1">`nCount`</ph> treats each 8-bit sequence as a character, so that <ph id="ph2">`nCount`</ph> returns the number of multi-byte characters multiplied by two.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#123</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>CStringT::LoadString</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Reads a Windows string resource, identified by <ph id="ph1">`nID`</ph>, into an existing <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>A handle to the instance of the module.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A Windows string resource ID.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The language of the string resource.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Nonzero if resource load was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Loads the string resource ( <ph id="ph1">`nID`</ph>) from the specified module ( <ph id="ph2">`hInstance`</ph>) using the specified language ( <ph id="ph3">`wLanguage`</ph>).</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#124</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>CStringT::MakeLower</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Converts the <ph id="ph1">`CStringT`</ph> object to a lowercase string.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The resulting lowercase string.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#125</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>CStringT::MakeReverse</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Reverses the order of the characters in the <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The resulting reversed string.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#126</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CStringT::MakeUpper</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Converts the <ph id="ph1">`CStringT`</ph> object to an uppercase string.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The resulting uppercase string.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#127</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>CStringT::Mid</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Extracts a substring of length <ph id="ph1">`nCount`</ph> characters from this <ph id="ph2">`CStringT`</ph> object, starting at position <ph id="ph3">`iFirst`</ph> (zero-based).</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first character in this <ph id="ph1">`CStringT`</ph> object that is to be included in the extracted substring.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The number of characters to extract from this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>If this parameter is not supplied, then the remainder of the string is extracted.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> object that contains a copy of the specified range of characters.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Note that the returned <ph id="ph1">`CStringT`</ph> object may be empty.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The function returns a copy of the extracted substring.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>is similar to the Basic Mid function (except that indexes in Basic are one-based).</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>For multibyte character sets (MBCS), <ph id="ph1">`nCount`</ph> refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#128</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>CStringT::OemToAnsi</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Converts all the characters in this <ph id="ph1">`CStringT`</ph> object from the OEM character set to the ANSI character set.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>This function is not available if <ph id="ph1">`_UNICODE`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CStringT::AnsiToOem<ept id="p1">](#cstringt__ansitooem)</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>CStringT::operator +</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Concatenates two strings or a character and a string.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character to concatenate with a string.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character to concatenate with a string.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> to concatenate with a string or character.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> to concatenate with a string or character.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string to concatenate with a string or character.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>A pointer to a string to concatenate with a string or character.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>There are seven overload forms of the <ph id="ph1">`CStringT::operator+`</ph> function.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The first version concatenates two existing <ph id="ph1">`CStringT`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The next two concatenate a <ph id="ph1">`CStringT`</ph> object and a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The next two concatenate a <ph id="ph1">`CStringT`</ph> object and an ANSI character.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The last two concatenate a <ph id="ph1">`CStringT`</ph> object and a Unicode character.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Although it is possible to create <ph id="ph1">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Calling methods and operators on <ph id="ph1">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#140</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>CStringT::operator +=</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Concatenates characters to the end of the string.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>str</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CThisSimpleString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>A boolean specifying whether the project is an MFC DLL or not.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The string base type.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>A variant object to concatenate to this string.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character to concatenate with a string.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A pointer to the original string being concatenated.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> to concatenate to this string.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The operator accepts another <ph id="ph1">`CStringT`</ph> object, a character pointer, or a single character.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>You should be aware that memory exceptions can occur whenever you use this concatenation operator because new storage can be allocated for characters added to this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>For information on <ph id="ph1">`CThisSimpleString`</ph>, see the Remarks section of <bpt id="p1">[</bpt>CStringT::CStringT<ept id="p1">](#cstringt__cstringt)</ept>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Although it is possible to create <ph id="ph1">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Calling methods and operators on <ph id="ph1">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#141</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>CStringT::operator ==</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Determines whether two strings are logically equal.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character for comparison.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character for comparison.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Tests whether a string or character on the left side is equal to a string or character on the right side, and returns TRUE or FALSE accordingly.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#142</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>CStringT::operator !=</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Determines whether two strings are logically not equal.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character to concatenate with a string.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>An ANSI or Unicode character to concatenate with a string.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Tests if a string or character on the left side is not equal to a string or character on the right side.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#143</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Determines whether the string on the left side of the operator is less than the string on the right side.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings, character by character until:</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, and so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#144</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Determines whether the string on the left side of the operator is greater than the string on the right side.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings, character by character until:</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#145</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Determines whether the string on the left side of the operator is less than or equal to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string for comparison.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings, character by character until:</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#146</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>CStringT::operator</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Determines whether the string on the left side of the operator is greater than or equal to the string on the right side.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> for comparison.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>A pointer to a string for comparison.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>A pointer to a string for comparison.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings, character by character until:</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#147</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>CStringT::Remove</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Removes all instances of the specified character from the string.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The character to be removed from a string.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>The count of characters removed from the string.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Zero if the string is not changed.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Comparisons for the character are case sensitive.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#129</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>CStringT::Replace</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>There are two versions of <ph id="ph1">`Replace`</ph>.The first version replaces one or more copies of a substring by using another substring.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Both substrings are null-terminated.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>The second version replaces one or more copies of a character by using another character.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Both versions operate on the character data stored in <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string to be replaced by <ph id="ph1">`pszNew`</ph>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string that replaces <ph id="ph1">`pszOld`</ph>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The character to be replaced by <ph id="ph1">`chNew`</ph>.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>The character replacing <ph id="ph1">`chOld`</ph>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Returns the number of replaced instances of the character or substring, or zero if the string is not changed.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>can change the string length because <ph id="ph1">`pszNew`</ph> and <ph id="ph2">`pszOld`</ph> do not have to be the same length, and several copies of the old substring can be changed to the new one.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The function performs a case-sensitive match.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Examples of <ph id="ph1">`CStringT`</ph> instances are <ph id="ph2">`CString`</ph>, <ph id="ph3">`CStringA`</ph>, and <ph id="ph4">`CStringW`</ph>.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`CStringA`</ph>, <ph id="ph2">`Replace`</ph> works with ANSI or multibyte (MBCS) characters.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`CStringW`</ph>, <ph id="ph2">`Replace`</ph> works with wide characters.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`CString`</ph>, the character data type is selected at compile time, based on whether the constants in the following table are defined.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Defined Constant</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Character Data Type</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Wide characters</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Multi-byte characters</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Neither</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Single-byte characters</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Both</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Undefined</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#200</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>CStringT::ReverseFind</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Searches this <ph id="ph1">`CStringT`</ph> object for the last match of a character.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The character to search for.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The zero-based index of the last character in this <ph id="ph1">`CStringT`</ph> object that matches the requested character, or –1 if the character is not found.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>The function is similar to the run-time function <ph id="ph1">`strrchr`</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#130</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>CStringT::Right</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Extracts the last (that is, rightmost) <ph id="ph1">`nCount`</ph> characters from this <ph id="ph2">`CStringT`</ph> object and returns a copy of the extracted substring.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The number of characters to extract from this <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> object that contains a copy of the specified range of characters.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Note that the returned <ph id="ph1">`CStringT`</ph> object can be empty.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> exceeds the string length, then the entire string is extracted.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>is similar to the Basic <ph id="ph1">`Right`</ph> function (except that indexes in Basic are zero-based).</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>For multibyte character sets (MBCS), <ph id="ph1">`nCount`</ph> refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#131</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>CStringT::SetSysString</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Reallocates the <ph id="ph1">`BSTR`</ph> pointed to by <ph id="ph2">`pbstr`</ph> and copies the contents of the <ph id="ph3">`CStringT`</ph> object into it, including the <ph id="ph4">`NULL`</ph> character.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>A pointer to a character string.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The new string.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Depending on the contents of the <ph id="ph1">`CStringT`</ph> object, the value of the <ph id="ph2">`BSTR`</ph> referenced by <ph id="ph3">`pbstr`</ph> can change.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>The function throws a <ph id="ph1">`CMemoryException`</ph> if insufficient memory exists.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>This function is normally used to change the value of strings passed by reference for Automation.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#132</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>CStringT::SpanExcluding</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Extracts characters from the string, starting with the first character, that are not in the set of characters identified by <ph id="ph1">`pszCharSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>A string interpreted as a set of characters.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>A substring that contains characters in the string that are not in <ph id="ph1">`pszCharSet`</ph>, beginning with the first character in the string and ending with the first character found in the string that is also in <ph id="ph2">`pszCharSet`</ph> (that is, starting with the first character in the string and up to but excluding the first character in the string that is found <ph id="ph3">`pszCharSet`</ph>).</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>It returns the entire string if no character in <ph id="ph1">`pszCharSet`</ph> is found in the string.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>extracts and returns all characters preceding the first occurrence of a character from <ph id="ph1">`pszCharSet`</ph> (in other words, the character from <ph id="ph2">`pszCharSet`</ph> and all characters following it in the string, are not returned).</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>If no character from <ph id="ph1">`pszCharSet`</ph> is found in the string, then <ph id="ph2">`SpanExcluding`</ph> returns the entire string.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#133</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>CStringT::SpanIncluding</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Extracts characters from the string, starting with the first character, that are in the set of characters identified by <ph id="ph1">`pszCharSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>A string interpreted as a set of characters.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>A substring that contains characters in the string that are in <ph id="ph1">`pszCharSet`</ph>, beginning with the first character in the string and ending when a character is found in the string that is not in <ph id="ph2">`pszCharSet.``SpanIncluding`</ph> returns an empty substring if the first character in the string is not in the specified set.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>If the first character of the string is not in the character set, then <ph id="ph1">`SpanIncluding`</ph> returns an empty string.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns a sequence of consecutive characters that are in the set.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#134</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>CStringT::Tokenize</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Finds the next token in a target string</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>A string containing token delimiters.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The order of these delimiters is not important.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The zero-based index to begin the search.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CStringT`</ph> object containing the current token value.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Tokenize`</ph> function finds the next token in the target string.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The set of characters in <ph id="ph1">`pszTokens`</ph> specifies possible delimiters of the token to be found.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>On each call to <ph id="ph1">`Tokenize`</ph> the function starts at <ph id="ph2">`iStart`</ph>, skips leading delimiters, and returns a <ph id="ph3">`CStringT`</ph> object containing the current token, which is the string of characters up to the next delimiter character.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`iStart`</ph> is updated to be the position following the ending delimiter character, or -1 if the end of the string was reached.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>More tokens can be broken out of the remainder of the target string by a series of calls to <ph id="ph1">`Tokenize`</ph>, using <ph id="ph2">`iStart`</ph> to keep track of where in the string the next token is to be read.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>When there are no more tokens the function will return an empty string and <ph id="ph1">`iStart`</ph> will be set to -1.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Unlike the CRT tokenize functions like <bpt id="p1">[</bpt>strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l<ept id="p1">](../../c-runtime-library/reference/strtok-s-strtok-s-l-wcstok-s-wcstok-s-l-mbstok-s-mbstok-s-l.md)</ept>, <ph id="ph1">`Tokenize`</ph> does not modify the target string.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#135</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The output from this example is as follows:</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>CStringT::Trim</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Trims leading and trailing characters from the string.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>The target character to be trimmed.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the target characters to be trimmed.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>All leading and trailing occurrences of characters in <ph id="ph1">`pszTarget`</ph> will be trimmed from the <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Returns the trimmed string.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Removes all leading and trailing occurrences of one of the following:</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The character specified by</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>All characters found in the string specified by</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Whitespace.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#136</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The output from this example is as follows:</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>CStringT::TrimLeft</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Trims leading characters from the string.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>The target character to be trimmed.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the target characters to be trimmed.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>All leading occurrences of characters in <ph id="ph1">`pszTarget`</ph> will be trimmed from the <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The resulting trimmed string.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Removes all leading and trailing occurrences of one of the following:</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The character specified by</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>All characters found in the string specified by</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Whitespace.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#137</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>CStringT::TrimRight</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Trims trailing characters from the string.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>The target character to be trimmed.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the target characters to be trimmed.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>All trailing occurrences of characters in <ph id="ph1">`pszTarget`</ph> will be trimmed from the <ph id="ph2">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">`CStringT`</ph> object that contains the trimmed string.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Removes trailing occurrences of one of the following:</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>The character specified by</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>All characters found in the string specified by</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Whitespace.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CStringT&amp; TrimRight(XCHAR chTarget)`</ph> version accepts one character parameter and removes all copies of that character from the end of <ph id="ph2">`CStringT`</ph> string data.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>It starts from the end of the string and works toward the front.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>It stops when it finds a different character or when <ph id="ph1">`CSTringT`</ph> runs out of character data.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CStringT&amp; TrimRight(PCXSTR pszTargets)`</ph> version accepts a null-terminated string that contains all the different characters to search for.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>It removes all copies of those characters in the <ph id="ph1">`CStringT`</ph> object.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>It starts at the end of the string and works toward the front.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>It stops when it finds a character that is not in the target string, or when <ph id="ph1">`CStringT`</ph> runs out of character data.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>It does not try to match the whole target string to a substring at the end of <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CStringT&amp; TrimRight()`</ph> version requires no parameters.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>It trims any trailing whitespace characters from the end of the <ph id="ph1">`CStringT`</ph> string.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Whitespace characters can be line breaks, spaces, or tabs.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#138</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>ATL/MFC Shared Classes</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>CSimpleStringT Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>