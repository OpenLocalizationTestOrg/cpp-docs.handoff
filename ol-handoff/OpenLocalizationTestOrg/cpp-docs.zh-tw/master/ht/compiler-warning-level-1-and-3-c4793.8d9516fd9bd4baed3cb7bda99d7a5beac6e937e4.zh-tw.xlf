<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22144e099cd6221be5b5936bb600f0b0c1fe909f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-1-and-3-c4793.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfe5ddfa02788cfae9c853125c0d761679450418</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58294908bf78deb7f3cbdfaefeb2f1b2d484c00f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1 and 3) C4793 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 1 and 3) C4793</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>'function' : function is compiled as native code: 'reason'</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The compiler cannot compile <bpt id="p1">*</bpt>function<ept id="p1">*</ept> into managed code, even though the <bpt id="p2">[</bpt>/clr<ept id="p2">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is specified.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instead, the compiler emits warning C4793 and an explanatory continuation message, and then compiles <bpt id="p1">*</bpt>function<ept id="p1">*</ept> into native code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The continuation message contains the <bpt id="p1">*</bpt>reason<ept id="p1">*</ept> text that explains why <bpt id="p2">*</bpt>function<ept id="p2">*</ept> cannot be compiled to <ph id="ph1">`MSIL`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is a level 1 warning when you specify the <ph id="ph1">`/clr:pure`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table lists all possible continuation messages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reason message</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Aligned data types are not supported in managed code</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The CLR must be able to allocate data as needed, which might not be possible if the data is aligned with declarations such as <bpt id="p1">[</bpt>__m128<ept id="p1">](../../cpp/m128.md)</ept> or <bpt id="p2">[</bpt>align<ept id="p2">](../../cpp/align-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Functions that use '__ImageBase' are not supported in managed code</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>is a special linker symbol that is typically used only by low-level native code to load a DLL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>varargs are not supported by the '/clr' compiler option</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Native functions cannot call managed functions that have <bpt id="p1">[</bpt>variable argument lists<ept id="p1">](../../cpp/functions-with-variable-argument-lists-cpp.md)</ept> (varargs) because the functions have different stack layout requirements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, if you specify the <ph id="ph1">`/clr:pure`</ph> compiler option, variable argument lists are supported because the assembly can contain only managed functions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id="p1">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The 64-bit CLR does not support data declared with the __ptr32 modifier</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A pointer must be the same size as a native pointer on the current platform.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__ptr32, <ph id="ph1">\_</ph>_ptr64<ept id="p1">](../../cpp/ptr32-ptr64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The 32-bit CLR does not support data declared with the __ptr64 modifier</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A pointer must be the same size as a native pointer on the current platform.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__ptr32, <ph id="ph1">\_</ph>_ptr64<ept id="p1">](../../cpp/ptr32-ptr64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One or more intrinsics is not supported in managed code</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the intrinsic is not available at the time the message is emitted.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, an intrinsic that causes this message typically represents a low-level machine instruction.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Inline native assembly ('__asm') is not supported in managed code</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inline assembly code<ept id="p1">](../../assembler/inline/asm.md)</ept> can contain arbitrary native code, which cannot be managed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A non-__clrcall virtual function thunk must be compiled as native</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A non-<bpt id="p1">[</bpt>__clrcall<ept id="p1">](../../cpp/clrcall.md)</ept> virtual function thunk must use an unmanaged address.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A function using '_setjmp' must be compiled as native</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The CLR must be able to control program execution.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, the <bpt id="p1">[</bpt>setjmp<ept id="p1">](../../cpp/using-setjmp-longjmp.md)</ept> function bypasses regular program execution by saving and restoring low-level information such as registers and execution state.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following sample generates C4793.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following sample generates C4793.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>