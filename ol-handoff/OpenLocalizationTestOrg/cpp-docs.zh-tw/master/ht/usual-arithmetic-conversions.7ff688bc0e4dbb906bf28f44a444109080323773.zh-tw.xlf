<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">674c20f0c38152f2eae5414ec22f5302bb52e9ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\usual-arithmetic-conversions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f64f19f23d01471576b234e722cfa8bd45f28f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb4afdfcf464bb4af9df4377af6d0c29e0dd24c6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Usual Arithmetic Conversions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Usual Arithmetic Conversions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Most C operators perform type conversions to bring the operands of an expression to a common type or to extend short values to the integer size used in machine operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The conversions performed by C operators depend on the specific operator and the type of the operand or operands.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, many operators perform similar conversions on operands of integral and floating types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These conversions are known as "arithmetic conversions."</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Conversion of an operand value to a compatible type causes no change to its value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The arithmetic conversions summarized below are called "usual arithmetic conversions."</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These steps are applied only for binary operators that expect arithmetic type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The purpose is to yield a common type which is also the type of the result.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To determine which conversions actually take place, the compiler applies the following algorithm to binary operations in the expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The steps below are not a precedence order.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If either operand is of type <ph id="ph1">`long double`</ph>, the other operand is converted to type <ph id="ph2">`long double`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the above condition is not met and either operand is of type <bpt id="p1">**</bpt>double<ept id="p1">**</ept>, the other operand is converted to type <bpt id="p2">**</bpt>double<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the above two conditions are not met and either operand is of type <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, the other operand is converted to type <bpt id="p2">**</bpt>float<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the above three conditions are not met (none of the operands are of floating types), then integral conversions are performed on the operands as follows:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If either operand is of type <ph id="ph1">`unsigned long`</ph>, the other operand is converted to type <ph id="ph2">`unsigned long`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the above condition is not met and either operand is of type <bpt id="p1">**</bpt>long<ept id="p1">**</ept> and the other of type <ph id="ph1">`unsigned int`</ph>, both operands are converted to type <ph id="ph2">`unsigned long`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the above two conditions are not met, and either operand is of type <bpt id="p1">**</bpt>long<ept id="p1">**</ept>, the other operand is converted to type <bpt id="p2">**</bpt>long<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the above three conditions are not met, and either operand is of type <ph id="ph1">`unsigned int`</ph>, the other operand is converted to type <ph id="ph2">`unsigned int`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If none of the above conditions are met, both operands are converted to type <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code illustrates these conversion rules:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>