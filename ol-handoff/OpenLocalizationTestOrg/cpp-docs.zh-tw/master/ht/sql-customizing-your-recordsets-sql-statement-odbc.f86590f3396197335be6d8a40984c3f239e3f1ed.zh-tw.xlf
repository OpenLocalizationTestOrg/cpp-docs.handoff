<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ca8d598d23fa9a0a2307d3a8cdc895cd9e3c137</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\sql-customizing-your-recordsets-sql-statement-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1535c64dc63beeff9229ed676e4059f9ef3d60fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2df242579c207312a675e66ed65c765e32eef0e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SQL: Customizing Your Recordset’s SQL Statement (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SQL: Customizing Your Recordset’s SQL Statement (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How the framework constructs a SQL statement</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>How to override the SQL statement</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This information applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are working with the MFC DAO classes, see the topic "Comparison of Microsoft Jet Database Engine SQL and ANSI SQL" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SQL Statement Construction</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Your recordset bases record selection primarily on a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you declare your class with a wizard, it writes an overriding version of the <ph id="ph1">`GetDefaultSQL`</ph> member function that looks something like this (for a recordset class called <ph id="ph2">`CAuthors`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By default, this override returns the table name you specified with the wizard.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the example, the table name is "AUTHORS."</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you later call the recordset's <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> constructs a final <bpt id="p3">**</bpt>SELECT<ept id="p3">**</ept> statement of the form:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`table-name`</ph> is obtained by calling <ph id="ph2">`GetDefaultSQL`</ph> and <ph id="ph3">`rfx-field-list`</ph> is obtained from the RFX function calls in <ph id="ph4">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is what you get for a <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement unless you replace it with an overriding version at run time, although you can also modify the default statement with parameters or a filter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you specify a column name that contains (or could contain) spaces, you must enclose the name in square brackets.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the name "First Name" should be "[First Name]".</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To override the default <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement, pass a string containing a complete <bpt id="p2">**</bpt>SELECT<ept id="p2">**</ept> statement when you call <bpt id="p3">**</bpt>Open<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead of constructing its own default string, the recordset uses the string you supply.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If your replacement statement contains a <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause, do not specify a filter in <bpt id="p2">**</bpt>m_strFilter<ept id="p2">**</ept> because you would then have two filter statements.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Similarly, if your replacement statement contains an <bpt id="p1">**</bpt>ORDER BY<ept id="p1">**</ept> clause, do not specify a sort in <ph id="ph1">`m_strSort`</ph> so that you will not have two sort statements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you use literal strings in your filters (or other parts of the SQL statement), you might have to "quote" (enclose in specified delimiters) such strings with a DBMS-specific literal prefix and literal suffix character (or characters).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You might also encounter special syntactic requirements for operations such as outer joins, depending on your DBMS.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use ODBC functions to obtain this information from your driver for the DBMS.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, call <bpt id="p1">**</bpt>::SQLGetTypeInfo<ept id="p1">**</ept> for a particular data type, such as <bpt id="p2">**</bpt>SQL_VARCHAR<ept id="p2">**</ept>, to request the <bpt id="p3">**</bpt>LITERAL_PREFIX<ept id="p3">**</ept> and <bpt id="p4">**</bpt>LITERAL_SUFFIX<ept id="p4">**</ept> characters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are writing database-independent code, see Appendix C in the <bpt id="p1">*</bpt>ODBC SDK<ept id="p1">*</ept><bpt id="p2">*</bpt>Programmer's Reference<ept id="p2">*</ept> on the MSDN Library CD for detailed syntax information.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A recordset object constructs the SQL statement that it uses to select records unless you pass a custom SQL statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>How this is done depends mainly on the value you pass in the <ph id="ph1">`lpszSQL`</ph> parameter of the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The general form of a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement is:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>One way to add the <bpt id="p1">**</bpt>DISTINCT<ept id="p1">**</ept> keyword to your recordset's SQL statement is to embed the keyword in the first RFX function call in <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use this technique only with a recordset opened as read-only.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Overriding the SQL Statement</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following table shows the possibilities for the <ph id="ph1">`lpszSQL`</ph> parameter to <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The cases in the table are explained following the table.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The lpszSQL Parameter and the Resulting SQL String</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Case</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>What you pass in lpszSQL</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The resulting SELECT statement</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> <bpt id="p2">*</bpt>rfx-field-list<ept id="p2">*</ept> <bpt id="p3">**</bpt>FROM<ept id="p3">**</ept> <bpt id="p4">*</bpt>table-name<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>calls <ph id="ph1">`GetDefaultSQL`</ph> to get the table name.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The resulting string is one of cases 2 through 5, depending on what <ph id="ph1">`GetDefaultSQL`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A table name</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> <bpt id="p2">*</bpt>rfx-field-list<ept id="p2">*</ept> <bpt id="p3">**</bpt>FROM<ept id="p3">**</ept> <bpt id="p4">*</bpt>table-name<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The field list is taken from the RFX statements in <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> and <ph id="ph1">`m_strSort`</ph> are not empty, adds the <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> and/or <bpt id="p3">**</bpt>ORDER BY<ept id="p3">**</ept> clauses.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>3 *</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A complete <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement but without a <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> or <bpt id="p3">**</bpt>ORDER BY<ept id="p3">**</ept> clause</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As passed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> and <ph id="ph1">`m_strSort`</ph> are not empty, adds the <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> and/or <bpt id="p3">**</bpt>ORDER BY<ept id="p3">**</ept> clauses.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>4 *</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A complete <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement with a <bpt id="p2">**</bpt>WHERE<ept id="p2">**</ept> and/or <bpt id="p3">**</bpt>ORDER BY<ept id="p3">**</ept> clause</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>As passed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> and/or <ph id="ph1">`m_strSort`</ph> must remain empty, or two filter and/or sort statements are produced.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>5 *</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A call to a stored procedure</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>As passed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>must be less than or equal to the number of columns specified in the <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The data type of each column specified in the <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement must be the same as the data type of the corresponding RFX output column.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Case 1   lpszSQL = NULL</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The recordset selection depends on what <ph id="ph1">`GetDefaultSQL`</ph> returns when <ph id="ph2">`CRecordset::Open`</ph> calls it.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Cases 2 through 5 describe the possible strings.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Case 2   lpszSQL = a Table Name</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The recordset uses record field exchange (RFX) to build the column list from the column names provided in the RFX function calls in the recordset class's override of <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you used a wizard to declare your recordset class, this case has the same result as case 1 (provided that you pass the same table name you specified in the wizard).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you do not use a wizard to write your class, case 2 is the simplest way to construct the SQL statement.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example constructs a SQL statement that selects records from an MFC database application.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the framework calls the <ph id="ph1">`GetDefaultSQL`</ph> member function, the function returns the name of the table, <ph id="ph2">`SECTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To obtain the names of the columns for the SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement, the framework calls the <ph id="ph1">`DoFieldExchange`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When complete, the SQL statement looks like this:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Case 3   lpszSQL = a SELECT/FROM Statement</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You specify the column list by hand rather than relying on RFX to construct it automatically.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You might want to do this when:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You want to specify the <bpt id="p1">**</bpt>DISTINCT<ept id="p1">**</ept> keyword following <bpt id="p2">**</bpt>SELECT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Your column list should match the column names and types in the same order as they are listed in <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You have reason to manually retrieve column values using the ODBC function <bpt id="p1">**</bpt>::SQLGetData<ept id="p1">**</ept> rather than relying on RFX to bind and retrieve columns for you.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You might, for example, want to accommodate new columns a customer of your application added to the database tables after the application was distributed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You need to add these extra field data members, which were not known at the time you declared the class with a wizard.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Your column list should match the column names and types in the same order as they are listed in <ph id="ph1">`DoFieldExchange`</ph>, followed by the names of the manually bound columns.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Dynamically Binding Data Columns (ODBC)<ept id="p1">](../../data/odbc/recordset-dynamically-binding-data-columns-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You want to join tables by specifying multiple tables in the <bpt id="p1">**</bpt>FROM<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For information and an example, see <bpt id="p1">[</bpt>Recordset: Performing a Join (ODBC)<ept id="p1">](../../data/odbc/recordset-performing-a-join-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Case 4   lpszSQL = SELECT/FROM Plus WHERE and/or ORDER BY</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You specify everything: the column list (based on the RFX calls in <ph id="ph1">`DoFieldExchange`</ph>), the table list, and the contents of a <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> and/or an <bpt id="p2">**</bpt>ORDER BY<ept id="p2">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you specify your <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> and/or <bpt id="p2">**</bpt>ORDER BY<ept id="p2">**</ept> clauses this way, do not use <bpt id="p3">**</bpt>m_strFilter<ept id="p3">**</ept> and/or <ph id="ph1">`m_strSort`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Case 5   lpszSQL = a Stored Procedure Call</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If you need to call a predefined query (such as a stored procedure in a Microsoft SQL Server database), you must write a <bpt id="p1">**</bpt>CALL<ept id="p1">**</ept> statement in the string you pass to <ph id="ph1">`lpszSQL`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The wizards do not support declaring a recordset class for calling a predefined query.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Not all predefined queries return records.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If a predefined query does not return records, you can use the <ph id="ph1">`CDatabase`</ph> member function <ph id="ph2">`ExecuteSQL`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For a predefined query that does return records, you must also manually write the RFX calls in <ph id="ph1">`DoFieldExchange`</ph> for any columns the procedure returns.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The RFX calls must be in the same order and return the same types, as the predefined query.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Declaring a Class for a Predefined Query (ODBC)<ept id="p1">](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>SQL: SQL and C++ Data Types (ODBC)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>SQL: Making Direct SQL Calls (ODBC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>