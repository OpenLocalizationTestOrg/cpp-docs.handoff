<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e1bcb67fc55e42420f30f5e73aa3639f04fb1dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\zc-wchar-t-wchar-t-is-native-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6255cdfefc779191162987f6175b0984428dfa58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92ce28fc45134f003d0269cc981d9d438cb6f7db</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-Zc:wchar_t (wchar_t Is Native Type) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/Zc:wchar_t (wchar_t Is Native Type)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Parse <ph id="ph1">`wchar_t`</ph> as a built-in type according to the C++ standard.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> is on.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> is on, <ph id="ph1">`wchar_t`</ph> maps to the Microsoft-specific native type <ph id="ph2">`__wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>/Zc:wchar_t-<ept id="p1">**</ept> (with a minus sign) is specified, <ph id="ph1">`wchar_t`</ph> maps to a <ph id="ph2">`typedef`</ph> for <ph id="ph3">`unsigned short`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(In Visual C++ 6.0 and earlier, <ph id="ph1">`wchar_t`</ph> was not implemented as a built-in type, but was declared in wchar.h as a <ph id="ph2">`typedef`</ph> for <ph id="ph3">`unsigned short`</ph>.) We do not recommend <bpt id="p1">**</bpt>/Zc:wchar_t-<ept id="p1">**</ept> because the C++ standard requires that <ph id="ph4">`wchar_t`</ph> be a built-in type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`typedef`</ph> version can cause portability problems.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you upgrade from earlier versions of Visual C++ and encounter compiler error <bpt id="p1">[</bpt>C2664<ept id="p1">](../../error-messages/compiler-errors-2/compiler-error-c2664.md)</ept> because the code is trying to implicitly convert a <ph id="ph1">`wchar_t`</ph> to <ph id="ph2">`unsigned short`</ph>, we recommend that you change the code to fix the error, instead of setting <bpt id="p2">**</bpt>/Zc:wchar_t-<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Microsoft implements <ph id="ph1">`wchar_t`</ph> as a two-byte unsigned value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`wchar_t`</ph>, see <bpt id="p1">[</bpt>Data Type Ranges<ept id="p1">](../../cpp/data-type-ranges.md)</ept> and <bpt id="p2">[</bpt>Fundamental Types<ept id="p2">](../../cpp/fundamental-types-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you write new code that has to interoperate with older code that still uses the <ph id="ph1">`typedef`</ph> version of <ph id="ph2">`wchar_t`</ph>, you can provide overloads for both the <ph id="ph3">`unsigned short`</ph> and <ph id="ph4">`__wchar_t`</ph> variations of <ph id="ph5">`wchar_t`</ph>, so that your code can be linked with code compiled with <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> or code compiled without it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Otherwise, you would have to provide two different builds of the library—one with and one without <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> enabled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Even in this case, we recommend that you build the older code by using the same compiler that you use to compile the new code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Never mix binaries compiled with different compilers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> is specified, <bpt id="p2">**</bpt>_WCHAR_T_DEFINED<ept id="p2">**</ept> and <bpt id="p3">**</bpt>_NATIVE_WCHAR_T_DEFINED<ept id="p3">**</ept> symbols are defined.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Predefined Macros<ept id="p1">](../../preprocessor/predefined-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If your code uses the compiler COM global functions, because <bpt id="p1">**</bpt>/Zc:wchar_t<ept id="p1">**</ept> is now on by default, we recommend that you change explicit references to comsupp.lib—from the <bpt id="p2">[</bpt>comment pragma<ept id="p2">](../../preprocessor/comment-c-cpp.md)</ept> or on the command line—to either comsuppw.lib or comsuppwd.lib.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(If you must compile with <bpt id="p1">**</bpt>/Zc:wchar_t-<ept id="p1">**</ept>, use comsupp.lib.) If you include the comdef.h header file, the correct library is specified for you.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For information about compiler COM support, see <bpt id="p1">[</bpt>Compiler COM Support<ept id="p1">](../../cpp/compiler-com-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wchar_t`</ph> type is not supported when you compile C code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about conformance issues with Visual C++, see <bpt id="p1">[</bpt>Nonstandard Behavior<ept id="p1">](../../cpp/nonstandard-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To set this compiler option in the Visual Studio development environment</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the project's <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Working with Project Properties<ept id="p1">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the left pane, expand <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, <bpt id="p2">**</bpt>C/C++<ept id="p2">**</ept>, and then select <bpt id="p3">**</bpt>Language<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">**</bpt>Treat wchar_t as Built-in Type<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To set this compiler option programmatically</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.TreatWChar_tAsBuiltInType%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>/Zc (Conformance)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>