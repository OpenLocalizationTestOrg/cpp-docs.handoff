<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1669ee33324bacd1795b541f99cbef0531956867</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\num-get-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7487379bae7ac2731cedaec1a90f4e4cb3c4685</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0314edf915a72d65c5791d3154ff467f87b76fba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>num_get Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>num_get Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A template class that describes an object that can serve as a locale facet to control conversions of sequences of type <ph id="ph1">`CharType`</ph> to numeric values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters in a locale.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of iterator from which the numeric get functions read their input.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>num_get</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`num_get`</ph> that are used to extract numerical values from sequences.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>iter_type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A type that describes an input iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>do_get</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A virtual function that is called to extracts a numerical or Boolean value from a character sequence.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>get</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Extracts a numerical or Boolean value from a character sequence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>num_get::char_type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>num_get::do_get</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A virtual function that is called to extracts a numerical or Boolean value from a character sequence.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The beginning of the range of characters from which to read the number.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The end of the range of characters from which to read the number.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept> whose flags are used by the conversion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The state to which failbit (see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>) is added upon failure.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The value that was read.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The iterator after the value has been read.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first virtual protected member function,</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>matches sequential elements beginning at <ph id="ph1">`first`</ph> in the sequence <ph id="ph2">`[``first``,`</ph> <ph id="ph3">`last``)`</ph> until it has recognized a complete, nonempty integer input field.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as type <ph id="ph1">`long``,`</ph> and stores the result in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the numeric input field.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Otherwise, the function stores nothing in <ph id="ph1">`val`</ph> and sets <ph id="ph2">`ios_base::failbit`</ph> in <ph id="ph3">`state`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid integer input field.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <ph id="ph1">`last`</ph>, the function sets <ph id="ph2">`ios_base::eofbit`</ph> in <ph id="ph3">`state`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The integer input field is converted by the same rules used by the scan functions for matching and converting a series of <ph id="ph1">`char`</ph> elements from a file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(Each such <ph id="ph1">`char`</ph> element is assumed to map to an equivalent element of type <ph id="ph2">`Elem`</ph> by a simple, one-to-one, mapping.) The equivalent scan conversion specification is determined as follows:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iosbase.`</ph><bpt id="p1">[</bpt>ios_base::flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id="ph2">`() &amp; ios_base::basefield == ios_base::`</ph><bpt id="p2">[</bpt>oct<ept id="p2">](../standard-library/ios-functions.md#oct)</ept>, the conversion specification is <ph id="ph3">`lo`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iosbase.flags() &amp; ios_base::basefield == ios_base::`</ph><bpt id="p1">[</bpt>hex<ept id="p1">](../standard-library/ios-functions.md#hex)</ept>, the conversion specification is <ph id="ph2">`lx`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iosbase.flags() &amp; ios_base::basefield == 0`</ph>, the conversion specification is <ph id="ph2">`li`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Otherwise, the conversion specification is <ph id="ph1">`ld`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The format of an integer input field is further determined by the <bpt id="p1">[</bpt>locale facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept><ph id="ph1">`fac`</ph> returned by the call <bpt id="p2">[</bpt>use_facet<ept id="p2">](../standard-library/locale-functions.md#use_facet)</ept> <ph id="ph2">`&lt;`</ph><bpt id="p3">[</bpt>numpunct<ept id="p3">](../standard-library/numpunct-class.md)</ept><ph id="ph3">`&lt;Elem&gt;(iosbase.`</ph> <bpt id="p4">[</bpt>ios_base::getloc<ept id="p4">](../standard-library/ios-base-class.md#ios_base__getloc)</ept><ph id="ph4">`())`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>numpunct::grouping<ept id="p1">](../standard-library/numpunct-class.md#numpunct__grouping)</ept> <ph id="ph1">`()`</ph> determines how digits are grouped to the left of any decimal point</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>numpunct::thousands_sep<ept id="p1">](../standard-library/numpunct-class.md#numpunct__thousands_sep)</ept> <ph id="ph1">`()`</ph> determines the sequence that separates groups of digits to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If no instances of <ph id="ph1">`fac.thousands_sep()`</ph> occur in the numeric input field, no grouping constraint is imposed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Otherwise, any grouping constraints imposed by <ph id="ph1">`fac.grouping()`</ph> are enforced and separators are removed before the scan conversion occurs.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The fourth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <ph id="ph1">`ld`</ph> with <ph id="ph2">`lu`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If successful it converts the numeric input field to a value of type <ph id="ph1">`unsigned long`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The fifth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <ph id="ph1">`ld`</ph> with <ph id="ph2">`lld`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If successful it converts the numeric input field to a value of type <ph id="ph1">`long long`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The sixth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <ph id="ph1">`ld`</ph> with <ph id="ph2">`llu`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If successful it converts the numeric input field to a value of type <ph id="ph1">`unsigned long long`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The seventh virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it endeavors to match a complete, nonempty floating-point input field.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>numpunct::decimal_point<ept id="p1">](../standard-library/numpunct-class.md#numpunct__decimal_point)</ept><ph id="ph1">`()`</ph> determines the sequence that separates the integer digits from the fraction digits.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The equivalent scan conversion specifier is <ph id="ph1">`lf`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The eighth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it endeavors to match a complete, nonempty floating-point input field.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>numpunct::decimal_point<ept id="p1">](../standard-library/numpunct-class.md#numpunct__decimal_point)</ept><ph id="ph1">`()`</ph> determines the sequence that separates the integer digits from the fraction digits.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The equivalent scan conversion specifier is <ph id="ph1">`lf`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The ninth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>behaves the same as the eighth, except that the equivalent scan conversion specifier is <ph id="ph1">`Lf`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The ninth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>behaves the same the first, except that the equivalent scan conversion specifier is <ph id="ph1">`p`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The last (eleventh) virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it endeavors to match a complete, nonempty Boolean input field.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If successful it converts the Boolean input field to a value of type <ph id="ph1">`bool`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A Boolean input field takes one of two forms.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iosbase.flags() &amp; ios_base::`</ph><bpt id="p1">[</bpt>boolalpha<ept id="p1">](../standard-library/ios-functions.md#boolalpha)</ept> is false, it is the same as an integer input field, except that the converted value must be either 0 (for false) or 1 (for true).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Otherwise, the sequence must match either <ph id="ph1">`fac.`</ph><bpt id="p1">[</bpt>numpunct::falsename<ept id="p1">](../standard-library/numpunct-class.md#numpunct__falsename)</ept><ph id="ph2">`()`</ph> (for false), or <ph id="ph3">`fac.`</ph><bpt id="p2">[</bpt>numpunct::truename<ept id="p2">](../standard-library/numpunct-class.md#numpunct__truename)</ept><ph id="ph4">`()`</ph> (for true).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get<ept id="p1">](#num_get__get)</ept>, where the virtual member function is called by <ph id="ph1">`do_get`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>num_get::get</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Extracts a numerical or Boolean value from a character sequence.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The beginning of the range of characters from which to read the number.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The end of the range of characters from which to read the number.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept> whose flags are used by the conversion.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The state to which failbit (see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>) is added upon failure.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The value that was read.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The iterator after the value has been read.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>All member functions return <bpt id="p1">[</bpt>do_get<ept id="p1">](#num_get__do_get)</ept>( <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_State`</ph>, <ph id="ph5">`val`</ph>).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The first virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id="ph1">`first`</ph>, <ph id="ph2">`last`</ph>) until it has recognized a complete, nonempty integer input field.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If successful, it converts this field to its equivalent value as type <bpt id="p1">**</bpt>long<ept id="p1">**</ept> and stores the result in <ph id="ph1">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond the numeric input field.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Otherwise, the function stores nothing in <ph id="ph1">`val`</ph> and sets <ph id="ph2">`ios_base::failbit`</ph> in _ <bpt id="p1">*</bpt>State<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It returns an iterator designating the first element beyond any prefix of a valid integer input field.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In either case, if the return value equals <bpt id="p1">**</bpt>last<ept id="p1">**</ept>, the function sets <ph id="ph1">`ios_base::eofbit`</ph> in <ph id="ph2">`_State`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The integer input field is converted by the same rules used by the scan functions for matching and converting a series of <ph id="ph1">`char`</ph> elements from a file.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Each such <ph id="ph1">`char`</ph> element is assumed to map to an equivalent element of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> by a simple, one-to-one mapping.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The equivalent scan conversion specification is determined as follows:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id="ph1"> &amp; `ios_base::basefield` == `ios_base::`</ph><bpt id="p2">[</bpt>oct<ept id="p2">](../standard-library/ios-functions.md#oct)</ept>, the conversion specification is <bpt id="p3">**</bpt>lo<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase.flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::basefield<ept id="p2">**</ept><ph id="ph2"> == `ios_base::`</ph><bpt id="p3">[</bpt>hex<ept id="p3">](../standard-library/ios-functions.md#hex)</ept>, the conversion specification is <bpt id="p4">**</bpt>lx<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase.flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::basefield<ept id="p2">**</ept> == 0, the conversion specification is <ph id="ph2">`li`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Otherwise, the conversion specification is <bpt id="p1">**</bpt>ld<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The format of an integer input field is further determined by the <bpt id="p1">[</bpt>locale facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept><bpt id="p2">**</bpt>fac<ept id="p2">**</ept> returned by the call <bpt id="p3">[</bpt>use_facet<ept id="p3">](../standard-library/locale-functions.md#use_facet)</ept><ph id="ph1"> &lt; </ph><bpt id="p4">[</bpt>numpunct<ept id="p4">](../standard-library/numpunct-class.md)</ept><ph id="ph2">\&lt;</ph> <bpt id="p5">**</bpt>Elem<ept id="p5">**</ept>&gt;( <bpt id="p6">**</bpt>iosbase<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getloc<ept id="p1">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>grouping<ept id="p1">](../standard-library/numpunct-class.md#numpunct__grouping)</ept> determines how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>thousands_sep<ept id="p1">](../standard-library/numpunct-class.md#numpunct__thousands_sep)</ept> determines the sequence that separates groups of digits to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If no instances of <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>occur in the numeric input field, no grouping constraint is imposed.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Otherwise, any grouping constraints imposed by <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>grouping<ept id="p1">**</ept> is enforced and separators are removed before the scan conversion occurs.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The second virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <bpt id="p1">**</bpt>ld<ept id="p1">**</ept> with <bpt id="p2">**</bpt>lu<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If successful, it converts the numeric input field to a value of type <ph id="ph1">`unsigned long`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The third virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it tries to match a complete, nonempty floating-point input field.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>decimal_point<ept id="p1">](../standard-library/numpunct-class.md#numpunct__decimal_point)</ept> determines the sequence that separates the integer digits from the fraction digits.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The equivalent scan conversion specifier is <bpt id="p1">**</bpt>lf<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The fourth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>behaves the same the third, except that the equivalent scan conversion specifier is <bpt id="p1">**</bpt>Lf<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The fifth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>behaves the same the first, except that the equivalent scan conversion specifier is <bpt id="p1">**</bpt>p<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The sixth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it tries to match a complete, nonempty boolean input field.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If successful it converts the Boolean input field to a value of type <ph id="ph1">`bool`</ph> and stores that value in <ph id="ph2">`val`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A boolean input field takes one of two forms.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>boolalpha<ept id="p2">](../standard-library/ios-functions.md#boolalpha)</ept> is <bpt id="p3">**</bpt>false<ept id="p3">**</ept>, it is the same as an integer input field, except that the converted value must be either 0 (for <bpt id="p4">**</bpt>false<ept id="p4">**</ept>) or 1 (for <bpt id="p5">**</bpt>true<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Otherwise, the sequence must match either <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>falsename<ept id="p1">](../standard-library/numpunct-class.md#numpunct__falsename)</ept> (for <bpt id="p2">**</bpt>false<ept id="p2">**</ept>), or <bpt id="p3">**</bpt>fac<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>truename<ept id="p1">](../standard-library/numpunct-class.md#numpunct__truename)</ept> (for <bpt id="p2">**</bpt>true<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>num_get::iter_type</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A type that describes an input iterator.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>InputIterator<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>num_get::num_get</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`num_get`</ph> that are used to extract numerical values from sequences.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>( <ph id="ph1">`_Refs`</ph>).</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>locale&gt;</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>facet Class</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>