<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">addaab8f5e1393062674bcfb656fad4ff0825a69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\friend-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b790fa397ec5f1b64bcc198f2207cde6b2e40682</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff53f9a36433866f2d8ead424954fa0622c835bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>friend (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>friend (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In some circumstances, it is more convenient to grant member-level access to functions that are not members of a class or to all members in a separate class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Only the class implementer can declare who its friends are.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A function or class cannot declare itself as a friend of any class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In a class definition, use the <ph id="ph1">`friend`</ph> keyword and the name of a non-member function or other class to grant it access to the private and protected members of your class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a template definition, a type parameter can be declared as a friend.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Friend declarations</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you declare a friend function that was not previously declared, that function is exported to the enclosing nonclass scope.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Functions declared in a friend declaration are treated as if they had been declared using the <ph id="ph1">`extern`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(For more information about <ph id="ph1">`extern`</ph>, see <bpt id="p1">[</bpt>Static Storage-Class Specifiers<ept id="p1">](http://msdn.microsoft.com/en-us/3ba9289a-a412-4a17-b319-ceb2c087df48)</ept>.)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although functions with global scope can be declared as friends prior to their prototypes, member functions cannot be declared as friends before the appearance of their complete class declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code shows why this fails:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The preceding example enters the class name <ph id="ph1">`ForwardDeclared`</ph> into scope, but the complete declaration — specifically, the portion that declares the function <ph id="ph2">`IsAFriend`</ph> — is not known.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`friend`</ph> declaration in class <ph id="ph2">`HasFriends`</ph> generates an error.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Starting in C++11, there are two forms of friend declarations for a class:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first form introduces a new class F if no existing class by that name was found in the innermost namespace.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C++11<ept id="p1">**</ept>: The second form does not introduce a new class; it can be used when the class has already been declared, and it must be used when declaring a template type parameter or a typedef as a friend.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`class friend F`</ph> when the referenced type has not yet been declared:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`friend F`</ph> refers to the <ph id="ph2">`F`</ph> class that is declared outside the scope of NS.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`friend F`</ph> to declare a template parameter as a friend:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`friend F`</ph> to declare a typedef as friend:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To declare two classes that are friends of one another, the entire second class must be specified as a friend of the first class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The reason for this restriction is that the compiler has enough information to declare individual friend functions only at the point where the second class is declared.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although the entire second class must be a friend to the first class, you can select which functions in the first class will be friends of the second class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>friend functions</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`friend`</ph> function is a function that is not a member of a class but has access to the class's private and protected members.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Friend functions are not considered class members; they are normal external functions that are given special access privileges.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Friends are not in the class's scope, and they are not called using the member-selection operators (<bpt id="p1">**</bpt>.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>and –<bpt id="p1">**</bpt><ph id="ph1">&gt;</ph><ept id="p1">**</ept>) unless they are members of another class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`friend`</ph> function is declared by the class that is granting access.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`friend`</ph> declaration can be placed anywhere in the class declaration.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is not affected by the access control keywords.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">`Point`</ph> class and a friend function, <ph id="ph2">`ChangePrivate`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`friend`</ph> function has access to the private data member of the <ph id="ph2">`Point`</ph> object it receives as a parameter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Class members as friends</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Class member functions can be declared as friends in other classes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the preceding example, only the function <ph id="ph1">`A::Func1( B&amp; )`</ph> is granted friend access to class <ph id="ph2">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, access to the private member <ph id="ph1">`_b`</ph> is correct in <ph id="ph2">`Func1`</ph> of class <ph id="ph3">`A`</ph> but not in <ph id="ph4">`Func2`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`friend`</ph> class is a class all of whose member functions are friend functions of a class, that is, whose member functions have access to the other class's private and protected members.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Suppose the <ph id="ph1">`friend`</ph> declaration in class <ph id="ph2">`B`</ph> had been:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In that case, all member functions in class <ph id="ph1">`A`</ph> would have been granted friend access to class <ph id="ph2">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code is an example of a friend class:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Friendship is not mutual unless explicitly specified as such.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the above example, member functions of <ph id="ph1">`YourClass`</ph> cannot access the private members of <ph id="ph2">`YourOtherClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A managed type cannot have any friend functions, friend classes, or friend interfaces.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Friendship is not inherited, meaning that classes derived from <ph id="ph1">`YourOtherClass`</ph> cannot access <ph id="ph2">`YourClass`</ph>'s private members.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Friendship is not transitive, so classes that are friends of <ph id="ph1">`YourOtherClass`</ph> cannot access <ph id="ph2">`YourClass`</ph>'s private members.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following figure shows four class declarations: <ph id="ph1">`Base`</ph>, <ph id="ph2">`Derived`</ph>, <ph id="ph3">`aFriend`</ph>, and <ph id="ph4">`anotherFriend`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Only class <ph id="ph1">`aFriend`</ph> has direct access to the private members of <ph id="ph2">`Base`</ph> (and to any members <ph id="ph3">`Base`</ph> might have inherited).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implications of friend relationship</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Implications of friend Relationship</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Inline friend definitions</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Friend functions can be defined inside class declarations.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These functions are inline functions, and like member inline functions they behave as though they were defined immediately after all class members have been seen but before the class scope is closed (the end of the class declaration).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Friend functions defined inside class declarations are not considered in the scope of the enclosing class; they are in file scope.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>