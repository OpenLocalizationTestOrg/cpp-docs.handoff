<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a89c6ae94fd648c66602d3203e70db9ede1db41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\noalias.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56f3b40da3fe46ced332b14322d0d7f60912065e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3984b174fcc94928eda8835957e37a107f1c6b79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>noalias | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>noalias</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>means that a function call does not modify or reference visible global state and only modifies the memory pointed to <ph id="ph1">`directly`</ph> by pointer parameters (first-level indirections).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If a function is annotated as <ph id="ph1">`noalias`</ph>, the optimizer can assume that, in addition to the parameters themselves, only first-level indirections of pointer parameters are referenced or modified inside the function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The visible global state is the set of all data that is not defined or referenced outside of the compilation scope, and their address is not taken.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compilation scope is all source files (<bpt id="p1">[</bpt>/LTCG (Link-time Code Generation)<ept id="p1">](../build/reference/ltcg-link-time-code-generation.md)</ept> builds) or a single source file (non-<bpt id="p2">**</bpt>/LTCG<ept id="p2">**</ept> build).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following sample demonstrates using <ph id="ph1">`__declspec(restrict)`</ph> and <ph id="ph2">`__declspec(noalias)`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Normally, memory returned from <ph id="ph1">`malloc`</ph> is <ph id="ph2">`restrict`</ph> and <ph id="ph3">`noalias`</ph> because the CRT headers are decorated appropriately.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, in this example, the pointers <ph id="ph1">`mempool`</ph> and <ph id="ph2">`memptr`</ph> are global so the compiler has no assurance that the memory is not subject to aliasing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decorating the functions that return pointers with <ph id="ph1">`__declspec(restrict)`</ph> tells the compiler that the memory pointed to by the return value is not aliased.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Decorating the function in the example that accesses memory with <ph id="ph1">`__declspec(noalias)`</ph> tells the compiler that this function does not interfere with the global state except through the pointers in its parameter list.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>