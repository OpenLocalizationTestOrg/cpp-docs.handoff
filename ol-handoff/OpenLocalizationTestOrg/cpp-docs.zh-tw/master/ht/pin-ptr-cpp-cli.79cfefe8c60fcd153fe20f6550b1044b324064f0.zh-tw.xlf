<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b61da67b919c7af11de26d075e695283ef978c7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\pin-ptr-cpp-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aab7aab1b85df4732f3a340741ac12c15bea3746</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b48953f1823a4e7e694136b1078cc4ea1359aa0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>pin_ptr (C++-CLI) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>pin_ptr (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares a <bpt id="p1">*</bpt>pinning pointer<ept id="p1">*</ept>, which is used only with the common language runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(There are no remarks for this language feature that apply to all runtimes.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Windows Runtime</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>(This language feature is not supported in the Windows Runtime.)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>pinning pointer<ept id="p1">*</ept> is an interior pointer that prevents the object pointed to from moving on the garbage-collected heap.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>That is, the value of a pinning pointer is not changed by the common language runtime.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is required when you pass the address of a managed class to an unmanaged function so that the address will not change unexpectedly during resolution of the unmanaged function call.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>cv_qualifier</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>or <ph id="ph1">`volatile`</ph> qualifiers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By default, a pinning pointer is <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is redundant but not an error to declare a pinning pointer <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`initializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">`pin_ptr`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>initializer</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A member of a reference type, element of a managed array, or any other object that you can assign to a native pointer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`pin_ptr`</ph> represents a superset of the functionality of a native pointer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, anything that can be assigned to a native pointer can also be assigned to a <ph id="ph1">`pin_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An interior pointer is permitted to perform the same set of operations as native pointers, including comparison and pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An object or sub-object of a managed class can be pinned, in which case the common language runtime will not move it during garbage collection.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The principal use of this is to pass a pointer to managed data as an actual parameter of an unmanaged function call.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>During a collection cycle, the runtime will inspect the metadata created for the pinning pointer and will not move the item it points to.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Pinning an object also pins its value fields; that is, fields of primitive or value type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, fields declared by tracking handle (<ph id="ph1">`%`</ph>) are not pinned.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pinning a sub-object defined in a managed object has the effect of pinning the whole object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the pinning pointer is reassigned to point to a new value, the previous instance pointed to is no longer considered pinned.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object is pinned only while a <ph id="ph1">`pin_ptr`</ph> points to it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The object is no longer pinned when its pinning pointer goes out of scope, or is set to <bpt id="p1">[</bpt>nullptr<ept id="p1">](../windows/nullptr-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`pin_ptr`</ph> goes out of scope, the object that was pinned can be moved in the heap by the garbage collector.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Any native pointers that still point to the object will not be updated, and de-referencing one of them could raise an unrecoverable exception.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If no pinning pointers point to the object (all pinning pointers went out of scope, were reassigned to point to other objects, or were assigned <bpt id="p1">[</bpt>nullptr<ept id="p1">](../windows/nullptr-cpp-component-extensions.md)</ept>), the object is guaranteed not to be pinned.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A pinning pointer can point to a reference handle, value type or boxed type handle, member of a managed type, or an element of a managed array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It cannot point to a reference type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Taking the address of a <ph id="ph1">`pin_ptr`</ph> that points to a native object causes undefined behavior.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Pinning pointers can only be declared as non-static local variables on the stack.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pinning pointers cannot be used as:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>function parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>the return type of a function</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>a member of a class</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>the target type of a cast.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>is in the <ph id="ph1">`cli`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform, default, and cli Namespaces<ept id="p1">](../windows/platform-default-and-cli-namespaces-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about interior pointers, see <bpt id="p1">[</bpt>interior_ptr (C++/CLI)<ept id="p1">](../windows/interior-ptr-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about pinning pointers, see <bpt id="p1">[</bpt>How to: Pin Pointers and Arrays<ept id="p1">](../windows/how-to-pin-pointers-and-arrays.md)</ept> and <bpt id="p2">[</bpt>How to: Declare Pinning Pointers and Value Types<ept id="p2">](../windows/how-to-declare-pinning-pointers-and-value-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`pin_ptr`</ph> to constrain the position of the first element of an array.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example shows that an interior pointer can be converted to a pinning pointer, and that the return type of the address-of operator (<ph id="ph1">`&amp;`</ph>) is an interior pointer when the operand is on the managed heap.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example shows that a pinning pointer can be cast to another type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>