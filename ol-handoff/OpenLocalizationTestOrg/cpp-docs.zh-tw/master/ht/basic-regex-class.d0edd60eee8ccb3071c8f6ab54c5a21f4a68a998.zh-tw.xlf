<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bef9be453caa99e79235386d625dbe5d9cd331f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-regex-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db2940af5c1533433772787ab33582a7024a5711</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">877461b9f338a05f650782d3462f259adc40b726</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_regex Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_regex Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wraps a regular expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The template class describes an object that holds a regular expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Objects of this template class can be passed to the template functions <bpt id="p1">[</bpt>regex_match Function<ept id="p1">](../standard-library/regex-functions.md#regex_match_function)</ept>, <bpt id="p2">[</bpt>regex_search Function<ept id="p2">](../standard-library/regex-functions.md#regex_search_function)</ept>, and <bpt id="p3">[</bpt>regex_replace Function<ept id="p3">](../standard-library/regex-functions.md#regex_replace_function)</ept>, along with suitable text string arguments, to search for text that matches the regular expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are two specializations of this template class, with the type definitions <bpt id="p1">[</bpt>regex<ept id="p1">](../standard-library/regex-typedefs.md#regex_typedef)</ept> for elements of type <ph id="ph1">`char`</ph>, and <bpt id="p2">[</bpt>wregex<ept id="p2">](../standard-library/regex-typedefs.md#wregex_typedef)</ept> for elements of type <ph id="ph2">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The template argument <ph id="ph1">`RXtraits`</ph> describes various important properties of the syntax of the regular expressions that the template class supports.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A class that specifies these regular expression traits must have the same external interface as an object of template class <bpt id="p1">[</bpt>regex_traits Class<ept id="p1">](../standard-library/regex-traits-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Some functions take an operand sequence that defines a regular expression.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can specify such an operand sequence several ways:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-- a null-terminated sequence (such as a C string, for <ph id="ph1">`Elem`</ph> of type <ph id="ph2">`char`</ph>) beginning at <ph id="ph3">`ptr`</ph> (which must not be a null pointer), where the terminating element is the value <ph id="ph4">`value_type()`</ph> and is not part of the operand sequence</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`count`</ph> -- a sequence of <ph id="ph2">`count`</ph> elements beginning at <ph id="ph3">`ptr`</ph> (which must not be a null pointer)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-- the sequence specified by the <ph id="ph1">`basic_string`</ph> object</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`last`</ph> -- a sequence of elements delimited by the iterators <ph id="ph2">`first`</ph> and <ph id="ph3">`last`</ph>, in the range</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-- the <ph id="ph1">`basic_regex`</ph> object</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These member functions also take an argument <ph id="ph1">`flags`</ph> that specifies various options for the interpretation of the regular expression in addition to those described by the <ph id="ph2">`RXtraits`</ph> type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>regex&gt;</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>basic_regex::assign</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Assigns a value to the regular expressoin object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Traits class for a string source.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Allocator class for a string source.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Input iterator type for a range source.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Regex source to copy.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Pointer to beginning of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Syntax option flags to add while copying.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Length of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>String to copy.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>End of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The initializer_list to copy.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The member functions each replace the regular expression held by <ph id="ph1">`*this`</ph> with the regular expression described by the operand sequence, then return <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>basic_regex::basic_regex</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Construct the regular expression object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Traits class for a string source.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Allocator class for a string source.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Input iterator type for a range source.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Regex source to copy.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Pointer to beginning of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Syntax option flags to add while copying.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Length of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>String to copy.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End of sequence to copy.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The initializer_list to copy.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All constructors store a default-constructed object of type <ph id="ph1">`RXtraits`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The first constructor constructs an empty <ph id="ph1">`basic_regex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The other constructors construct a <ph id="ph1">`basic_regex`</ph> object that holds the regular expression described by the operand sequence.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An empty <ph id="ph1">`basic_regex`</ph> object does not match any character sequence when passed to <bpt id="p1">[</bpt>regex_match Function<ept id="p1">](../standard-library/regex-functions.md#regex_match_function)</ept>, <bpt id="p2">[</bpt>regex_search Function<ept id="p2">](../standard-library/regex-functions.md#regex_search_function)</ept>, or <bpt id="p3">[</bpt>regex_replace Function<ept id="p3">](../standard-library/regex-functions.md#regex_replace_function)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>basic_regex::flag_type</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The type of syntax option flags.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">[</bpt>regex_constants::syntax_option_type<ept id="p1">](../standard-library/regex-constants-class.md#regex_constants__syntax_option_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>basic_regex::flags</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns syntax option flags.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The member function returns the value of the <ph id="ph1">`flag_type`</ph> argument passed to the most recent call to one of the <bpt id="p1">[</bpt>basic_regex::assign<ept id="p1">](#basic_regex__assign)</ept> member functions or, if no such call has been made, the value passed to the constructor.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>basic_regex::getloc</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the stored locale object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`traits.`</ph><bpt id="p1">[</bpt>regex_traits::getloc<ept id="p1">](../standard-library/regex-traits-class.md#regex_traits__getloc)</ept><ph id="ph2">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>basic_regex::imbue</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Alters the stored locale object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The locale object to store.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The member function empties <ph id="ph1">`*this`</ph> and returns <ph id="ph2">`traits.`</ph><bpt id="p1">[</bpt>regex_traits::imbue<ept id="p1">](../standard-library/regex-traits-class.md#regex_traits__imbue)</ept><ph id="ph3">`(loc)`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>basic_regex::locale_type</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The type of the stored locale object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">[</bpt>regex_traits::locale_type<ept id="p1">](../standard-library/regex-traits-class.md#regex_traits__locale_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>basic_regex::mark_count</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns number of subexpressions matched.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The member function returns the number of capture groups in the regular expression.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>basic_regex::operator=</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Assigns a value to the regular expression object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Traits class for a string source.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Allocator class for a string source.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Regex source to copy.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>String to copy.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The operators each replace the regular expression held by <ph id="ph1">`*this`</ph> with the regular expression described by the operand sequence, then return <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>basic_regex::swap</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Swaps two regular expression objects.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The regular expression object to swap with.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The member function swaps the regular expressions between <ph id="ph1">`*this`</ph> and <ph id="ph2">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It does so in constant time and throws no exceptions.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>basic_regex::value_type</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The element type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Elem`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>regex&gt;</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>regex_match Function</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>regex_search Function</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>regex_replace Function</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>regex</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>wregex</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>regex_traits Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>