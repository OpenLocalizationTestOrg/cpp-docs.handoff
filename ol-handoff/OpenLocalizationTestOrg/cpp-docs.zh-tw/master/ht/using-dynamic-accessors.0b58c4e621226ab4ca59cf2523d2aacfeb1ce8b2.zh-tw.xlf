<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7dc36432540acd59a7bec8a671b21c58d50a156</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\using-dynamic-accessors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a20e81291c99c5c797a5798daa90e0e61acf3ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd885b4af6f13672d43120a26e3b3aeaa0fc6f9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Dynamic Accessors | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Dynamic Accessors</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dynamic accessors allow you to access a data source when you have no knowledge of the database schema (underlying structure).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The OLE DB Templates library provides several classes to help you do this.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DynamicConsumer<ept id="p1">](http://msdn.microsoft.com/en-us/2ccc4c61-6749-4e83-aa81-00f8009c0dc3)</ept> sample shows how to use the dynamic accessor classes to obtain column information and dynamically create accessors.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using CDynamicAccessor</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicAccessor<ept id="p1">](../../data/oledb/cdynamicaccessor-class.md)</ept> allows you to access a data source when you have no knowledge of the database schema (the database's underlying structure).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>methods obtain column information such as column names, count, and data type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You use this column information to create an accessor dynamically at run time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The column information is stored in a buffer that is created and managed by this class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Obtain data from the buffer using the <bpt id="p1">[</bpt>GetValue<ept id="p1">](../../data/oledb/cdynamicaccessor-getvalue.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using CDynamicStringAccessor</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicStringAccessor<ept id="p1">](../../data/oledb/cdynamicstringaccessor-class.md)</ept> works like <bpt id="p2">[</bpt>CDynamicAccessor<ept id="p2">](../../data/oledb/cdynamicaccessor-class.md)</ept>, except in one important way.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">`CDynamicAccessor`</ph> requests data in the native format reported by the provider, <ph id="ph2">`CDynamicStringAccessor`</ph> requests that the provider fetch all data accessed from the data store as string data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is especially useful for simple tasks that do not require calculation of values in the data store, such as displaying or printing the data store's contents.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CDynamicStringAccessor`</ph> methods to obtain column information.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You use this column information to create an accessor dynamically at run time.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The column information is stored in a buffer created and managed by this class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Obtain data from the buffer using <bpt id="p1">[</bpt>CDynamicStringAccessor::GetString<ept id="p1">](../../data/oledb/cdynamicstringaccessor-getstring.md)</ept> or store it to the buffer using <bpt id="p2">[</bpt>CDynamicStringAccessor::SetString<ept id="p2">](../../data/oledb/cdynamicstringaccessor-setstring.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using CDynamicParameterAccessor</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDynamicParameterAccessor<ept id="p1">](../../data/oledb/cdynamicparameteraccessor-class.md)</ept> is similar to <bpt id="p2">[</bpt>CDynamicAccessor<ept id="p2">](../../data/oledb/cdynamicaccessor-class.md)</ept>, except that <ph id="ph1">`CDynamicParameterAccessor`</ph> obtains parameter information to be set by calling the <bpt id="p3">[</bpt>ICommandWithParameters<ept id="p3">](https://msdn.microsoft.com/en-us/library/ms712937.aspx)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The provider must support <ph id="ph1">`ICommandWithParameters`</ph> for the consumer to use this class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The parameter information is stored in a buffer created and managed by this class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Obtain parameter data from the buffer by using <bpt id="p1">[</bpt>CDynamicParameterAccessor::GetParam<ept id="p1">](../../data/oledb/cdynamicparameteraccessor-getparam.md)</ept> and <bpt id="p2">[</bpt>CDynamicParameterAccessor::GetParamType<ept id="p2">](../../data/oledb/cdynamicparameteraccessor-getparamtype.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For an example demonstrating how to use this class to execute a SQL Server stored procedure and get the output parameter values, see Knowledge Base article Q058860, "HOWTO: Execute Stored Procedure using CDynamicParameterAccessor."</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using Accessors</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CDynamicAccessor Class</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CDynamicStringAccessor Class</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CDynamicParameterAccessor Class</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DynamicConsumer Sample</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>