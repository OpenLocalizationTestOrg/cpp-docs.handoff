<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a36a34f44cdc1045bc2d36f93118e823b281c49</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\safeint-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9045a1d76ae9c3893f40e36a67aa175d386004c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a3fef85ce5ef86dac8310866d199f1358f87e65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SafeInt Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SafeInt Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Extends the integer primitives to help prevent integer overflow and lets you compare different types of integers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Template</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type of integer or Boolean parameter that <ph id="ph1">`SafeInt`</ph> replaces.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>E</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An enumerated data type that defines the error handling policy.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>U</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type of integer or Boolean parameter for the secondary operand.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>[in] rhs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An input parameter that represents the value on the right side of the operator in several stand-alone functions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>[in] i</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An input parameter that represents the value on the right side of the operator in several stand-alone functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>[in] bits</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An input parameter that represents the value on the right side of the operator in several stand-alone functions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>SafeInt::SafeInt</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Default constructor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Casting Operators</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>signed char</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>unsigned char</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>__int16</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>unsigned __int16</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>__int32</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>unsigned __int32</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>unsigned long</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>__int64</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>unsigned __int64</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>wchar_t</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>!=</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>!=</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>!=</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>!</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SafeInt`</ph> class protects against integer overflow in mathematical operations.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, consider adding two 8-bit integers: one has a value of 200 and the second has a value of 100.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The correct mathematical operation would be 200 + 100 = 300.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>However, because of the 8-bit integer limit, the upper bit will be lost and the compiler will return 44 (300 - 2<ph id="ph1">&lt;sup&gt;</ph>8<ph id="ph2">&lt;/sup&gt;</ph>) as the result.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Any operation that depends on this mathematical equation will generate unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SafeInt`</ph> class checks whether an arithmetic overflow occurs or whether the code tries to divide by zero.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In both cases, the class calls the error handler to warn the program of the potential problem.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This class also lets you compare two different types of integers as long as they are <ph id="ph1">`SafeInt`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Typically, when you perform a comparison, you must first convert the numbers to be the same type.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Casting one number to another type often requires checks to make sure that there is no loss of data.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Operators table in this topic lists the mathematical and comparison operators supported by the <ph id="ph1">`SafeInt`</ph> class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Most mathematical operators return a <ph id="ph1">`SafeInt`</ph> object of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Comparison operations between a <ph id="ph1">`SafeInt`</ph> and an integral type can be performed in either direction.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, both <ph id="ph1">`SafeInt&lt;int&gt;(x) &lt; y`</ph> and <ph id="ph2">`y &gt; SafeInt&lt;int&gt;(x)`</ph> are valid and will return the same result.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Many binary operators do not support using two different <ph id="ph1">`SafeInt`</ph> types.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>One example of this is the <ph id="ph1">`&amp;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>is supported, but <ph id="ph1">`SafeInt&lt;T, E&gt; &amp; SafeInt&lt;U, E&gt;`</ph> is not.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the latter example, the compiler does not know what type of parameter to return.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>One solution to this problem is to cast the second parameter back to the base type.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>By using the same parameters, this can be done with <ph id="ph1">`SafeInt&lt;T, E&gt; &amp; (U)SafeInt&lt;U, E&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For any bitwise operations, the two different parameters should be the same size.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If the sizes differ, the compiler will throw an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](http://msdn.microsoft.com/Library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The results of this operation cannot be guaranteed to be accurate.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To resolve this issue, cast the smaller parameter until it is the same size as the larger parameter.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For the shift operators, shifting more bits than exist for the template type will throw an ASSERT exception.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This will have no effect in release mode.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Mixing two types of SafeInt parameters is possible for the shift operators because the return type is the same as the original type.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The number on the right side of the operator only indicates the number of bits to shift.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you perform a logical comparison with a SafeInt object, the comparison is strictly arithmetic.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, consider these expressions:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The first statement resolves to <ph id="ph1">`true`</ph>, but the second statement resolves to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The bitwise negation of 0 is 0xFFFFFFFF.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the second statement, the default comparison operator compares 0xFFFFFFFF to 0xFFFFFFFF and considers them to be equal.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The comparison operator for the <ph id="ph1">`SafeInt`</ph> class realizes that the second parameter is negative whereas the first parameter is unsigned.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Therefore, although the bit representation is identical, the <ph id="ph1">`SafeInt`</ph> logical operator realizes that the unsigned integer is larger than -1.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Be careful when you use the <ph id="ph1">`SafeInt`</ph> class together with the <ph id="ph2">`?:`</ph> ternary operator.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Consider the following line of code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The compiler converts it to this:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`flag`</ph> is <ph id="ph2">`false`</ph>, the compiler throws an exception instead of assigning the value of -1 to <ph id="ph3">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Therefore, to avoid this behavior, the correct code to use is the following line.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`U`</ph> can be assigned a Boolean type, character type, or integer type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The integer types can be signed or unsigned and any size from 8 bits to 64 bits.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`SafeInt`</ph> class accepts any kind of integer, it performs more efficiently with unsigned types.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>is the error handling mechanism that <ph id="ph1">`SafeInt`</ph> uses.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Two error handling mechanisms are provided with the SafeInt library.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The default policy is <ph id="ph1">`SafeIntErrorPolicy_SafeIntException`</ph>, which throws a <bpt id="p1">[</bpt>SafeIntException Class<ept id="p1">](../windows/safeintexception-class.md)</ept> exception when an error occurs.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The other policy is <ph id="ph1">`SafeIntErrorPolicy_InvalidParameter`</ph>, which stops the program if an error occurs.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>There are two options to customize the error policy.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The first option is to set the parameter <ph id="ph1">`E`</ph> when you create a <ph id="ph2">`SafeInt`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Use this option when you want to change the error handling policy for just one <ph id="ph1">`SafeInt`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The other option is to define <ph id="ph1">`_SAFEINT_DEFAULT_ERROR_POLICY`</ph> to be your customized error-handling class before you include the <ph id="ph2">`SafeInt`</ph> library.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Use this option when you want to change the default error handling policy for all instances of the <ph id="ph1">`SafeInt`</ph> class in your code.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A customized class that handles errors from the SafeInt library should not return control to the code that called the error handler.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>After the error handler is called, the result of the <ph id="ph1">`SafeInt`</ph> operation cannot be trusted.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> safeint.h</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> msl::utilities</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Miscellaneous Support Libraries Classes</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>SafeInt Library</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>SafeIntException Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>