<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12b0cb36a36f35aa526e7fc765e05e6bcd4d89ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\restrictions-on-termination-handlers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55610bc6bbacecb24519de517a49ce68b49adfc6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">527348bf66875a324dfb23d91e18f4bbdf275f56</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Restrictions on Termination Handlers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Restrictions on Termination Handlers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You cannot use a <ph id="ph1">`goto`</ph> statement to jump into a <ph id="ph2">`__try`</ph> statement block or a <ph id="ph3">`__finally`</ph> statement block.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Instead, you must enter the statement block through normal flow of control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(You can, however, jump out of a <ph id="ph1">`__try`</ph> statement block.) Also, you cannot nest an exception handler or termination handler inside a <ph id="ph2">`__finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, some kinds of code permitted in a termination handler produce questionable results, so you should use them with caution, if at all.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One is a <ph id="ph1">`goto`</ph> statement that jumps out of a <ph id="ph2">`__finally`</ph> statement block.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the block is executing as part of normal termination, nothing unusual happens.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>But if the system is unwinding the stack, that unwinding stops, and the current function gains control as if there were no abnormal termination.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`return`</ph> statement inside a <ph id="ph2">`__finally`</ph> statement block presents roughly the same situation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Control returns to the immediate caller of the function containing the termination handler.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the system was unwinding the stack, this process is halted, and the program proceeds as if there had been no exception raised.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Writing a Termination Handler</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling (C/C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>