<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">796be9a777f5dec871d0b6c76d7119760292a10e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\pointer-to-binary-function-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553f4843cfbb949e40372310ddea9f0c3e77e89f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ef9cddf081d0714cbcee1826a2f9bdafd46405a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>pointer_to_binary_function Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>pointer_to_binary_function Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Converts a binary function pointer into an adaptable binary function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The binary function to be converted.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The left object that the <bpt id="p1">*</bpt><ph id="ph1">\*</ph>pfunc<ept id="p1">*</ept> is called on.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The right object that the <bpt id="p1">*</bpt><ph id="ph1">\*</ph>pfunc<ept id="p1">*</ept> is called on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The template class stores a copy of <bpt id="p1">**</bpt>pfunc<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It defines its member function <ph id="ph1">`operator()`</ph> as returning (<ph id="ph2">\*</ph> <bpt id="p1">**</bpt>pfunc<ept id="p1">**</ept>)(_ <bpt id="p2">*</bpt>Left<ept id="p2">*</ept>, <ph id="ph3">\_</ph> <bpt id="p3">*</bpt>Right<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A binary function pointer is a function object and may be passed to any Standard Template Library algorithm that is expecting a binary function as a parameter, but it is not adaptable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types <bpt id="p1">**</bpt>first_argument_type<ept id="p1">**</ept>, <bpt id="p2">**</bpt>second_argument_type<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>result_type<ept id="p3">**</ept> that make such an adaptation possible.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The conversion by <ph id="ph1">`pointer_to_binary_function`</ph> allows the function adaptors to work with binary function pointers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The constructor of <ph id="ph1">`pointer_to_binary_function`</ph> is rarely used directly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See the helper function <bpt id="p1">[</bpt>ptr_fun<ept id="p1">](../standard-library/functional-functions.md#ptr_fun_function)</ept> for an example of how to declare and use the <ph id="ph1">`pointer_to_binary_function`</ph> adaptor predicate.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>functional&gt;</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>