<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d15bd10d50c9e46ec0055619d1edfff762373da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\text\how-to-convert-between-various-string-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6e1a52b36d8cc9895ae7996677ecd4e567a3f8e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b695e96748889ce08f77d77effecd20d13ae290</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Convert Between Various String Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert Between Various String Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to convert various Visual C++ string types into other strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The strings types that are covered include <ph id="ph1">`char *`</ph>, <ph id="ph2">`wchar_t*`</ph>, <bpt id="p1">[</bpt>_bstr_t<ept id="p1">](../cpp/bstr-t-class.md)</ept>, <bpt id="p2">[</bpt>CComBSTR<ept id="p2">](../atl/reference/ccombstr-class.md)</ept>, <bpt id="p3">[</bpt>CString<ept id="p3">](../atl-mfc-shared/using-cstring.md)</ept>, <bpt id="p4">[</bpt>basic_string<ept id="p4">](../standard-library/basic-string-class.md)</ept>, and &lt;xref:System.String?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In all cases, a copy of the string is made when converted to the new type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Any changes made to the new string will not affect the original string, and vice versa.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Converting from char *</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`char *`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`char *`</ph> string (also known as a C style string) uses a null character to indicate the end of the string.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>C style strings usually require one byte per character, but can also use two bytes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the examples below, <ph id="ph1">`char *`</ph> strings are sometimes referred to as multibyte character strings because of the string data that results from converting from Unicode strings.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Single byte and multibyte character (<ph id="ph1">`MBCS`</ph>) functions can operate on <ph id="ph2">`char *`</ph> strings.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Converting from wchar_t *</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`wchar_t *`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Several string types, including <ph id="ph1">`wchar_t *`</ph>, implement wide character formats.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To convert a string between a multibyte and a wide character format, you can use a single function call like <ph id="ph1">`mbstowcs_s`</ph> or a constructor invocation for a class like <ph id="ph2">`CStringA`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Converting from _bstr_t</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`_bstr_t`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_bstr_t`</ph> object is a way to encapsulate wide character <ph id="ph2">`BSTR`</ph> strings.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Converting from CComBSTR</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`CComBSTR`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Like _bstr_t, a <ph id="ph1">`CComBSTR`</ph> object is a way to encapsulate wide character BSTR strings.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A BSTR string has a length value and does not use a null character to terminate the string, but the string type you convert to may require a terminating null.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Converting from CString</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`CString`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>is based on the TCHAR data type, which in turn depends on whether the symbol <ph id="ph1">`_UNICODE`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_UNICODE`</ph> is not defined, <ph id="ph2">`TCHAR`</ph> is defined to be char and <ph id="ph3">`CString`</ph> contains a multibyte character string; if <ph id="ph4">`_UNICODE`</ph> is defined, <ph id="ph5">`TCHAR`</ph> is defined to be <ph id="ph6">`wchar_t`</ph> and <ph id="ph7">`CString`</ph> contains a wide character string.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>is the multibyte string always version of <ph id="ph1">`CString`</ph>, <ph id="ph2">`CStringW`</ph> is the wide character string only version.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`CStringA`</ph> nor <ph id="ph2">`CStringW`</ph> use <ph id="ph3">`_UNICODE`</ph> to determine how they should compile.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`CStringW`</ph> are used in this example to clarify minor differences in buffer size allocation and output handling.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Converting from basic_string</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a <ph id="ph1">`basic_string`</ph> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Converting from System::String</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to convert from a wide character (Unicode) <bpt id="p1">[</bpt>System::String<ept id="p1">](assetId:///System::String?qualifyHint=True&amp;autoUpgrade=True)</ept> to the other string types listed above.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Visual C++ Guided Tour</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ATL and MFC String Conversion Macros</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CString Operations Relating to C-Style Strings</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>How to: Convert Standard String to System::String</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>How to: Convert System::String to Standard String</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>How to: Convert System::String to wchar_t* or char</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Programming with CComBSTR</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>mbstowcs_s, _mbstowcs_s_l</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>wcstombs_s, _wcstombs_s_l</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>strcpy_s, wcscpy_s, _mbscpy_s</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>strcat_s, wcscat_s, _mbscat_s</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>pin_ptr (C++/CLI)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>