<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84fb11c6a6e8a399d07ce37ae7042de1d22a28db</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\task-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd3a3d7b8b24572c1cf3a7a6a109ce4993c63b55</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae994df1992e352e32acf3a5a844a0b71c482d38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>task Class (Concurrency Runtime) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>task Class (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Parallel Patterns Library (PPL) <ph id="ph1">`task`</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`task`</ph> object represents work that can be executed asynchronously, and concurrently with other tasks and parallel work produced by parallel algorithms in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It produces a result of type <ph id="ph1">`_ResultType`</ph> on successful completion.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Tasks of type <ph id="ph1">`task&lt;void&gt;`</ph> produce no result.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A task can be waited upon and canceled independently of other tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It can also be composed with other tasks using continuations( <ph id="ph1">`then`</ph>), and join( <ph id="ph2">`when_all`</ph>) and choice( <ph id="ph3">`when_any`</ph>) patterns.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The result type of this task.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type of the result an object of this class produces.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>task::task Constructor</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`task`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>task::get Method</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the result this task produced.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the task is not in a terminal state, a call to <ph id="ph1">`get`</ph> will wait for the task to finish.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This method does not return a value when called on a task with a <ph id="ph1">`result_type`</ph> of <ph id="ph2">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>task::is_apartment_aware Method</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Determines whether the task unwraps a Windows Runtime <ph id="ph1">`IAsyncInfo`</ph> interface or is descended from such a task.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>task::is_done Method (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines if the task is completed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>task::scheduler Method (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the scheduler for this task</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>task::then Method</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adds a continuation task to this task.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>task::wait Method</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Waits for this task to reach a terminal state.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is possible for <ph id="ph1">`wait`</ph> to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>task::operator!= Operator</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">`task`</ph> objects represent different internal tasks.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>task::operator= Operator</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Replaces the contents of one <ph id="ph1">`task`</ph> object with another.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>task::operator== Operator</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">`task`</ph> objects represent the same internal task.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> ppltasks.h</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>task::get Method</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the result this task produced.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the task is not in a terminal state, a call to <ph id="ph1">`get`</ph> will wait for the task to finish.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This method does not return a value when called on a task with a <ph id="ph1">`result_type`</ph> of <ph id="ph2">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The result of the task.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If the task is canceled, a call to <ph id="ph1">`get`</ph> will throw a <bpt id="p1">[</bpt>task_canceled<ept id="p1">](task-canceled-class.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the task encountered an different exception or an exception was propagated to it from an antecedent task, a call to <ph id="ph1">`get`</ph> will throw that exception.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <bpt id="p1">[</bpt>concurrency::task::wait<ept id="p1">](#wait)</ept> or <ph id="ph2">`get`</ph> ( <ph id="ph3">`wait`</ph> calls <ph id="ph4">`get`</ph>) in code that runs on the STA.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Otherwise, the runtime throws <bpt id="p1">[</bpt>concurrency::invalid_operation<ept id="p1">](invalid-operation-class.md)</ept> because these methods block the current thread and can cause the app to become unresponsive.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, you can call the <ph id="ph1">`get`</ph> method to receive the result of the antecedent task in a task-based continuation because the result is immediately available.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>task::is_apartment_aware Method</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Determines whether the task unwraps a Windows Runtime <ph id="ph1">`IAsyncInfo`</ph> interface or is descended from such a task.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>if the task unwraps an <ph id="ph1">`IAsyncInfo`</ph> interface or is descended from such a task, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>task::is_done Method (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Determines if the task is completed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>True if the task has completed, false otherwise.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The function returns true if the task is completed or canceled (with or without user exception).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>task::operator!= Operator</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">`task`</ph> objects represent different internal tasks.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>if the objects refer to different underlying tasks, and <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>task::operator= Operator</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Replaces the contents of one <ph id="ph1">`task`</ph> object with another.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The source <ph id="ph1">`task`</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>As <ph id="ph1">`task`</ph> behaves like a smart pointer, after a copy assignment, this <ph id="ph2">`task`</ph> objects represents the same actual task as <ph id="ph3">`_Other`</ph> does.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>task::operator== Operator</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">`task`</ph> objects represent the same internal task.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>if the objects refer to the same underlying task, and <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>task::scheduler Method (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns the scheduler for this task</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A pointer to the scheduler</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>task::task Constructor</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`task`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The type of the parameter from which the task is to be constructed.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The parameter from which the task is to be constructed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This could be a lambda, a function object, a <ph id="ph1">`task_completion_event&lt;result_type&gt;`</ph> object, or a Windows::Foundation::IAsyncInfo if you are using tasks in your Windows Store app.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The lambda or function object should be a type equivalent to <ph id="ph1">`std::function&lt;X(void)&gt;`</ph>, where X can be a variable of type <ph id="ph2">`result_type`</ph>, <ph id="ph3">`task&lt;result_type&gt;`</ph>, or a Windows::Foundation::IAsyncInfo in Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The task options include cancellation token, scheduler etc</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The source <ph id="ph1">`task`</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The default constructor for a <ph id="ph1">`task`</ph> is only present in order to allow tasks to be used within containers.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A default constructed task cannot be used until you assign a valid task to it.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Methods such as <ph id="ph1">`get`</ph>, <ph id="ph2">`wait`</ph> or <ph id="ph3">`then`</ph> will throw an <bpt id="p1">[</bpt>invalid_argument<ept id="p1">](../../../standard-library/invalid-argument-class.md)</ept> exception when called on a default constructed task.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A task that is created from a <ph id="ph1">`task_completion_event`</ph> will complete (and have its continuations scheduled) when the task completion event is set.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The version of the constructor that takes a cancellation token creates a task that can be canceled using the <ph id="ph1">`cancellation_token_source`</ph> the token was obtained from.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Tasks created without a cancellation token are not cancelable.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Tasks created from a <ph id="ph1">`Windows::Foundation::IAsyncInfo`</ph> interface or a lambda that returns an <ph id="ph2">`IAsyncInfo`</ph> interface reach their terminal state when the enclosed Windows Runtime asynchronous operation or action completes.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Similarly, tasks created from a lamda that returns a <ph id="ph1">`task&lt;result_type&gt;`</ph> reach their terminal state when the inner task reaches its terminal state, and not when the lamda returns.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>behaves like a smart pointer and is safe to pass around by value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It can be accessed by multiple threads without the need for locks.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The constructor overloads that take a Windows::Foundation::IAsyncInfo interface or a lambda returning such an interface, are only available to Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>task::then Method</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Adds a continuation task to this task.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The type of the function object that will be invoked by this task.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The continuation function to execute when this task completes.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This continuation function must take as input a variable of either <ph id="ph1">`result_type`</ph> or <ph id="ph2">`task&lt;result_type&gt;`</ph>, where <ph id="ph3">`result_type`</ph> is the type of the result this task produces.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The task options include cancellation token, scheduler and continuation context.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>By default the former 3 options are inherited from the antecedent task</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The cancellation token to associate with the continuation task.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A continuation task that is created without a cancellation token will inherit the token of its antecedent task.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A variable that specifies where the continuation should execute.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This variable is only useful when used in a Windows Store style app.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>task_continuation_context<ept id="p1">](task-continuation-context-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The newly created continuation task.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The result type of the returned task is determined by what <ph id="ph1">`_Func`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The overloads of <ph id="ph1">`then`</ph> that take a lambda or functor that returns a Windows::Foundation::IAsyncInfo interface, are only available to Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information on how to use task continuations to compose asynchronous work, see <bpt id="p1">[</bpt>Task Parallelism<ept id="p1">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>task::wait Method</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Waits for this task to reach a terminal state.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>It is possible for <ph id="ph1">`wait`</ph> to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`task_status`</ph> value which could be either <ph id="ph2">`completed`</ph> or <ph id="ph3">`canceled`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the task encountered an exception during execution, or an exception was propagated to it from an antecedent task, <ph id="ph1">`wait`</ph> will throw that exception.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <ph id="ph2">`wait`</ph> in code that runs on the STA.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Otherwise, the runtime throws <bpt id="p1">[</bpt>concurrency::invalid_operation<ept id="p1">](invalid-operation-class.md)</ept> because this method blocks the current thread and can cause the app to become unresponsive.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>However, you can call the <bpt id="p1">[</bpt>concurrency::task::get<ept id="p1">](#get)</ept> method to receive the result of the antecedent task in a task-based continuation.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>concurrency Namespace</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>