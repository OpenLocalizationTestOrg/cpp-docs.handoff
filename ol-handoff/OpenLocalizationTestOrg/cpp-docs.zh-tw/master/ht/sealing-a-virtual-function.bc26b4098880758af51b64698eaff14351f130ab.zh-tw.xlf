<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8122ee821bbf82b3ffdd2c8aaf46e0911cba087</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\sealing-a-virtual-function.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">122ff3d4c875acd6a98194aa808c803e027612f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d69055a1498d41f1620f2406c2ccbf20de4807d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sealing a Virtual Function | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sealing a Virtual Function</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The syntax for sealing a virtual function has changed from Managed Extensions for C++ to <ph id="ph1">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__sealed`</ph> keyword is used in Managed Extensions to modify either a reference type, disallowing subsequent derivation from it (see <bpt id="p1">[</bpt>Declaration of a Managed Class Type<ept id="p1">](../dotnet/declaration-of-a-managed-class-type.md)</ept>), or to modify a virtual function, disallowing subsequent overriding of the method in a derived class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`derived::f()`</ph> overrides the <ph id="ph2">`base::f()`</ph> instance based on the exact match of the function prototype.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__sealed`</ph> keyword indicates that a subsequent class inherited from the derived class cannot provide an override of <ph id="ph2">`derived::f()`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the new syntax, <ph id="ph1">`sealed`</ph> is placed after the signature rather than being allowed to appear anywhere before the actual function prototype, as was previously allowed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, the use of <ph id="ph1">`sealed`</ph> requires an explicit use of the <ph id="ph2">`virtual`</ph> keyword as well.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>That is, the correct translation of <ph id="ph1">`derived`</ph>, above, is as follows:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The absence of the <ph id="ph1">`virtual`</ph> keyword in this instance results in an error.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the new syntax, the contextual keyword <ph id="ph1">`abstract`</ph> can be used in place of the <ph id="ph2">`=0`</ph> to indicate a pure virtual function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This was not supported within Managed Extensions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>can be rewritten as</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Member Declarations within a Class or Interface (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>sealed</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>