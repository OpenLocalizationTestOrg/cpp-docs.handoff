<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59ec50c7e68b4d79b97218a8cd24df391198e758</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ctype-base-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b35593eb717707974d9df741ad7dc79a2c8d5a8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b6dc7564c0ae0a2ceecbb3e7bcbe0e54f396554</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ctype_base Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ctype_base Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The class serves as a base class for facets of template class <bpt id="p1">[</bpt>ctype<ept id="p1">](../standard-library/ctype-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A base class for the ctype class that is used to define enumeration types used to classify or test characters either individually or within entire ranges.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It defines an enumeration mask.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each enumeration constant characterizes a different way to classify characters, as defined by the functions with similar names declared in the header <ph id="ph1">\&lt;</ph>ctype.h&gt;.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The constants are:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>space<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isspace<ept id="p2">](../standard-library/locale-functions.md#isspace)</ept>)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>print<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isprint<ept id="p2">](../standard-library/locale-functions.md#isprint)</ept>)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>cntrl<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>iscntrl<ept id="p2">](../standard-library/locale-functions.md#iscntrl)</ept>)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>upper<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isupper<ept id="p2">](../standard-library/locale-functions.md#isupper)</ept>)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>lower<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>islower<ept id="p2">](../standard-library/locale-functions.md#islower)</ept>)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>digit<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isdigit<ept id="p2">](../standard-library/locale-functions.md#isdigit)</ept>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>punct<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>ispunct<ept id="p2">](../standard-library/locale-functions.md#ispunct)</ept>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xdigit<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isxdigit<ept id="p2">](../standard-library/locale-functions.md#isxdigit)</ept>)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>alpha<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isalpha<ept id="p2">](../standard-library/locale-functions.md#isalpha)</ept>)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>alnum<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isalnum<ept id="p2">](../standard-library/locale-functions.md#isalnum)</ept>)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>graph<ept id="p1">**</ept> (function <bpt id="p2">[</bpt>isgraph<ept id="p2">](../standard-library/locale-functions.md#isgraph)</ept>)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can characterize a combination of classifications by ORing these constants.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In particular, it is always true that <bpt id="p1">**</bpt>alnum<ept id="p1">**</ept> == ( <bpt id="p2">**</bpt>alpha<ept id="p2">**</ept><ph id="ph1">``&amp;#124; **digit**\) and **graph** \=\= \( **alnum**``</ph>&amp;#124; <bpt id="p3">**</bpt>punct<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>