<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73808fe8496dad6e37d4cbc6ac6ca8750a31eefe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\csinglelock-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f9f3b492d5fc4728f9e214bfe6ce0bbbac47738</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c32b2fc55b45b6290fa7a8c9be190bce03fe2a24</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CSingleLock Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CSingleLock Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents the access-control mechanism used in controlling access to a resource in a multithreaded program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSingleLock::CSingleLock<ept id="p1">](#csinglelock__csinglelock)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CSingleLock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSingleLock::IsLocked<ept id="p1">](#csinglelock__islocked)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines if the object is locked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSingleLock::Lock<ept id="p1">](#csinglelock__lock)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Waits on a synchronization object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CSingleLock::Unlock<ept id="p1">](#csinglelock__unlock)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases a synchronization object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CSingleLock`</ph> does not have a base class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In order to use the synchronization classes <bpt id="p1">[</bpt>CSemaphore<ept id="p1">](../../mfc/reference/csemaphore-class.md)</ept>, <bpt id="p2">[</bpt>CMutex<ept id="p2">](../../mfc/reference/cmutex-class.md)</ept>, <bpt id="p3">[</bpt>CCriticalSection<ept id="p3">](../../mfc/reference/ccriticalsection-class.md)</ept>, and <bpt id="p4">[</bpt>CEvent<ept id="p4">](../../mfc/reference/cevent-class.md)</ept>, you must create either a <ph id="ph1">`CSingleLock`</ph> or <bpt id="p5">[</bpt>CMultiLock<ept id="p5">](../../mfc/reference/cmultilock-class.md)</ept> object to wait on and release the synchronization object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CSingleLock`</ph> when you only need to wait on one object at a time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>CMultiLock<ept id="p1">**</ept> when there are multiple objects that you could use at a particular time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CSingleLock`</ph> object, call its constructor inside a member function in the controlled resource's class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Then call the <bpt id="p1">[</bpt>IsLocked<ept id="p1">](#csinglelock__islocked)</ept> member function to determine if the resource is available.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If it is, continue with the remainder of the member function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the resource is unavailable, either wait for a specified amount of time for the resource to be released, or return failure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After use of the resource is complete, either call the <bpt id="p1">[</bpt>Unlock<ept id="p1">](#csinglelock__unlock)</ept> function if the <ph id="ph1">`CSingleLock`</ph> object is to be used again, or allow the <ph id="ph2">`CSingleLock`</ph> object to be destroyed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CSingleLock`</ph> objects require the presence of an object derived from <bpt id="p1">[</bpt>CSyncObject<ept id="p1">](../../mfc/reference/csyncobject-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is usually a data member of the controlled resource's class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information on how to use <ph id="ph1">`CSingleLock`</ph> objects, see the article <bpt id="p1">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p1">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxmt.h</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csinglelock__csinglelock"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSingleLock::CSingleLock</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CSingleLock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Points to the synchronization object to be accessed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Specifies whether to initially attempt to access the supplied object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This function is generally called from within an access member function of the controlled resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#19<ept id="p2">](../../mfc/codesnippet/cpp/csinglelock-class_1.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csinglelock__islocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSingleLock::IsLocked</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines if the object associated with the <ph id="ph1">`CSingleLock`</ph> object is nonsignaled (unavailable).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Nonzero if the object is locked; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#20<ept id="p2">](../../mfc/codesnippet/cpp/csinglelock-class_2.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csinglelock__lock"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSingleLock::Lock</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Call this function to gain access to the resource controlled by the synchronization object supplied to the <ph id="ph1">`CSingleLock`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwTimeOut<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies the amount of time to wait for the synchronization object to be available (signaled).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>INFINITE<ept id="p1">**</ept>, <ph id="ph1">`Lock`</ph> will wait until the object is signaled before returning.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Nonzero if the function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the synchronization object is signaled, <ph id="ph1">`Lock`</ph> will return successfully and the thread now owns the object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the synchronization object is nonsignaled (unavailable), <ph id="ph1">`Lock`</ph> will wait for the synchronization object to become signaled up to the number of milliseconds specified in the <bpt id="p1">*</bpt>dwTimeOut<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the synchronization object did not become signaled in the specified amount of time, <ph id="ph1">`Lock`</ph> returns failure.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#21<ept id="p2">](../../mfc/codesnippet/cpp/csinglelock-class_3.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="csinglelock__unlock"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CSingleLock::Unlock</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Releases the synchronization object owned by <ph id="ph1">`CSingleLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Number of accesses to release.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Must be greater than 0.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the specified amount would cause the object's count to exceed its maximum, the count is not changed and the function returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Points to a variable to receive the previous count of the synchronization object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the previous count is not returned.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Nonzero if the function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This function is called by <ph id="ph1">`CSingleLock`</ph>'s destructor.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you need to release more than one access count of a semaphore, use the second form of <ph id="ph1">`Unlock`</ph> and specify the number of accesses to release.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#21<ept id="p2">](../../mfc/codesnippet/cpp/csinglelock-class_3.h)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMultiLock Class<ept id="p1">](../../mfc/reference/cmultilock-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>