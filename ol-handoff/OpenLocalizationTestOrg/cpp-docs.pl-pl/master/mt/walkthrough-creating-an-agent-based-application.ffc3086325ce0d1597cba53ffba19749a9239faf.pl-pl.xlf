<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1122891b6c327aee022aefe56440fb7fc49a3f13</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\walkthrough-creating-an-agent-based-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10e6ad4675470bb6d313198b05d3c140f336cdb6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8babdfd22caf1ceb1c0a05e45623e642919033a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Agent-Based Application | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Agent-Based Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to create a basic agent-based application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you can create an agent that reads data from a text file asynchronously.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The application uses the Adler-32 checksum algorithm to calculate the checksum of the contents of that file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You must understand the following topics to complete this walkthrough:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This walkthrough demonstrates how to perform the following tasks:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creating the Console Application</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creating the file_reader Class</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Using the file_reader Class in the Application</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating the Console Application</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This section shows how to create a Visual C++ console application that references the header files that the program will use.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To create a Visual C++ application by using the Win32 Console Application Wizard</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept> to display the <bpt id="p4">**</bpt>New Project<ept id="p4">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, select the <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept> node in the <bpt id="p3">**</bpt>Project types<ept id="p3">**</ept> pane and then select <bpt id="p4">**</bpt>Win32 Console Application<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>Templates<ept id="p5">**</ept> pane.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type a name for the project, for example, <ph id="ph1">`BasicAgent`</ph>, and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to display the <bpt id="p2">**</bpt>Win32 Console Application Wizard<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Win32 Console Application Wizard<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Finish<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In stdafx.h, add the following code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#1</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The header file agents.h contains the functionality of the <bpt id="p1">[</bpt>concurrency::agent<ept id="p1">](../../parallel/concrt/reference/agent-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Verify that the application was created successfully by building and running it.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To build the application, on the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the application builds successfully, run the application by clicking <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creating the file_reader Class</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This section shows how to create the <ph id="ph1">`file_reader`</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The runtime schedules each agent to perform work in its own context.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Therefore, you can create an agent that performs work synchronously, but interacts with other components asynchronously.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`file_reader`</ph> class reads data from a given input file and sends data from that file to a given target component.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create the file_reader class</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add a new C++ header file to your project.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To do so, right-click the <bpt id="p1">**</bpt>Header Files<ept id="p1">**</ept> node in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>New Item<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, select <bpt id="p2">**</bpt>Header File (.h)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, type <ph id="ph1">`file_reader.h`</ph> in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In file_reader.h, add the following code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#17</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In file_reader.h, create a class that is named <ph id="ph1">`file_reader`</ph> that derives from <ph id="ph2">`agent`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#2</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following data members to the <ph id="ph1">`private`</ph> section of your class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#3</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_file_name`</ph> member is the file name that the agent reads from.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_target`</ph> member is a <bpt id="p1">[</bpt>concurrency::ITarget<ept id="p1">](../../parallel/concrt/reference/itarget-class.md)</ept> object that the agent writes the contents of the file to.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_error`</ph> member holds any error that occurs during the life of the agent.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add the following code for the <ph id="ph1">`file_reader`</ph> constructors to the <ph id="ph2">`public`</ph> section of the <ph id="ph3">`file_reader`</ph> class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#4</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each constructor overload sets the <ph id="ph1">`file_reader`</ph> data members.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second and third constructor overload enables your application to use a specific scheduler with your agent.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The first overload uses the default scheduler with your agent.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`get_error`</ph> method to the public section of the <ph id="ph2">`file_reader`</ph> class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#5</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get_error`</ph> method retrieves any error that occurs during the life of the agent.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">[</bpt>concurrency::agent::run<ept id="p1">](reference/agent-class.md#run)</ept> method in the <ph id="ph1">`protected`</ph> section of your class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#6</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method opens the file and reads data from it.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method uses exception handling to capture any errors that occur during file processing.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Each time this method reads data from the file, it calls the <bpt id="p1">[</bpt>concurrency::asend<ept id="p1">](reference/concurrency-namespace-functions.md#asend)</ept> function to send that data to the target buffer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It sends the empty string to its target buffer to indicate the end of processing.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example shows the complete contents of file_reader.h.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#7</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Using the file_reader Class in the Application</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This section shows how to use the <ph id="ph1">`file_reader`</ph> class to read the contents of a text file.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It also shows how to create a <bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> object that receives this file data and calculates its Adler-32 checksum.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To use the file_reader class in your application</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In BasicAgent.cpp, add the following <ph id="ph1">`#include`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#8</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In BasicAgent.cpp, add the following <ph id="ph1">`using`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#9</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`_tmain`</ph> function, create a <bpt id="p1">[</bpt>concurrency::event<ept id="p1">](../../parallel/concrt/reference/event-class.md)</ept> object that signals the end of processing.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#10</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`call`</ph> object that updates the checksum when it receives data.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#11</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`call`</ph> object also sets the <ph id="ph2">`event`</ph> object when it receives the empty string to signal the end of processing.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`file_reader`</ph> object that reads from the file test.txt and writes the contents of that file to the <ph id="ph2">`call`</ph> object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#12</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Start the agent and wait for it to finish.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#13</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Wait for the <ph id="ph1">`call`</ph> object to receive all data and finish.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#14</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Check the file reader for errors.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If no error occurred, calculate the final Adler-32 sum and print the sum to the console.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#15</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example shows the complete BasicAgent.cpp file.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>concrt-basic-agent#16</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Sample Input</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This is the sample contents of the input file text.txt:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When used with the sample input, this program produces the following output:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To prevent concurrent access to data members, we recommend that you add methods that perform work to the <ph id="ph1">`protected`</ph> or <ph id="ph2">`private`</ph> section of your class.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Only add methods that send or receive messages to or from the agent to the <ph id="ph1">`public`</ph> section of your class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Always call the <bpt id="p1">[</bpt>concurrency::agent::done<ept id="p1">](reference/agent-class.md#done)</ept> method to move your agent to the completed state.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You typically call this method before you return from the <ph id="ph1">`run`</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For another example of an agent-based application, see <bpt id="p1">[</bpt>Walkthrough: Using join to Prevent Deadlock<ept id="p1">](../../parallel/concrt/walkthrough-using-join-to-prevent-deadlock.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using join to Prevent Deadlock</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>