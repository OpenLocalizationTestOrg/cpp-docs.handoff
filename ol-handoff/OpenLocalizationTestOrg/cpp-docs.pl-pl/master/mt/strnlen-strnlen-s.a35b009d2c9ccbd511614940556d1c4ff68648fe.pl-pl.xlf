<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cb36e28f6f0336cd71eb53f9d3b6683bd0636b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strnlen-strnlen-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c33855801e84e6dee9a10a20dd965f055f4f4a73</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">328749a7cdaca9e5c33734c7591a280b76fb4f2c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strnlen, strnlen_s, wcsnlen, wcsnlen_s, _mbsnlen, _mbsnlen_l, _mbstrnlen, _mbstrnlen_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strnlen, strnlen_s, wcsnlen, wcsnlen_s, _mbsnlen, _mbsnlen_l, _mbstrnlen, _mbstrnlen_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets the length of a string by using the current locale or one that has been passed in.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These are more secure versions of <bpt id="p1">[</bpt>strlen, wcslen, _mbslen, _mbslen_l, _mbstrlen, _mbstrlen_l<ept id="p1">](../../c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `_mbsnlen`</ph>, <ph id="ph2">`_mbsnlen_l`</ph>, <ph id="ph3">`_mbstrnlen`</ph>, and <ph id="ph4">`_mbstrnlen_l`</ph> cannot be used in applications that execute in the <ph id="ph5">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Null-terminated string.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The size of the string buffer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Locale to use.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These functions return the number of characters in the string, not including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If there is no null terminator within the first <ph id="ph1">`numberOfElements`</ph> bytes of the string (or wide characters for <ph id="ph2">`wcsnlen`</ph>), then <ph id="ph3">`numberOfElements`</ph> is returned to indicate the error condition; null-terminated strings have lengths that are strictly less than <ph id="ph4">`numberOfElements`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbstrnlen`</ph> and <ph id="ph2">`_mbstrnlen_l`</ph> return -1 if the string contains an invalid multibyte character.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `strnlen`</ph> is not a replacement for <ph id="ph2">`strlen`</ph>; <ph id="ph3">`strnlen`</ph> is intended to be used only to calculate the size of incoming untrusted data in a buffer of known sizeâ€”for example, a network packet.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strnlen`</ph> calculates the length but doesn't walk past the end of the buffer if the string is unterminated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For other situations, use <ph id="ph1">`strlen`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(The same applies to <ph id="ph1">`wcsnlen`</ph>, <ph id="ph2">`_mbsnlen`</ph>, and <ph id="ph3">`_mbstrnlen`</ph>.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each of these functions returns the number of characters in <ph id="ph1">`str`</ph>, not including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`strnlen`</ph> and <ph id="ph2">`strnlen_s`</ph> interpret the string as a single-byte character string and therefore, the return value is always equal to the number of bytes, even if the string contains multibyte characters.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcsnlen`</ph> and <ph id="ph2">`wcsnlen_s`</ph> are wide-character versions of <ph id="ph3">`strnlen`</ph> and <ph id="ph4">`strnlen_s`</ph> respectively; the arguments for <ph id="ph5">`wcsnlen`</ph> and <ph id="ph6">`wcsnlen_s`</ph> are wide-character strings and the count of characters are in wide-character units.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`wcsnlen`</ph> and <ph id="ph2">`strnlen`</ph> behave identically, as do <ph id="ph3">`strnlen_s`</ph> and <ph id="ph4">`wcsnlen_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strnlen`</ph>, <ph id="ph2">`wcsnlen,`</ph> and <ph id="ph3">`_mbsnlen`</ph> do not validate their parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`str`</ph> is <ph id="ph2">`NULL`</ph>, an access violation occurs.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strnlen_s`</ph> and <ph id="ph2">`wcsnlen_s`</ph> validate their parameters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`str`</ph> is <ph id="ph2">`NULL`</ph>, the functions return 0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbstrnlen`</ph> also validates its parameters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`str`</ph> is <ph id="ph2">`NULL`</ph>, or if <ph id="ph3">`numberOfElements`</ph> is greater than <ph id="ph4">`INT_MAX`</ph>, <ph id="ph5">`_mbstrnlen`</ph> generates an invalid parameter exception, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, <ph id="ph1">`_mbstrnlen`</ph> sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph> and returns -1.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbsnlen`</ph> and <ph id="ph2">`_mbstrnlen`</ph> return the number of multibyte characters in a multibyte-character string.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbsnlen`</ph> recognizes multibyte-character sequences according to the multibyte code page that's currently in use or according to the locale that's passed in; it does not test for multibyte-character validity.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbstrnlen`</ph> tests for multibyte-character validity and recognizes multibyte-character sequences.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the string that's passed to <ph id="ph1">`_mbstrnlen`</ph> contains an invalid multibyte character, <ph id="ph2">`errno`</ph> is set to <ph id="ph3">`EILSEQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The output value is affected by the setting of the <ph id="ph1">`LC_CTYPE`</ph> category setting of the locale; see <bpt id="p1">[</bpt>setlocale, _wsetlocale<ept id="p1">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The versions of these functions are identical, except that the ones that don't have the <ph id="ph1">`_l`</ph> suffix use the current locale for this locale-dependent behavior and the versions that have the <ph id="ph2">`_l`</ph> suffix instead use the locale parameter that's passed in.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strnlen`</ph>, <ph id="ph2">`strnlen_s`</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcsnlen`</ph>, <ph id="ph2">`wcsnlen_s`</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>string.h&gt; or <ph id="ph2">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbsnlen`</ph>, <ph id="ph2">`_mbsnlen_l`</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mbstrnlen`</ph>, <ph id="ph2">`_mbstrnlen_l`</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::String::Length<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.string.length.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Manipulation<ept id="p1">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interpretation of Multibyte-Character Sequences<ept id="p1">](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>setlocale, _wsetlocale<ept id="p1">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l<ept id="p1">](../../c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strncmp, wcsncmp, _mbsncmp, _mbsncmp_l<ept id="p1">](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strcoll Functions<ept id="p1">](../../c-runtime-library/strcoll-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l<ept id="p1">](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strrchr, wcsrchr, _mbsrchr, _mbsrchr_l<ept id="p1">](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l<ept id="p1">](../../c-runtime-library/reference/strset-strset-l-wcsset-wcsset-l-mbsset-mbsset-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strspn, wcsspn, _mbsspn, _mbsspn_l<ept id="p1">](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>