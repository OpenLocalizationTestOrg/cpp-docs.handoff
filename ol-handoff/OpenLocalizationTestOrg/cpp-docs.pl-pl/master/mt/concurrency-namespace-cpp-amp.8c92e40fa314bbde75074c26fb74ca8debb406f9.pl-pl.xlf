<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a62955c94771320a64027f4f820434dd5e7984a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\reference\concurrency-namespace-cpp-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f09117a0a63bc56bafc2d086b386d712836abee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">630bddc027ef0ee58b7118f5ceb59664c80dec07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Concurrency Namespace (C++ AMP) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Concurrency Namespace (C++ AMP)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides classes and functions that accelerate the execution of C++ code on data-parallel hardware.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>C++ AMP Overview<ept id="p1">](../cpp-amp-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency::direct3d Namespace<ept id="p1">](concurrency-direct3d-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Provides functions that support D3D interoperability.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Enables seamless use of D3D resources for compute in AMP code and the use of resources created in AMP in D3D code, without creating redundant intermediate copies.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use C++ AMP to incrementally accelerate the compute-intensive sections of your DirectX applications and use the D3D API on data produced from AMP computations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency::fast_math Namespace<ept id="p1">](concurrency-fast-math-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functions in the <ph id="ph1">`fast_math`</ph> namespace are not C99-compliant.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Only single-precision versions of each function are provided.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These functions use the DirectX intrinsic functions, which are faster than the corresponding functions in the <ph id="ph1">`precise_math`</ph> namespace and do not require extended double-precision support on the accelerator, but they are less accurate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are two versions of each function for source-level compatibility with C99 code; both versions take and return single-precision values.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency::graphics Namespace<ept id="p1">](concurrency-graphics-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Provides types and functions that are designed for graphics programming.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concurrency::precise_math Namespace<ept id="p1">](concurrency-precise-math-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions in the <ph id="ph1">`precise_math`</ph> namespace are C99 compliant.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Both single-precision and double-precision versions of each function are included.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These functions—this includes the single-precision functions—require extended double-precision support on the accelerator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator Class<ept id="p1">](accelerator-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Represents an abstraction of a physical DP-optimized compute node.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator_view Class<ept id="p1">](accelerator-view-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Represents a virtual device abstraction on a C++ AMP data-parallel accelerator.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>accelerator_view_removed Class<ept id="p1">](accelerator-view-removed-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an underlying DirectX call fails due to the Windows timeout-detection-and-recovery mechanism.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array Class<ept id="p1">](array-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A data aggregate on an <ph id="ph1">`accelerator_view`</ph> in the grid domain.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is a collection of variables, one for each element in a grid domain.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each variable holds a value that corresponds to some C++ type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>array_view Class<ept id="p1">](array-view-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Represents a view into the data in an array<ph id="ph1">\&lt;</ph>T,N&gt;.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>completion_future Class<ept id="p1">](completion-future-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Represents a future that corresponds to a C++ AMP asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>extent Class<ept id="p1">](extent-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Represents a vector of N integer values that specify the bounds of an N-dimensional space that has an origin of 0.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The values in the coordinate vector are ordered from most significant to least significant.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, in Cartesian 3-dimensional space, the extent vector (7,5,3) represents a space in which the z coordinate ranges from 0 to 7, the y coordinate ranges from 0 to 5, and the x coordinate ranges from 0 to 3.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>index Class<ept id="p1">](index-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines an N-dimensional index point.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>invalid_compute_domain Class<ept id="p1">](invalid-compute-domain-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The exception that's thrown when the runtime can't start a kernel by using the compute domain specified at the <ph id="ph1">`parallel_for_each`</ph> call site.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>out_of_memory Class<ept id="p1">](out-of-memory-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when a method fails because of a lack of system or device memory.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>runtime_exception Class<ept id="p1">](runtime-exception-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The base type for exceptions in the C++ AMP library.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tile_barrier Class<ept id="p1">](tile-barrier-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A capability class that is only creatable by the system and is passed to a tiled <ph id="ph1">`parallel_for_each`</ph> lambda as part of the <ph id="ph2">`tiled_index`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It provides one method, <ph id="ph1">`wait()`</ph>, whose purpose is to synchronize execution of threads that are running in the thread group (tile).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tiled_extent Class<ept id="p1">](tiled-extent-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`tiled_extent`</ph> object is an <ph id="ph2">`extent`</ph> object of one to three dimensions that subdivides the extent space into one-dimensional, two-dimensional, or three-dimensional tiles.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tiled_index Class<ept id="p1">](tiled-index-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Provides an index into a <ph id="ph1">`tiled_grid`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This class has properties to access element relative to the local tile origin and relative to the global origin.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>uninitialized_object Class<ept id="p1">](uninitialized-object-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an uninitialized object is used.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unsupported_feature Class<ept id="p1">](unsupported-feature-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an unsupported feature is used.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>access_type Enumeration<ept id="p1">](concurrency-namespace-enums-amp.md#access_type)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies the data access type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>queuing_mode Enumeration<ept id="p1">](concurrency-namespace-enums-amp.md#queuing_mode)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies the queuing modes that are supported on the accelerator.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator== Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Determines whether the specified data structures are equal.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!= Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Determines whether the specified data structures are unequal.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+ Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Computes the component-wise sum of the specified arguments.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator- Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator-)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Computes the component-wise difference between the specified arguments.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator* Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_star)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Computes the component-wise product of the specified arguments.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator/ Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_div)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Computes the component-wise quotient of the specified arguments.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator% Operator (C++ AMP)<ept id="p1">](concurrency-namespace-operators-amp.md#operator_mod)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Computes the modulus of the first specified argument by the second specified argument.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>all_memory_fence Function<ept id="p1">](concurrency-namespace-functions-amp.md#all_memory_fence)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Blocks execution of all threads in a tile until all memory accesses have been completed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>amp_uninitialize Function<ept id="p1">](concurrency-namespace-functions-amp.md#amp_uninitialize)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Uninitializes the C++ AMP runtime.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_compare_exchange Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_compare_exchange)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If the value stored at the specified location compares equal to the first specified value, then the second specified value is stored in the same location as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_exchange Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_exchange)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_add Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_add)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the sum of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_and Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_and)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the bitwise <ph id="ph1">`and`</ph> of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_dec Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_dec)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Decrements the value stored at the specified location and stores the result in the same location as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_inc Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_inc)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Increments the value stored at the specified location and stores the result in the same location as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_max Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_max)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the larger of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_min Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_min)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the smaller of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_or Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_or)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the bitwise <ph id="ph1">`or`</ph> of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_sub Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_sub)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the difference of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>atomic_fetch_xor Function<ept id="p1">](concurrency-namespace-functions-amp.md#atomic_fetch_xor)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Sets the value stored at the specified location to the bitwise <ph id="ph1">`xor`</ph> of that value and a specified value as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>copy Function<ept id="p1">](concurrency-namespace-functions-amp.md#copy)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Copies a C++ AMP object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>All synchronous data transfer requirements are met.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Data can't be copied when code is running code on an accelerator.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The general form of this function is <ph id="ph1">`copy(src, dest)`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>copy_async Function<ept id="p1">](concurrency-namespace-functions-amp.md#copy_async)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Copies a C++ AMP object and returns <bpt id="p1">[</bpt>completion_future<ept id="p1">](completion-future-class.md)</ept> that can be waited on.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Data can't be copied when code is running on an accelerator.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The general form of this function is <ph id="ph1">`copy(src, dest)`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>direct3d_abort Function<ept id="p1">](concurrency-namespace-functions-amp.md#direct3d_abort)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Aborts the execution of a function that has the <ph id="ph1">`restrict(amp)`</ph> restriction clause.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>direct3d_errorf Function<ept id="p1">](concurrency-namespace-functions-amp.md#direct3d_errorf)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Prints a formatted string to the Visual Studio <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window and raises a <bpt id="p2">[</bpt>runtime_exception<ept id="p2">](runtime-exception-class.md)</ept> exception that has the same formatting string.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>direct3d_printf Function<ept id="p1">](concurrency-namespace-functions-amp.md#direct3d_printf)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Prints a formatted string to the Visual Studio <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It is called from a function that has the <ph id="ph1">`restrict(amp)`</ph> restriction clause.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>global_memory_fence Function<ept id="p1">](concurrency-namespace-functions-amp.md#global_memory_fence)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Blocks execution of all threads in a tile until all global memory accesses have been completed.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>parallel_for_each Function (C++ AMP)<ept id="p1">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Runs a function across the compute domain.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tile_static_memory_fence Function<ept id="p1">](concurrency-namespace-functions-amp.md#tile_static_memory_fence)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Blocks execution of all threads in a tile until <ph id="ph1">`tile_static`</ph> memory accesses have been completed.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Constants</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>HLSL_MAX_NUM_BUFFERS Constant<ept id="p1">](concurrency-namespace-constants-amp.md#hlsl_max_num_buffers)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The maximum number of buffers allowed by DirectX.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MODULENAME_MAX_LENGTH Constant<ept id="p1">](concurrency-namespace-constants-amp.md#modulename_max_length)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Stores the maximum length of the module name.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This value must be the same on the compiler and the runtime.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> amp.h</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference (C++ AMP)<ept id="p1">](reference-cpp-amp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>