<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f4d0d8b5843a8cce82b9754aeb59d43c4becbcd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ctoolbar-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e44e4401546e0a21696583e361e39350674edff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a399e2f151f7187b97b96cd7d89b95b9fa5bde5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CToolBar Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CToolBar Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Control bars that have a row of bitmapped buttons and optional separators.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::CToolBar<ept id="p1">](#ctoolbar__ctoolbar)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::CommandToIndex<ept id="p1">](#ctoolbar__commandtoindex)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the index of a button with the given command ID.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::Create<ept id="p1">](#ctoolbar__create)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creates the Windows toolbar and attaches it to the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::CreateEx<ept id="p1">](#ctoolbar__createex)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CToolBar`</ph> object with additional styles for the embedded <ph id="ph2">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetButtonInfo<ept id="p1">](#ctoolbar__getbuttoninfo)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Retrieves the ID, style, and image number of a button.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetButtonStyle<ept id="p1">](#ctoolbar__getbuttonstyle)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the style for a button.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetButtonText<ept id="p1">](#ctoolbar__getbuttontext)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Retrieves the text that will appear on a button.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetItemID<ept id="p1">](#ctoolbar__getitemid)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the command ID of a button or separator at the given index.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetItemRect<ept id="p1">](#ctoolbar__getitemrect)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the display rectangle for the item at the given index.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetToolBarCtrl<ept id="p1">](#ctoolbar__gettoolbarctrl)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Allows direct access to the underlying common control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::LoadBitmap<ept id="p1">](#ctoolbar__loadbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Loads the bitmap containing bitmap-button images.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::LoadToolBar<ept id="p1">](#ctoolbar__loadtoolbar)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Loads a toolbar resource created with the resource editor.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetBitmap<ept id="p1">](#ctoolbar__setbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Sets a bitmapped image.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetButtonInfo<ept id="p1">](#ctoolbar__setbuttoninfo)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Sets the ID, style, and image number of a button.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetButtons<ept id="p1">](#ctoolbar__setbuttons)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Sets button styles and an index of button images within the bitmap.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetButtonStyle<ept id="p1">](#ctoolbar__setbuttonstyle)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sets the style for a button.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetButtonText<ept id="p1">](#ctoolbar__setbuttontext)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Sets the text that will appear on a button.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetHeight<ept id="p1">](#ctoolbar__setheight)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Sets the height of the toolbar.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::SetSizes<ept id="p1">](#ctoolbar__setsizes)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Sets the sizes of buttons and their bitmaps.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The buttons can act like pushbuttons, check-box buttons, or radio buttons.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CToolBar`</ph> objects are usually embedded members of frame-window objects derived from the class <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept> or <bpt id="p2">[</bpt>CMDIFrameWnd<ept id="p2">](../../mfc/reference/cmdiframewnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CToolBar::GetToolBarCtrl<ept id="p1">](#ctoolbar__gettoolbarctrl)</ept>, a member function new to MFC 4.0, allows you to take advantage of the Windows common control's support for toolbar customization and additional functionality.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CToolBar`</ph> member functions give you most of the functionality of the Windows common controls; however, when you call <ph id="ph2">`GetToolBarCtrl`</ph>, you can give your toolbars even more of the characteristics of Windows 95/98 toolbars.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`GetToolBarCtrl`</ph>, it will return a reference to a <ph id="ph2">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CToolBarCtrl<ept id="p1">](../../mfc/reference/ctoolbarctrl-class.md)</ept> for more information about designing toolbars using Windows common controls.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more general information about common controls, see <bpt id="p1">[</bpt>Common Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775493)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Visual C++ provides you with two methods to create a toolbar.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To create a toolbar resource using the Resource Editor, follow these steps:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Create a toolbar resource.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Construct the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbar__create)</ept> (or <bpt id="p2">[</bpt>CreateEx<ept id="p2">](#ctoolbar__createex)</ept>) function to create the Windows toolbar and attach it to the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>LoadToolBar<ept id="p1">](#ctoolbar__loadtoolbar)</ept> to load the toolbar resource.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, follow these steps:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Construct the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbar__create)</ept> (or <bpt id="p2">[</bpt>CreateEx<ept id="p2">](#ctoolbar__createex)</ept>) function to create the Windows toolbar and attach it to the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>LoadBitmap<ept id="p1">](#ctoolbar__loadbitmap)</ept> to load the bitmap that contains the toolbar button images.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>SetButtons<ept id="p1">](#ctoolbar__setbuttons)</ept> to set the button style and associate each button with an image in the bitmap.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>All the button images in the toolbar are taken from one bitmap, which must contain one image for each button.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>All images must be the same size; the default is 16 pixels wide and 15 pixels high.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Images must be side by side in the bitmap.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetButtons`</ph> function takes a pointer to an array of control IDs and an integer that specifies the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The function sets each button's ID to the value of the corresponding element of the array and assigns each button an image index, which specifies the position of the button's image in the bitmap.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If an array element has the value <bpt id="p1">**</bpt>ID_SEPARATOR<ept id="p1">**</ept>, no image index is assigned.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The order of the images in the bitmap is typically the order in which they are drawn on the screen, but you can use the <bpt id="p1">[</bpt>SetButtonInfo<ept id="p1">](#ctoolbar__setbuttoninfo)</ept> function to change the relationship between image order and drawing order.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>All buttons in a toolbar are the same size.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The default is 24 x 22 pixels, in accordance with <bpt id="p1">*</bpt>Windows Interface Guidelines for Software Design<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Any additional space between the image and button dimensions is used to form a border around the image.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Each button has one image.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The various button states and styles (pressed, up, down, disabled, disabled down, and indeterminate) are generated from that one image.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Although bitmaps can be any color, you can achieve the best results with images in black and shades of gray.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CToolBar`</ph> supports bitmaps with a maximum of 16 colors.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you load an image into a toolbar editor, Visual Studio automatically converts the image to a 16-color bitmap, if necessary, and displays a warning message if the image was converted.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you use an image with more than 16 colors (using an external editor to edit the image), the application might behave unexpectedly.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Toolbar buttons imitate pushbuttons by default.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, toolbar buttons can also imitate check-box buttons or radio buttons.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Check-box buttons have three states: checked, cleared, and indeterminate.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Radio buttons have only two states: checked and cleared.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To set an individual button or separator style without pointing to an array, call <bpt id="p1">[</bpt>GetButtonStyle<ept id="p1">](#ctoolbar__getbuttonstyle)</ept> to retrieve the style, and then call <bpt id="p2">[</bpt>SetButtonStyle<ept id="p2">](#ctoolbar__setbuttonstyle)</ept> instead of <ph id="ph1">`SetButtons`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetButtonStyle`</ph> is most useful when you want to change a button's style at run time.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To assign text to appear on a button, call <bpt id="p1">[</bpt>GetButtonText<ept id="p1">](#ctoolbar__getbuttontext)</ept> to retrieve the text to appear on the button, and then call <bpt id="p2">[</bpt>SetButtonText<ept id="p2">](#ctoolbar__setbuttontext)</ept> to set the text.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To create a check-box button, assign it the style <bpt id="p1">**</bpt>TBBS_CHECKBOX<ept id="p1">**</ept> or use a <ph id="ph1">`CCmdUI`</ph> object's <ph id="ph2">`SetCheck`</ph> member function in an <ph id="ph3">`ON_UPDATE_COMMAND_UI`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`SetCheck`</ph> turns a pushbutton into a check-box button.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Pass <ph id="ph1">`SetCheck`</ph> an argument of 0 for unchecked, 1 for checked, or 2 for indeterminate.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To create a radio button, call a <bpt id="p1">[</bpt>CCmdUI<ept id="p1">](../../mfc/reference/ccmdui-class.md)</ept> object's <bpt id="p2">[</bpt>SetRadio<ept id="p2">](../../mfc/reference/ccmdui-class.md#ccmdui__setradio)</ept> member function from an <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Pass <ph id="ph1">`SetRadio`</ph> an argument of 0 for unchecked or nonzero for checked.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In order to provide a radio group's mutually exclusive behavior, you must have <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handlers for all of the buttons in the group.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CToolBar`</ph>, see the article <bpt id="p1">[</bpt>MFC Toolbar Implementation<ept id="p1">](../../mfc/mfc-toolbar-implementation.md)</ept> and <bpt id="p2">[</bpt>Technical Note 31: Control Bars<ept id="p2">](../../mfc/tn031-control-bars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CControlBar<ept id="p1">](../../mfc/reference/ccontrolbar-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxext.h</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__commandtoindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::CommandToIndex</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This member function returns the index of the first toolbar button, starting at position 0, whose command ID matches <ph id="ph1">`nIDFind`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Command ID of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The index of the button, or –1 if no button has the given command ID.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::Create</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This member function creates a Windows toolbar (a child window) and associates it with the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Pointer to the window that is the toolbar's parent.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The toolbar style.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Additional toolbar styles supported are:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBRS_TOP`</ph> Control bar is at top of the frame window.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBRS_BOTTOM`</ph> Control bar is at bottom of the frame window.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBRS_NOALIGN`</ph> Control bar is not repositioned when the parent is resized.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBRS_TOOLTIPS`</ph> Control bar displays tool tips.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_SIZE_DYNAMIC<ept id="p1">**</ept> Control bar is dynamic.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_SIZE_FIXED<ept id="p1">**</ept> Control bar is fixed.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_FLOATING<ept id="p1">**</ept> Control bar is floating.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBRS_FLYBY`</ph> Status bar displays information about the button.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_HIDE_INPLACE<ept id="p1">**</ept> Control bar is not displayed to the user.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The toolbar's child-window ID.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>It also sets the toolbar height to a default value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#179<ept id="p2">](../../mfc/codesnippet/cpp/ctoolbar-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__createex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::CreateEx</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call this function to create a Windows toolbar (a child window) and associate it with the <ph id="ph1">`CToolBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Pointer to the window that is the toolbar's parent.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Additional styles for the creation of the embedded <bpt id="p1">[</bpt>CToolBarCtrl<ept id="p1">](../../mfc/reference/ctoolbarctrl-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>By default, this value is set to <bpt id="p1">**</bpt>TBSTYLE_FLAT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For a complete list of toolbar styles, see <ph id="ph1">`dwStyle`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The toolbar style.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Toolbar Control and Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of appropriate styles.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>rcBorders<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that defines the widths of the toolbar window borders.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>These borders are set to 0,0,0,0 by default, thereby resulting in a toolbar window with no borders.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The toolbar's child-window ID.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>It also sets the toolbar height to a default value.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CreateEx`</ph>, instead of <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbar__create)</ept>, when certain styles need to be present during the creation of the embedded tool bar control.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example, set <ph id="ph1">`dwCtrlStyle`</ph> to <bpt id="p1">**</bpt>TBSTYLE_FLAT &amp;#124; TBSTYLE_TRANSPARENT<ept id="p1">**</ept> to create a toolbar that resembles the Internet Explorer 4 toolbars.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#180<ept id="p2">](../../mfc/codesnippet/cpp/ctoolbar-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__ctoolbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::CToolBar</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This member function constructs a <ph id="ph1">`CToolBar`</ph> object and sets the default sizes.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbar__create)</ept> member function to create the toolbar window.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__getbuttoninfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetButtonInfo</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This member function retrieves the control ID, style, and image index of the toolbar button or separator at the location specified by <bpt id="p1">*</bpt>nIndex.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Index of the toolbar button or separator whose information is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Reference to a <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that is set to the command ID of the button.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Reference to a <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that is set to the style of the button.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Reference to an integer that is set to the index of the button's image within the bitmap.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Those values are assigned to the variables referenced by <ph id="ph1">`nID`</ph>, <ph id="ph2">`nStyle`</ph>, and <ph id="ph3">`iImage`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The image index is the position of the image within the bitmap that contains images for all the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The first image is at position 0.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> specifies a separator, <ph id="ph2">`iImage`</ph> is set to the separator width in pixels.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__getbuttonstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetButtonStyle</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the style of a button or separator on the toolbar.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The index of the toolbar button or separator style to be retrieved.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The style of the button or separator specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A button's style determines how the button appears and how it responds to user input.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>SetButtonStyle<ept id="p1">](#ctoolbar__setbuttonstyle)</ept> for examples of button styles.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__getbuttontext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetButtonText</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the text that appears on a button.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Index of the text to be retrieved.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that will contain the text to be retrieved.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object containing the button text.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The second form of this member function fills a <ph id="ph1">`CString`</ph> object with the string text.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__getitemid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetItemID</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This member function returns the command ID of the button or separator specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Index of the item whose ID is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The command ID of the button or separator specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Separators return <bpt id="p1">**</bpt>ID_SEPARATOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__getitemrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetItemRect</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This member function fills the <ph id="ph1">`RECT`</ph> structure whose address is contained in <ph id="ph2">`lpRect`</ph> with the coordinates of the button or separator specified by <ph id="ph3">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Index of the item (button or separator) whose rectangle coordinates are to be retrieved.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Address of the <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure that will contain the item's coordinates.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Coordinates are in pixels relative to the upper-left corner of the toolbar.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`GetItemRect`</ph> to get the coordinates of a separator you want to replace with a combo box or other control.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CToolBar::SetSizes<ept id="p1">](#ctoolbar__setsizes)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__gettoolbarctrl"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::GetToolBarCtrl</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>This member function allows direct access to the underlying common control.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`GetToolBarCtrl`</ph> to take advantage of the functionality of the Windows toolbar common control, and to take advantage of the support <bpt id="p1">[</bpt>CToolBarCtrl<ept id="p1">](../../mfc/reference/ctoolbarctrl-class.md)</ept> provides for toolbar customization.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For more information about using common controls, see the article <bpt id="p1">[</bpt>Controls<ept id="p1">](../../mfc/controls-mfc.md)</ept> and <bpt id="p2">[</bpt>Common Controls<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775493)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocViewSDI#15<ept id="p2">](../../mfc/codesnippet/cpp/ctoolbar-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__loadbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::LoadBitmap</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Call this member function to load the bitmap specified by <ph id="ph1">`lpszResourceName`</ph> or <ph id="ph2">`nIDResource`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Pointer to the resource name of the bitmap to be loaded.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Resource ID of the bitmap to be loaded.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The bitmap should contain one image for each toolbar button.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If the images are not of the standard size (16 pixels wide and 15 pixels high), call <bpt id="p1">[</bpt>SetSizes<ept id="p1">](#ctoolbar__setsizes)</ept> to set the button sizes and their images.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CToolBar`</ph> supports bitmaps with a maximum of 16 colors.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>When you load an image into a toolbar editor, Visual Studio automatically converts the image to a 16-color bitmap, if necessary, and displays a warning message if the image was converted.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If you use an image with more than 16 colors (using an external editor to edit the image), the application might behave unexpectedly.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__loadtoolbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::LoadToolBar</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Call this member function to load the toolbar specified by <ph id="ph1">`lpszResourceName`</ph> or <ph id="ph2">`nIDResource`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Pointer to the resource name of the toolbar to be loaded.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Resource ID of the toolbar to be loaded.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>toolbar editor<ept id="p1">](../../mfc/toolbar-editor.md)</ept> in for more information about creating a toolbar resource.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CToolBar::CreateEx<ept id="p1">](#ctoolbar__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetBitmap</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Call this member function to set the bitmap image for the toolbar.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hbmImageWell<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Handle of a bitmap image that is associated with a toolbar.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For example, call <ph id="ph1">`SetBitmap`</ph> to change the bitmapped image after the user takes an action on a document that changes the action of a button.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setbuttoninfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetButtonInfo</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Call this member function to set the button's command ID, style, and image number.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Zero-based index of the button or separator for which information is to be set.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The value to which the button's command ID is set.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The new button style.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The following button styles are supported:</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_BUTTON<ept id="p1">**</ept> Standard pushbutton (default)</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_SEPARATOR<ept id="p1">**</ept> Separator</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_CHECKBOX<ept id="p1">**</ept> Auto check-box button</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_GROUP<ept id="p1">**</ept> Marks the start of a group of buttons</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_CHECKGROUP<ept id="p1">**</ept> Marks the start of a group of check-box buttons</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_DROPDOWN<ept id="p1">**</ept> Creates a drop-down list button.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_AUTOSIZE<ept id="p1">**</ept> The button's width will be calculated based on the text of the button, not on the size of the image.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_NOPREFIX<ept id="p1">**</ept> The button text will not have an accelerator prefix associated with it.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>New index for the button's image within the bitmap.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>For separators, which have the style <bpt id="p1">**</bpt>TBBS_SEPARATOR<ept id="p1">**</ept>, this function sets the separator's width in pixels to the value stored in <ph id="ph1">`iImage`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>You can also set button states using the <ph id="ph1">`nStyle`</ph> parameter; however, because button states are controlled by the <bpt id="p1">[</bpt>ON_UPDATE_COMMAND_UI<ept id="p1">](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4)</ept> handler, any state you set using <ph id="ph2">`SetButtonInfo`</ph> will be lost during the next idle processing.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to Update User-Interface Objects<ept id="p1">](../../mfc/how-to-update-user-interface-objects.md)</ept> and <bpt id="p2">[</bpt>TN031: Control Bars<ept id="p2">](../../mfc/tn031-control-bars.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>For information on bitmap images and buttons, see the <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../../mfc/reference/ctoolbar-class.md)</ept> Overview and <bpt id="p2">[</bpt>CToolBar::LoadBitmap<ept id="p2">](#ctoolbar__loadbitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setbuttons"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetButtons</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This member function sets each toolbar button's command ID to the value specified by the corresponding element of the array <ph id="ph1">`lpIDArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Pointer to an array of command Ids.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>It can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to allocate empty buttons.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Number of elements in the array pointed to by <ph id="ph1">`lpIDArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>If an element of the array has the value <bpt id="p1">**</bpt>ID_SEPARATOR<ept id="p1">**</ept>, a separator is created in the corresponding position of the toolbar.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This function also sets each button's style to <bpt id="p1">**</bpt>TBBS_BUTTON<ept id="p1">**</ept> and each separator's style to <bpt id="p2">**</bpt>TBBS_SEPARATOR<ept id="p2">**</ept>, and assigns an image index to each button.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The image index specifies the position of the button's image within the bitmap.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>You do not need to account for separators in the bitmap because this function does not assign image indexes for separators.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If your toolbar has buttons at positions 0, 1, and 3 and a separator at position 2, the images at positions 0, 1, and 2 in your bitmap are assigned to the buttons at positions 0, 1, and 3, respectively.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpIDArray`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, this function allocates space for the number of items specified by <ph id="ph2">`nIDCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>SetButtonInfo<ept id="p1">](#ctoolbar__setbuttoninfo)</ept> to set each item's attributes.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setbuttonstyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetButtonStyle</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Call this member function to set the style of a button or separator, or to group buttons.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Index of the button or separator whose information is to be set.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The button style.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following button styles are supported:</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_BUTTON<ept id="p1">**</ept> Standard pushbutton (default)</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_SEPARATOR<ept id="p1">**</ept> Separator</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_CHECKBOX<ept id="p1">**</ept> Auto check-box button</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_GROUP<ept id="p1">**</ept> Marks the start of a group of buttons</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_CHECKGROUP<ept id="p1">**</ept> Marks the start of a group of check-box buttons</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_DROPDOWN<ept id="p1">**</ept> Creates a drop-down list button</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_AUTOSIZE<ept id="p1">**</ept> The button's width will be calculated based on the text of the button, not on the size of the image</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TBBS_NOPREFIX<ept id="p1">**</ept> The button text will not have an accelerator prefix associated with it</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A button's style determines how the button appears and how it responds to user input.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Before calling <ph id="ph1">`SetButtonStyle`</ph>, call the <bpt id="p1">[</bpt>GetButtonStyle<ept id="p1">](#ctoolbar__getbuttonstyle)</ept> member function to retrieve the button or separator style.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>You can also set button states using the <ph id="ph1">`nStyle`</ph> parameter; however, because button states are controlled by the <bpt id="p1">[</bpt>ON_UPDATE_COMMAND_UI<ept id="p1">](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4)</ept> handler, any state you set using <ph id="ph2">`SetButtonStyle`</ph> will be lost during the next idle processing.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to Update User-Interface Objects<ept id="p1">](../../mfc/how-to-update-user-interface-objects.md)</ept> and <bpt id="p2">[</bpt>TN031: Control Bars<ept id="p2">](../../mfc/tn031-control-bars.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setbuttontext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetButtonText</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Call this function to set the text on a button.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Index of the button whose text is to be set.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Points to the text to be set on a button.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CToolBar::GetToolBarCtrl<ept id="p1">](#ctoolbar__gettoolbarctrl)</ept>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setheight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetHeight</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This member function sets the toolbar's height to the value, in pixels, specified in <ph id="ph1">`cyHeight`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The height in pixels of the toolbar.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">[</bpt>SetSizes<ept id="p1">](#ctoolbar__setsizes)</ept>, use this member function to override the standard toolbar height.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>If the height is too small, the buttons will be clipped at the bottom.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If this function is not called, the framework uses the size of the button to determine the toolbar height.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctoolbar__setsizes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CToolBar::SetSizes</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Call this member function to set the toolbar's buttons to the size, in pixels, specified in <bpt id="p1">*</bpt>sizeButton<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>sizeButton<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The size in pixels of each button.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The size in pixels of each image.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sizeImage`</ph> parameter must contain the size, in pixels, of the images in the toolbar's bitmap.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The dimensions in <bpt id="p1">*</bpt>sizeButton<ept id="p1">*</ept> must be sufficient to hold the image plus 7 pixels extra in width and 6 pixels extra in height.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>This function also sets the toolbar height to fit the buttons.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Call this member function only for toolbars that do not follow <bpt id="p1">*</bpt>Windows Interface Guidelines for Software Design<ept id="p1">*</ept> recommendations for button and image sizes.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCListView#8<ept id="p2">](../../atl/reference/codesnippet/cpp/ctoolbar-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CTRLBARS<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample DLGCBR32<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample DOCKTOOL<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CControlBar Class<ept id="p1">](../../mfc/reference/ccontrolbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CToolBarCtrl Class<ept id="p1">](../../mfc/reference/ctoolbarctrl-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CControlBar Class<ept id="p1">](../../mfc/reference/ccontrolbar-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>