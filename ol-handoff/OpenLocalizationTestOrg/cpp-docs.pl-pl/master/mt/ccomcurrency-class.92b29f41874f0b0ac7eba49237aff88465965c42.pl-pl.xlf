<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c53d768daeedd03f7965d5a1f3098bd86de88e0a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomcurrency-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ef1bf6cf67acef50a93b1a547901ceb235c3e6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec398a81e47396756bbbdbf76fd11a358fa0b258</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComCurrency Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComCurrency Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CComCurrency`</ph> has methods and operators for creating and managing a CURRENCY object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::CComCurrency<ept id="p1">](#ccomcurrency__ccomcurrency)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The constructor for a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::GetCurrencyPtr<ept id="p1">](#ccomcurrency__getcurrencyptr)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the address of an <ph id="ph1">`m_currency`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::GetFraction<ept id="p1">](#ccomcurrency__getfraction)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Call this method to return the fractional component of a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::GetInteger<ept id="p1">](#ccomcurrency__getinteger)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Call this method to return the integer component of a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::Round<ept id="p1">](#ccomcurrency__round)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call this method to round a <ph id="ph1">`CComCurrency`</ph> object to the nearest integer value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::SetFraction<ept id="p1">](#ccomcurrency__setfraction)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call this method to set the fractional component of a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::SetInteger<ept id="p1">](#ccomcurrency__setinteger)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Call this method to set the integer component of a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator -<ept id="p1">](#ccomcurrency__operator_-)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This operator is used to perform subtraction on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator !=<ept id="p1">](#ccomcurrency__operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">`CComCurrency`</ph> objects for inequality.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator *<ept id="p1">](#ccomcurrency__operator_star)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This operator is used to perform multiplication on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator *=<ept id="p1">](#ccomcurrency__operator_star_eq)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This operator is used to perform multiplication on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator /<ept id="p1">](#ccomcurrency__operator_div)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This operator is used to perform division on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator /=<ept id="p1">](#ccomcurrency__operator_div_eq)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This operator is used to perform division on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator +<ept id="p1">](#ccomcurrency__operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This operator is used to perform addition on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator +=<ept id="p1">](#ccomcurrency__operator_add_eq)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This operator is used to perform addition on a <ph id="ph1">`CComCurrency`</ph> object and assign the result to the current object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator &lt;<ept id="p1">](#ccomcurrency__operator_lt)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine the lesser.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator &lt;=<ept id="p1">](#ccomcurrency__operator_lt_eq)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine equality or the lesser.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator =<ept id="p1">](#ccomcurrency__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This operator assigns the <ph id="ph1">`CComCurrency`</ph> object to a new value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator -=<ept id="p1">](#ccomcurrency__operator_-_eq)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This operator is used to perform subtraction on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator ==<ept id="p1">](#ccomcurrency__operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects for equality.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator &gt;<ept id="p1">](#ccomcurrency__operator_gt)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine the larger.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator &gt;=<ept id="p1">](#ccomcurrency__operator_gt_eq)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine equality or the larger.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::operator CURRENCY<ept id="p1">](#ccomcurrency__operator_currency)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Casts a <ph id="ph1">`CURRENCY`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCurrency::m_currency<ept id="p1">](#ccomcurrency__m_currency)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CURRENCY`</ph> variable created by your class instance.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CComCurrency`</ph> is a wrapper for the <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> data type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> is implemented as an 8-byte two's-complement integer value scaled by 10,000.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This gives a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> data type is extremely useful for calculations involving money, or for any fixed-point calculations where accuracy is important.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CComCurrency<ept id="p1">**</ept> wrapper implements arithmetic, assignment, and comparison operations for this fixed-point type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The supported applications have been selected to control the rounding errors that can occur during fixed-point calculations.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object provides access to the numbers on either side of the decimal point in the form of two components: an integer component which stores the value to the left of the decimal point, and a fractional component which stores the value to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The fractional component is stored internally as an integer value between -9999 ( <bpt id="p1">**</bpt>CY_MIN_FRACTION<ept id="p1">**</ept>) and +9999 ( <bpt id="p2">**</bpt>CY_MAX_FRACTION<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The method <bpt id="p1">[</bpt>CComCurrency::GetFraction<ept id="p1">](#ccomcurrency__getfraction)</ept> returns a value scaled by a factor of 10000 ( <bpt id="p2">**</bpt>CY_SCALE<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When specifying the integer and fractional components of a <bpt id="p1">**</bpt>CComCurrency<ept id="p1">**</ept> object, remember that the fractional component is a number in the range 0 to 9999.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is important when dealing with a currency such as the US dollar that expresses amounts using only two significant digits after the decimal point.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Even though the last two digits are not displayed, they must be taken into account.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Possible CComCurrency assignments</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>$10.50</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CComCurrency(10,5000) <bpt id="p1">*</bpt>or<ept id="p1">*</ept> CComCurrency(10.50)</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$10.05</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CComCurrency(10,500) <bpt id="p1">*</bpt>or<ept id="p1">*</ept> CComCurrency(10.05)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The values <bpt id="p1">**</bpt>CY_MIN_FRACTION<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CY_MAX_FRACTION<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>CY_SCALE<ept id="p3">**</ept> are defined in atlcur.h.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcur.h</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__ccomcurrency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::CComCurrency</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bSrc`</ph>, <ph id="ph2">`dSrc`</ph>, <ph id="ph3">`fSrc`</ph>, <ph id="ph4">`lSrc`</ph>, <bpt id="p1">*</bpt>sSrc<ept id="p1">*</ept>, <bpt id="p2">*</bpt>ulSrc, usSrc<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The initial value given to the member variable <ph id="ph1">`m_currency`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A character containing the initial value given to the member variable <ph id="ph1">`m_currency`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`nInteger`</ph>, <bpt id="p1">*</bpt>nFraction<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The integer and fractional components of the initial monetary value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CComCurrency<ept id="p1">](../../atl/reference/ccomcurrency-class.md)</ept> overview for more information.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`IDispatch`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>varSrc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The locale of the current thread is used to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A Unicode or ANSI string containing the initial value.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The locale of the current thread is used to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The constructor sets the initial value of <bpt id="p1">[</bpt>CComCurrency::m_currency<ept id="p1">](#ccomcurrency__m_currency)</ept>, and accepts a wide range of data types, including integers, strings, floating-point numbers, <bpt id="p2">**</bpt>CURRENCY<ept id="p2">**</ept> variables, and other <ph id="ph1">`CComCurrency`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If no value is provided, <ph id="ph1">`m_currency`</ph> is set to 0.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, the constructors lacking an empty exception specification ( <bpt id="p1">**</bpt>throw()<ept id="p1">**</ept>) call <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When using floating-point or double values to assign a value, note that <bpt id="p1">**</bpt>CComCurrency(10.50)<ept id="p1">**</ept> is equivalent to <bpt id="p2">**</bpt>CComCurrency(10,5000)<ept id="p2">**</ept> and not <bpt id="p3">**</bpt>CComCurrency(10,50)<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__getcurrencyptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::GetCurrencyPtr</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns the address of an <ph id="ph1">`m_currency`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the address of an <ph id="ph1">`m_currency`</ph> data member</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__getfraction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::GetFraction</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Call this method to return the fractional component of the <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns the fractional component of the <ph id="ph1">`m_currency`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The fractional component is a 4-digit integer value between -9999 ( <bpt id="p1">**</bpt>CY_MIN_FRACTION<ept id="p1">**</ept>) and +9999 ( <bpt id="p2">**</bpt>CY_MAX_FRACTION<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetFraction`</ph> returns this value scaled by 10000 ( <bpt id="p1">**</bpt>CY_SCALE<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The values of <bpt id="p1">**</bpt>CY_MIN_FRACTION<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CY_MAX_FRACTION<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>CY_SCALE<ept id="p3">**</ept> are defined in atlcur.h.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#50<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__getinteger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::GetInteger</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Call this method to get the integer component of a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns the integer component of the <ph id="ph1">`m_currency`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#51<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__m_currency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::m_currency</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> data member.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This member holds the currency accessed and manipulated by the methods of this class.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_-"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator -</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This operator is used to perform subtraction on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CComCurrency`</ph> object representing the result of the subtraction.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#55<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator !=</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This operator compares two objects for inequality.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object to be compared.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the item being compared is not equal to the <ph id="ph1">`CComCurrency`</ph> object; otherwise, <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#56<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_star"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator *</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This operator is used to perform multiplication on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The multiplier.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object used as the multiplier.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CComCurrency`</ph> object representing the result of the multiplication.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#57<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_star_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator *=</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This operator is used to perform multiplication on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The multiplier.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object used as the multiplier.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#58<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_div"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator /</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This operator is used to perform division on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CComCurrency`</ph> object representing the result of the division.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If the divisor is 0, an assert failure will occur.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#59<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_div_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator /=</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This operator is used to perform division on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The divisor.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If the divisor is 0, an assert failure will occur.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#60<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator +</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This operator is used to perform addition on a <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object to be added to the original object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CComCurrency`</ph> object representing the result of the addition.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#61<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_add_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator +=</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This operator is used to perform addition on a <ph id="ph1">`CComCurrency`</ph> object and assign the result to the current object.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#62<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_lt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator <ph id="ph1">&amp;lt;</ph></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine the lesser.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the first object is less than the second, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#63<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_lt_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator <ph id="ph1">&amp;lt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine equality or the lesser.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the first object is less than or equal to the second, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#64<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator =</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This operator assigns the <ph id="ph1">`CComCurrency`</ph> object to a new value.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CComCurrency<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>sSrc<ept id="p1">*</ept>, <ph id="ph1">`fSrc`</ph>, <ph id="ph2">`lSrc`</ph>, <bpt id="p2">*</bpt>bSrc<ept id="p2">*</ept>, <bpt id="p3">*</bpt>usSrc<ept id="p3">*</ept>, <ph id="ph3">`dSrc`</ph>, <bpt id="p4">*</bpt>cSrc<ept id="p4">*</ept>, <bpt id="p5">*</bpt>ulSrc<ept id="p5">*</ept>, <ph id="ph4">`dSrc`</ph></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The numeric value to assign to the <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#65<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_-_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator -=</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This operator is used to perform subtraction on a <ph id="ph1">`CComCurrency`</ph> object and assign it the result.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>In the event of an error, such as an overflow, this operator calls <ph id="ph1">`AtlThrow`</ph> with an HRESULT describing the error.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#66<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator ==</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects for equality.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CComCurrency`</ph> object to compare.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the objects are equal (that is, the <ph id="ph1">`m_currency`</ph> data members, both integer and fractional, in both objects have the same value), <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#67<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_15.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_gt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator <ph id="ph1">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine the larger.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the first object is greater than the second, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#68<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_16.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_gt_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator <ph id="ph1">&amp;gt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This operator compares two <ph id="ph1">`CComCurrency`</ph> objects to determine equality or the larger.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComCurrency`</ph> object.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the first object is greater than or equal to the second, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#69<ept id="p2">](../../atl/codesnippet/cpp/ccomcurrency-class_17.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ccomcurrency__operator_currency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CComCurrency::operator CURRENCY</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>These operators are used to cast a <ph id="ph1">`CComCurrency`</ph> object to a <bpt id="p1">**</bpt>CURRENCY<ept id="p1">**</ept> data type.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>```operator CURRENCY&amp;() throw(); operator const CURRENCY&amp;() const throw();</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>HRESULT Round(int nDecimals);</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>HRESULT SetFraction(SHORT nFraction);</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>HRESULT SetInteger(LONGLONG nInteger);</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>