<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f91c1be9cc000717793e2121df0264a5981edf3f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\schedulerpolicy-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a3b021c269ff70875b374c86704dae1d7f4d173</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5277296c23d8e70c0f79fd1dc6ece3eba7025e95</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SchedulerPolicy Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SchedulerPolicy Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SchedulerPolicy`</ph> class contains a set of key/value pairs, one for each policy element, that control the behavior of a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::SchedulerPolicy Constructor<ept id="p1">](#ctor)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructs a new scheduler policy and populates it with values for <bpt id="p1">[</bpt>policy keys<ept id="p1">](concurrency-namespace-enums.md)</ept> supported by Concurrency Runtime schedulers and the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::~SchedulerPolicy Destructor<ept id="p1">](#dtor)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Destroys a scheduler policy.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::GetPolicyValue Method<ept id="p1">](#getpolicyvalue)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the policy key supplied as the <ph id="ph1">`key`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::SetConcurrencyLimits Method<ept id="p1">](#setconcurrencylimits)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Simultaneously sets the <ph id="ph1">`MinConcurrency`</ph> and <ph id="ph2">`MaxConcurrency`</ph> policies on the <ph id="ph3">`SchedulerPolicy`</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::SetPolicyValue Method<ept id="p1">](#setpolicyvalue)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Sets the value of the policy key supplied as the <ph id="ph1">`key`</ph> parameter and returns the old value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SchedulerPolicy::operator= Operator<ept id="p1">](#operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assigns the scheduler policy from another scheduler policy.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about the policies which can be controlled using the <ph id="ph1">`SchedulerPolicy`</ph> class, see <bpt id="p1">[</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> concrt.h, concrtrm.h</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getpolicyvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::GetPolicyValue Method</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the policy key supplied as the <ph id="ph1">`key`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The policy key to retrieve a value for.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the key specified by the <ph id="ph1">`key`</ph> parameter is supported, the policy value for the key cast to an <ph id="ph2">`unsigned int`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The method will throw <bpt id="p1">[</bpt>invalid_scheduler_policy_key<ept id="p1">](invalid-scheduler-policy-key-class.md)</ept> for an invalid policy key.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::operator= Operator</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Assigns the scheduler policy from another scheduler policy.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The policy to assign to this policy.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A reference to the scheduler policy.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the <ph id="ph1">`SetPolicyValue`</ph> or <ph id="ph2">`SetConcurrencyLimits`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ctor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::SchedulerPolicy Constructor</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Constructs a new scheduler policy and populates it with values for <bpt id="p1">[</bpt>policy keys<ept id="p1">](concurrency-namespace-enums.md)</ept> supported by Concurrency Runtime schedulers and the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The number of key/value pairs that follow the <ph id="ph1">`_PolicyKeyCount`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The source policy to copy.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The first constructor creates a new scheduler policy where all policies will be initialized to their default values.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The second constructor creates a new scheduler policy that uses a named-parameter style of initialization.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Values after the <ph id="ph1">`_PolicyKeyCount`</ph> parameter are supplied as key/value pairs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Any policy key which is not specified in this constructor will have its default value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This constructor could throw the exceptions <bpt id="p1">[</bpt>invalid_scheduler_policy_key<ept id="p1">](invalid-scheduler-policy-key-class.md)</ept>, <bpt id="p2">[</bpt>invalid_scheduler_policy_value<ept id="p2">](invalid-scheduler-policy-value-class.md)</ept> or <bpt id="p3">[</bpt>invalid_scheduler_policy_thread_specification<ept id="p3">](invalid-scheduler-policy-thread-specification-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The third constructor is a copy constructor.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Often, the most convenient way to define a new scheduler policy is to copy an existing policy and modify it using the <ph id="ph1">`SetPolicyValue`</ph> or <ph id="ph2">`SetConcurrencyLimits`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dtor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::~SchedulerPolicy Destructor</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Destroys a scheduler policy.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setconcurrencylimits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::SetConcurrencyLimits Method</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Simultaneously sets the <ph id="ph1">`MinConcurrency`</ph> and <ph id="ph2">`MaxConcurrency`</ph> policies on the <ph id="ph3">`SchedulerPolicy`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The value for the <ph id="ph1">`MinConcurrency`</ph> policy key.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The value for the <ph id="ph1">`MaxConcurrency`</ph> policy key.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The method will throw <bpt id="p1">[</bpt>invalid_scheduler_policy_thread_specification<ept id="p1">](invalid-scheduler-policy-thread-specification-class.md)</ept> if the value specified for the <ph id="ph1">`MinConcurrency`</ph> policy is greater than that specified for the <ph id="ph2">`MaxConcurrency`</ph> policy.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The method can also throw <bpt id="p1">[</bpt>invalid_scheduler_policy_value<ept id="p1">](invalid-scheduler-policy-value-class.md)</ept> for other invalid values.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setpolicyvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  SchedulerPolicy::SetPolicyValue Method</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sets the value of the policy key supplied as the <ph id="ph1">`key`</ph> parameter and returns the old value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The policy key to set a value for.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The value to set the policy key to.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the key specified by the <ph id="ph1">`key`</ph> parameter is supported, the old policy value for the key cast to an <ph id="ph2">`unsigned int`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The method will throw <bpt id="p1">[</bpt>invalid_scheduler_policy_key<ept id="p1">](invalid-scheduler-policy-key-class.md)</ept> for an invalid policy key or any policy key whose value cannot be set by the <ph id="ph1">`SetPolicyValue`</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The method will throw <bpt id="p1">[</bpt>invalid_scheduler_policy_value<ept id="p1">](invalid-scheduler-policy-value-class.md)</ept> for a value that is not supported for the key specified by the <ph id="ph1">`key`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Note that this method is not allowed to set the <ph id="ph1">`MinConcurrency`</ph> or <ph id="ph2">`MaxConcurrency`</ph> policies.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To set these values, use the <bpt id="p1">[</bpt>SetConcurrencyLimits<ept id="p1">](#setconcurrencylimits)</ept> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>PolicyElementKey Enumeration<ept id="p1">](concurrency-namespace-enums.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CurrentScheduler Class<ept id="p1">](currentscheduler-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scheduler Class<ept id="p1">](scheduler-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Task Scheduler<ept id="p1">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>