<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dad601ce71366f1643bc3f1de780c053d3d7676a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\structure-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb39b4160d73461688f1825a15e4e047f0398551</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47d0cb144f7fa31303073d5ac2e5abc5370d2406</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Structure Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Structure Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A "structure declaration" names a type and specifies a sequence of variable values (called "members" or "fields" of the structure) that can have different types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An optional identifier, called a "tag," gives the name of the structure type and can be used in subsequent references to the structure type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A variable of that structure type holds the entire sequence defined by that type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Structures in C are similar to the types known as "records" in other languages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-or-union-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>struct-or-union identifier<ept id="p1">*</ept> opt<bpt id="p2">**</bpt>{<ept id="p2">**</ept> <bpt id="p3">*</bpt>struct-declaration-list<ept id="p3">*</ept> <bpt id="p4">**</bpt>}<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>struct-or-union identifier</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-or-union<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>struct</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>union</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>struct-declaration</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>struct-declaration-list struct-declaration</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The structure content is defined to be</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declaration<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>specifier-qualifier-list struct-declarator-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>specifier-qualifier-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>type-specifier specifier-qualifier-list<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier specifier-qualifier-list<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declarator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>struct-declarator</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declarator-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>struct-declarator<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The declaration of a structure type does not set aside space for a structure.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is only a template for later declarations of structure variables.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A previously defined <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> (tag) can be used to refer to a structure type defined elsewhere.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> cannot be repeated as long as the definition is visible.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Declarations of pointers to structures and typedefs for structure types can use the structure tag before the structure type is defined.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, the structure definition must be encountered prior to any actual use of the size of the fields.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is an incomplete definition of the type and the type tag.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For this definition to be completed, a type definition must appear later in the same scope.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> specifies the types and names of the structure members.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> argument contains one or more variable or bit-field declarations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each variable declared in <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> is defined as a member of the structure type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Variable declarations within <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> have the same form as other variable declarations discussed in this section, except that the declarations cannot contain storage-class specifiers or initializers.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The structure members can have any variable types except type <ph id="ph1">`void`</ph>, an incomplete type, or a function type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A member cannot be declared to have the type of the structure in which it appears.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, a member can be declared as a pointer to the structure type in which it appears as long as the structure type has a tag.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This allows you to create linked lists of structures.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Structures follow the same scoping as other identifiers.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Structure identifiers must be distinct from other structure, union, and enumeration tags with the same visibility.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">*</bpt>struct-declaration<ept id="p1">*</ept> in a <bpt id="p2">*</bpt>struct-declaration-list<ept id="p2">*</ept> must be unique within the list.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, identifier names in a <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> do not have to be distinct from ordinary variable names or from identifiers in other structure declaration lists.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Nested structures can also be accessed as though they were declared at the file-scope level.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, given this declaration:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>these declarations are both legal:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These examples illustrate structure declarations:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`employee`</ph> structure has three members: <ph id="ph2">`name`</ph>, <ph id="ph3">`id`</ph>, and <ph id="ph4">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> member is a 20-element array, and <ph id="ph2">`id`</ph> and <ph id="ph3">`class`</ph> are simple members with <ph id="ph4">`int`</ph> and <bpt id="p1">**</bpt>long<ept id="p1">**</ept> type, respectively.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The identifier <ph id="ph1">`employee`</ph> is the structure identifier.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This example defines three structure variables: <ph id="ph1">`student`</ph>, <ph id="ph2">`faculty`</ph>, and <ph id="ph3">`staff`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each structure has the same list of three members.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The members are declared to have the structure type <ph id="ph1">`employee`</ph>, defined in the previous example.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`complex`</ph> structure has two members with <bpt id="p1">**</bpt>float<ept id="p1">**</ept> type, <ph id="ph2">`x`</ph> and <ph id="ph3">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The structure type has no tag and is therefore unnamed or anonymous.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first two members of the structure are a <ph id="ph1">`char`</ph> variable and a pointer to a <bpt id="p1">**</bpt>float<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The third member, <ph id="ph1">`next`</ph>, is declared as a pointer to the structure type being defined (<ph id="ph2">`sample`</ph>).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Anonymous structures can be useful when the tag named is not needed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the case when one declaration defines all structure instances.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Embedded structures are often anonymous.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The compiler allows an unsized or zero-sized array as the last member of a structure.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This can be useful if the size of a constant array differs when used in various situations.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The declaration of such a structure looks like this:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>identifier<ept id="p1">*</ept><bpt id="p2">**</bpt>{<ept id="p2">**</ept> <bpt id="p3">*</bpt>set-of-declarations<ept id="p3">*</ept> <bpt id="p4">*</bpt>type array-name<ept id="p4">*</ept><bpt id="p5">**</bpt>[ ];};<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Unsized arrays can appear only as the last member of a structure.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Structures containing unsized array declarations can be nested within other structures as long as no further members are declared in any enclosing structures.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Arrays of such structures are not allowed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sizeof`</ph> operator, when applied to a variable of this type or to the type itself, assumes 0 for the size of the array.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Structure declarations can also be specified without a declarator when they are members of another structure or union.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The field names are promoted into the enclosing structure.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, a nameless structure looks like this:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Structure and Union Members<ept id="p1">](../c-language/structure-and-union-members.md)</ept> for information about structure references.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>