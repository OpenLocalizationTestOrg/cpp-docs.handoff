<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e67d76c9a895aa566f62b6b6116cc159bb5b503</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\checked-array-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ad3e461debae4898b9bae7e02625d0361e340f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f7e1f624930260aef97f4d3f41bced8f7641831</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>checked_array_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>checked_array_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> class allows you to transform an array or pointer into a checked iterator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use this class as a wrapper (using the <bpt id="p1">[</bpt>make_checked_array_iterator<ept id="p1">](../standard-library/iterator-functions.md#make_checked_array_iterator)</ept> function) for raw pointers or arrays as a targeted way to provide checking and to manage unchecked pointer warnings instead of globally silencing these warnings.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If necessary, you can use the unchecked version of this class, <bpt id="p1">[</bpt>unchecked_array_iterator<ept id="p1">](../standard-library/unchecked-array-iterator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This class is a Microsoft extension of the Standard C++ Library.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an example demonstrating how to write code that does not require the use of this class, see the second example below.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This class is defined in the <bpt id="p1">[</bpt>stdext<ept id="p1">](../standard-library/stdext-namespace.md)</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information and example code on the checked iterator feature, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following sample shows how to define and use a checked array iterator.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the destination is not large enough to hold all the elements being copied, such as would be the case if you changed the line:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>to</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A runtime error will occur.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To avoid the need for the <ph id="ph1">`checked_array_iterator`</ph> class when using Standard C++ Library algorithms, consider using a <ph id="ph2">`vector`</ph> instead of a dynamically allocated array.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to do this.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>checked_array_iterator<ept id="p1">](#checked_array_iterator__checked_array_iterator)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Constructs a default <ph id="ph1">`checked_array_iterator`</ph> or a <ph id="ph2">`checked_array_iterator`</ph> from an underlying iterator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>difference_type<ept id="p1">](#checked_array_iterator__difference_type)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two <ph id="ph1">`checked_array_iterator`</ph>s referring to elements within the same container.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointer<ept id="p1">](#checked_array_iterator__pointer)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element addressed by a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reference<ept id="p1">](#checked_array_iterator__reference)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element addressed by a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>base<ept id="p1">](#checked_array_iterator__base)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Recovers the underlying iterator from its <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator==<ept id="p1">](#checked_array_iterator__operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Tests two <ph id="ph1">`checked_array_iterator`</ph>s for equality.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!=<ept id="p1">](#checked_array_iterator__operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Tests two <ph id="ph1">`checked_array_iterator`</ph>s for inequality.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;<ept id="p1">](#checked_array_iterator__operator_lt_)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is less than the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;<ept id="p1">](#checked_array_iterator__operator_gt_)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is greater than the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&lt;=<ept id="p1">](#checked_array_iterator__operator_lt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is less than or equal to the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&gt;=<ept id="p1">](#checked_array_iterator__operator_gt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is greater than or equal to the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator*<ept id="p1">](#checked_array_iterator__operator_star)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns the element that a <ph id="ph1">`checked_array_iterator`</ph> addresses.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-&gt;<ept id="p1">](#checked_array_iterator__operator-_gt_)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator++<ept id="p1">](#checked_array_iterator__operator_add_add)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">`checked_array_iterator`</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator--<ept id="p1">](#checked_array_iterator__operator--)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Decrements the <ph id="ph1">`checked_array_iterator`</ph> to the previous element.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+=<ept id="p1">](#checked_array_iterator__operator_add_eq)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Adds a specified offset to a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+<ept id="p1">](#checked_array_iterator__operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adds an offset to an iterator and returns the new <ph id="ph1">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-=<ept id="p1">](#checked_array_iterator__operator-_eq)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Decrements a specified offset from a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator-<ept id="p1">](#checked_array_iterator__operator-)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Decrements an offset from an iterator and returns the new <ph id="ph1">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator&amp;#91;&amp;#93;<ept id="p1">](#checked_array_iterator__operator_at)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element offset from the element addressed by a <ph id="ph1">`checked_array_iterator`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> stdext</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__base"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::base</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Recovers the underlying iterator from its <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__checked_array_iterator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::checked_array_iterator</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Constructs a default <ph id="ph1">`checked_array_iterator`</ph> or a <ph id="ph2">`checked_array _iterator`</ph> from an underlying iterator.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A pointer to the array.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The size of the array.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(Optional) An element in the array, to initialize the iterator.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>By default, the iterator is initialized to the first element in the array.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__difference_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::difference_type</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two <ph id="ph1">`checked_array_iterator`</ph>s referring to elements within the same container.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> difference type is the same as the iterator difference type.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator[]<ept id="p1">](#checked_array_iterator__operator_at)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator==</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Tests two <ph id="ph1">`checked_array_iterator`</ph>s for equality.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> against which to check for equality.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator!=</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Tests two <ph id="ph1">`checked_array_iterator`</ph>s for inequality.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> against which to check for inequality.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_lt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator<ph id="ph1">&amp;lt;</ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is less than the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> against which to check for inequality.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_gt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator<ph id="ph1">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is greater than the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> to compare against.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator<ph id="ph1">&amp;lt;</ph><ept id="p1">](#checked_array_iterator__operator_lt_)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_lt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is less than or equal to the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> to compare against.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">=</ph><ept id="p1">](#checked_array_iterator__operator_gt__eq)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_gt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Tests if the <ph id="ph1">`checked_array_iterator`</ph> on the left side of the operator is greater than or equal to the <ph id="ph2">`checked_array_iterator`</ph> on the right side.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`checked_array_iterator`</ph> to compare against.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_star"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Returns the element that a <ph id="ph1">`checked_array_iterator`</ph> addresses.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The value of the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator-_gt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator-<ph id="ph1">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A pointer to the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::pointer<ept id="p1">](#checked_array_iterator__pointer)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_add_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Increments the <ph id="ph1">`checked_array_iterator`</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The first operator returns the preincremented <ph id="ph1">`checked_array_iterator`</ph> and the second, the postincrement operator, returns a copy of the incremented <ph id="ph2">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator--"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator--</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Decrements the <ph id="ph1">`checked_array_iterator`</ph> to the previous element.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The first operator returns the predecremented <ph id="ph1">`checked_array_iterator`</ph> and the second, the postdecrement operator, returns a copy of the decremented <ph id="ph2">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_add_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator+=</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Adds a specified offset to a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The offset by which to increment the iterator.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A reference to the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator+</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Adds an offset to an iterator and returns the new <ph id="ph1">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The offset to be added to the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`checked_array_iterator`</ph> addressing the offset element.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator-_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator-=</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Decrements a specified offset from a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The offset by which to increment the iterator.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A reference to the element addressed by the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator-"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator-</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Decrements an offset from an iterator and returns the new <ph id="ph1">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The offset to be decremented from the <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`checked_array_iterator`</ph> addressing the offset element.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator-<ept id="p1">](#checked_array_iterator__operator-)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__operator_at"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::operator[]</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Returns a reference to an element offset from the element addressed by a <ph id="ph1">`checked_array_iterator`</ph> by a specified number of positions.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The offset from the <ph id="ph1">`checked_array_iterator`</ph> address.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The reference to the element offset.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__pointer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::pointer</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element addressed by a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator*<ept id="p1">](#checked_array_iterator__operator_star)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="checked_array_iterator__reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  checked_array_iterator::reference</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element addressed by a <ph id="ph1">`checked_array_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>checked_array_iterator::operator[]<ept id="p1">](#checked_array_iterator__operator_at)</ept> for a code sample.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>iterator&gt;<ept id="p1">](../standard-library/iterator.md)</ept><ph id="ph2"> </ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C++ Standard Library Reference<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>