<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1e388586ab7d8a39885351c31dfc92a04f0b98b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\add-rvalue-reference-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db3d80cce199d73b4f554a7ffe47757712b8ccef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7052cf37c5caed01dd34e4dc3cfc500173fdcd47</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>add_rvalue_reference Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>add_rvalue_reference Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates an rvalue reference type of the template parameter, if it is an object or function type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Otherwise, because of the semantics of reference collapsing, the type is the same as the template parameter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type to modify.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`add_rvalue_reference`</ph> class has a member named <ph id="ph2">`type`</ph>, which is an alias for the type of an rvalue reference to the template parameter <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The semantics of reference collapsing imply that, for non-object and non-function types <ph id="ph1">`T`</ph>, <ph id="ph2">`T&amp;&amp;`</ph> is a <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, when <ph id="ph1">`T`</ph> is an lvalue reference type, <ph id="ph2">`add_rvalue_reference&lt;T&gt;::type`</ph> is the lvalue reference type, not an rvalue reference .</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;type_traits&gt; defines a helper template, <ph id="ph1">`add_rvalue_reference_t`</ph>, that aliases the <ph id="ph2">`type`</ph> member of <ph id="ph3">`add_rvalue_reference`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This code example uses static_assert to show how rvalue reference types are created by using <ph id="ph1">`add_rvalue_reference`</ph> and <ph id="ph2">`add_rvalue_reference_t`</ph>, and how the result of <ph id="ph3">`add_rvalue_reference`</ph> on an lvalue reference type is not an rvalue reference, but collapses to the lvalue reference type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Header: &lt;type_traits&gt; Namespace: std</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&lt;type_traits&gt;<ept id="p1">](../standard-library/type-traits.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>add_lvalue_reference Class<ept id="p1">](../standard-library/add-lvalue-reference-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>is_rvalue_reference Class<ept id="p1">](../standard-library/is-rvalue-reference-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>