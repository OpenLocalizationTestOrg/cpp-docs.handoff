<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49c5650a893726f4d5e79b581c91df5503ae73bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\walkthrough-using-join-to-prevent-deadlock.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8045d0f2ecdf7df882664fb7e3d43b4f1166c2d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">963a22153ffd18fdbb35b1740bb8b192704d691c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using join to Prevent Deadlock | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using join to Prevent Deadlock</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic uses the dining philosophers problem to illustrate how to use the <bpt id="p1">[</bpt>concurrency::join<ept id="p1">](../../parallel/concrt/reference/join-class.md)</ept> class to prevent deadlock in your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In a software application, <bpt id="p1">*</bpt>deadlock<ept id="p1">*</ept> occurs when two or more processes each hold a resource and mutually wait for another process to release some other resource.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The dining philosophers problem is a specific example of the general set of problems that may occur when a set of resources is shared among multiple concurrent processes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Read the following topics before you start this walkthrough:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Agent-Based Application</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This walkthrough contains the following sections:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Dining Philosophers Problem</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A Naïve Implementation</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Using join to Prevent Deadlock</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Dining Philosophers Problem</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The dining philosophers problem illustrates how deadlock occurs in an application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this problem, five philosophers sit at a round table.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Every philosopher alternates between thinking and eating.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Every philosopher must share a chopstick with the neighbor to the left and another chopstick with the neighbor to the right.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following illustration shows this layout.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Dining Philosophers Problem</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To eat, a philosopher must hold two chopsticks.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If every philosopher holds just one chopstick and is waiting for another one, then no philosopher can eat and all starve.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Naïve Implementation</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example shows a naïve implementation of the dining philosophers problem.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`philosopher`</ph> class, which derives from <bpt id="p1">[</bpt>concurrency::agent<ept id="p1">](../../parallel/concrt/reference/agent-class.md)</ept>, enables each philosopher to act independently.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The example uses a shared array of <bpt id="p1">[</bpt>concurrency::critical_section<ept id="p1">](../../parallel/concrt/reference/critical-section-class.md)</ept> objects to give each <ph id="ph1">`philosopher`</ph> object exclusive access to a pair of chopsticks.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To relate the implementation to the illustration, the <ph id="ph1">`philosopher`</ph> class represents one philosopher.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> variable represents each chopstick.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`critical_section`</ph> objects serve as holders on which the chopsticks rest.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`run`</ph> method simulates the life of the philosopher.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`think`</ph> method simulates the act of thinking and the <ph id="ph2">`eat`</ph> method simulates the act of eating.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`philosopher`</ph> object locks both <ph id="ph2">`critical_section`</ph> objects to simulate the removal of the chopsticks from the holders before it calls the <ph id="ph3">`eat`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After the call to <ph id="ph1">`eat`</ph>, the <ph id="ph2">`philosopher`</ph> object returns the chopsticks to the holders by setting the <ph id="ph3">`critical_section`</ph> objects back to the unlocked state.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pickup_chopsticks`</ph> method illustrates where deadlock can occur.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If every <ph id="ph1">`philosopher`</ph> object gains access to one of the locks, then no <ph id="ph2">`philosopher`</ph> object can continue because the other lock is controlled by another <ph id="ph3">`philosopher`</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-deadlock#1</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`philosophers-deadlock.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc philosophers-deadlock.cpp</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Using join to Prevent Deadlock</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This section shows how to use message buffers and message-passing functions to eliminate the chance of deadlock.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To relate this example to the earlier one, the <ph id="ph1">`philosopher`</ph> class replaces each <ph id="ph2">`critical_section`</ph> object by using a <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept> object and a <ph id="ph3">`join`</ph> object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`join`</ph> object serves as an arbiter that provides the chopsticks to the philosopher.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`unbounded_buffer`</ph> class because when a target receives a message from an <ph id="ph2">`unbounded_buffer`</ph> object, the message is removed from the message queue.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This enables an <ph id="ph1">`unbounded_buffer`</ph> object that holds a message to indicate that the chopstick is available.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`unbounded_buffer`</ph> object that holds no message indicates that the chopstick is being used.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example uses a non-greedy <ph id="ph1">`join`</ph> object because a non-greedy join gives each <ph id="ph2">`philosopher`</ph> object access to both chopsticks only when both <ph id="ph3">`unbounded_buffer`</ph> objects contain a message.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A greedy join would not prevent deadlock because a greedy join accepts messages as soon as they become available.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Deadlock can occur if all greedy <ph id="ph1">`join`</ph> objects receive one of the messages but wait forever for the other to become available.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information about greedy and non-greedy joins, and the differences between the various message buffer types, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To prevent deadlock in this example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remove the following code from the example.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-deadlock#2</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Change the type of the <ph id="ph1">`_left`</ph> and <ph id="ph2">`_right`</ph> data members of the <ph id="ph3">`philosopher`</ph> class to <ph id="ph4">`unbounded_buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#2</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`philosopher`</ph> constructor to take <ph id="ph2">`unbounded_buffer`</ph> objects as its parameters.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#3</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`pickup_chopsticks`</ph> method to use a non-greedy <ph id="ph2">`join`</ph> object to receive messages from the message buffers for both chopsticks.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#4</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`putdown_chopsticks`</ph> method to release access to the chopsticks by sending a message to the message buffers for both chopsticks.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#5</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`run`</ph> method to hold the results of the <ph id="ph2">`pickup_chopsticks`</ph> method and to pass those results to the <ph id="ph3">`putdown_chopsticks`</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#6</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Modify the declaration of the <ph id="ph1">`chopsticks`</ph> variable in the <ph id="ph2">`wmain`</ph> function to be an array of <ph id="ph3">`unbounded_buffer`</ph> objects that each hold one message.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#7</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following shows the completed example that uses non-greedy <ph id="ph1">`join`</ph> objects to eliminate the risk of deadlock.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>concrt-philosophers-join#1</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`philosophers-join.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc philosophers-join.cpp</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime Walkthroughs</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Synchronization Data Structures</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>