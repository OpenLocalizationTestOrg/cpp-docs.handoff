<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c55a51090a09d0c7c7821c0c4949eb0217f8f5b9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\mktime-mktime32-mktime64.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f73e27ee414e0f6f5b9626f13bdc33c76da68b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ad256e5bdbff34fec97af8f41cc0ac2ddfcbb10</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>mktime, _mktime32, _mktime64 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>mktime, _mktime32, _mktime64</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert the local time to a calendar value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointer to time structure; see <bpt id="p1">[</bpt>asctime<ept id="p1">](../../c-runtime-library/reference/asctime-wasctime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mktime32`</ph> returns the specified calendar time encoded as a value of type <bpt id="p1">[</bpt>time_t<ept id="p1">](../../c-runtime-library/standard-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> references a date before midnight, January 1, 1970, or if the calendar time cannot be represented, <ph id="ph1">`_mktime32`</ph> returns –1 cast to type <ph id="ph2">`time_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`_mktime32`</ph> and if <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> references a date after 23:59:59 January 18, 2038, Coordinated Universal Time (UTC), it will return –1 cast to type <ph id="ph2">`time_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mktime64`</ph> will return –1 cast to type <ph id="ph2">`__time64_t`</ph> if <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> references a date after 23:59:59, December 31, 3000, UTC.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mktime`</ph>, <ph id="ph2">`_mktime32`</ph> and <ph id="ph3">`_mktime64`</ph> functions convert the supplied time structure (possibly incomplete) pointed to by <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> into a fully defined structure with normalized values and then converts it to a <ph id="ph4">`time_t`</ph> calendar time value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The converted time has the same encoding as the values returned by the <bpt id="p1">[</bpt>time<ept id="p1">](../../c-runtime-library/reference/time-time32-time64.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The original values of the <ph id="ph1">`tm_wday`</ph> and <ph id="ph2">`tm_yday`</ph> components of the <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> structure are ignored, and the original values of the other components are not restricted to their normal ranges.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`mktime`</ph> is an inline function that is equivalent to <ph id="ph2">`_mktime64`</ph>, unless <ph id="ph3">`_USE_32BIT_TIME_T`</ph> is defined, in which case it is equivalent to <ph id="ph4">`_mktime32`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After an adjustment to UTC, <ph id="ph1">`_mktime32`</ph> handles dates from midnight, January 1, 1970, to 23:59:59 January 18, 2038, UTC.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_mktime64`</ph> handles dates from midnight, January 1, 1970 to 23:59:59, December 31, 3000.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This adjustment may cause these functions to return -1 (cast to <ph id="ph1">`time_t`</ph>, <ph id="ph2">`__time32_t`</ph> or <ph id="ph3">`__time64_t`</ph>) even though the date you specify is within range.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you are in Cairo, Egypt, which is two hours ahead of UTC, two hours will first be subtracted from the date you specify in <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept>; this may now put your date out of range.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These functions may be used to validate and fill in a tm structure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If successful, these functions set the values of <ph id="ph1">`tm_wday`</ph> and <ph id="ph2">`tm_yday`</ph> as appropriate and set the other components to represent the specified calendar time, but with their values forced to the normal ranges.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The final value of <ph id="ph1">`tm_mday`</ph> is not set until <ph id="ph2">`tm_mon`</ph> and <ph id="ph3">`tm_year`</ph> are determined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When specifying a <ph id="ph1">`tm`</ph> structure time, set the <ph id="ph2">`tm_isdst`</ph> field to:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Zero (0) to indicate that standard time is in effect.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A value greater than 0 to indicate that daylight saving time is in effect.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A value less than zero to have the C run-time library code compute whether standard time or daylight saving time is in effect.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The C run-time library will determine the daylight savings time behavior from the <bpt id="p1">[</bpt>TZ<ept id="p1">](../../c-runtime-library/reference/tzset.md)</ept> environment variable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TZ`</ph> is not set, the Win32 API call <bpt id="p1">[</bpt>GetTimeZoneInformation<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724421.aspx)</ept> is used to get the daylight savings time information from the operating system.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If this fails, the library assumes the United States' rules for implementing the calculation of daylight saving time are used.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`tm_isdst`</ph> is a required field.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If not set, its value is undefined and the return value from these functions is unpredictable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> points to a <ph id="ph1">`tm`</ph> structure returned by a previous call to <ph id="ph2">`asctime`</ph>, <ph id="ph3">`gmtime`</ph>, or <ph id="ph4">`localtime`</ph> (or variants of these functions), the <ph id="ph5">`tm_isdst`</ph> field contains the correct value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`gmtime`</ph> and <ph id="ph2">`localtime`</ph> (and <ph id="ph3">`_gmtime32`</ph>, <ph id="ph4">`_gmtime64`</ph>, <ph id="ph5">`_localtime32`</ph>, and <ph id="ph6">`_localtime64`</ph>) use a single buffer per thread for the conversion.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you supply this buffer to <ph id="ph1">`mktime`</ph>, <ph id="ph2">`_mktime32`</ph> or <ph id="ph3">`_mktime64`</ph>, the previous contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These functions validate their parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>timeptr<ept id="p1">*</ept> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id="p2">[</bpt>Parameter Validation<ept id="p2">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the functions return -1 and set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>time.h&gt;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>time.h&gt;</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>time.h&gt;</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.DateTimeOffset.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Time Management<ept id="p1">](../../c-runtime-library/time-management.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>asctime, _wasctime<ept id="p1">](../../c-runtime-library/reference/asctime-wasctime.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>gmtime, _gmtime32, _gmtime64<ept id="p1">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>localtime, _localtime32, _localtime64<ept id="p1">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_mkgmtime, _mkgmtime32, _mkgmtime64<ept id="p1">](../../c-runtime-library/reference/mkgmtime-mkgmtime32-mkgmtime64.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>time, _time32, _time64<ept id="p1">](../../c-runtime-library/reference/time-time32-time64.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>