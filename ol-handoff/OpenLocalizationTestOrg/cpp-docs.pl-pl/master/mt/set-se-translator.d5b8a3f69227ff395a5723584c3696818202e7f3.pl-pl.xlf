<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a3833ad638c8c9a38cfa2c4f83f9b004ca1328f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\set-se-translator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49c312a0a6c66ba98320d1246216371cf51d7e5f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d676b6da5c5862e38d26fe31764c69c6400de7a2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_set_se_translator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_set_se_translator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Handles Win32 exceptions (C structured exceptions) as C++ typed exceptions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer to a C structured exception translator function that you write.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the previous translator function registered by <ph id="ph1">`_set_se_translator`</ph>, so that the previous function can be restored later.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If no previous function has been set, the return value can be used to restore the default behavior; this value can be NULL.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_set_se_translator`</ph> function provides a way to handle Win32 exceptions (C structured exceptions) as C++ typed exceptions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To allow each C exception to be handled by a C++ <ph id="ph1">`catch`</ph> handler, first define a C exception wrapper class that can be used, or derived from, to attribute a specific class type to a C exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To use this class, install a custom C exception translator function that is called by the internal exception-handling mechanism each time a C exception is raised.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Within your translator function, you can throw any typed exception that can be caught by a matching C++ <ph id="ph1">`catch`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You must use <bpt id="p1">[</bpt>/EHa<ept id="p1">](../../build/reference/eh-exception-handling-model.md)</ept> when using <ph id="ph1">`_set_se_translator`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To specify a custom translation function, call <ph id="ph1">`_set_se_translator`</ph> with the name of your translation function as its argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The translator function that you write is called once for each function invocation on the stack that has <ph id="ph1">`try`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There is no default translator function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Your translator function should do no more than throw a C++ typed exception.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If it does anything in addition to throwing (such as writing to a log file, for example) your program might not behave as expected, because the number of times the translator function is invoked is platform-dependent.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a multithreaded environment, translator functions are maintained separately for each thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each new thread needs to install its own translator function.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Thus, each thread is in charge of its own translation handling.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_set_se_translator`</ph> is specific to one thread; another DLL can install a different translation function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`seTransFunction`</ph> function that you write must be a native-compiled function (not compiled with /clr).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It must take an unsigned integer and a pointer to a Win32 <ph id="ph1">`_EXCEPTION_POINTERS`</ph> structure as arguments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The arguments are the return values of calls to the Win32 API <ph id="ph1">`GetExceptionCode`</ph> and <ph id="ph2">`GetExceptionInformation`</ph> functions, respectively.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`_set_se_translator`</ph>, there are implications when dynamically linking to the CRT; another DLL in the process might call <ph id="ph2">`_set_se_translator`</ph> and replace your handler with its own.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`_set_se_translator`</ph> from managed code (code compiled with /clr) or mixed native and managed code, be aware that the translator affects exceptions generated in native code only.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any managed exceptions generated in managed code (such as when raising <ph id="ph1">`System::Exception`</ph>) are not routed through the translator function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Exceptions raised in managed code using the Win32 function <ph id="ph1">`RaiseException`</ph> or caused by a system exception like a divide by zero exception are routed through the translator.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>eh.h&gt;</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The functionality provided by <ph id="ph1">`_set_se_translator`</ph> is not available in code compiled with the <bpt id="p1">[</bpt>/clr:pure<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Although the functionality provided by <ph id="ph1">`_set_se_translator`</ph> is not available in managed code, it is possible to use this mapping in native code, even if that native code is in a compilation under the <ph id="ph2">`/clr`</ph> switch, as long as the native code is indicated using <ph id="ph3">`#pragma unmanaged`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If a structured exception is being thrown in managed code that is to be mapped, the code that generates and handles the exception must be marked with the <ph id="ph1">`pragma`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code shows a possible use.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pragma Directives and the __Pragma Keyword<ept id="p1">](../../preprocessor/pragma-directives-and-the-pragma-keyword.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling Routines<ept id="p1">](../../c-runtime-library/exception-handling-routines.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>set_terminate<ept id="p1">](../../c-runtime-library/reference/set-terminate-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>set_unexpected<ept id="p1">](../../c-runtime-library/reference/set-unexpected-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>terminate<ept id="p1">](../../c-runtime-library/reference/terminate-crt.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>unexpected<ept id="p1">](../../c-runtime-library/reference/unexpected-crt.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>