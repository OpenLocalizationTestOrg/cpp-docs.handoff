<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9f0dc247046367134c32f18de1135c23d223b7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdockablepane-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6bc1a7141b66b9e70c169448a7bdd2f248e99ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">993fb01b1203a2c82e9fbf36170a329df9344221</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDockablePane Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDockablePane Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Implements a pane that can either be docked in a dock site or included in a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CDockablePane<ept id="p1">](#cdockablepane__cdockablepane)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <ph id="ph1">`CDockablePane`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches a pane to another pane.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This creates a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CalcFixedLayout<ept id="p1">](#cdockablepane__calcfixedlayout)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns the size of the pane rectangle.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CanAcceptMiniFrame<ept id="p1">](#cdockablepane__canacceptminiframe)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Determines whether the specified mini frame can be docked to the pane.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CanAcceptPane<ept id="p1">](#cdockablepane__canacceptpane)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be docked to the current pane.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CanAutoHide<ept id="p1">](#cdockablepane__canautohide)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Determines whether the pane supports auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::CanAutoHide<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canautohide)</ept>.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CanBeAttached<ept id="p1">](#cdockablepane__canbeattached)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane can be docked to another pane.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::ConvertToTabbedDocument<ept id="p1">](#cdockablepane__converttotabbeddocument)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Converts one or more dockable panes to MDI tabbed documents.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CopyState<ept id="p1">](#cdockablepane__copystate)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copies the state of a dockable pane.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creates the Windows control and attaches it to the <ph id="ph1">`CDockablePane`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CreateDefaultPaneDivider<ept id="p1">](#cdockablepane__createdefaultpanedivider)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a default divider for the pane as it is being docked to a frame window.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CreateEx<ept id="p1">](#cdockablepane__createex)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creates the Windows control and attaches it to the <ph id="ph1">`CDockablePane`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CreateTabbedPane<ept id="p1">](#cdockablepane__createtabbedpane)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates a tabbed pane from the current pane.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::DockPaneContainer<ept id="p1">](#cdockablepane__dockpanecontainer)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Docks a container to the pane.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::DockPaneStandard<ept id="p1">](#cdockablepane__dockpanestandard)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Docks a pane by using outline (standard) docking.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To dock a pane, use <bpt id="p1">[</bpt>CPane::DockPane<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> or <bpt id="p2">[</bpt>CDockablePane::DockToWindow<ept id="p2">](#cdockablepane__docktowindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::DockToRecentPos<ept id="p1">](#cdockablepane__docktorecentpos)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Docks a pane to its stored recent docking position.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::DockToWindow<ept id="p1">](#cdockablepane__docktowindow)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Docks one docking pane to another docking pane.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::EnableAutohideAll<ept id="p1">](#cdockablepane__enableautohideall)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enables or disables auto-hide mode for this pane together with other panes in the container.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::EnableGripper<ept id="p1">](#cdockablepane__enablegripper)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Shows or hides the caption (gripper).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetAHRestoredRect<ept id="p1">](#cdockablepane__getahrestoredrect)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies the position of the pane when visible in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetAHSlideMode<ept id="p1">](#cdockablepane__getahslidemode)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the auto hide slide mode for the pane.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetCaptionHeight<ept id="p1">](#cdockablepane__getcaptionheight)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns the height of the current caption.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id="p1">](#cdockablepane__getdefaultpanedivider)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns the default pane divider for the pane's container.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetDockingStatus<ept id="p1">](#cdockablepane__getdockingstatus)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Determines the ability of a pane to be docked based on the provided pointer location.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetDragSensitivity<ept id="p1">](#cdockablepane__getdragsensitivity)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the drag sensitivity of a docking pane.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetLastPercentInPaneContainer<ept id="p1">](#cdockablepane__getlastpercentinpanecontainer)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Retrieves the percentage of space that a pane occupies within its container.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetTabArea<ept id="p1">](#cdockablepane__gettabarea)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieves the tab area for the pane.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetTabbedPaneRTC<ept id="p1">](#cdockablepane__gettabbedpanertc)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::HasAutoHideMode<ept id="p1">](#cdockablepane__hasautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Specifies whether a docking pane can be switched to auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::HitTest<ept id="p1">](#cdockablepane__hittest)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies the specific location in a pane where the user clicks a mouse.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsAutohideAllEnabled<ept id="p1">](#cdockablepane__isautohideallenabled)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Indicates whether the docking pane and all other panes in the container can be placed in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsAutoHideMode<ept id="p1">](#cdockablepane__isautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Determines whether a pane is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsDocked<ept id="p1">](#cdockablepane__isdocked)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane is docked.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsHideInAutoHideMode<ept id="p1">](#cdockablepane__ishideinautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Determines the behavior of a pane that is in auto-hide mode if it is shown (or hidden) by calling <ph id="ph1">`ShowPane`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsInFloatingMultiPaneFrameWnd<ept id="p1">](#cdockablepane__isinfloatingmultipaneframewnd)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is in a multi-pane frame window.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsResizable<ept id="p1">](#cdockablepane__isresizable)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is resizable.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsTabLocationBottom<ept id="p1">](#cdockablepane__istablocationbottom)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies whether tabs are located at the top or bottom of the pane.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsTracked<ept id="p1">](#cdockablepane__istracked)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies whether a pane is being dragged by the user.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsVisible<ept id="p1">](#cdockablepane__isvisible)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane is visible.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::LoadState<ept id="p1">](http://msdn.microsoft.com/en-us/96110136-4f46-4764-8a76-3b4abaf77917)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnAfterChangeParent<ept id="p1">](#cdockablepane__onafterchangeparent)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent of a pane has changed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::OnAfterChangeParent<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__onafterchangeparent)</ept>.)</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnAfterDockFromMiniFrame<ept id="p1">](#cdockablepane__onafterdockfromminiframe)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Called by the framework when a floating docking bar docks at a frame window.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnBeforeChangeParent<ept id="p1">](#cdockablepane__onbeforechangeparent)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent of the pane is about to change.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::OnBeforeChangeParent<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__onbeforechangeparent)</ept>.)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnBeforeFloat<ept id="p1">](#cdockablepane__onbeforefloat)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Called by the framework when a pane is about to float.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::OnBeforeFloat<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__onbeforefloat)</ept>.)</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::RemoveFromDefaultPaneDividier<ept id="p1">](#cdockablepane__removefromdefaultpanedividier)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane is being undocked.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::ReplacePane<ept id="p1">](#cdockablepane__replacepane)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Replaces the pane with a specified pane.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::RestoreDefaultPaneDivider<ept id="p1">](#cdockablepane__restoredefaultpanedivider)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The framework calls this method as a pane is deserialized to restore the default pane divider.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Serializes the pane.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CBasePane::Serialize`</ph>.)</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::SetAutoHideMode<ept id="p1">](#cdockablepane__setautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Toggles the docking pane between visible and auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::SetAutoHideParents<ept id="p1">](#cdockablepane__setautohideparents)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Sets the auto-hide button and auto-hide toolbar for the pane.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::SetLastPercentInPaneContainer<ept id="p1">](#cdockablepane__setlastpercentinpanecontainer)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Sets the percentage of space that a pane occupies within its container.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::SetRestoredDefaultPaneDivider<ept id="p1">](#cdockablepane__setrestoreddefaultpanedivider)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Sets the restored default pane divider.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id="p1">](#cdockablepane__settabbedpanertc)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Sets the runtime class information for a tabbed window that is created when two panes dock together.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::ShowPane<ept id="p1">](#cdockablepane__showpane)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Shows or hides a pane.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::Slide<ept id="p1">](#cdockablepane__slide)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Shows or hides a pane with a sliding animation which displays only when the pane is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::ToggleAutoHide<ept id="p1">](#cdockablepane__toggleautohide)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Toggles auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::ToggleAutoHide<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__toggleautohide)</ept> .)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::UndockPane<ept id="p1">](#cdockablepane__undockpane)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Undocks a pane from either the main frame window or a miniframe window container.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Used internally.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To set the auto-hide mode, use <bpt id="p1">[</bpt>CDockablePane::SetAutoHideMode<ept id="p1">](#cdockablepane__setautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CheckAutoHideCondition<ept id="p1">](#cdockablepane__checkautohidecondition)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Determines whether the docking pane is hidden (in auto-hide mode).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::CheckStopSlideCondition<ept id="p1">](#cdockablepane__checkstopslidecondition)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Determines when an auto-hide docking pane should stop sliding.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::DrawCaption<ept id="p1">](#cdockablepane__drawcaption)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Draws the docking pane caption (gripper).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnPressButtons<ept id="p1">](#cdockablepane__onpressbuttons)</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Called when the user presses a caption button other than the <ph id="ph1">`AFX_HTCLOSE`</ph> and <ph id="ph2">`AFX_HTMAXBUTTON`</ph> buttons.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::OnSlide<ept id="p1">](#cdockablepane__onslide)</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Called by the framework to render the auto-hide slide effect when the pane is either shown or hidden.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::m_bDisableAnimation<ept id="p1">](#cdockablepane__m_bdisableanimation)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Specifies whether auto-hide animation of the dockable pane is disabled.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id="p1">](#cdockablepane__m_bhideinautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Determines the behavior of the pane when the pane is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::m_nSlideSteps<ept id="p1">](#cdockablepane__m_nslidesteps)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Specifies the animation speed of the pane when it is being shown or hidden when in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDockablePane`</ph> implements the following functionality:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Docking a pane to a main frame window.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Switching a pane to auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Attaching a pane to a tabbed window.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Floating a pane in a miniframe window.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Docking a pane to another pane that is floating in a miniframe window.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Resizing a pane.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Loading and saving state for a docking pane.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>State information is saved to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Creating a pane with or without a caption.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The caption can have a text label and it can be filled with a gradient color.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Dragging a pane while displaying the contents of the pane</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Dragging a pane while displaying a drag rectangle.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To use a docking pane in your application, derive your pane class from the <ph id="ph1">`CDockablePane`</ph> class.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Either embed the derived object into the main frame window object or into a window object that controls the instance of your pane.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Then call the <bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept> method or the <bpt id="p2">[</bpt>CDockablePane::CreateEx<ept id="p2">](#cdockablepane__createex)</ept> method when you process the <ph id="ph1">`WM_CREATE`</ph> message in the main frame window.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Finally, set up the pane object by calling <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>, <bpt id="p2">[</bpt>CBasePane::DockPane<ept id="p2">](../../mfc/reference/cbasepane-class.md#cbasepane__dockpane)</ept>, or <bpt id="p3">[</bpt>CDockablePane::AttachToTabWnd<ept id="p3">](#cdockablepane__attachtotabwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Customization Tips</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The following tips apply to <ph id="ph1">`CDockablePane`</ph> objects:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> for two non-tabbed, dockable panes, a pointer to a tabbed window will be returned in the <ph id="ph1">`ppTabbedControlBar`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can continue to add tabs to the tabbed window by using this parameter.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The kind of tabbed pane that is created by <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> is determined by the <ph id="ph1">`CDockablePane`</ph> object in the <ph id="ph2">`pTabControlBarAttachTo`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id="p1">](#cdockablepane__settabbedpanertc)</ept> to set the kind of tabbed pane that the <ph id="ph1">`CDockablePane`</ph> will create.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The default type is determined by the <ph id="ph1">`dwTabbedStyle`</ph> of <bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept> when you first create the <ph id="ph2">`CDockablePane`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwTabbedStyle`</ph> is AFX_CBRS_OUTLOOK_TABS the default type is <bpt id="p1">[</bpt>CMFCOutlookBar Class<ept id="p1">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>; if <ph id="ph2">`dwTabbedStyle`</ph> is AFX_CBRS_REGULAR_TABS the default type is <bpt id="p2">[</bpt>CTabbedPane Class<ept id="p2">](../../mfc/reference/ctabbedpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you want to dock one dockable pane to another, call the <bpt id="p1">[</bpt>CDockablePane::DockToWindow<ept id="p1">](#cdockablepane__docktowindow)</ept> method.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The original pane must be docked somewhere before you call this method.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The member variable <bpt id="p1">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id="p1">](#cdockablepane__m_bhideinautohidemode)</ept> controls how dockable panes behave in auto hide mode when you call <bpt id="p2">[</bpt>CDockablePane::ShowPane<ept id="p2">](#cdockablepane__showpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If this member variable is set to <ph id="ph1">`TRUE`</ph>, dockable panes and their auto hide buttons will be hidden.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Otherwise, they will slide in and out.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>You can disable auto-hide animation by setting the <bpt id="p1">[</bpt>CDockablePane::m_bDisableAnimation<ept id="p1">](#cdockablepane__m_bdisableanimation)</ept> member variable to <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to configure a <ph id="ph1">`CDockablePane`</ph> object by using various methods in the <ph id="ph2">`CDockablePane`</ph> class.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The example illustrates how to enable the auto-hide all feature for the dockable pane, enable the caption or the gripper, enable the auto-hide mode, show the pane, and animate a pane that is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Visual Studio Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_VisualStudioDemo#27<ept id="p2">](../../mfc/codesnippet/cpp/cdockablepane-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_VisualStudioDemo#28<ept id="p2">](../../mfc/codesnippet/cpp/cdockablepane-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane<ept id="p1">](../../mfc/reference/cbasepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPane<ept id="p1">](../../mfc/reference/cpane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxDockablePane.h</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__attachtotabwnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::AttachToTabWnd</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Attaches the current pane to a target pane, creating a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pTabControlBarAttachTo`</ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Specifies the target pane that the current pane attaches to.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The target pane must be a dockable pane.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Specifies the docking method.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSetActive`</ph></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to activate the tabbed pane after the attach operation; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`ppTabbedControlBar`</ph></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Contains the tabbed pane that results from the attach operation.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A pointer to the current pane, if it is not a tabbed pane; otherwise a pointer to the tabbed pane that results from the attach operation.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`NULL`</ph> if the current pane cannot be attached, or if an error occurs.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>When one dockable pane attaches to another pane using this method, the following occurs:</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The framework checks whether the target pane <ph id="ph1">`pTabControlBarAttachTo`</ph> is a regular docking pane or if it is derived from <bpt id="p1">[</bpt>CBaseTabbedPane<ept id="p1">](../../mfc/reference/cbasetabbedpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If the target pane is a tabbed pane, the framework adds the current pane to it as a tab.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the target pane is a regular docking pane, the framework creates a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`pTabControlBarAttachTo-&gt;CreateTabbedPane`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The style of the new tabbed pane depends on the <ph id="ph1">`m_pTabbedControlBarRTC`</ph> member.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>By default, this member is set to the runtime class of <bpt id="p1">[</bpt>CTabbedPane<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If you pass the <ph id="ph1">`AFX_CBRS_OUTLOOK_TABS`</ph> style as the <ph id="ph2">`dwTabbedStyle`</ph> parameter to the <bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept> method, the runtime class object is set to the runtime class of <bpt id="p2">[</bpt>CMFCOutlookBar<ept id="p2">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You can change this member at any time to change the style of the new pane.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>When this method creates a tabbed pane, the framework replaces the pointer to <ph id="ph1">`pTabControlBarAttachTo`</ph> (if the pane is docked or floating in a multi-miniframe window) with a pointer to the new tabbed pane.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The framework adds the <ph id="ph1">`pTabControlBarAttachTo`</ph> pane to the tabbed pane as the first tab.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The framework then adds the current pane as a second tab.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>If the current pane is derived from <ph id="ph1">`CBaseTabbedPane`</ph>, all of its tabs are moved to <ph id="ph2">`pTabControlBarAttachTo`</ph> and the current pane is destroyed.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Therefore, be careful when you call this method, because a pointer to the current pane may be invalid when the method returns.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you attach one pane to another when building a docking layout, set <ph id="ph1">`dockMethod`</ph> to <ph id="ph2">`DM_SHOW`</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>You should dock the first pane before you attach another pane to it.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__calcfixedlayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Returns the size of the pane rectangle.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bStretch`</ph></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHorz`</ph></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that contains the size of the pane rectangle.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__canacceptminiframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CanAcceptMiniFrame</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Determines whether the specified mini-frame can be docked to the pane.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pMiniFrame`</ph></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CPaneFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if <ph id="ph2">`pMiniFrame`</ph> can be docked to the pane; otherwise, <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__canacceptpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CanAcceptPane</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Determines whether another pane can be docked to the current pane.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Specifies the pane to dock to the current pane.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the specified pane can be docked to this pane; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The framework calls this method before a pane is docked to the current pane.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Override this function in a derived class to enable or disable docking to a specific pane.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>By default, this method returns <ph id="ph1">`TRUE`</ph> if either <ph id="ph2">`pBar`</ph> or its parent is of type <ph id="ph3">`CDockablePane`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__canautohide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CanAutoHide</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can auto-hide.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can auto-hide; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDockablePane::CanAutoHide`</ph> returns <ph id="ph2">`FALSE`</ph> in any of the following situations:</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The pane has no parent.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The docking manager does not allow panes to auto-hide.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The pane is not docked.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__canbeattached"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CanBeAttached</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane can be docked to another pane.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane can be docked to another pane or to the main frame window; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>By default, this method always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to enable or disable docking without calling <bpt id="p1">[</bpt>CBasePane::EnableDocking<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__cdockablepane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CDockablePane</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <bpt id="p1">[</bpt>CDockablePane<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>After you construct a dockable pane object, call <bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept> or <bpt id="p2">[</bpt>CDockablePane::CreateEx<ept id="p2">](#cdockablepane__createex)</ept> to create it.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__converttotabbeddocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::ConvertToTabbedDocument</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Converts one or more dockable panes to MDI tabbed documents.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bActiveTabOnly`</ph></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>When you convert a <ph id="ph1">`CTabbedPane`</ph>, specify <ph id="ph2">`TRUE`</ph> to convert only the active tab.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`FALSE`</ph> to convert all tabs in the pane.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__checkautohidecondition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CheckAutoHideCondition</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Determines whether the docking pane is hidden (also known as autohide mode).</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the hide condition is met; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The framework uses a timer to periodically check whether to hide an autohide dockable pane.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The method returns <ph id="ph1">`TRUE`</ph> when the pane is not active, the pane is not being resized, and the mouse pointer is not over the pane.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If all the previous conditions are met, the framework calls <bpt id="p1">[</bpt>CDockablePane::Slide<ept id="p1">](#cdockablepane__slide)</ept> to hide the pane.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__checkstopslidecondition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CheckStopSlideCondition</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Determines when an autohide docking pane should stop sliding.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDirection`</ph></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if the pane is visible; <ph id="ph2">`FALSE`</ph> if the pane is hidden.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the stop condition is met; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>When a dockable pane is set to autohide mode, the framework uses sliding effects to show or hide the pane.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The framework calls this function when the pane is sliding.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CheckStopSlideCondition`</ph> returns <ph id="ph2">`TRUE`</ph> when the pane is fully visible or when it is fully hidden.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to implement custom autohide effects.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__copystate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CopyState</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Copies the state of a dockable pane.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pOrgBar`</ph></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A pointer to a dockable pane.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDockablePane::CopyState`</ph> copies the state of <ph id="ph2">`pOrgBar`</ph> to the current pane by calling the following methods:</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPane::CopyState<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__copystate)</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetAHRestoredRect<ept id="p1">](#cdockablepane__getahrestoredrect)</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetAHSlideMode<ept id="p1">](#cdockablepane__getahslidemode)</ept></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::GetLastPercentInPaneContainer<ept id="p1">](#cdockablepane__getlastpercentinpanecontainer)</ept></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane::IsAutohideAllEnabled<ept id="p1">](#cdockablepane__isautohideallenabled)</ept></source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::Create</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Creates the Windows control and attaches it to the <bpt id="p1">[</bpt>CDockablePane<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszCaption`</ph></source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Specifies the window name.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pParentWnd`</ph></source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Specifies the parent window.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Specifies the size and position of the window, in client coordinates of <ph id="ph1">`pParentWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHasGripper`</ph></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to create the pane with a caption; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nID`</ph></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the child window.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>This value must be unique if you want to save docking state for this docking pane.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwStyle`</ph></source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Specifies the window style attributes.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwTabbedStyle`</ph></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwControlBarStyle`</ph></source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Specifies additional style attributes.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pContext`</ph></source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Specifies the create context of the window.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszWindowName`</ph></source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Specifies the window name.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`sizeDefault`</ph></source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Specifies the size of the window.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane is successfully created; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Creates a Windows pane and attaches it to the <ph id="ph1">`CDockablePane`</ph> object.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`dwStyle`</ph> window style has the <ph id="ph2">`CBRS_FLOAT_MULTI`</ph> flag, the miniframe window can float with other panes in the miniframe window.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>By default, docking panes can only float individually.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`dwTabbedStyle`</ph> parameter has the <ph id="ph2">`AFX_CBRS_OUTLOOK_TABS`</ph> flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> method.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>By default, dockable panes create regular tabbed panes of type <bpt id="p1">[</bpt>CTabbedPane<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__createdefaultpanedivider"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CreateDefaultPaneDivider</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Creates a default divider for the pane as it is being docked to a frame window.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Specifies the side of the main frame to which the pane is being docked.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwAlignment`</ph> contains the <ph id="ph2">`CBRS_ALIGN_LEFT`</ph> or <ph id="ph3">`CBRS_ALIGN_RIGHT`</ph> flag, this method creates a vertical ( <ph id="ph4">`CPaneDivider::SS_VERT`</ph>) divider; otherwise, this method creates a horizontal ( <ph id="ph5">`CPaneDivider::SS_HORZ`</ph>) divider.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pParent`</ph></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Pointer to the parent frame.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pSliderRTC`</ph></source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>This method returns a pointer to the newly-created divider, or <ph id="ph1">`NULL`</ph> if divider creation fails.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dwAlignment`</ph> can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The pane is being docked to the top of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The pane is being docked to the bottom of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The pane is being docked to the left side of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The pane is being docked to the right side of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__createex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CreateEx</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Creates the Windows control and attaches it to the <bpt id="p1">[</bpt>CDockablePane<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwStyleEx`</ph></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Specifies the extended style attributes for the new window.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpszCaption`</ph></source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Specifies the window name.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pParentWnd`</ph></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Specifies the parent window.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rect`</ph></source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Specifies the size and position of the window, in client coordinates of <ph id="ph1">`pParentWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHasGripper`</ph></source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to create the pane with a caption; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nID`</ph></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the child window.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This value must be unique if you want to save the docking state for this docking pane.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwStyle`</ph></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Specifies the window style attributes.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwTabbedStyle`</ph></source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwControlBarStyle`</ph></source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Specifies the additional style attributes.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pContext`</ph></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Specifies the create context of the window.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane is successfully created; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Creates a Windows pane and attaches it to the <ph id="ph1">`CDockablePane`</ph> object.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`dwStyle`</ph> window style has the <ph id="ph2">`CBRS_FLOAT_MULTI`</ph> flag, the miniframe window can float with other panes in the miniframe window.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>By default, docking panes can only float individually.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`dwTabbedStyle`</ph> parameter has the <ph id="ph2">`AFX_CBRS_OUTLOOK_TABS`</ph> flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> method.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>By default, dockable panes create regular tabbed panes of type <bpt id="p1">[</bpt>CTabbedPane<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__createtabbedpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::CreateTabbedPane</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Creates a tabbed pane from the current pane.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The new tabbed pane, or <ph id="ph1">`NULL`</ph> if the create operation failed.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it creates a tabbed pane to replace this pane.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to customize how tabbed panes are created and initialized.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The tabbed pane is created according to the runtime class information stored in the <ph id="ph1">`m_pTabbedControlBarRTC`</ph> member, which is initialized by the <bpt id="p1">[</bpt>CDockablePane::CreateEx<ept id="p1">](#cdockablepane__createex)</ept> method.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__dockpanecontainer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::DockPaneContainer</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Docks a container to the pane.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`barContainerManager`</ph></source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>A reference to the container manager of the container that is being docked.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `DWORD`</ph> that specifies the side of the pane to which the container is being docked.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the container was successfully docked to the pane; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dwAlignment`</ph> can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The container is being docked to the top of the pane.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The container is being docked to the bottom of the pane.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The container is being docked to the left of the pane.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The container is being docked to the right of the pane.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__dockpanestandard"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::DockPaneStandard</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Docks a pane by using outline (standard) docking.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bWasDocked`</ph></source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>When the method returns, this value contains <ph id="ph1">`TRUE`</ph> if the pane was successfully docked; otherwise, it contains <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If the pane was docked to a tabbed window, or if a tabbed window was created as a result of docking, this method returns a pointer to the tabbed window.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>If the pane was otherwise successfully docked, this method returns the <ph id="ph1">`this`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>If docking failed, this method returns <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__docktorecentpos"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::DockToRecentPos</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Docks a pane to its stored docking position.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is successfully docked; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Dockable panes store recent docking information in a <bpt id="p1">[</bpt>CRecentDockSiteInfo<ept id="p1">](../../mfc/reference/crecentdocksiteinfo-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__docktowindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::DockToWindow</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Docks one docking pane to another docking pane.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pTargetWindow`</ph></source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Specifies the dockable pane to dock this pane to.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Specifies the docking alignment for the pane.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>May be one of CBRS_ALIGN_LEFT, CBRS_ALIGN_TOP, CBRS_ALIGN_RIGHT, CBRS_ALIGN_BOTTOM or CBRS_ALIGN_ANY.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>(Defined in afxres.h.)</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`lpRect`</ph></source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Specifies the docking rectangle for the pane.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane was docked successfully; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Call this method to dock one pane to another pane with the alignment specified by <ph id="ph1">`dwAlignment`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__drawcaption"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::DrawCaption</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Draws the caption (also called the gripper) of a docking pane.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pDC`</ph></source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Represents the device context used for drawing.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectCaption`</ph></source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle of the pane's caption.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The framework calls this method to draw the caption of a dockable pane.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to customize the appearance of the caption.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__enableautohideall"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::EnableAutohideAll</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Enables or disables autohide mode for this pane and for other panes in the container.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bEnable`</ph></source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to enable the autohide all feature for the dockable pane; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>When a user holds the <ph id="ph1">`Ctrl`</ph> key and clicks the pin button to switch a pane to autohide mode, all other panes in the same container are also switched to autohide mode.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Call this method with <ph id="ph1">`bEnable`</ph> set to <ph id="ph2">`FALSE`</ph> to disable this feature for a particular pane.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__enablegripper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::EnableGripper</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Shows or hides the caption (also called the gripper).</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bEnable`</ph></source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to enable the caption; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>When the framework creates dockable panes, they do not have the <bpt id="p1">**</bpt>WS_STYLE<ept id="p1">**</ept> window style, even if specified.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>This means that the pane's caption is a non-client area that is controlled by the framework, but this area differs from the standard window caption.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>You can show or hide the caption at any time.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The framework hides the caption when a pane is added as a tab to a tabbed window or when a pane is floated in a miniframe window.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getahrestoredrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetAHRestoredRect</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Specifies the position of the pane when in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that contains the position of the pane when it is in auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getahslidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetAHSlideMode</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Retrieves the auto-hide slide mode for the pane.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`UINT`</ph> that specifies the auto-hide slide mode for the pane.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The return value can be either <ph id="ph1">`AFX_AHSM_MOVE`</ph> or <ph id="ph2">`AFX_AHSM_STRETCH`</ph>, but the implementation only uses <ph id="ph3">`AFX_AHSM_MOVE`</ph>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getcaptionheight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetCaptionHeight</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Returns the height, in pixels, of the current caption.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The height of the caption, in pixels.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The caption height is 0 if the caption was hidden by the <bpt id="p1">[</bpt>CDockablePane::EnableGripper<ept id="p1">](#cdockablepane__enablegripper)</ept> method, or if the pane does not have a caption.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getdefaultpanedivider"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetDefaultPaneDivider</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Returns the default pane divider for the pane's container.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>A valid <bpt id="p1">[</bpt>CPaneDivider<ept id="p1">](../../mfc/reference/cpanedivider-class.md)</ept> object if the dockable pane is docked to the main frame window, or <ph id="ph1">`NULL`</ph> if the dockable pane is not docked or if it is floating.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>For more information about pane dividers, see <bpt id="p1">[</bpt>CPaneDivider Class<ept id="p1">](../../mfc/reference/cpanedivider-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getdockingstatus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetDockingStatus</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Determines the ability of a pane to be docked based on the provided pointer location.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pt`</ph></source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The location of the pointer in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nSensitivity`</ph></source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The distance, in pixels, away from the edge of a rectangle the pointer must be to enable docking.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>One of the following status values:</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_CS_STATUS`</ph> value</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The pointer is not over a dock site.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The framework does not dock the pane.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The pointer is located over the dock site in immediate mode (the pane uses the <ph id="ph1">`DT_IMMEDIATE`</ph> docking mode).</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The framework docks the pane immediately.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The pointer is over a dock site that is another docking pane or is an edge of the main frame.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The framework docks the pane after a delay.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>See the Remarks section for more information about this delay.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The pointer is located over a dock site that causes the pane to be docked in a tabbed window.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>This occurs when the pointer is located over the caption of another docking pane or over the tab area of a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The framework calls this method to handle docking of a floating pane.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>For floating toolbars or docking panes that use the <ph id="ph1">`DT_IMMEDIATE`</ph> docking mode, the framework delays the dock command to enable the user to move the window out of the client area of the parent frame before docking occurs.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The length of the delay is measured in milliseconds and is controlled by the <bpt id="p1">[</bpt>CDockingManager::m_nTimeOutBeforeToolBarDock<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock)</ept> data member..</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The default value of <bpt id="p1">[</bpt>CDockingManager::m_nTimeOutBeforeToolBarDock<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock)</ept> is 200.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This behavior emulates the docking behavior of <ph id="ph1">[!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)]</ph> 2007.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>For delayed docking states ( <ph id="ph1">`CS_DELAY_DOCK`</ph> and <ph id="ph2">`CS_DELAY_DOCK_TO_TAB`</ph>), the framework does not perform docking until the user releases the mouse button.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>If a pane uses the <ph id="ph1">`DT_STANDARD`</ph> docking mode, the framework displays a rectangle at the projected docking location.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>If a pane uses the <ph id="ph1">`DT_SMART`</ph> docking mode, the framework displays smart docking markers and semi-transparent rectangles at the projected docking location.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>To specify the docking mode for your pane, call the <bpt id="p1">[</bpt>CBasePane::SetDockingMode<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__setdockingmode)</ept> method.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>For more information about smart docking, see <bpt id="p1">[</bpt>CDockingManager::GetSmartDockingParams<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__getsmartdockingparams)</ept>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getdragsensitivity"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetDragSensitivity</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Returns the drag sensitivity of a docking pane.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that contains the width and height, in pixels, of a rectangle centered on a drag point.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The drag operation does not begin until the mouse pointer moves outside this rectangle.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__getlastpercentinpanecontainer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetLastPercentInPaneContainer</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Retrieves the percentage of space that a pane occupies in its container ( <bpt id="p1">[</bpt>CPaneContainer Class<ept id="p1">](../../mfc/reference/cpanecontainer-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> that specifies the percentage of space that the pane occupies in its container.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>This method is used when the container adjusts its layout.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__gettabarea"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetTabArea</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Retrieves the tab area for the pane.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectTabAreaTop`</ph></source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `GetTabArea`</ph> fills this variable with the tab area if tabs are located at the top of the pane.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>If tabs are located at the bottom of the pane, this variable is filled with an empty rectangle.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectTabAreaBottom`</ph></source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `GetTabArea`</ph> fills this variable with the tab area if tabs are located at the bottom of the pane.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>If tabs are located at the top of the pane, this variable is filled with an empty rectangle.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This method is used only in classes that are derived from <ph id="ph1">`CDockablePane`</ph> and have tabs.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CTabbedPane::GetTabArea<ept id="p1">](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__gettabarea)</ept> and <bpt id="p2">[</bpt>CMFCOutlookBar::GetTabArea<ept id="p2">](../../mfc/reference/cmfcoutlookbar-class.md#cmfcoutlookbar__gettabarea)</ept>.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__gettabbedpanertc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::GetTabbedPaneRTC</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The runtime class information for the dockable pane.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the runtime class information for tabbed panes that are created dynamically.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>This can occur when a user drags one pane to the caption of another pane, or if you call the <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> method to programmatically create a tabbed pane from two dockable panes.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>You can set the runtime class information by calling the <bpt id="p1">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id="p1">](#cdockablepane__settabbedpanertc)</ept> method.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__hasautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::HasAutoHideMode</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Specifies whether a docking pane can be switched to autohide mode.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane can be switched to autohide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to disable autohide mode for a specific dockable pane.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__hittest"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::HitTest</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Specifies the location in a pane where the user clicks a mouse.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`point`</ph></source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Specifies the point to test.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDetectCaption`</ph></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if <ph id="ph2">`HTCAPTION`</ph> should be returned if the point is on the pane's caption; otherwise, <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HTNOWHERE`</ph> if <ph id="ph2">`point`</ph> is not in the dockable pane.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HTCLIENT`</ph> if <ph id="ph2">`point`</ph> is in the client area of the dockable pane.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HTCAPTION`</ph> if <ph id="ph2">`point`</ph> is in the caption area of the dockable pane.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AFX_HTCLOSE`</ph> if <ph id="ph2">`point`</ph> is on the close button.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HTMAXBUTTON`</ph> if <ph id="ph2">`point`</ph> is on the pin button.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isautohideallenabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsAutohideAllEnabled</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Indicates whether the docking pane and all other panes in the container can be switched to autohide mode.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane, and all other panes in the container, can be switched to autohide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>A user enables autohide mode by clicking the docking pin button while holding the <bpt id="p1">**</bpt>Ctrl<ept id="p1">**</ept> key</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>To enable or disable this behavior, call the <bpt id="p1">[</bpt>CDockablePane::EnableAutohideAll<ept id="p1">](#cdockablepane__enableautohideall)</ept> method.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsAutoHideMode</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Determines whether a pane is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane is in autohide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isdocked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsDocked</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane is docked.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane does not belong to a miniframe window or if it is floating in a miniframe window with another pane.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FALSE`</ph> if the pane is a child of a miniframe window and there are no other panes that belong to the miniframe window.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>To determine whether the pane is docked to the main frame window, call <bpt id="p1">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id="p1">](#cdockablepane__getdefaultpanedivider)</ept>.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>If the method returns a non-NULL pointer, the pane is docked at the main frame window.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__ishideinautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsHideInAutoHideMode</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Determines the behavior of a pane that is in autohide mode if it is shown (or hidden) by calling <bpt id="p1">[</bpt>CDockablePane::ShowPane<ept id="p1">](#cdockablepane__showpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane should be hidden when in autohide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>When a dockable pane is in autohide mode, it behaves differently when you call <ph id="ph1">`ShowPane`</ph> to hide or show the pane.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>This behavior is controlled by the static member <bpt id="p1">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id="p1">](#cdockablepane__m_bhideinautohidemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>If this member is <ph id="ph1">`TRUE`</ph>, the dockable pane and its related autohide toolbar or autohide button is hidden or shown when you call <ph id="ph2">`ShowPane`</ph>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Otherwise, the dockable pane is activated or deactivated, and its related autohide toolbar or autohide button is always visible.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to change the default behavior for individual panes.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The default value for <ph id="ph1">`m_bHideInAutoHideMode`</ph> is <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isinfloatingmultipaneframewnd"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsInFloatingMultiPaneFrameWnd</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is in a multi-pane frame window ( <bpt id="p1">[</bpt>CMultiPaneFrameWnd Class<ept id="p1">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is in a multi-pane frame window; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isresizable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsResizable</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Specifies whether the pane is resizable.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is resizable; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>By default, dockable panes are resizable.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>To prevent resizing, override this method in a derived class and return <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Note that a <ph id="ph1">`FALSE`</ph> value leads to a failed <ph id="ph2">`ASSERT`</ph> in <bpt id="p1">[</bpt>CPane::DockPane<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CDockingManager::AddPane<ept id="p1">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__addpane)</ept> instead to dock a pane within a parent frame.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Panes that cannot be resized can neither float nor enter auto-hide mode and are always located at the outer edge of the parent frame.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__istablocationbottom"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsTabLocationBottom</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Specifies whether tabs are located at the top or bottom of the pane.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if tabs are located at the bottom of the pane; <ph id="ph2">`FALSE`</ph> if tabs are located at the top of the pane.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CTabbedPane::IsTabLocationBottom<ept id="p1">](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__istablocationbottom)</ept>.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__istracked"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsTracked</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Specifies whether a pane is being moved by the user.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane is being moved; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__isvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::IsVisible</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Determines whether the current pane is visible.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the dockable pane is visible; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Call this method to determine whether a dockable pane is visible.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>You can use this method instead of calling <bpt id="p1">[</bpt>CWnd::IsWindowVisible<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__iswindowvisible)</ept> or testing for the <ph id="ph1">`WS_VISIBLE`</ph> style.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>The returned visibility state depends on whether autohide mode is enabled or disabled and on the value of the <bpt id="p1">[</bpt>CDockablePane::IsHideInAutoHideMode<ept id="p1">](#cdockablepane__ishideinautohidemode)</ept> property.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>If the dockable pane is in autohide mode and <ph id="ph1">`IsHideInAutoHideMode`</ph> returns <ph id="ph2">`FALSE`</ph> the visibility state is always <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>If the dockable pane is in autohide mode and <ph id="ph1">`IsHideInAutoHideMode`</ph> returns <ph id="ph2">`TRUE`</ph> the visibility state depends on the visibility state of the related autohide toolbar.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>If the dockable pane is not in autohide mode, the visibility state is determined by the <bpt id="p1">[</bpt>CBasePane::IsVisible<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__isvisible)</ept> method.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__m_bdisableanimation"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::m_bDisableAnimation</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Specifies whether autohide animation of the dockable pane is disabled.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__m_bhideinautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::m_bHideInAutoHideMode</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Determines the behavior of the pane when the pane is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>This value affects all docking panes in the application.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>If you set this member to <ph id="ph1">`TRUE`</ph>, dockable panes are hidden or shown with their related autohide toolbars and buttons when you call <bpt id="p1">[</bpt>CDockablePane::ShowPane<ept id="p1">](#cdockablepane__showpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>If you set this member to <ph id="ph1">`FALSE`</ph>, dockable panes are activated or deactivated when you call <bpt id="p1">[</bpt>CDockablePane::ShowPane<ept id="p1">](#cdockablepane__showpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__m_nslidesteps"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::m_nSlideSteps</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Specifies the animation speed of the pane when it is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>For a faster animation effect, decrease this value.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>For a slower animation effect, increase this value.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onafterchangeparent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnAfterChangeParent</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndOldParent`</ph></source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onafterdockfromminiframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnAfterDockFromMiniFrame</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Called by the framework when a floating docking bar docks at a frame window.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>By default, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onbeforechangeparent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnBeforeChangeParent</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The framework calls this method before it changes the parent of the pane.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pWndNewParent`</ph></source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>A pointer to the new parent window.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `BOOL`</ph> that specifies whether to delay recalculation of the docking layout if the pane is undocked.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDockablePane::UndockPane<ept id="p1">](#cdockablepane__undockpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>If the pane is docked and the new parent does not allow docking, this method undocks the pane.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>If the pane is being converted to a tabbed document, this method stores its recent docking position.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The framework uses the recent docking position to restore the position of the pane when it is converted back to a docked state.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onbeforefloat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnBeforeFloat</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>The framework calls this method before a pane transitions to a floating state.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`rectFloat`</ph></source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Specifies the position and size of the pane when it is in a floating state.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Specifies the docking method.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CPane::DockPane<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> for a list of possible values.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be floated; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when a pane is about to float.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>You can override this method in a derived class if you want to perform any processing before the pane floats.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onpressbuttons"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnPressButtons</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Called when the user presses a caption button other than the <ph id="ph1">`AFX_HTCLOSE`</ph> and <ph id="ph2">`AFX_HTMAXBUTTON`</ph> buttons.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nHit`</ph></source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>This parameter is not used.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>If you add a custom button to the caption of a dockable pane, override this method to receive notifications when a user presses the button.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__onslide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::OnSlide</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Called by the framework to animate the pane when it is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSlideOut`</ph></source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show the pane; <ph id="ph2">`FALSE`</ph> to hide the pane.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to implement custom autohide effects.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__removefromdefaultpanedividier"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::RemoveFromDefaultPaneDividier</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a pane is being undocked.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>This method sets the default pane divider to <ph id="ph1">`NULL`</ph> and removes the pane from its container.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__replacepane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::ReplacePane</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Replaces the pane with a specified pane.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBarToReplaceWith`</ph></source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>A pointer to a dockable pane.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bRegisterWithFrame`</ph></source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TRUE`</ph>, the new pane is registered with the docking manager of the parent of the old pane.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The new pane is inserted at the index of the old pane in the list of panes that is maintained by the docking manager.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the replacement is successful; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__restoredefaultpanedivider"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::RestoreDefaultPaneDivider</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>When a pane is deserialized, the framework calls this method to restore the default pane divider.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The restored default pane divider replaces the current default pane divider, if it exists.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__setautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::SetAutoHideMode</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Toggles the docking pane between visible and autohide mode.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bMode`</ph></source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to enable autohide mode; <ph id="ph2">`FALSE`</ph> to enable regular docking mode.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Specifies the alignment of the autohide pane to create.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pCurrAutoHideBar`</ph></source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>A pointer to the current autohide toolbar.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUseTimer`</ph></source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Specifies whether to use the autohide effect when the user switches the pane to autohide mode or to hide the pane immediately.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The autohide toolbar that was created as a result of switching to autohide mode, or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a user clicks the pin button to switch the dockable pane to autohide mode or to regular docking mode.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Call this method to switch a dockable pane to autohide mode programmatically.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>The pane must be docked to the main frame window ( <bpt id="p1">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id="p1">](#cdockablepane__getdefaultpanedivider)</ept> must return a valid pointer to the <bpt id="p2">[</bpt>CPaneDivider<ept id="p2">](../../mfc/reference/cpanedivider-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__setautohideparents"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::SetAutoHideParents</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Sets the auto-hide button and auto-hide toolbar for the pane.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pToolBar`</ph></source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Pointer to an auto-hide toolbar.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBtn`</ph></source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Pointer to an auto-hide button.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__setlastpercentinpanecontainer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::SetLastPercentInPaneContainer</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Sets the percentage of space that a pane occupies in its container.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`n`</ph></source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> that specifies the percentage of space that the pane occupies in its container.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>The framework adjusts the pane to use the new value when the layout is recalculated.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__setrestoreddefaultpanedivider"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::SetRestoredDefaultPaneDivider</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Sets the restored default pane divider.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`hRestoredSlider`</ph></source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>A handle to a pane divider (slider).</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>A restored default pane divider is obtained when a pane is deserialized.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDockablePane::RestoreDefaultPaneDivider<ept id="p1">](#cdockablepane__restoredefaultpanedivider)</ept>.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__settabbedpanertc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::SetTabbedPaneRTC</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Sets the runtime class information for a tabbed window that is created when two panes dock together.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pRTC`</ph></source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The runtime class information for the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Call this method to set the runtime class information for tabbed panes that are created dynamically.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>This can occur when a user drags one pane to the caption of another pane, or if you call the <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](#cdockablepane__attachtotabwnd)</ept> method to programmatically create a tabbed pane from two dockable panes.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The default runtime class is set according to the <ph id="ph1">`dwTabbedStyle`</ph> parameter of <bpt id="p1">[</bpt>CDockablePane::Create<ept id="p1">](#cdockablepane__create)</ept> and <bpt id="p2">[</bpt>CDockablePane::CreateEx<ept id="p2">](#cdockablepane__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>To customize the new tabbed panes, derive your class from one of the following classes:</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane Class<ept id="p1">](../../mfc/reference/cbasetabbedpane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CTabbedPane Class<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCOutlookBar Class<ept id="p1">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Then, call this method with the pointer to its runtime class information.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__showpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::ShowPane</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Shows or hides a pane.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show the pane; <ph id="ph2">`FALSE`</ph> to hide the pane.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to delay adjusting the docking layout; <ph id="ph2">`FALSE`</ph> to adjust the docking layout immediately.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bActivate`</ph></source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to activate the pane when shown; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Call this method instead of the <bpt id="p1">[</bpt>CWnd::ShowWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept> when showing or hiding dockable panes.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__slide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::Slide</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Animates a pane that is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSlideOut`</ph></source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show the pane; <ph id="ph2">`FALSE`</ph> to hide the pane.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUseTimer`</ph></source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show or hide the pane with the autohide effect; <ph id="ph2">`FALSE`</ph> to show or hide the pane immediately.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The framework calls this method to animate a pane that is in autohide mode.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>This method uses the <ph id="ph1">`CDockablePane::m_nSlideDefaultTimeOut`</ph> value to determine the time out for the slide effect.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The default value for the time out is 1.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>If you customize the autohide algorithm, modify this member to change the time out.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__toggleautohide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::ToggleAutoHide</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Toggles the pane between always visible and auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>This method toggles auto-hide mode for the pane by calling <bpt id="p1">[</bpt>CDockablePane::SetAutoHideMode<ept id="p1">](#cdockablepane__setautohidemode)</ept>.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdockablepane__undockpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDockablePane::UndockPane</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Undocks a pane from either the main frame window or a miniframe window container.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to delay calculating the docking layout; <ph id="ph2">`FALSE`</ph> to recalculate the docking layout immediately.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Call this method to undock a pane from the main frame window or from a multi-miniframe window container (a pane that is floating in a single miniframe window with other panes).</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>You must undock a pane before you perform any external operation that is not performed by the <bpt id="p1">[</bpt>CDockingManager<ept id="p1">](../../mfc/reference/cdockingmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>For example, you must undock a pane to move it programmatically from one location to another.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The framework automatically undocks panes before they are destroyed.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CPane Class<ept id="p1">](../../mfc/reference/cpane-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>