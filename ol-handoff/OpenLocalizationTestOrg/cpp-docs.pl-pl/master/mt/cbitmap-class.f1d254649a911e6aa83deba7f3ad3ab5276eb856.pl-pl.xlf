<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59f77775985af8f79ec7ebff5bfba7231532e393</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cbitmap-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7917dc3293a6b51dca41acbdcb07ca59eb3e7446</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47530c50ac1656dc3fb5c36eb107a53740671b1a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CBitmap Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CBitmap Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::CBitmap<ept id="p1">](#cbitmap__cbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::CreateBitmap<ept id="p1">](#cbitmap__createbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes the object with a device-dependent memory bitmap that has a specified width, height, and bit pattern.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::CreateBitmapIndirect<ept id="p1">](#cbitmap__createbitmapindirect)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes the object with a bitmap with the width, height, and bit pattern (if one is specified) given in a <bpt id="p1">**</bpt>BITMAP<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::CreateCompatibleBitmap<ept id="p1">](#cbitmap__createcompatiblebitmap)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes the object with a bitmap so that it is compatible with a specified device.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::CreateDiscardableBitmap<ept id="p1">](#cbitmap__creatediscardablebitmap)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes the object with a discardable bitmap that is compatible with a specified device.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::FromHandle<ept id="p1">](#cbitmap__fromhandle)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CBitmap`</ph> object when given a handle to a Windows <ph id="ph2">`HBITMAP`</ph> bitmap.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::GetBitmap<ept id="p1">](#cbitmap__getbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Fills a <bpt id="p1">**</bpt>BITMAP<ept id="p1">**</ept> structure with information about the bitmap.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::GetBitmapBits<ept id="p1">](#cbitmap__getbitmapbits)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Copies the bits of the specified bitmap into the specified buffer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::GetBitmapDimension<ept id="p1">](#cbitmap__getbitmapdimension)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the width and height of the bitmap.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The height and width are assumed to have been set previously by the <bpt id="p1">[</bpt>SetBitmapDimension<ept id="p1">](#cbitmap__setbitmapdimension)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::LoadBitmap<ept id="p1">](#cbitmap__loadbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes the object by loading a named bitmap resource from the application's executable file and attaching the bitmap to the object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::LoadMappedBitmap<ept id="p1">](#cbitmap__loadmappedbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Loads a bitmap and maps colors to current system colors.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::LoadOEMBitmap<ept id="p1">](#cbitmap__loadoembitmap)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes the object by loading a predefined Windows bitmap and attaching the bitmap to the object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::SetBitmapBits<ept id="p1">](#cbitmap__setbitmapbits)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Sets the bits of a bitmap to the specified bit values.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::SetBitmapDimension<ept id="p1">](#cbitmap__setbitmapdimension)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Assigns a width and height to a bitmap in 0.1-millimeter units.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBitmap::operator HBITMAP<ept id="p1">](#cbitmap__operator_hbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the Windows handle attached to the <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CBitmap`</ph> object, construct the object, attach a bitmap handle to it with one of the initialization member functions, and then call the object's member functions.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on using graphic objects like <ph id="ph1">`CBitmap`</ph>, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](../../mfc/graphic-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CGdiObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__cbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::CBitmap</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The resulting object must be initialized with one of the initialization member functions.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__createbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::CreateBitmap</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Initializes a device-dependent memory bitmap that has the specified width, height, and bit pattern.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies the width (in pixels) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies the height (in pixels) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the number of color planes in the bitmap.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies the number of color bits per display pixel.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Points to an array of bytes that contains the initial bitmap bit values.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the new bitmap is left uninitialized.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For a color bitmap, either the <ph id="ph1">`nPlanes`</ph> or <ph id="ph2">`nBitcount`</ph> parameter should be set to 1.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If both of these parameters are set to 1, <ph id="ph1">`CreateBitmap`</ph> creates a monochrome bitmap.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a "memory device context" by using <bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> and copied to any compatible device context by using the <bpt id="p2">[</bpt>CDC::BitBlt<ept id="p2">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> function.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you finish with the <ph id="ph1">`CBitmap`</ph> object created by the <ph id="ph2">`CreateBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id="ph3">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see the description of the <bpt id="p1">**</bpt>bmBits<ept id="p1">**</ept> field in the <bpt id="p2">**</bpt>BITMAP<ept id="p2">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BITMAP<ept id="p1">](../../mfc/reference/bitmap-structure.md)</ept> structure is described under the <bpt id="p2">[</bpt>CBitmap::CreateBitmapIndirect<ept id="p2">](#cbitmap__createbitmapindirect)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__createbitmapindirect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::CreateBitmapIndirect</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Initializes a bitmap that has the width, height, and bit pattern (if one is specified) given in the structure pointed to by <ph id="ph1">`lpBitmap`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>BITMAP<ept id="p1">](../../mfc/reference/bitmap-structure.md)</ept> structure that contains information about the bitmap.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a memory device context by using <bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> and copied to any compatible device context by using the <bpt id="p2">[</bpt>CDC::BitBlt<ept id="p2">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> or <bpt id="p3">[</bpt>CDC::StretchBlt<ept id="p3">](../../mfc/reference/cdc-class.md#cdc__stretchblt)</ept> function.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>(The <bpt id="p1">[</bpt>CDC::PatBlt<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__patblt)</ept> function can copy the bitmap for the current brush directly to the display device context.)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>BITMAP<ept id="p1">**</ept> structure pointed to by the <ph id="ph1">`lpBitmap`</ph> parameter has been filled in by using the <ph id="ph2">`GetObject`</ph> function, the bits of the bitmap are not specified and the bitmap is uninitialized.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To initialize the bitmap, an application can use a function such as <bpt id="p1">[</bpt>CDC::BitBlt<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> or <bpt id="p2">[</bpt>SetDIBits<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162973)</ept> to copy the bits from the bitmap identified by the first parameter of <ph id="ph1">`CGdiObject::GetObject`</ph> to the bitmap created by <ph id="ph2">`CreateBitmapIndirect`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you finish with the <ph id="ph1">`CBitmap`</ph> object created with <ph id="ph2">`CreateBitmapIndirect`</ph> function, first select the bitmap out of the device context, then delete the <ph id="ph3">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__createcompatiblebitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::CreateCompatibleBitmap</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Initializes a bitmap that is compatible with the device specified by <ph id="ph1">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specifies the device context.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specifies the width (in pixels) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies the height (in pixels) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It can be selected as the current bitmap for any memory device that is compatible with the one specified by <ph id="ph1">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDC`</ph> is a memory device context, the bitmap returned has the same format as the currently selected bitmap in that device context.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A "memory device context" is a block of memory that represents a display surface.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It can be used to prepare images in memory before copying them to the actual display surface of the compatible device.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When a memory device context is created, GDI automatically selects a monochrome stock bitmap for it.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Since a color memory device context can have either color or monochrome bitmaps selected, the format of the bitmap returned by the <ph id="ph1">`CreateCompatibleBitmap`</ph> function is not always the same; however, the format of a compatible bitmap for a nonmemory device context is always in the format of the device.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you finish with the <ph id="ph1">`CBitmap`</ph> object created with the <ph id="ph2">`CreateCompatibleBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id="ph3">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__creatediscardablebitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::CreateDiscardableBitmap</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Initializes a discardable bitmap that is compatible with the device context identified by <ph id="ph1">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Specifies a device context.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies the width (in bits) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specifies the height (in bits) of the bitmap.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An application can select this bitmap as the current bitmap for a memory device that is compatible with the one specified by <ph id="ph1">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Windows can discard a bitmap created by this function only if an application has not selected it into a display context.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If Windows discards the bitmap when it is not selected and the application later attempts to select it, the <bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> function will return <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When you finish with the <ph id="ph1">`CBitmap`</ph> object created with the <ph id="ph2">`CreateDiscardableBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id="ph3">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__fromhandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::FromHandle</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CBitmap`</ph> object when given a handle to a Windows GDI bitmap.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies a Windows GDI bitmap.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CBitmap`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CBitmap`</ph> object is not already attached to the handle, a temporary <ph id="ph2">`CBitmap`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CBitmap`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Another way of saying this is that the temporary object is only valid during the processing of one window message.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__getbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::GetBitmap</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Retrieves image properties for the attached bitmap.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>BITMAP Structure<ept id="p1">](../../mfc/reference/bitmap-structure.md)</ept> structure that will receive the image properties.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This parameter must not be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Nonzero if the method was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__getbitmapbits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::GetBitmapBits</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Copies the bit pattern of the attached bitmap into the specified buffer.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The number of bytes to copy to the buffer.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Pointer to the buffer that will receive the bitmap.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The number of bytes copied to the buffer if the method was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CBitmap::GetBitmap<ept id="p1">](#cbitmap__getbitmap)</ept> to determine the required buffer size.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__getbitmapdimension"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::GetBitmapDimension</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns the width and height of the bitmap.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The width and height of the bitmap, measured in 0.1-millimeter units.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The height is in the <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member of the <ph id="ph1">`CSize`</ph> object, and the width is in the <bpt id="p2">**</bpt>cx<ept id="p2">**</ept> member.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the bitmap width and height have not been set by using <ph id="ph1">`SetBitmapDimension`</ph>, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The height and width are assumed to have been set previously by using the <bpt id="p1">[</bpt>SetBitmapDimension<ept id="p1">](#cbitmap__setbitmapdimension)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__loadbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::LoadBitmap</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Loads the bitmap resource named by <ph id="ph1">`lpszResourceName`</ph> or identified by the ID number in <ph id="ph2">`nIDResource`</ph> from the application's executable file.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the name of the bitmap resource.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID number of the bitmap resource.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The loaded bitmap is attached to the <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If the bitmap identified by <ph id="ph1">`lpszResourceName`</ph> does not exist or if there is insufficient memory to load the bitmap, the function returns 0.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>CGdiObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> function to delete bitmap loaded by the <ph id="ph1">`LoadBitmap`</ph> function, or the <ph id="ph2">`CBitmap`</ph> destructor will delete the object for you.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Before you delete the object, make sure it is not selected into a device context.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following bitmaps were added to Windows versions 3.1 and later:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_UPARRROWIOBM_DNARROWIOBM_RGARROWIOBM_LFARROWI<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>These bitmaps are not found in device drivers for Windows versions 3.0 and earlier.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For a complete list of bitmaps and a display of their appearance, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__loadmappedbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::LoadMappedBitmap</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Call this member function to load a bitmap and map the colors to the current system colors.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The ID of the bitmap resource.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A flag for a bitmap.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Can be zero or <bpt id="p1">**</bpt>CMB_MASKED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>COLORMAP<ept id="p1">**</ept> structure that contains the color information needed to map the bitmaps.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function uses the default color map.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nMapSize<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The number of color maps pointed to by <ph id="ph1">`lpColorMap`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`LoadMappedBitmap`</ph> will map colors commonly used in button glyphs.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For information about creating a mapped bitmap, see the Windows function <bpt id="p1">[</bpt>CreateMappedBitmap<ept id="p1">](http://go.microsoft.com/fwlink/linkid=230562)</ept> and the <bpt id="p2">[</bpt>COLORMAP<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb760448)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__loadoembitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::LoadOEMBitmap</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Loads a predefined bitmap used by Windows.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>ID number of the predefined Windows bitmap.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The possible values are listed below from WINDOWS.H:</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_BTNCORNERS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_RESTORE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_BTSIZE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_RGARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_CHECK<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_UPARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_CHECKBOXES<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_ZOOM<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_CLOSE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_REDUCE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_COMBO<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_REDUCED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_DNARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_RESTORE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_DNARROWD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_RESTORED<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_DNARROWI<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_RGARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_LFARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_RGARROWD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_LFARROWD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_RGARROWI<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_LFARROWI<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_SIZE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_MNARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_UPARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_CLOSE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_UPARROWD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_DNARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_UPARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_LFARROW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_ZOOM<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_OLD_REDUCE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OBM_ZOOMD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Bitmap names that begin with <bpt id="p1">**</bpt>OBM_OLD<ept id="p1">**</ept> represent bitmaps used by Windows versions prior to 3.0.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Note that the constant <bpt id="p1">**</bpt>OEMRESOURCE<ept id="p1">**</ept> must be defined before including WINDOWS.H in order to use any of the <bpt id="p2">**</bpt>OBM_<ept id="p2">**</ept> constants.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__operator_hbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::operator HBITMAP</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Use this operator to get the attached Windows GDI handle of the <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If successful, a handle to the Windows GDI object represented by the <ph id="ph1">`CBitmap`</ph> object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This operator is a casting operator, which supports direct use of an <ph id="ph1">`HBITMAP`</ph> object.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more information about using graphic objects, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__setbitmapbits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::SetBitmapBits</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Sets the bits of a bitmap to the bit values given by <ph id="ph1">`lpBits`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes pointed to by <ph id="ph1">`lpBits`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">**</bpt>BYTE<ept id="p1">**</ept> array that contains the pixel values to be copied to the <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>In order for the bitmap to be able to render its image correctly, the values should be formatted to conform to the height, width and color depth values that were specified when the CBitmap instance was created.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CBitmap::CreateBitmap<ept id="p1">](#cbitmap__createbitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The number of bytes used in setting the bitmap bits; 0 if the function fails.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbitmap__setbitmapdimension"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBitmap::SetBitmapDimension</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Assigns a width and height to a bitmap in 0.1-millimeter units.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Specifies the width of the bitmap (in 0.1-millimeter units).</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Specifies the height of the bitmap (in 0.1-millimeter units).</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The previous bitmap dimensions.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Height is in the <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member variable of the <ph id="ph1">`CSize`</ph> object, and width is in the <bpt id="p2">**</bpt>cx<ept id="p2">**</ept> member variable.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The GDI does not use these values except to return them when an application calls the <bpt id="p1">[</bpt>GetBitmapDimension<ept id="p1">](#cbitmap__getbitmapdimension)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample MDI<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CGdiObject Class<ept id="p1">](../../mfc/reference/cgdiobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>