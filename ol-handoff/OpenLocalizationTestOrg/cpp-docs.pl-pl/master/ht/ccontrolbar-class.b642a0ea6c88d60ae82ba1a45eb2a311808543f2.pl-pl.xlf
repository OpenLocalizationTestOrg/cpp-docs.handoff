<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a621474d8a4651e42871cf2f49776df2f10507b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ccontrolbar-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb5a5854e50616e3789a11fd869e4911d8216ae8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3feba6fb02b410c407d9627b46cac0c30dc7ff02</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CControlBar Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CControlBar Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class for the control-bar classes <bpt id="p1">[</bpt>CStatusBar<ept id="p1">](../../mfc/reference/cstatusbar-class.md)</ept>, <bpt id="p2">[</bpt>CToolBar<ept id="p2">](../../mfc/reference/ctoolbar-class.md)</ept>, <bpt id="p3">[</bpt>CDialogBar<ept id="p3">](../../mfc/reference/cdialogbar-class.md)</ept>, <bpt id="p4">[</bpt>CReBar<ept id="p4">](../../mfc/reference/crebar-class.md)</ept>, and <bpt id="p5">[</bpt>COleResizeBar<ept id="p5">](../../mfc/reference/coleresizebar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CControlBar::CControlBar</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CControlBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcDynamicLayout</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the size of a dynamic control bar as a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the size of the control bar as a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcInsideRect</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns the current dimensions of the control bar area; including the borders.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CControlBar::DoPaint</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Renders the borders and gripper of the control bar.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CControlBar::DrawBorders</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Renders the borders of the control bar.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CControlBar::DrawGripper</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Renders the gripper of the control bar.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CControlBar::EnableDocking</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Allows a control bar to be docked or floating.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CControlBar::GetBarStyle</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the control bar style settings.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CControlBar::GetBorders</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the border values of the control bar.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CControlBar::GetCount</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the number of non- <ph id="ph1">`HWND`</ph> elements in the control bar.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CControlBar::GetDockingFrame</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the frame to which a control bar is docked.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CControlBar::IsFloating</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns a nonzero value if the control bar in question is a floating control bar.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CControlBar::OnUpdateCmdUI</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Calls the Command UI handlers.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CControlBar::SetBarStyle</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Modifies the control bar style settings.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CControlBar::SetBorders</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sets the border values of the control bar.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CControlBar::SetInPlaceOwner</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Changes the in-place owner of a control bar.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CControlBar::m_bAutoDelete</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If nonzero, the <ph id="ph1">`CControlBar`</ph> object is deleted when the Windows control bar is destroyed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CControlBar::m_pInPlaceOwner</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The in-place owner of the control bar.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A control bar is a window that is usually aligned to the left or right of a frame window.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It may contain child items that are either <ph id="ph1">`HWND`</ph>-based controls, which are windows that generate and respond to Windows messages, or non- <ph id="ph2">`HWND`</ph>-based items, which are not windows and are managed by application code or framework code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>List boxes and edit controls are examples of <ph id="ph1">`HWND`</ph>-based controls; status-bar panes and bitmap buttons are examples of non- <ph id="ph2">`HWND`</ph>-based controls.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Control-bar windows are usually child windows of a parent frame window and are usually siblings to the client view or MDI client of the frame window.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CControlBar`</ph> object uses information about the parent window's client rectangle to position itself.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It then informs the parent window as to how much space remains unallocated in the parent window's client area.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CControlBar`</ph>, see:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Control Bars</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Technical Note 31: Control Bars<ept id="p1">](../../mfc/tn031-control-bars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Knowledge Base article Q242577 : PRB: Update Command UI Handlers Do Not Work for Menu Attached to a Dialog Box</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxext.h</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcDynamicLayout</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to calculate the dimensions of a dynamic toolbar.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The requested dimension of the control bar, either horizontal or vertical, depending on <ph id="ph1">`dwMode`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following predefined flags are used to determine the height and width of the dynamic control bar.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Use the bitwise-OR (&amp;#124;) operator to combine the flags.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Layout mode flags</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>What it means</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Indicates whether the control bar should be stretched to the size of the frame.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Set if the bar is not a docking bar (not available for docking).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Not set when the bar is docked or floating (available for docking).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If set, <ph id="ph1">`LM_STRETCH`</ph> ignores <ph id="ph2">`nLength`</ph> and returns dimensions based on the <ph id="ph3">`LM_HORZ`</ph> state.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>works similarly to the <ph id="ph1">`bStretch`</ph> parameter used in <bpt id="p1">[</bpt>CalcFixedLayout<ept id="p1">](#ccontrolbar__calcfixedlayout)</ept>; see that member function for more information about the relationship between stretching and orientation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Indicates that the bar is horizontally or vertically oriented.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Set if the bar is horizontally oriented, and if it is vertically oriented, it is not set.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>works similarly to the <ph id="ph1">`bHorz`</ph> parameter used in <bpt id="p1">[</bpt>CalcFixedLayout<ept id="p1">](#ccontrolbar__calcfixedlayout)</ept>; see that member function for more information about the relationship between stretching and orientation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>LM_MRUWIDTH</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Most Recently Used Dynamic Width.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Ignores <ph id="ph1">`nLength`</ph> parameter and uses the remembered most recently used width.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Horizontal Docked Dimensions.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Ignores <ph id="ph1">`nLength`</ph> parameter and returns the dynamic size with the largest width.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Vertical Docked Dimensions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Ignores <ph id="ph1">`nLength`</ph> parameter and returns the dynamic size with the largest height.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Set if <ph id="ph1">`nLength`</ph> indicates height (Y-direction) instead of width.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Resets <bpt id="p1">**</bpt>LM_MRUWIDTH<ept id="p1">**</ept> to current width of floating control bar.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The control bar size, in pixels, of a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Override this member function to provide your own dynamic layout in classes you derive from <ph id="ph1">`CControlBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>MFC classes derived from <ph id="ph1">`CControlBar`</ph>, such as <bpt id="p1">[</bpt>CToolbar<ept id="p1">](../../mfc/reference/ctoolbar-class.md)</ept>, override this member function and provide their own implementation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Call this member function to calculate the horizontal size of a control bar.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Indicates whether the bar should be stretched to the size of the frame.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bStretch`</ph> parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Indicates that the bar is horizontally or vertically oriented.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The control bar size, in pixels, of a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Control bars such as toolbars can stretch horizontally or vertically to accommodate the buttons contained in the control bar.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bStretch`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, stretch the dimension along the orientation provided by <ph id="ph2">`bHorz`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In other words, if <ph id="ph1">`bHorz`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the control bar is stretched vertically.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bStretch`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, no stretch occurs.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following table shows the possible permutations, and resulting control-bar styles, of <ph id="ph1">`bStretch`</ph> and <ph id="ph2">`bHorz`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>bStretch</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>bHorz</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Stretching</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Orientation</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Docking/Not docking</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Horizontal stretching</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Horizontally oriented</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Not docking</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Vertical stretching</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Vertically oriented</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Not docking</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>No stretching available</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Horizontally oriented</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Docking</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>No stretching available</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Vertically oriented</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Docking</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CControlBar::CalcInsideRect</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The framework calls this function to calculate the client area of the control bar.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Contains the current dimensions of the control bar; including the borders.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Indicates that the bar is horizontally or vertically oriented.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This function is called before the control bar is painted.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Override this function to customize the rendering of the borders and gripper bar of the control bar.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CControlBar::CControlBar</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CControlBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CControlBar::DoPaint</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Called by the framework to render the borders and gripper bar of the control bar.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Points to the device context to be used for rendering the borders and gripper of the control bar.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Override this function to customize the drawing behavior of the control bar.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Another customization method is to override the <ph id="ph1">`DrawBorders`</ph> and <ph id="ph2">`DrawGripper`</ph> functions and add custom drawing code for the borders and gripper.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Because these methods are called by the default <ph id="ph1">`DoPaint`</ph> method, an override of <ph id="ph2">`DoPaint`</ph> is not needed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CControlBar::DrawBorders</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Called by the framework to render the borders of the control bar.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Points to the device context to be used for rendering the borders of the control bar.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object containing the dimensions of the control bar.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Override this function to customize the appearance of the control bar borders.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CControlBar::DrawGripper</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Called by the framework to render the gripper of the control bar.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Points to the device context to be used for rendering the control bar gripper.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object containing the dimensions of the control bar gripper.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Override this function to customize the appearance of the control bar gripper.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CControlBar::EnableDocking</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Call this function to enable a control bar to be docked.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Specifies whether the control bar supports docking and the sides of its parent window to which the control bar can be docked, if supported.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Can be one or more of the following:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Allows docking at the top of the client area.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Allows docking at the bottom of the client area.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Allows docking on the left side of the client area.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Allows docking on the right side of the client area.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Allows docking on any side of the client area.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Allows multiple control bars to be floated in a single mini-frame window.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If 0 (that is, indicating no flags), the control bar will not dock.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The sides specified must match one of the sides enabled for docking in the destination frame window, or the control bar cannot be docked to that frame window.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CControlBar::GetBarStyle</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Call this function to determine which <bpt id="p1">**</bpt>CBRS_<ept id="p1">**</ept> (control bar styles) settings are currently set for the control bar.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">**</bpt>CBRS_<ept id="p1">**</ept> (control bar styles) settings for the control bar.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CControlBar::SetBarStyle<ept id="p1">](#ccontrolbar__setbarstyle)</ept> for the complete list of available styles.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Does not handle <bpt id="p1">**</bpt>WS_<ept id="p1">**</ept> (window style) styles.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CControlBar::GetBorders</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns the current border values for the control bar.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that contains the current width (in pixels) of each side of the control bar object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For example, the value of the <ph id="ph1">`left`</ph> member, of <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object, is the width of the left hand border.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CControlBar::GetCount</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Returns the number of non- <ph id="ph1">`HWND`</ph> items on the <ph id="ph2">`CControlBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The number of non- <ph id="ph1">`HWND`</ph> items on the <ph id="ph2">`CControlBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This function returns 0 for a <bpt id="p1">[</bpt>CDialogBar<ept id="p1">](../../mfc/reference/cdialogbar-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The type of the item depends on the derived object: panes for <bpt id="p1">[</bpt>CStatusBar<ept id="p1">](../../mfc/reference/cstatusbar-class.md)</ept> objects, and buttons and separators for <bpt id="p2">[</bpt>CToolBar<ept id="p2">](../../mfc/reference/ctoolbar-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>CControlBar::GetDockingFrame</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a pointer to the current frame window to which your control bar is docked.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If the control bar is not docked to a frame window (that is, if the control bar is floating), this function will return a pointer to its parent <bpt id="p1">[</bpt>CMiniFrameWnd<ept id="p1">](../../mfc/reference/cminiframewnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For more information about dockable control bars, see <bpt id="p1">[</bpt>CControlBar::EnableDocking<ept id="p1">](#ccontrolbar__enabledocking)</ept> and <bpt id="p2">[</bpt>CFrameWnd::DockControlBar<ept id="p2">](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CControlBar::IsFloating</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the control bar is floating or docked.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Nonzero if the control bar is floating; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>To change the state of a control bar from docked to floating, call <bpt id="p1">[</bpt>CFrameWnd::FloatControlBar<ept id="p1">](../../mfc/reference/cframewnd-class.md#cframewnd__floatcontrolbar)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CControlBar::m_bAutoDelete</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If nonzero, the <ph id="ph1">`CControlBar`</ph> object is deleted when the Windows control bar is destroyed.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A control-bar object is usually embedded in a frame-window object.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`m_bAutoDelete`</ph> is 0 because the embedded control-bar object is destroyed when the frame window is destroyed.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Set this variable to a nonzero value if you allocate a <ph id="ph1">`CControlBar`</ph> object on the heap and you do not plan to call <bpt id="p1">**</bpt>delete<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>CControlBar::m_pInPlaceOwner</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The in-place owner of the control bar.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CControlBar::OnUpdateCmdUI</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to update the status of the toolbar or status bar.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Points to the main frame window of the application.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This pointer is used for routing update messages.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether a control that has no update handler should be automatically displayed as disabled.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To update an individual button or pane, use the <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> macro in your message map to set an update handler appropriately.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ON_UPDATE_COMMAND_UI<ept id="p1">](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4)</ept> for more information about using this macro.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>is called by the framework when the application is idle.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The frame window to be updated must be a child window, at least indirectly, of a visible frame window.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>is an advanced overridable.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>CControlBar::SetBarStyle</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Call this function to set the desired <bpt id="p1">**</bpt>CBRS_<ept id="p1">**</ept> styles for the control bar.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The desired styles for the control bar.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Can be one or more of the following:</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Allows the control bar to be docked to the top of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Allows the control bar to be docked to the bottom of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Allows the control bar to be docked to the left side of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Allows the control bar to be docked to the right side of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Allows the control bar to be docked to any side of the client area of a frame window.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Causes a border to be drawn on the top edge of the control bar when it would be visible.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Causes a border to be drawn on the bottom edge of the control bar when it would be visible.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Causes a border to be drawn on the left edge of the control bar when it would be visible.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Causes a border to be drawn on the right edge of the control bar when it would be visible.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Allows multiple control bars to be floated in a single mini-frame window.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Causes tool tips to be displayed for the control bar.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Causes message text to be updated at the same time as tool tips.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CBRS_GRIPPER<ept id="p1">**</ept> Causes a gripper, similar to that used on bands in a <bpt id="p2">**</bpt>CReBar<ept id="p2">**</ept> object, to be drawn for any <ph id="ph1">`CControlBar`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Does not affect the <bpt id="p1">**</bpt>WS_<ept id="p1">**</ept> (window style) settings.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>CControlBar::SetBorders</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Call this function to set the size of the control bar's borders.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>cxLeft</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The width (in pixels) of the control bar's left border.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>cyTop</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The height (in pixels) of the control bar's top border.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>cxRight</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The width (in pixels) of the control bar's right border.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>cyBottom</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The height (in pixels) of the control bar's bottom border.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the current width (in pixels)of each border of the control bar object.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The following code example sets the top and bottom borders of the control bar to 5 pixels, and the left and right borders to 2 pixels:</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>NVC_MFCControlLadenDialog#61</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CControlBar::SetInPlaceOwner</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Changes the in-place owner of a control bar.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>MFC Sample CTRLBARS</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>CToolBar Class</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>CDialogBar Class</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CStatusBar Class</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>CReBar Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>