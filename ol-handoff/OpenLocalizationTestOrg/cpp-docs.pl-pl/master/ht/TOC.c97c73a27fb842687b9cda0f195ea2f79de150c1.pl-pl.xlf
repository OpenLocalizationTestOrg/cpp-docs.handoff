<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d631c1fda91b195626bc33538b70e7cd48d834f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\TOC.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a58ef64931c0ef2c87266e0f254e42ce634ec6a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f63871c5cc22230f7b5027285c3907741c769aa8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Overview of File Translation</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Character Sets2</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Tokens (C++)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Comments (C++)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Identifiers (C++)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Keywords (C++)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>auto Keyword</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Punctuators (C++)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Numeric, Boolean and Pointer Literals  (C++)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>String and Character Literals  (C++)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>User-Defined Literals  (C++)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Basic Concepts  (C++)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declarations and Definitions (C++)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overview of Declarators</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifiers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Point of declaration in C++</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializers</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Aliases and typedefs (C++)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>using Declaration</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Resolving ambiguous declarations (C++)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Storage classes (C++)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>const (C++)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>constexpr (C++)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>volatile (C++)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>auto (C++)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>decltype  (C++)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attributes2</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Scope (Visual C++)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Program and Linkage  (C++)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Types of Linkage</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Linkage in Names with File Scope</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Linkage in Names with Class Scope</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Linkage in Names with Block Scope</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Names with No Linkage</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using extern to Specify Linkage</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Startup and Termination (C++)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>main: Program Startup</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using wmain Instead of main</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Argument Definitions</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Wildcard Expansion</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parsing C++ Command-Line Arguments</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Customizing C++ Command-Line Processing</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>main Function Restrictions</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Program Termination</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>exit Function</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>abort Function</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>return Statement in Program Termination (C++)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Additional Startup Considerations</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Additional Termination Considerations</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using exit or return</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using atexit</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Using abort</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Lvalues and Rvalues (Visual C++)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Temporary Objects</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Alignment (C++ Declarations)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>alignof and alignas (C++)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Trivial, standard-layout, and POD types</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Fundamental Types  (C++)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Data Type Ranges</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>void (C++)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>bool (C++)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>false (C++)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>true (C++)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>char, wchar_t, char16_t, char32_t</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>__int8, __int16, __int32, __int64</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>__m64</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>__m128</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>__m128d</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>__m128i</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>__ptr32, __ptr64</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Numerical Limits (C++)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Integer Limits</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Floating Limits</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Standard Conversions</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>__alignof Operator</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>__uuidof Operator</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Additive Operators: + and -</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Address-of Operator: &amp;</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Bitwise AND Operator: &amp;</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Bitwise Exclusive OR Operator: ^</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Bitwise Inclusive OR Operator: |</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Cast Operator: ()</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Comma Operator: ,</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Conditional Operator: ?</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>delete Operator (C++)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Equality Operators: == and !=</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Explicit Type Conversion Operator: ()</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Function Call Operator: ()</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Indirection Operator: *</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Left Shift and Right Shift Operators (&gt;&gt; and &lt;&lt;)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Logical AND Operator: &amp;&amp;</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Logical Negation Operator: !</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Logical OR Operator: ||</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Member Access Operators: .</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>and -&gt;</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Multiplicative Operators and the Modulus Operator</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>new Operator (C++)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>One's Complement Operator: ~</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Pointer-to-Member Operators: .<bpt id="p1">*</bpt> and -&gt;<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Postfix Increment and Decrement Operators: ++ and --</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Prefix Increment and Decrement Operators: ++ and --</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Relational Operators: &lt;, &gt;, &lt;=, and &gt;=</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Scope Resolution Operator: ::</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>sizeof Operator</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Subscript Operator:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>typeid Operator</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Unary Plus and Negation Operators: + and -</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Expressions (C++)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Types of Expressions</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Primary Expressions</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Ellipses and Variadic Templates</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Postfix Expressions</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Expressions with Binary Operators</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>C++ Constant Expressions</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Semantics of Expressions</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Casting</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Casting Operators</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>dynamic_cast Operator</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>bad_cast Exception</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>static_cast Operator</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>const_cast Operator</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>reinterpret_cast Operator</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Run-Time Type Information</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>bad_typeid Exception</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>type_info Class</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Statements (C++)</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Overview of C++ Statements</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Labeled Statements</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Expression Statement</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Null Statement</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Compound Statements (Blocks)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Selection Statements (C++)</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>if-else Statement (C++)</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>__if_exists Statement</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>__if_not_exists Statement</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>switch Statement (C++)</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Iteration Statements (C++)</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>do-while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>for Statement (C++)</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Range-based for Statement (C++)</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Jump Statements (C++)</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>break Statement (C++)</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>continue Statement (C++)</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>return Statement (C++)</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>goto Statement (C++)</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Transfers of Control</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Namespaces (C++)</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Enumerations (C++)</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Unions</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Functions (C++)</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Functions with Variable Argument Lists  (C++)</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Function Overloading</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Explicitly Defaulted and Deleted Functions</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Argument-Dependent Name (Koenig) Lookup on Functions</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Default Arguments</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Inline Functions (C++)</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Operator Overloading</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>General Rules for Operator Overloading</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Overloading Unary Operators</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Increment and Decrement Operator Overloading (C++)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Binary Operators</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Assignment</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Function Call (C++)</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Subscripting</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Member Access</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Classes and Structs (C++)</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>class (C++)</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>struct (C++)</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Class Member Overview</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Member Access Control (C++)</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>friend (C++)</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>private (C++)</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>protected (C++)</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>public (C++)</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Initializing classes and structs without constructors (C++)</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Constructors (C++)</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Copy Constructors and Copy Assignment Operators (C++)</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Move Constructors and Move Assignment Operators (C++)</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Destructors (C++)</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Overview of Member Functions</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>virtual Specifier</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>override Specifier</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>final Specifier</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Inheritance  (C++)</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Virtual Functions</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Single Inheritance</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Base Classes</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Multiple Base Classes</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Explicit Overrides (C++)</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Abstract Classes (C++)</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Summary of Scope Rules</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Inheritance Keywords</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>virtual (C++)</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>__super</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>__interface</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Static Members (C++)</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>User-Defined Type Conversions (C++)</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Mutable Data Members (C++)</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Nested Class Declarations</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Anonymous Class Types</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Pointers to Members</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>this Pointer</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C++ Bit Fields</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Lambda Expressions in C++</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Examples of Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Arrays (C++)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Using Arrays (C++)</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Initializing Arrays</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Arrays in Expressions</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Interpretation of Subscript Operator</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Indirection on Array Types</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Ordering of C++ Arrays</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>References (C++)</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator: &amp;</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Rvalue Reference Declarator: &amp;&amp;</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Reference-Type Function Arguments</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Reference-Type Function Returns</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>References to Pointers</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Pointers (C++)</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>const and volatile Pointers</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>new and delete Operators</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Exception Handling in Visual C++</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>try, throw, and catch Statements (C++)</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>How Catch Blocks are Evaluated (C++)</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Exceptions and Stack Unwinding in C++</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Exception Specifications (throw) (C++)</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>noexcept (C++)</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Unhandled C++ Exceptions</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Mixing C (Structured) and C++ Exceptions</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Using setjmp-longjmp</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Exception Handling Differences</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Structured Exception Handling (C-C++)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Writing an Exception Handler</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>try-except Statement</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Writing an Exception Filter</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Raising Software Exceptions</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Hardware Exceptions</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Restrictions on Exception Handlers</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Writing a Termination Handler</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>try-finally Statement</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Cleaning up Resources</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Timing of Exception Handling: A Summary</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Restrictions on Termination Handlers</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Using Structured Exception Handling with C++</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Transporting Exceptions Between Threads</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Assertion and User-Supplied Messages (C++)</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>static_assert</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Templates (C++)</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>typename</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Class Templates</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Template Friends</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Function Templates</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Function Template Instantiation</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Explicit Instantiation</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Explicit Specialization of Function Templates</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Partial Ordering of Function Templates (C++)</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Member Function Templates</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Template Specialization (C++)</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Templates and Name Resolution</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Name Resolution for Dependent Types</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Name Resolution for Locally Declared Names</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Overload Resolution of Function Template Calls</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Source code organization (C++ Templates)</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Event Handling</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>__event</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>__hook</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>__raise</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>__unhook</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Event Handling in Native C++</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Event Handling in COM</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Microsoft-Specific Modifiers</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Based Addressing</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>__based Grammar</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Based Pointers (C++)</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Calling Conventions</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Argument Passing and Naming Conventions</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>__cdecl</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>__clrcall</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>__stdcall</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>__fastcall</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>__thiscall</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>__vectorcall</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Calling Example: Function Prototype and Call</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Results of Calling Example</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Naked Function Calls</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Rules and Limitations for Naked Functions</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Considerations for Writing Prolog-Epilog Code</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Floating Point Coprocessor and Calling Conventions</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Obsolete Calling Conventions</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>restrict (C++ AMP)</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>tile_static Keyword</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>align (C++)</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>allocate</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>appdomain</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>code_seg (__declspec)</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>deprecated (C++)</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>dllexport, dllimport</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Definitions and Declarations (C++)</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Defining Inline C++ Functions with dllexport and dllimport</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>General Rules and Limitations</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Using dllimport and dllexport in C++ Classes</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>jitintrinsic</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>naked (C++)</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>noalias</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>noinline</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>noreturn</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>nothrow (C++)</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>novtable</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>process</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>property (C++)</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>restrict</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>safebuffers</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>selectany</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>thread</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>uuid (C++)</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>__restrict</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>__sptr, __uptr</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>__unaligned</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>__w64</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>func</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Compiler COM Support</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Compiler COM Global Functions</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>_com_raise_error</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>ConvertStringToBSTR</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>ConvertBSTRToString</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>_set_com_error_handler</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Compiler COM Support Classes</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>_bstr_t Class</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>_bstr_t Member Functions</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>_bstr_t::Assign</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>_bstr_t::Attach</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>_bstr_t::_bstr_t</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>_bstr_t::copy</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>_bstr_t::Detach</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>_bstr_t::GetAddress</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>_bstr_t::GetBSTR</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>_bstr_t::length</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>_bstr_t Operators</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>_bstr_t::operator =</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>_bstr_t::operator +=, +</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>_bstr_t::operator !</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>_bstr_t Relational Operators</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>_bstr_t::wchar_t<bpt id="p1">*</bpt>, _bstr_t::char<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>_com_error Class</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>_com_error Member Functions</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>_com_error::_com_error</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>_com_error::Description</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>_com_error::Error</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>_com_error::ErrorInfo</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>_com_error::ErrorMessage</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>_com_error::GUID</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>_com_error::HelpContext</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>_com_error::HelpFile</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>_com_error::HRESULTToWCode</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>_com_error::Source</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>_com_error::WCode</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>_com_error::WCodeToHRESULT</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>_com_error Operators</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>_com_error::operator =</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Class</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Member Functions</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::_com_ptr_t</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::AddRef</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::Attach</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::CreateInstance</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::Detach</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::GetActiveObject</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::GetInterfacePtr</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::QueryInterface</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::Release</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Operators</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>_com_ptr_t::operator =</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Relational Operators</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Extractors</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Relational Function Templates</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>_variant_t Class</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>_variant_t Member Functions</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>_variant_t::_variant_t</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>_variant_t::Attach</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>_variant_t::Clear</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>_variant_t::ChangeType</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>_variant_t::Detach</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>_variant_t::SetString</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>_variant_t Operators</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>_variant_t::operator =</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>_variant_t Relational Operators</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>_variant_t Extractors</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Microsoft Extensions</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Nonstandard Behavior</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Compiler Limits</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Welcome Back to C++ (Modern C++)</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Support For C++11-14-17 Features (Modern C++)</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>C++ Type System (Modern C++)</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Value Types (Modern C++)</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Type Conversions and Type Safety (Modern C++)</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Uniform Initialization and Delegating Constructors</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Object Lifetime And Resource Management (Modern C++)</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Objects Own Resources (RAII)</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Smart Pointers (Modern C++)</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>How to: Create and Use unique_ptr Instances</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>How to: Create and Use shared_ptr Instances</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>How to: Create and Use weak_ptr Instances</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>How to: Create and Use CComPtr and CComQIPtr Instances</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Pimpl For Compile-Time Encapsulation (Modern C++)</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Containers (Modern C++)</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Algorithms (Modern C++)</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>String and I-O Formatting (Modern C++)</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Errors and Exception Handling (Modern C++)</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>How to: Design for Exception Safety</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>How to: Interface Between Exceptional and Non-Exceptional Code</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Portability At ABI Boundaries (Modern C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>