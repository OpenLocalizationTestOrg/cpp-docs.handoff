<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">264ad0bb55b7862c7c1a304f8b5f9cac3f88aefa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\predefined-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60619ac4da70a01bec02b0a2ef1ec4819d4d46b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab1a3c1f2053fdd4a3146c471735ff372e4212a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Predefined Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Predefined Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler predefines certain preprocessor macros, depending on the language (C or C++), the compilation target, and the chosen compiler options.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual C++ supports the required predefined preprocessor macros specified by the ANSI/ISO C99 standard and the ISO C++14 standard.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The implementation also supports several more Microsoft-specific preprocessor macros.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some macros are defined only for specific build environments or compiler options.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Unless noted, the macros are defined throughout a translation unit as if they were specified as <bpt id="p1">**</bpt>/D<ept id="p1">**</ept> compiler option arguments.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When defined, the macros are expanded to the specified values by the preprocessor before compilation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The predefined macros take no arguments and cannot be redefined.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Standard predefined identifier</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The compiler supports this predefined identifier specified by ISO C99 and ISO C++11.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__func<ph id="ph1">\_\_</ph><ept id="p1">**</ept> The unqualified and unadorned name of the enclosing function as a function-local <ph id="ph2">`static``const`</ph> array of <ph id="ph3">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Standard predefined macros</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The compiler supports these predefined macros specified by the ISO C99 and ISO C++14 standards.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__cplusplus<ept id="p1">**</ept> Defined as an integer literal value when the translation unit is compiled as C++.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__DATE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> The compilation date of the current source file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The date is a constant length string literal of the form <bpt id="p1">*</bpt>Mmm dd yyyy<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The month name <bpt id="p1">*</bpt>Mmm<ept id="p1">*</ept> is the same as the abbreviated month name in dates generated by the C Runtime Library <bpt id="p2">[</bpt>asctime<ept id="p2">](../c-runtime-library/reference/asctime-wasctime.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first character of date <bpt id="p1">*</bpt>dd<ept id="p1">*</ept> is a space if the value is less than 10.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__FILE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> The name of the current source file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__FILE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> expands to a character string literal.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To ensure that the full path to the file is displayed, use <bpt id="p1">[</bpt>/FC (Full Path of Source Code File in Diagnostics)<ept id="p1">](../build/reference/fc-full-path-of-source-code-file-in-diagnostics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__LINE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as the integer line number in the current source file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">**</bpt>__LINE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> macro can be changed by using a <ph id="ph2">`#line`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__STDC<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 only when compiled as C and if the <bpt id="p2">[</bpt>/Za<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept> compiler option is specified.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__STDC_HOSTED<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 if the implementation is a <bpt id="p2">*</bpt>hosted implementation<ept id="p2">*</ept>, one that supports the entire required standard library.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise, defined as 0.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__STDCPP_THREADS<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 if and only if a program can have more than one thread of execution, and compiled as C++.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__TIME<ph id="ph1">\_\_</ph><ept id="p1">**</ept> The time of translation of the preprocessed translation unit.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The time is a character string literal of the form <bpt id="p1">*</bpt>hh:mm:ss<ept id="p1">*</ept>, the same as the time returned by the C Runtime Library <bpt id="p2">[</bpt>asctime<ept id="p2">](../c-runtime-library/reference/asctime-wasctime.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Microsoft-specific predefined macros</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Microsoft Visual C++ supports these additional predefined macros.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__ATOM<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/favor:ATOM<ept id="p2">](../build/reference/favor-optimize-for-architecture-specifics.md)</ept> compiler option is set and the compiler target is x86 or x64.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__AVX<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/arch:AVX<ept id="p2">](../build/reference/arch-x86.md)</ept> or <bpt id="p3">[</bpt>/arch:AVX2<ept id="p3">](../build/reference/arch-x86.md)</ept> compiler options are set and the compiler target is x86 or x64.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__AVX2<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/arch:AVX2<ept id="p2">](../build/reference/arch-x86.md)</ept> compiler option is set and the compiler target is x86 or x64.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CHAR_UNSIGNED<ept id="p1">**</ept> Defined as 1 if the default <ph id="ph1">`char`</ph> type is unsigned.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is set when the <bpt id="p1">[</bpt>/J (Default char Type Is unsigned)<ept id="p1">](../build/reference/j-default-char-type-is-unsigned.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__CLR_VER<ept id="p1">**</ept> Defined as an integer literal that represents the version of the common language runtime used when the application was compiled.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The value is encoded in the form <ph id="ph1">`Mmmbbbbb`</ph>, where <ph id="ph2">`M`</ph> is the major version of the runtime, <ph id="ph3">`mm`</ph> is the minor version of the runtime, and <ph id="ph4">`bbbbb`</ph> is the build number.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__CLR_VER<ept id="p1">**</ept> is defined if the <bpt id="p2">[</bpt>/clr<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CONTROL_FLOW_GUARD<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/guard:cf (Enable Control Flow Guard)<ept id="p2">](../build/reference/guard-enable-control-flow-guard.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__COUNTER<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Expands to an integer literal that starts at 0 and is incremented by 1 every time it is used in a source file or included headers of the source file.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__COUNTER<ph id="ph1">\_\_</ph><ept id="p1">**</ept> remembers its state when you use precompiled headers.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">`__COUNTER__`</ph> to assign unique identifiers to three different objects of the same type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`exampleClass`</ph> constructor takes an integer as a parameter.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`main`</ph>, the application declares three objects of type <ph id="ph2">`exampleClass`</ph>, using <ph id="ph3">`__COUNTER__`</ph> as the unique identifier parameter:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__cplusplus_cli<ept id="p1">**</ept> Defined as the integer literal value 200406 when compiled as C++ and the <bpt id="p2">[</bpt>/clr<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, <bpt id="p3">[</bpt>/clr:pure<ept id="p3">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, or <bpt id="p4">[</bpt>/clr:safe<ept id="p4">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When defined, <bpt id="p1">**</bpt>__cplusplus_cli<ept id="p1">**</ept> is in effect throughout the translation unit.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__cplusplus_winrt<ept id="p1">**</ept> Defined as the integer literal value 201009 when compiled as C++ and the <bpt id="p2">[</bpt>/ZW (Windows Runtime Compilation)<ept id="p2">](../build/reference/zw-windows-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CPPRTTI<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/GR (Enable Run-Time Type Information)<ept id="p2">](../build/reference/gr-enable-run-time-type-information.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CPPUNWIND<ept id="p1">**</ept> Defined as 1 if one or more of the <bpt id="p2">[</bpt>/GX (Enable Exception Handling)<ept id="p2">](../build/reference/gx-enable-exception-handling.md)</ept>, <bpt id="p3">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p3">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, or <bpt id="p4">[</bpt>/EH (Exception Handling Model)<ept id="p4">](../build/reference/eh-exception-handling-model.md)</ept> compiler options are set.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_DEBUG<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/LDd<ept id="p2">](../build/reference/md-mt-ld-use-run-time-library.md)</ept>, <bpt id="p3">[</bpt>/MDd<ept id="p3">](../build/reference/md-mt-ld-use-run-time-library.md)</ept>, or <bpt id="p4">[</bpt>/MTd<ept id="p4">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_DLL<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/MD<ept id="p2">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> or <bpt id="p3">[</bpt>/MDd<ept id="p3">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> (Multithreaded DLL) compiler option is set.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__FUNCDNAME<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as a string literal that contains the <bpt id="p2">[</bpt>decorated name<ept id="p2">](../build/reference/decorated-names.md)</ept> of the enclosing function.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The macro is defined only within a function.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>__FUNCDNAME<ph id="ph1">\_\_</ph><ept id="p1">**</ept> macro is not expanded if you use the <bpt id="p2">[</bpt>/EP<ept id="p2">](../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)</ept> or <bpt id="p3">[</bpt>/P<ept id="p3">](../build/reference/p-preprocess-to-a-file.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`__FUNCDNAME__`</ph>, <ph id="ph2">`__FUNCSIG__`</ph>, and <ph id="ph3">`__FUNCTION__`</ph> macros to display function information.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>NVC_Predefined_Macros_Examples#1</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__FUNCSIG<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as a string literal that contains the signature of the enclosing function.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The macro is defined only within a function.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>__FUNCSIG<ph id="ph1">\_\_</ph><ept id="p1">**</ept> macro is not expanded if you use the <bpt id="p2">[</bpt>/EP<ept id="p2">](../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)</ept> or <bpt id="p3">[</bpt>/P<ept id="p3">](../build/reference/p-preprocess-to-a-file.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When compiled for a 64-bit target, the calling convention is <ph id="ph1">`__cdecl`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For an example of usage, see the <ph id="ph1">`__FUNCDNAME__`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__FUNCTION<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as a string literal that contains the undecorated name of the enclosing function.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The macro is defined only within a function.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>__FUNCTION<ph id="ph1">\_\_</ph><ept id="p1">**</ept> macro is not expanded if you use the <bpt id="p2">[</bpt>/EP<ept id="p2">](../build/reference/ep-preprocess-to-stdout-without-hash-line-directives.md)</ept> or <bpt id="p3">[</bpt>/P<ept id="p3">](../build/reference/p-preprocess-to-a-file.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For an example of usage, see the <ph id="ph1">`__FUNCDNAME__`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_INTEGRAL_MAX_BITS<ept id="p1">**</ept> Defined as the integer literal value 64, the maximum size (in bits) for a non-vector integral type.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__INTELLISENSE<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as 1 during an IntelliSense compiler pass in the Visual Studio IDE.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can use this macro to guard code the IntelliSense compiler does not understand, or use it to toggle between the build and IntelliSense compiler.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Troubleshooting Tips for IntelliSense Slowness<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2011/03/29/troubleshooting-tips-for-intellisense-slowness/)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_ISO_VOLATILE<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/volatile:iso<ept id="p2">](../build/reference/volatile-volatile-keyword-interpretation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_KERNEL_MODE<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/kernel (Create Kernel Mode Binary)<ept id="p2">](../build/reference/kernel-create-kernel-mode-binary.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_AMD64<ept id="p1">**</ept> Defined as the integer literal value 100 for compilations that target x64 processors.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_ARM<ept id="p1">**</ept> Defined as the integer literal value 7 for compilations that target ARM processors.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_ARM_ARMV7VE<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/arch:ARMv7VE<ept id="p2">](../build/reference/arch-arm.md)</ept> compiler option is set for compilations that target ARM processors.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_ARM_FP<ept id="p1">**</ept> Defined as an integer literal value that indicates which <bpt id="p2">[</bpt>/arch<ept id="p2">](../build/reference/arch-arm.md)</ept> compiler option was set, if the compilation target is an ARM processor.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In the range 30-39 if no <bpt id="p1">**</bpt>/arch<ept id="p1">**</ept> ARM option was specified, indicating the default architecture for ARM was set (<ph id="ph1">`VFPv3`</ph>).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In the range 40-49 if <bpt id="p1">**</bpt>/arch:VFPv4<ept id="p1">**</ept> was set.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>/arch (ARM)<ept id="p1">](../build/reference/arch-arm.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_ARM64<ept id="p1">**</ept> Defined as 1 for compilations that target 64-bit ARM processors.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_CEE<ept id="p1">**</ept> Defined as 001 if any <bpt id="p2">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_CEE_PURE<ept id="p1">**</ept> Defined as 001 if the <bpt id="p2">[</bpt>/clr:pure<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_CEE_SAFE<ept id="p1">**</ept> Defined as 001 if the <bpt id="p2">[</bpt>/clr:safe<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_FP_EXCEPT<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/fp:except<ept id="p2">](../build/reference/fp-specify-floating-point-behavior.md)</ept> or <bpt id="p3">[</bpt>/fp:strict<ept id="p3">](../build/reference/fp-specify-floating-point-behavior.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_FP_FAST<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/fp:fast<ept id="p2">](../build/reference/fp-specify-floating-point-behavior.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_FP_PRECISE<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/fp:precise<ept id="p2">](../build/reference/fp-specify-floating-point-behavior.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_FP_STRICT<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/fp:strict<ept id="p2">](../build/reference/fp-specify-floating-point-behavior.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_IX86<ept id="p1">**</ept> Defined as the integer literal value 600 for compilations that target x86 processors.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This macro is not defined for x64 or ARM compilation targets.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_IX86_FP<ept id="p1">**</ept> Defined as an integer literal value that indicates the <bpt id="p2">[</bpt>/arch<ept id="p2">](../build/reference/arch-arm.md)</ept> compiler option that was set, or the default.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This macro is always defined when the compilation target is an x86 processor.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When defined, the value is:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>0 if the <bpt id="p1">**</bpt>/arch:IA32<ept id="p1">**</ept> compiler option was set.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>1 if the <bpt id="p1">**</bpt>/arch:SSE<ept id="p1">**</ept> compiler option was set.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>2 if the <bpt id="p1">**</bpt>/arch:SSE2<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/arch:AVX<ept id="p2">**</ept> or <bpt id="p3">**</bpt>/arch:AVX2<ept id="p3">**</ept> compiler option was set.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This value is the default if an <bpt id="p1">**</bpt>/arch<ept id="p1">**</ept> compiler option was not specified.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/arch:AVX<ept id="p1">**</ept> is specified, the macro <bpt id="p2">**</bpt>__AVX<ph id="ph1">\_\_</ph><ept id="p2">**</ept> is also defined.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/arch:AVX2<ept id="p1">**</ept> is specified, both <bpt id="p2">**</bpt>__AVX<ph id="ph1">\_\_</ph><ept id="p2">**</ept> and <bpt id="p3">**</bpt>__AVX2<ph id="ph2">\_\_</ph><ept id="p3">**</ept> are also defined.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>/arch (x86)<ept id="p1">](../build/reference/arch-x86.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_M_X64<ept id="p1">**</ept> Defined as the integer literal value 100 for compilations that target x64 processors.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MANAGED<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/clr<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MSC_BUILD<ept id="p1">**</ept> Defined as an integer literal that contains the revision number element of the compiler's version number.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The revision number is the fourth element of the period-delimited version number.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For example, if the version number of the Visual C++ compiler is 15.00.20706.01, the <bpt id="p1">**</bpt>_MSC_BUILD<ept id="p1">**</ept> macro evaluates to 1.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MSC_EXTENSIONS<ept id="p1">**</ept> Defined as 1 if the <bpt id="p2">[</bpt>/Ze (Enable Language Extensions)<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept> compiler option is set, which is the default.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MSC_FULL_VER<ept id="p1">**</ept> Defined as an integer literal that encodes the major, minor, and build number elements of the compiler's version number.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The major number is the first element of the period-delimited version number, the minor number is the second element, and the build number is the third element.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, if the version number of the Visual C++ compiler is 15.00.20706.01, the <bpt id="p1">**</bpt>_MSC_FULL_VER<ept id="p1">**</ept> macro evaluates to 150020706.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Enter <bpt id="p1">**</bpt>cl /?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>at the command line to view the compiler's version number.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MSC_VER<ept id="p1">**</ept> Defined as an integer literal that encodes the major and minor number elements of the compiler's version number.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The major number is the first element of the period-delimited version number and the minor number is the second element.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example, if the version number of the Visual C++ compiler is 17.00.51106.1, the <bpt id="p1">**</bpt>_MSC_VER<ept id="p1">**</ept> macro evaluates to 1700.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Enter <bpt id="p1">**</bpt>cl /?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>at the command line to view the compiler's version number.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MSVC_LANG<ept id="p1">**</ept> Defined as an integer literal that specifies the C++ language standard targeted by the compiler.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When compiled as C++, the macro is the integer literal value 201402 if the <bpt id="p1">[</bpt>/std:c++14<ept id="p1">](../build/reference/std-specify-language-standard-version.md)</ept> compiler option is set, or by default, and it is set to a higher, unspecified value when the <bpt id="p2">[</bpt>/std:c++latest<ept id="p2">](../build/reference/std-specify-language-standard-version.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Otherwise, the macro is undefined.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>_MSVC_LANG<ept id="p1">**</ept> macro and <bpt id="p2">[</bpt>/std (Specify Language Standard Version)<ept id="p2">](../build/reference/std-specify-language-standard-version.md)</ept> compiler options are available beginning in Visual Studio 2015 Update 3.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__MSVC_RUNTIME_CHECKS<ept id="p1">**</ept> Defined as 1 when one of the <bpt id="p2">[</bpt>/RTC<ept id="p2">](../build/reference/rtc-run-time-error-checks.md)</ept> compiler options is set.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MT<ept id="p1">**</ept> Defined as 1 when <bpt id="p2">[</bpt>/MD or /MDd<ept id="p2">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> (Multithreaded DLL) or <bpt id="p3">[</bpt>/MT or /MTd<ept id="p3">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> (Multithreaded) is specified.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_NATIVE_WCHAR_T_DEFINED<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/Zc:wchar_t<ept id="p2">](../build/reference/zc-wchar-t-wchar-t-is-native-type.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_OPENMP<ept id="p1">**</ept> Defined as integer literal 200203, representing the date of the OpenMP specification implemented by Visual C++, if the <bpt id="p2">[</bpt>/openmp (Enable OpenMP 2.0 Support)<ept id="p2">](../build/reference/openmp-enable-openmp-2-0-support.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_PREFAST<ph id="ph1">\_</ph><ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/analyze<ept id="p2">](../build/reference/analyze-code-analysis.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__TIMESTAMP<ph id="ph1">\_\_</ph><ept id="p1">**</ept> Defined as a string literal that contains the date and time of the last modification of the current source file, in the abbreviated, constant length form returned by the C Runtime Library <bpt id="p2">[</bpt>asctime<ept id="p2">](../c-runtime-library/reference/asctime-wasctime.md)</ept> function, for example, <ph id="ph2">`Fri 19 Aug 13:32:58 2016`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This macro is always defined.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_VC_NODEFAULTLIB<ept id="p1">**</ept> Defined as 1 when the <bpt id="p2">[</bpt>/Zl (Omit Default Library Name)<ept id="p2">](../build/reference/zl-omit-default-library-name.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_WCHAR_T_DEFINED<ept id="p1">**</ept> Defined as 1 when the default <bpt id="p2">[</bpt>/Zc:wchar_t<ept id="p2">](../build/reference/zc-wchar-t-wchar-t-is-native-type.md)</ept> compiler option is set.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>_WCHAR_T_DEFINED<ept id="p1">**</ept> macro is defined but has no value if the <bpt id="p2">**</bpt>/Zc:wchar_t-<ept id="p2">**</ept> compiler option is set, and <ph id="ph1">`wchar_t`</ph> is defined in a system header file included in your project.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_WIN32<ept id="p1">**</ept> Defined as 1 when the compilation target is 32-bit ARM, 64-bit ARM, x86, or x64.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_WIN64<ept id="p1">**</ept> Defined as 1 when the compilation target is 64-bit ARM or x64.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_WINRT_DLL<ept id="p1">**</ept> Defined as 1 when compiled as C++ and both <bpt id="p2">[</bpt>/ZW (Windows Runtime Compilation)<ept id="p2">](../build/reference/zw-windows-runtime-compilation.md)</ept> and <bpt id="p3">[</bpt>/LD or /LDd<ept id="p3">](../build/reference/md-mt-ld-use-run-time-library.md)</ept> compiler options are set.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Otherwise, undefined.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Preprocessor macros used to determine the ATL or MFC library version are not predefined by the compiler.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>These macros are defined in the headers for the library, so they are undefined in preprocessor directives before the required header is included.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_ATL_VER<ept id="p1">**</ept> Defined in <ph id="ph1">\&lt;</ph>atldef.h&gt; as an integer literal that encodes the ATL version number.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_MFC_VER<ept id="p1">**</ept> Defined in <ph id="ph1">\&lt;</ph>afxver_.h&gt; as an integer literal that encodes the MFC version number.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Macros (C/C++)</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Preprocessor Operators</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Preprocessor Directives</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>