<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c37ccad6ce2ef550a8ea8cee93be8d7028f76f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\friend-assemblies-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b335d50c3c1282a8a06b7cac02f165044dc0097</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">456716946f96571fcaf512017e42b191d89c3bed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Friend Assemblies (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Friend Assemblies (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For applicable runtimes, the <bpt id="p1">*</bpt>friend assemblies<ept id="p1">*</ept> language feature makes types that are at namespace scope or global scope in an assembly component accessible to one or more client assemblies or .netmodules.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(This language feature is not supported in all runtimes.)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(This language feature is not supported in the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To make types at namespace scope or global scope in an assembly component accessible to a client assembly or .netmodule</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the component, specify an assembly attribute &lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;, and pass the name of the client assembly or .netmodule that will access types at namespace scope or global scope in the component.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify multiple client assemblies or .netmodules by specifying additional attributes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the client assembly or .netmodule, when you reference the component assembly by using <ph id="ph1">`#using`</ph>, pass the <ph id="ph2">`as_friend`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you specify the <ph id="ph1">`as_friend`</ph> attribute for an assembly that does not specify <ph id="ph2">`InternalsVisibleToAttribute`</ph>, a runtime exception will be thrown if you try to access a type at namespace scope or global scope in the component.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A build error will result if the assembly that contains the &lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt; attribute does not have a strong name but the client assembly that uses the <ph id="ph1">`as_friend`</ph> attribute does.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Although types at namespace scope and global scope can be known to a client assembly or .netmodule, member accessibility is still in effect.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, you cannot access a private member.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Access to all types in an assembly must be explicitly granted.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, assembly C does not have access to all types in assembly A if assembly C references assembly B and assembly B has access to all types in assembly A.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For information about how to sign—that is, how to give a strong name to—an assembly that is built by using the Visual C++ compiler, see <bpt id="p1">[</bpt>Strong Name Assemblies (Assembly Signing) (C++/CLI)<ept id="p1">](../dotnet/strong-name-assemblies-assembly-signing-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As an alternative to using the friend assemblies feature, you can use &lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt; to restrict access to individual types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example defines a component that specifies a client assembly that has access to the types in the component.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next code example accesses a private type in the component.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The next code example defines a component but does not specify a client assembly that will have access to the types in the component.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Notice that the component is linked by using <bpt id="p1">**</bpt>/opt:noref<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This ensures that private types are emitted in the component's metadata, which is not required when the <ph id="ph1">`InternalsVisibleTo`</ph> attribute is present.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/OPT (Optimizations)<ept id="p1">](../build/reference/opt-optimizations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code example defines a client that tries to access a private type in a component that does not give access to its private types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because of the behavior of the runtime, if you want to catch the exception, you must attempt to access a private type in a helper function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The next code example shows how to create a strong-name component that specifies a client assembly that will have access to the types in the component.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Notice that the component must specify its public key.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We suggest that you run the following commands sequentially at a command prompt to create a key pair and get the public key:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>sn -d friend_assemblies.snk</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>sn -k friend_assemblies.snk</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>sn -i friend_assemblies.snk friend_assemblies.snk</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>sn -pc friend_assemblies.snk key.publickey</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>sn -tp key.publickey</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The next code example accesses a private type in the strong-name component.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>