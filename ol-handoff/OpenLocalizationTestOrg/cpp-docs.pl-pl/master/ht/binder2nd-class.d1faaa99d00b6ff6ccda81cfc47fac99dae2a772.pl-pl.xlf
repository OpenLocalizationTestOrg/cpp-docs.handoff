<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f19b476ae903c915d4231621c39a88bf70b08685</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\binder2nd-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df482c7656af793cee70a114ec9494b34dfdf446</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7537f841a779038eefeca18287692bb65879ca16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>binder2nd Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>binder2nd Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A template class providing a constructor that converts a binary function object into a unary function object by binding the second argument of the binary function to a specified value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The binary function object to be converted to a unary function object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The value to which the second argument of the binary function object is to be bound.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The value of the argument that the adapted binary object compares to the fixed value of the second argument.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The unary function object that results from binding the second argument of the binary function object to the value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The template class stores a copy of a binary function object _ <bpt id="p1">*</bpt>Func<ept id="p1">*</ept> in <bpt id="p2">**</bpt>op<ept id="p2">**</ept>, and a copy of <ph id="ph1">`right`</ph> in <bpt id="p3">**</bpt>value<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It defines its member function <ph id="ph1">`operator()`</ph> as returning <bpt id="p1">**</bpt>op<ept id="p1">**</ept>( <ph id="ph2">`left`</ph>, <bpt id="p2">**</bpt>value<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Func`</ph> is an object of type <bpt id="p1">**</bpt>Operation<ept id="p1">**</ept> and c is a constant, then <bpt id="p2">[</bpt>bind2nd<ept id="p2">](../standard-library/functional-functions.md#bind2nd_function)</ept> ( <ph id="ph2">`Func`</ph>, <ph id="ph3">`c`</ph> ) is equivalent to the <ph id="ph4">`binder2nd`</ph> class constructor <ph id="ph5">`binder2nd`\&lt;</ph> <bpt id="p3">**</bpt>Operation<ept id="p3">**</ept>&gt; ( <ph id="ph6">`Func`</ph>, <ph id="ph7">`c`</ph> ) and more convenient.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>functional&gt;</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>