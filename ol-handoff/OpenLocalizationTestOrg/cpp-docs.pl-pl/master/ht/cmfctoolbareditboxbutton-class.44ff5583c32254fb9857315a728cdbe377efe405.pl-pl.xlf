<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7833994ba60dcbf866cd022a86e461f73dff5c22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfctoolbareditboxbutton-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">146c5edcc298a2049bcbd327ec8ddb9b3a0be6ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0d86afef4301f77f7532ebd7e7bf73edbb032e8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A toolbar button that contains an edit control ( <bpt id="p1">[</bpt>CEdit Class<ept id="p1">](../../mfc/reference/cedit-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CanBeStretched</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can stretch the button during customization.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::CanBeStretched<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)</ept>.)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CopyFrom</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies the properties of another toolbar button to the current button.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::CopyFrom<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept>.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CreateEdit</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates a new edit control in the button.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Used by the framework to create a dynamic instance of this class type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetByCmd</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Retrieves the first <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetContentsAll</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Retrieves the text of the first edit box toolbar control that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetContextMenuID</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the resource ID of the shortcut menu that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetEditBorder</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the edit part of the edit box button.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetEditBox</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the edit control that is embedded in the button.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetHwnd</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the window handle that is associated with the toolbar button.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::GetHwnd<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd)</ept>.)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetInvalidateRect</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area of the button that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect)</ept>.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Used by the framework to obtain a pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::HaveHotBorder</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines whether a border of the button is displayed when a user clicks the button.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>.)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::IsFlatMode</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines whether edit box buttons have a flat style.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::NotifyCommand</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies whether the button processes the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::NotifyCommand<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)</ept>.)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnAddToCustomizePage</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is added to a <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)</ept>.)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Called by the framework to calculate the size of the button for the specified device context and docking state.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnChangeParentWnd</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is inserted into a new toolbar.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>.)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnClick</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user clicks the mouse button.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnClick<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnCtlColor</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_CTLCOLOR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnCtlColor<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)</ept>.)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button by using the specified styles and options.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnDraw<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw)</ept>.)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Called by the framework to draw the button in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> pane of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)</ept>.)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnGlobalFontsChanged</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Called by the framework when the global font has changed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)</ept>.)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnMove</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar moves.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnMove<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)</ept>.)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnShow</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button becomes visible or invisible.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnShow<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)</ept>.)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnSize</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnSize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnUpdateToolTip</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar updates its tooltip text.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)</ept>.)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Reads this object from an archive or writes it to an archive.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::Serialize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::SetACCData<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata)</ept>.)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContents</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Sets the text in the edit control of the button.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContentsAll</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Finds the edit control button that has a specified command ID, and sets the text in the edit control of that button.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContextMenuID</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of the shortcut menu that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetFlatMode</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies the flat style appearance of edit box buttons in the application.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetStyle</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies the style of the button.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBarButton::SetStyle<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setstyle)</ept>.)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To add an edit box button to a toolbar, follow these steps:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Reserve a dummy resource ID for the button in the parent toolbar resource.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the message handler that processes the <ph id="ph1">`AFX_WM_RESETTOOLBAR`</ph> message, replace the dummy button with the new combo box button by using <bpt id="p1">[</bpt>CMFCToolBar::ReplaceButton<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Putting Controls On Toolbars<ept id="p1">](../../mfc/walkthrough-putting-controls-on-toolbars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use various methods in the <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The example shows how to specify that a user can stretch the button during customization, specify that a border of the button is displayed when a user clicks the button, set the text in the text box control, specify the flat style appearance of edit box buttons in the application, and specify the style of a toolbar edit box control.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>NVC_MFC_RibbonApp#40</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CMFCToolBarButton</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtoolbareditboxbutton.h</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CanBeStretched</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can stretch the button during customization.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>By default, the framework does not allow the user to stretch a toolbar button during customization.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::CanBeStretched<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)</ept>) by allowing the user to stretch an edit box toolbar button during customization.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton<ept id="p1">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Specifies the control ID.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of a toolbar image.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The image is located in the <bpt id="p1">[</bpt>CMFCToolBarImages Class<ept id="p1">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object that <bpt id="p2">[</bpt>CMFCToolBar Class<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md)</ept> class maintains.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Specifies the edit control style.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Specifies the width in pixels of the edit control.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The default constructor sets the edit control style to the following combination:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The default width of the control is 150 pixels.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CopyFrom</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Copies the properties of another toolbar button to the current button.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A reference to the source button from which to copy.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call this method to copy another toolbar button to this toolbar button.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>must be of type <ph id="ph1">`CMFCToolBarEditBoxButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::CreateEdit</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Creates a new edit control in the button.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the parent window of the edit control.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>It must not be NULL.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifies the edit control's size and position.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A pointer to the newly created edit control; it is <ph id="ph1">`NULL`</ph> if the control's creation and attachment fail.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You construct a <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton<ept id="p1">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object in two steps.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>First call the constructor, and then call <ph id="ph1">`CreateEdit,`</ph> which creates the Windows edit control and attaches it to the <ph id="ph2">`CMFCToolBarEditBoxButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetByCmd</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Retrieves the first <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The command ID of the button to retrieve.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID, or <ph id="ph2">`NULL`</ph> if no such object exists.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This shared utility method is used by methods such as <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton::SetContentsAll<ept id="p1">](#cmfctoolbareditboxbutton__setcontentsall)</ept> and <bpt id="p2">[</bpt>CMFCToolBarEditBoxButton::GetContentsAll<ept id="p2">](#cmfctoolbareditboxbutton__getcontentsall)</ept> to set or get the text of the first edit box toolbar control that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetContentsAll</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Retrieves the text of the first edit box toolbar control that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The command ID of the button from which to retrieve contents.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the text of the first edit box toolbar control that has the specified command ID.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This method returns the empty string if no <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> objects have the specified command ID.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetContextMenuID</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Retrieves the resource ID of the shortcut menu that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The resource ID of the shortcut menu that is associated with the button or 0 if the button has no associated shortcut menu.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The framework uses the resource ID to create the shortcut menu when the user right-clicks on the button.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetEditBorder</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of the edit part of the edit box button.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`CRect`</ph> object that receives the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This method retrieves the bounding rectangle of the edit control in client coordinates.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>It expands the size of the rectangle in each direction by one pixel.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCVisualManager::OnDrawEditBorder<ept id="p1">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondraweditborder)</ept> method calls this method when it draws the border around a <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetEditBox</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>CEdit Class<ept id="p1">](../../mfc/reference/cedit-class.md)</ept> control that is embedded in the button.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CEdit Class<ept id="p1">](../../mfc/reference/cedit-class.md)</ept> control that the button contains.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`NULL`</ph> if the <ph id="ph2">`CEdit`</ph> control has not been created yet.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>You create the <ph id="ph1">`CEdit`</ph> control by calling <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton::CreateEdit<ept id="p1">](#cmfctoolbareditboxbutton__createedit)</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetHwnd</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Retrieves the window handle that is associated with the toolbar button.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The window handle that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This method overrides the <bpt id="p1">[</bpt>CMFCToolBarButton::GetHwnd<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd)</ept> method by returning the window handle of the edit control part of the edit box button.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::GetInvalidateRect</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Retrieves the region of the client area of the button that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object that specifies the region that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation, <bpt id="p1">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect)</ept>, by including in the region the area of the text label.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::HaveHotBorder</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Determines whether a border of the button is displayed when a user clicks the button.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Nonzero if a button displays its border when selected; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation, <bpt id="p1">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>, by returning a nonzero value if the control is visible.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::IsFlatMode</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Determines whether edit box buttons have a flat style.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Nonzero if the buttons have a flat style; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>By default, edit box buttons have a flat style.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton::SetFlatMode<ept id="p1">](#cmfctoolbareditboxbutton__setflatmode)</ept> method to change the flat style appearance for your application.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::NotifyCommand</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Specifies whether the button processes the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The notification message that is associated with the command.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>if the button processes the <ph id="ph1">`WM_COMMAND`</ph> message, or <ph id="ph2">`FALSE`</ph> to indicate that the message must be handled by the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it is about to send a <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the parent window.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::NotifyCommand<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)</ept>) by processing the <bpt id="p2">[</bpt>EN_UPDATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb761687)</ept> notification.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For each edit box with the same command ID as this object, it sets its text label to the text label of this object.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnAddToCustomizePage</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is added to a <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)</ept>) by copying the properties from the edit box control in any toolbar that has the same command ID as this object.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This method does nothing if no toolbar has an edit box control that has the same command ID as this object.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box, see <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id="p2">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnChangeParentWnd</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button is inserted into a new toolbar.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A pointer to the new parent window.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This method overrides the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>) by recreating the internal <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnClick</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user clicks the mouse button.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Nonzero if the button processes the click message; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This method overrides the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnClick<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>) by returning a nonzero value if the internal <ph id="ph1">`CEdit`</ph> object is visible.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnCtlColor</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar handles a <ph id="ph1">`WM_CTLCOLOR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The device context that displays the button.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A handle to the global window brush.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This method overrides the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnCtlColor<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)</ept>) by setting the text and background colors of the provided device context to the global text and background colors, respectively.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For more information about global options that are available to your application, see <bpt id="p1">[</bpt>AFX_GLOBAL_DATA Structure<ept id="p1">](../../mfc/reference/afx-global-data-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnGlobalFontsChanged</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Called by the framework when the global font has changed.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)</ept>) by changing the font of the control to that of the global font.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information about global options that are available to your application, see <bpt id="p1">[</bpt>AFX_GLOBAL_DATA Structure<ept id="p1">](../../mfc/reference/afx-global-data-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnMove</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar moves.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This method overrides the default class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnMove<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)</ept>) by updating the position of the internal <ph id="ph1">`CEdit`</ph> object</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnShow</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Called by the framework when the button becomes visible or invisible.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Specifies whether the button is visible.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the button is visible.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Otherwise, the button is not visible.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnShow<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)</ept>) by displaying the button if <ph id="ph1">`bShow`</ph> is <ph id="ph2">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Otherwise, this method hides the button.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnSize</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The new width of the button, in pixels.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This method overrides the default class implementation, <bpt id="p1">[</bpt>CMFCToolBarButton::OnSize<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize)</ept>, by updating the size and position of the internal <ph id="ph1">`CEdit`</ph> object.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::OnUpdateToolTip</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Called by the framework when the parent toolbar updates its tooltip text.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Unused.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The control that displays the tooltip text.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that receives the updated tooltip text.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Nonzero if the method updates the tooltip text; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation ( <bpt id="p1">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)</ept>) by displaying the tooltip text that is associated with the edit part of the button.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>If the internal <ph id="ph1">`CEdit`</ph> object is <ph id="ph2">`NULL`</ph> or the window handle of the <ph id="ph3">`CEdit`</ph> object does not identify an existing window, this method does nothing and returns <ph id="ph4">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContents</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Sets the text in the text box control.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Specifies the new text to set.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContentsAll</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Finds a <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton<ept id="p1">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object that has a specified command ID and sets the specified text within its text box.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Specifies the command ID of the control for which the text will be changed.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Specifies the new text to set.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Nonzero if the text was set; 0 if the <ph id="ph1">`CMFCToolBarEditBoxButton`</ph> control with the specified command ID does not exist.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetContextMenuID</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of the shortcut menu that is associated with the button.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The resource ID of the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The framework uses the resource ID to create the shortcut menu when the user right-clicks the toolbar button.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetFlatMode</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Specifies the flat style appearance of edit box buttons in the application.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The flat style for edit box buttons.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the flat style appearance is enabled; otherwise the flat style appearance is disabled.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The default flat style for edit box buttons is <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCToolBarEditBoxButton::IsFlatMode<ept id="p1">](#cmfctoolbareditboxbutton__isflatmode)</ept> method to retrieve the flat style appearance for your application.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>CMFCToolBarEditBoxButton::SetStyle</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Specifies the style of a toolbar edit box control.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A new style to set.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>This method sets <bpt id="p1">[</bpt>CMFCToolBarButton::m_nStyle<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_nstyle)</ept> to <ph id="ph1">`nStyle`</ph> It also disables the text box when the application is in Customize mode, and enables it when the application is not in Customize mode (see <bpt id="p2">[</bpt>CMFCToolBar::SetCustomizeMode<ept id="p2">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept> and <bpt id="p3">[</bpt>CMFCToolBar::IsCustomizeMode<ept id="p3">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscustomizemode)</ept>).</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ToolBar Control Styles<ept id="p1">](../../mfc/reference/toolbar-control-styles.md)</ept> for a list of valid style flags.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>CMFCToolBarButton Class</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>CEdit Class</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>CMFCToolBar::ReplaceButton</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Walkthrough: Putting Controls On Toolbars</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>