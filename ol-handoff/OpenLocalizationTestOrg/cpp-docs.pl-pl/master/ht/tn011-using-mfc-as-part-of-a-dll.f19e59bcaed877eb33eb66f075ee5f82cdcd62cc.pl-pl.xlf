<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e72651b93cad8efe212e0efcb1fb4c659d7cea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn011-using-mfc-as-part-of-a-dll.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed255119ffce0a294e642e32f37c16ac0cd87acf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">166c836dfde94cc7472d2dcca80f4e72ba139561</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN011: Using MFC as Part of a DLL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN011: Using MFC as Part of a DLL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This note describes regular DLLs, which allow you to use the MFC library as part of a Windows dynamic-link library (DLL).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It assumes that you are familiar with Windows DLLs and how to build them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about MFC extension DLLs, with which you can create extensions to the MFC library, see <bpt id="p1">[</bpt>DLL Version of MFC<ept id="p1">](../mfc/tn033-dll-version-of-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>DLL Interfaces</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Regular DLLs assume interfaces between the application and the DLL are specified in C-like functions or explicitly exported classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>MFC class interfaces cannot be exported.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If both a DLL and an application want to use MFC, both have a choice to either use the shared version of the MFC libraries or to statically link to a copy of the libraries.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The application and DLL may both use one of the standard versions of the MFC library.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Regular DLLs have several advantages:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application that uses the DLL does not have to use MFC and does not have to be a Visual C++ application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>With regular DLLs that statically link to MFC, the size of the DLL depends only on the MFC and C runtime routines that are used and linked.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With regular DLLs that dynamically link to MFC, the savings in memory from using the shared version of MFC can be significant.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, you must distribute the shared DLLs, Mfc<bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>version&gt;<ept id="p1">*</ept>.dll and Msvvcrt<bpt id="p2">*</bpt><ph id="ph2">\&lt;</ph>version&gt;<ept id="p2">*</ept>.dll, with your DLL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The DLL design is independent of how classes are implemented.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your DLL design exports only to the APIs you want.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As a result, if the implementation changes, regular DLLs are still valid.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With regular DLLs that statically link to MFC, if both DLL and application use MFC, there are no problems with the application that wants a different version of MFC than the DLL or vice versa.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the MFC library is statically linked into each DLL or EXE, there is no question about which version you have.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>API Limitations</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Some MFC functionality does not apply to the DLL version, either because of technical limitations or because those services are usually provided by the application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With the current version of MFC, the only function that is not applicable is <ph id="ph1">`CWinApp::SetDialogBkColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Building Your DLL</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When compiling regular DLLs that statically link to MFC, the symbols <ph id="ph1">`_USRDLL`</ph> and <ph id="ph2">`_WINDLL`</ph> must be defined.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your DLL code must also be compiled with the following compiler switches:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/D_WINDLL<ept id="p1">**</ept> signifies the compilation is for a DLL</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/D_USRDLL<ept id="p1">**</ept> specifies you are building a regular DLL</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must also define these symbols and use these compiler switches when you compile regular DLLs that dynamically link to MFC.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Additionally, the symbol <ph id="ph1">`_AFXDLL`</ph> must be defined and your DLL code must be compiled with:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/D_AFXDLL<ept id="p1">**</ept> specifies that you are building a regular DLL that dynamically links to MFC</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The interfaces (APIs) between the application and the DLL must be explicitly exported.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We recommend that you define your interfaces to be low bandwidth, and use only C interfaces if you can.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Direct C interfaces are easier to maintain than more complex C++ classes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Place your APIs in a separate header that can be included by both C and C++ files.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See the header ScreenCap.h in the MFC Advanced Concepts sample <bpt id="p1">[</bpt>DLLScreenCap<ept id="p1">](../visual-cpp-samples.md)</ept> for an example.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To export your functions, enter them in the <ph id="ph1">`EXPORTS`</ph> section of your module definition file (.DEF) or include <ph id="ph2">`__declspec(dllexport)`</ph> on your function definitions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__declspec(dllimport)`</ph> to import these functions into the client executable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You must add the <ph id="ph1">`AFX_MANAGE_STATE`</ph> macro at the beginning of all the exported functions in regular DLLs that dynamically link to MFC.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This macro sets the current module state to the one for the DLL.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use this macro, add the following line of code to the beginning of functions exported from the DLL:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>WinMain -&gt; DllMain</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The MFC library defines the standard Win32 <ph id="ph1">`DllMain`</ph> entry point that initializes your <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../mfc/reference/cwinapp-class.md)</ept> derived object as in a typical MFC application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Place all DLL-specific initialization in the <bpt id="p1">[</bpt>InitInstance<ept id="p1">](../mfc/reference/cwinapp-class.md#cwinapp__initinstance)</ept> method as in a typical MFC application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>CWinApp::Run<ept id="p1">](../mfc/reference/cwinapp-class.md#cwinapp__run)</ept> mechanism does not apply to a DLL, because the application owns the main message pump.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If your DLL displays modeless dialogs or has a main frame window of its own, your application's main message pump must call a DLL-exported routine that calls <bpt id="p1">[</bpt>CWinApp::PreTranslateMessage<ept id="p1">](../mfc/reference/cwinapp-class.md#cwinapp__pretranslatemessage)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See the DLLScreenCap sample for use of this function.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DllMain`</ph> function that MFC provides will call the <bpt id="p1">[</bpt>CWinApp::ExitInstance<ept id="p1">](../mfc/reference/cwinapp-class.md#cwinapp__exitinstance)</ept> method of your class that is derived from <ph id="ph2">`CWinApp`</ph> before the DLL is unloaded.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Linking Your DLL</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>With regular DLLs that statically link to MFC, you must link your DLL with Nafxcwd.lib or Nafxcw.lib and with the version of the C runtimes named Libcmt.lib.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These libraries are pre-built and may be installed by specifying them when you run Visual C++ setup.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Sample Code</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See the MFC Advanced Concepts sample program DLLScreenCap for a complete sample.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Several interesting things to note in this sample are as follows:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The compiler flags of the DLL and those of the application are different.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The link lines and .DEF files for the DLL and those for the application are different.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The application that uses the DLL does not have to be in C++.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The interface between the application and the DLL is an API that is usable by C or C++ and is exported with DLLScreenCap.def.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example illustrates an API that is defined in a regular DLL that statically links to MFC.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, the declaration is enclosed in an <ph id="ph1">`extern "C" { }`</ph> block for C++ users.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This has several advantages.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>First, it makes your DLL APIs usable by non-C++ client applications.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Second, it reduces DLL overhead because C++ name mangling will not be applied to the exported name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Lastly, it makes it easier to explicitly add to a .DEF file (for exporting by ordinal) without having to worry about name mangling.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The structures used by the API are not derived from MFC classes and are defined in the API header.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This reduces the complexity of the interface between the DLL and the application and makes the DLL usable by C programs.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>