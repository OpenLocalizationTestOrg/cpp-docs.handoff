<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffff2752e9edced49ca68558939fd5fa92014764</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\code-seg.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d08e68a34ed7a74e9dca9535d33e7dd2930804f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb5631892b7d49e18061fa96e66fc3518eb0dd1f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>code_seg | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>code_seg</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the text segment where functions are stored in the .obj file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`code_seg`</ph> pragma directive does not control placement of object code generated for instantiated templates, nor code generated implicitly by the compilerâ€”for example, special member functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We recommend that you use the <bpt id="p1">[</bpt>__declspec(code_seg(...))<ept id="p1">](../cpp/code-seg-declspec.md)</ept> attribute instead because it gives you control over placement of all object code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This includes compiler-generated code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>segment<ept id="p1">*</ept> in an .obj file is a named block of data that's loaded into memory as a unit.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>text segment<ept id="p1">*</ept> is a segment that contains executable code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this article, the terms <bpt id="p1">*</bpt>segment<ept id="p1">*</ept> and <bpt id="p2">*</bpt>section<ept id="p2">*</ept> are used interchangeably.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`code_seg`</ph> pragma directive tells the compiler to put all subsequent object code from the translation unit into a text segment named <ph id="ph2">`segment-name`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, the text segment used for functions in an .obj file is named .text.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`code_seg`</ph> pragma directive without parameters resets the text segment name for the subsequent object code to .text.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Push<ept id="p1">**</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Puts a record on the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>push<ept id="p1">**</ept> can have an <ph id="ph1">`identifier`</ph> and <ph id="ph2">`segment-name`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pop<ept id="p1">**</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Removes a record from the top of the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When used with <bpt id="p1">**</bpt>push<ept id="p1">**</ept>, assigns a name to the record on the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When used with <bpt id="p1">**</bpt>pop<ept id="p1">**</ept>, pops records off the internal stack until <ph id="ph1">`identifier`</ph> is removed; if <ph id="ph2">`identifier`</ph> is not found on the internal stack, nothing is popped.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>enables multiple records to be popped with just one <bpt id="p1">**</bpt>pop<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">`segment-name`</ph>" (optional)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name of a segment.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When used with <bpt id="p1">**</bpt>pop<ept id="p1">**</ept>, the stack is popped and <ph id="ph1">`segment-name`</ph> becomes the active text segment name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">`segment-class`</ph>" (optional)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Ignored, but included for compatibility with versions of C++ earlier than version 2.0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>DUMPBIN.EXE<ept id="p1">](../build/reference/dumpbin-command-line.md)</ept> application to view .obj files.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Versions of DUMPBIN for each supported target architecture are included with <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <ph id="ph1">`code_seg`</ph> pragma directive to control where object code is put:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For a list of names that should not be used to create a section, see <bpt id="p1">[</bpt>/SECTION<ept id="p1">](../build/reference/section-specify-section-attributes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also specify sections for initialized data (<bpt id="p1">[</bpt>data_seg<ept id="p1">](../preprocessor/data-seg.md)</ept>), uninitialized data (<bpt id="p2">[</bpt>bss_seg<ept id="p2">](../preprocessor/bss-seg.md)</ept>), and const variables (<bpt id="p3">[</bpt>const_seg<ept id="p3">](../preprocessor/const-seg.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>code_seg (__declspec)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>