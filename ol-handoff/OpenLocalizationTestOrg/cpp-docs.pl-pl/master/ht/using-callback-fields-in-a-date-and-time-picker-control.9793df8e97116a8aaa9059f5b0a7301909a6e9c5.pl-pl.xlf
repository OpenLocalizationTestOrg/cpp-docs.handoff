<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a040bad8a5d84609d0b78b531f78ab86a0333ec2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\using-callback-fields-in-a-date-and-time-picker-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f0adaf69665fbaa1c0aa8fe1c6f050f88ad60a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85dd13f837b39f06ab5631ef2bede7836366d9c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Callback Fields in a Date and Time Picker Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Callback Fields in a Date and Time Picker Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to the standard format characters that define date and time picker fields, you can customize your output by specifying certain parts of a custom format string as callback fields.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To declare a callback field, include one or more "X" characters (ASCII Code 88) anywhere in the body of the format string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, the following string "'Today is: 'yy'/'MM'/'dd' (Day 'X')'"causes the date and time picker control to display the current value as the year followed by the month, date, and finally the day of the year.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The number of X's in a callback field does not correspond to the number of characters that will be displayed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can distinguish between multiple callback fields in a custom string by repeating the "X" character.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Thus, the format string "XXddddMMMdd', 'yyyXXX" contains two unique callback fields, "XX" and "XXX".</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Callback fields are treated as valid fields, so your application must be prepared to handle <bpt id="p1">**</bpt>DTN_WMKEYDOWN<ept id="p1">**</ept> notification messages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implementing callback fields in your date and time picker control consists of three parts:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializing the custom format string</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Handling the <bpt id="p1">**</bpt>DTN_FORMATQUERY<ept id="p1">**</ept> notification</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Handling the <bpt id="p1">**</bpt>DTN_FORMAT<ept id="p1">**</ept> notification</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializing the Custom Format String</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initialize the custom string with a call to <ph id="ph1">`CDateTimeCtrl::SetFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Custom Format Strings in a Date and Time Picker Control<ept id="p1">](../mfc/using-custom-format-strings-in-a-date-and-time-picker-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A common place to set the custom format string is in the <ph id="ph1">`OnInitDialog`</ph> function of your containing dialog class or <ph id="ph2">`OnInitialUpdate`</ph> function of your containing view class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Handling the DTN_FORMATQUERY Notification</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the control parses the format string and encounters a callback field, the application sends <bpt id="p1">**</bpt>DTN_FORMAT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DTN_FORMATQUERY<ept id="p2">**</ept> notification messages.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The callback field string is included with the notifications so you can determine which callback field is being queried.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DTN_FORMATQUERY<ept id="p1">**</ept> notification is sent to retrieve the maximum allowable size in pixels of the string that will be displayed in the current callback field.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To properly calculate this value, you must calculate the height and width of the string, to be substituted for the field, using the control's display font.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The actual calculation of the string is easily achieved with a call to the <bpt id="p1">[</bpt>GetTextExtentPoint32<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144938)</ept> Win32 function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once the size is determined, pass the value back to the application and exit the handler function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example is one method of supplying the size of the callback string:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFCControlLadenDialog#8</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once the size of the current callback field has been calculated, you must supply a value for the field.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is done in the handler for the <bpt id="p1">**</bpt>DTN_FORMAT<ept id="p1">**</ept> notification.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Handling the DTN_FORMAT Notification</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DTN_FORMAT<ept id="p1">**</ept> notification is used by the application to request the character string that will be substituted.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example demonstrates one possible method:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NVC_MFCControlLadenDialog#9</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The pointer to the <bpt id="p1">**</bpt>NMDATETIMEFORMAT<ept id="p1">**</ept> structure is found by casting the first parameter of the notification handler to the proper type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using CDateTimeCtrl</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Controls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>