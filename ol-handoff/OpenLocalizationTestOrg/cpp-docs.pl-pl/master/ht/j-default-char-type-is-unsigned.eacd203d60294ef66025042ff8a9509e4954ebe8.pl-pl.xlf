<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f4f71a11d613edf7d5217a1eb44ddf29f948f2d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\j-default-char-type-is-unsigned.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5c3c451dccd8f6d9bd28a780e2a6015fbf0bd47</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f796309279fbd19102213b1d02f73bd70210491</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-J (Default char Type Is unsigned) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/J (Default char Type Is unsigned)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Changes the default <ph id="ph1">`char`</ph> type from <ph id="ph2">`signed char`</ph> to <ph id="ph3">`unsigned char`</ph>, and the <ph id="ph4">`char`</ph> type is zero-extended when it is widened to an <ph id="ph5">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`char`</ph> value is explicitly declared as <ph id="ph2">`signed`</ph>, the <bpt id="p1">**</bpt>/J<ept id="p1">**</ept> option does not affect it, and the value is sign-extended when it is widened to an <ph id="ph3">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/J<ept id="p1">**</ept> option defines <ph id="ph1">`_CHAR_UNSIGNED`</ph>, which is used with <ph id="ph2">`#ifndef`</ph> in the LIMITS.h file to define the range of the default <ph id="ph3">`char`</ph> type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ANSI C and C++ do not require a specific implementation of the <ph id="ph1">`char`</ph> type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This option is useful when you are working with character data that will eventually be translated into a language other than English.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you use this compiler option with ATL/MFC, an error might be generated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although you could disable this error by defining <ph id="ph1">`_ATL_ALLOW_CHAR_UNSIGNED`</ph>, this workaround is not supported and may not always work.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To set this compiler option in the Visual Studio development environment</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for the project and then choose <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the project <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box, in the left pane under <bpt id="p2">**</bpt>Configuration Properties<ept id="p2">**</ept>, expand <bpt id="p3">**</bpt>C/C++<ept id="p3">**</ept> and then select <bpt id="p4">**</bpt>Command Line<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Additional Options<ept id="p1">**</ept> pane, specify the <bpt id="p2">**</bpt>/J<ept id="p2">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To set this compiler option programmatically</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.DefaultCharIsUnsigned%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Working with Project Properties</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>