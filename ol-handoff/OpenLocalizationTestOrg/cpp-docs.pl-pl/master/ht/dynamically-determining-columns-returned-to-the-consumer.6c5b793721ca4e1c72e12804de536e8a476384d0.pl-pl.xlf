<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fbfe6196eb35ffd7ce413046ef3089c74eef527</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\dynamically-determining-columns-returned-to-the-consumer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">775d55b224c171f0ba531b89ae99232092865e12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8893b097f146677d6769f8ec27e4d29ad30a3bd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Dynamically Determining Columns Returned to the Consumer | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dynamically Determining Columns Returned to the Consumer</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The PROVIDER_COLUMN_ENTRY macros normally handle the <bpt id="p1">**</bpt>IColumnsInfo::GetColumnsInfo<ept id="p1">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, because a consumer might choose to use bookmarks, the provider must be able to change the columns returned depending on whether the consumer asks for a bookmark.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To handle the <bpt id="p1">**</bpt>IColumnsInfo::GetColumnsInfo<ept id="p1">**</ept> call, delete the PROVIDER_COLUMN_MAP, which defines a function <ph id="ph1">`GetColumnInfo`</ph>, from the <ph id="ph2">`CAgentMan`</ph> user record in MyProviderRS.h and replace it with the definition for your own <ph id="ph3">`GetColumnInfo`</ph> function:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Next, implement the <ph id="ph1">`GetColumnInfo`</ph> function in MyProviderRS.cpp, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>checks first to see if the OLE DB property <bpt id="p1">**</bpt>DBPROP_BOOKMARKS<ept id="p1">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To get the property, <ph id="ph1">`GetColumnInfo`</ph> uses a pointer (<ph id="ph2">`pRowset`</ph>) to the rowset object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pThis`</ph> pointer represents the class that created the rowset, which is the class where the property map is stored.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>typecasts the <ph id="ph1">`pThis`</ph> pointer to an <ph id="ph2">`RMyProviderRowset`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To check for the <bpt id="p1">**</bpt>DBPROP_BOOKMARKS<ept id="p1">**</ept> property, <ph id="ph1">`GetColumnInfo`</ph> uses the <ph id="ph2">`IRowsetInfo`</ph> interface, which you can obtain by calling <ph id="ph3">`QueryInterface`</ph> on the <ph id="ph4">`pRowset`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use an ATL <bpt id="p1">[</bpt>CComQIPtr<ept id="p1">](../../atl/reference/ccomqiptr-class.md)</ept> method instead.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example uses a static array to contain the column information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the consumer does not want the bookmark column, one entry in the array is unused.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To handle the information, you create two array macros: ADD_COLUMN_ENTRY and ADD_COLUMN_ENTRY_EX.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ADD_COLUMN_ENTRY_EX takes an extra parameter, <ph id="ph1">`flags`</ph>, that is needed if you designate a bookmark column.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`GetColumnInfo`</ph> function, the bookmark macro is used like this:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can now compile and run the enhanced provider.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To test the provider, modify the test consumer as described in <bpt id="p1">[</bpt>Implementing a Simple Consumer<ept id="p1">](../../data/oledb/implementing-a-simple-consumer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Run the test consumer with the provider.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Verify that the test consumer retrieves the proper strings from the provider when you click the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> button in the <bpt id="p2">**</bpt>Test Consumer<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Enhancing the Simple Read-Only Provider</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>