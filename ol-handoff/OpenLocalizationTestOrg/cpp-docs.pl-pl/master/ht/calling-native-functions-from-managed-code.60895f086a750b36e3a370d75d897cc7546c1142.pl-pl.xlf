<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2046db1d02ef12665333717dade058945b4ca4b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\calling-native-functions-from-managed-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582842a281521602dc71b3218061d5a1531894d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6a7365691ac80bd447676f18b9da7abb22cda84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Calling Native Functions from Managed Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Calling Native Functions from Managed Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The common language runtime provides Platform Invocation Services, or PInvoke, that enables managed code to call C-style functions in native dynamic-linked libraries (DLLs).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The same data marshaling is used as for COM interoperability with the runtime and for the "It Just Works," or IJW, mechanism.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using Explicit PInvoke in C++ (DllImport Attribute)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using C++ Interop (Implicit PInvoke)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A Closer Look at Platform Invoke</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The samples in this section just illustrate how <ph id="ph1">`PInvoke`</ph> can be used.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>can simplify customized data marshaling because you provide marshaling information declaratively in attributes instead of writing procedural marshaling code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The marshaling library provides an alternative way to marshal data between native and managed environments in an optimized way.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Overview of Marshaling in C++<ept id="p1">](../dotnet/overview-of-marshaling-in-cpp.md)</ept> for more information about the marshaling library.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The marshaling library is usable for data only, and not for functions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>PInvoke and the DllImport Attribute</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows the use of <ph id="ph1">`PInvoke`</ph> in a Visual C++ program.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The native function puts is defined in msvcrt.dll.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The DllImport attribute is used for the declaration of puts.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample is equivalent to the previous sample, but uses IJW.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Advantages of IJW</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There is no need to write <ph id="ph1">`DLLImport`</ph> attribute declarations for the unmanaged APIs the program uses.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Just include the header file and link with the import library.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The IJW mechanism is slightly faster (for example, the IJW stubs do not need to check for the need to pin or copy data items because that is done explicitly by the developer).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It clearly illustrates performance issues.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, the fact that you are translating from a Unicode string to an ANSI string and that you have an attendant memory allocation and deallocation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this case, a developer writing the code using IJW would realize that calling <ph id="ph1">`_putws`</ph> and using <ph id="ph2">`PtrToStringChars`</ph> would be better for performance.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you call many unmanaged APIs using the same data, marshaling it once and passing the marshaled copy is much more efficient than re-marshaling every time.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Disadvantages of IJW</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Marshaling must be specified explicitly in code instead of by attributes (which often have appropriate defaults).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The marshaling code is inline, where it is more invasive in the flow of the application logic.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because the explicit marshaling APIs return <ph id="ph1">`IntPtr`</ph> types for 32-bit to 64-bit portability, you must use extra <ph id="ph2">`ToPointer`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The specific method exposed by C++ is the more efficient, explicit method, at the cost of some additional complexity.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the application uses mainly unmanaged data types or if it calls more unmanaged APIs than .NET Framework APIs, we recommend that you use the IJW feature.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To call an occasional unmanaged API in a mostly managed application, the choice is more subtle.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PInvoke with Windows APIs</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>PInvoke is convenient for calling functions in Windows.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, a Visual C++ program interoperates with the MessageBox function that is part of the Win32 API.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The output is a message box that has the title PInvoke Test and contains the text Hello World!.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The marshaling information is also used by PInvoke to look up functions in the DLL.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In user32.dll there is in fact no MessageBox function, but CharSet=CharSet::Ansi enables PInvoke to use MessageBoxA, the ANSI version, instead of MessageBoxW, which is the Unicode version.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you use Unicode versions of unmanaged APIs because that eliminates the translation overhead from the native Unicode format of .NET Framework string objects to ANSI.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When Not to Use PInvoke</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using PInvoke is not appropriate for all C-style functions in DLLs.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, suppose there is a function MakeSpecial in mylib.dll declared as follows:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If we use PInvoke in a Visual C++ application, we might write something similar to the following:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The difficulty here is that we cannot delete the memory for the unmanaged string returned by MakeSpecial.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Other functions called through PInvoke return a pointer to an internal buffer that does not have to be deallocated by the user.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this case, using the IJW feature is the obvious choice.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Limitations of PInvoke</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You cannot return the same exact pointer from a native function that you took as a parameter.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If a native function returns the pointer that has been marshaled to it by PInvoke, memory corruption and exceptions may ensue.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample exhibits this problem, and even though the program may seem to give the correct output, the output is coming from memory that had been freed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Marshaling Arguments</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`PInvoke`</ph>, no marshaling is needed between managed and C++ native primitive types with the same form.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, no marshaling is required between Int32 and int, or between Double and double.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, you must marshal types that do not have the same form.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This includes char, string, and struct types.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following table shows the mappings used by the marshaler for various types:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>wtypes.h</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Visual C++</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Visual C++ with /clr</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Common language runtime</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>HANDLE</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>void *</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>void *</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>IntPtr, UIntPtr</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>BYTE</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>unsigned char</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>unsigned char</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>SHORT</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Int16</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>WORD</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>UInt16</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>INT</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Int32</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>UINT</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>unsigned int</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>unsigned int</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>UInt32</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>LONG</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Int32</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>BOOL</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Boolean</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>DWORD</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>unsigned long</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>unsigned long</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>UInt32</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>ULONG</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>unsigned long</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>unsigned long</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>UInt32</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CHAR</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Char</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>LPCSTR</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>char *</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>String ^ [in], StringBuilder ^ [in, out]</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>String ^ [in], StringBuilder ^ [in, out]</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>LPCSTR</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>const char *</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>String ^</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>LPWSTR</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>wchar_t *</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>String ^ [in], StringBuilder ^ [in, out]</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>String ^ [in], StringBuilder ^ [in, out]</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>LPCWSTR</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>const wchar_t *</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>String ^</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>FLOAT</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Single</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>DOUBLE</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Double</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The marshaler automatically pins memory allocated on the runtime heap if its address is passed to an unmanaged function.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Pinning prevents the garbage collector from moving the allocated block of memory during compaction.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the example shown earlier in this topic, the CharSet parameter of DllImport specifies how managed Strings should be marshaled; in this case, they should be marshaled to ANSI strings for the native side.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can specify marshaling information for individual arguments of a native function by using the MarshalAs attribute.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>There are several choices for marshaling a String * argument: BStr, ANSIBStr, TBStr, LPStr, LPWStr, and LPTStr.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The default is LPStr.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this example, the string is marshaled as a double-byte Unicode character string, LPWStr.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The output is the first letter of Hello World!</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>because the second byte of the marshaled string is null, and puts interprets this as the end-of-string marker.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The MarshalAs attribute is in the System::Runtime::InteropServices namespace.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The attribute can be used with other data types such as arrays.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>As mentioned earlier in the topic, the marshaling library provides a new, optimized method of marshaling data between native and managed environments.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overview of Marshaling in C++<ept id="p1">](../dotnet/overview-of-marshaling-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Performance Considerations</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>PInvoke has an overhead of between 10 and 30 x86 instructions per call.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In addition to this fixed cost, marshaling creates additional overhead.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>There is no marshaling cost between blittable types that have the same representation in managed and unmanaged code.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example, there is no cost to translate between int and Int32.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For better performance, have fewer PInvoke calls that marshal as much data as possible, instead of more calls that marshal less data per call.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Native and .NET Interoperability</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>