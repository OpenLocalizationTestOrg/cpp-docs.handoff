<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ecd96b417f6c3f19189645aed9f9802688f0699</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\precedence-and-order-of-evaluation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17074b97d50b16b315f23e4230c4f636bca7302f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac0931be3461014f71feb03dbbf858f7a4a06d72</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Precedence and Order of Evaluation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Precedence and Order of Evaluation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The precedence and associativity of C operators affect the grouping and evaluation of operands in expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An operator's precedence is meaningful only if other operators with higher or lower precedence are present.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Expressions with higher-precedence operators are evaluated first.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Precedence can also be described by the word "binding."</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Operators with a higher precedence are said to have tighter binding.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table summarizes the precedence and associativity (the order in which the operands are evaluated) of C operators, listing them in order of precedence from highest to lowest.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Where several operators appear together, they have equal precedence and are evaluated according to their associativity.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The operators in the table are described in the sections beginning with <bpt id="p1">[</bpt>Postfix Operators<ept id="p1">](../c-language/postfix-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The rest of this section gives general information about precedence and associativity.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Precedence and Associativity of C Operators</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Symbol1</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type of Operation</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Associativity</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[ ] ( ) . –&gt;<ept id="p1">**</ept> postfix <ph id="ph1">`++`</ph> and postfix <bpt id="p2">**</bpt>––<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>prefix <ph id="ph1">`++`</ph> and prefix <bpt id="p1">**</bpt>–– sizeof &amp;   <ph id="ph2">\*</ph>   + – ~ !<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Unary</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Right to left</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>typecasts</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unary</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Right to left</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>/ %</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Multiplicative</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>+ –</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Additive</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Bitwise shift</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>= &gt;=</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Relational</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>== !=</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Equality</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Bitwise-AND</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Bitwise-exclusive-OR</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Bitwise-inclusive-OR</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Logical-AND</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Logical-OR</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>?</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Conditional-expression</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Right to left</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>= /= %=</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>+= –= &lt;<ph id="ph1">\&lt;</ph>= &gt;&gt;=&amp;=</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>^= &amp;#124;=</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Simple and compound assignment2</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Right to left</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Sequential evaluation</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Left to right</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Operators are listed in descending order of precedence.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If several operators appear on the same line or in a group, they have equal precedence.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>All simple and compound-assignment operators have equal precedence.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An expression can contain several operators with equal precedence.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When several such operators appear at the same level in an expression, evaluation proceeds according to the associativity of the operator, either from right to left or from left to right.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The direction of evaluation does not affect the results of expressions that include more than one multiplication (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>), addition (<bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>), or binary-bitwise (<bpt id="p3">**</bpt>&amp; &amp;#124; ^<ept id="p3">**</ept>) operator at the same level.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Order of operations is not defined by the language.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The compiler is free to evaluate such expressions in any order, if the compiler can guarantee a consistent result.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Only the sequential-evaluation (<bpt id="p1">**</bpt>,<ept id="p1">**</ept>), logical-AND (<bpt id="p2">**</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p2">**</ept>), logical-OR (<ph id="ph2">`||`</ph>), conditional-expression (<bpt id="p3">**</bpt>? :<ept id="p3">**</ept>), and function-call operators constitute sequence points and therefore guarantee a particular order of evaluation for their operands.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The function-call operator is the set of parentheses following the function identifier.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The sequential-evaluation operator (<bpt id="p1">**</bpt>,<ept id="p1">**</ept>) is guaranteed to evaluate its operands from left to right.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(Note that the comma operator in a function call is not the same as the sequential-evaluation operator and does not provide any such guarantee.) For more information, see <bpt id="p1">[</bpt>Sequence Points<ept id="p1">](../c-language/c-sequence-points.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Logical operators also guarantee evaluation of their operands from left to right.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>However, they evaluate the smallest number of operands needed to determine the result of the expression.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This is called "short-circuit" evaluation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Thus, some operands of the expression may not be evaluated.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, in the expression</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>the second operand, <ph id="ph1">`y++`</ph>, is evaluated only if <ph id="ph2">`x`</ph> is true (nonzero).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`y`</ph> is not incremented if <ph id="ph2">`x`</ph> is false (0).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following list shows how the compiler automatically binds several sample expressions:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Automatic Binding</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the first expression, the bitwise-AND operator (<ph id="ph1">`&amp;`</ph>) has higher precedence than the logical-OR operator (<ph id="ph2">`||`</ph>), so <ph id="ph3">`a &amp; b`</ph> forms the first operand of the logical-OR operation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the second expression, the logical-OR operator (<ph id="ph1">`||`</ph>) has higher precedence than the simple-assignment operator (<ph id="ph2">`=`</ph>), so <ph id="ph3">`b || c`</ph> is grouped as the right-hand operand in the assignment.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that the value assigned to <ph id="ph1">`a`</ph> is either 0 or 1.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The third expression shows a correctly formed expression that may produce an unexpected result.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The logical-AND operator (<ph id="ph1">`&amp;&amp;`</ph>) has higher precedence than the logical-OR operator (<ph id="ph2">`||`</ph>), so <ph id="ph3">`q &amp;&amp; r`</ph> is grouped as an operand.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Since the logical operators guarantee evaluation of operands from left to right, <ph id="ph1">`q &amp;&amp; r`</ph> is evaluated before <ph id="ph2">`s––`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, if <ph id="ph1">`q &amp;&amp; r`</ph> evaluates to a nonzero value, <ph id="ph2">`s––`</ph> is not evaluated, and <ph id="ph3">`s`</ph> is not decremented.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If not decrementing <ph id="ph1">`s`</ph> would cause a problem in your program, <ph id="ph2">`s––`</ph> should appear as the first operand of the expression, or <ph id="ph3">`s`</ph> should be decremented in a separate operation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following expression is illegal and produces a diagnostic message at compile time:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Illegal Expression</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Default Grouping</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In this expression, the equality operator (<ph id="ph1">`==`</ph>) has the highest precedence, so <ph id="ph2">`p == 0`</ph> is grouped as an operand.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The conditional-expression operator (<ph id="ph1">`? :`</ph>) has the next-highest precedence.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Its first operand is <ph id="ph1">`p == 0`</ph>, and its second operand is <ph id="ph2">`p += 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>However, the last operand of the conditional-expression operator is considered to be <ph id="ph1">`p`</ph> rather than <ph id="ph2">`p += 2`</ph>, since this occurrence of <ph id="ph3">`p`</ph> binds more closely to the conditional-expression operator than it does to the compound-assignment operator.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A syntax error occurs because <ph id="ph1">`+= 2`</ph> does not have a left-hand operand.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You should use parentheses to prevent errors of this kind and produce more readable code.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, you could use parentheses as shown below to correct and clarify the preceding example:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>C Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>