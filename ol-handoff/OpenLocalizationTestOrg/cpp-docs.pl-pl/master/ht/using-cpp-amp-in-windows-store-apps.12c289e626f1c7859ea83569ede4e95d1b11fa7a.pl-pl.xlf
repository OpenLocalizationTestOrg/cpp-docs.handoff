<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb434b5cb6b659bd1dd5d2fbf9168c6b1a671ebb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\using-cpp-amp-in-windows-store-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17b33cec18bf433a55f4d52d5ab50bc263efdf57</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e73a24d62440e03d4755b0140b96c6813eb4050</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using C++ AMP in Windows Store Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using C++ AMP in Windows Store Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use C++ AMP (C++ Accelerated Massive Parallelism) in your <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app to perform calculations on the GPU (Graphics Processing Unit) or other computational accelerators.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, C++ AMP doesn't provide APIs for working directly with Windows Runtime types, and the Windows Runtime doesn't provide a wrapper for C++ AMP.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you use Windows Runtime types in your code—including those that you've created yourself—you must convert them to types that are compatible with C++ AMP.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Performance considerations</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you're using <ph id="ph1">[!INCLUDE[cppwrt](../../build/reference/includes/cppwrt_md.md)]</ph> (<ph id="ph2">[!INCLUDE[cppwrt_short](../../build/reference/includes/cppwrt_short_md.md)]</ph>) to create your <ph id="ph3">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app, we recommend that you use plain-old-data (POD) types together with contiguous storage—for example, <ph id="ph4">`std::vector`</ph> or C-style arrays—for data that will be used with C++ AMP.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This can help you achieve higher performance than by using non-POD types or Windows RT containers because no marshaling has to occur.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In a C++ AMP kernel, to access data that’s stored in this way, just wrap the <ph id="ph1">`std::vector`</ph> or array storage in a <ph id="ph2">`concurrency::array_view`</ph> and then use the array view in a <ph id="ph3">`concurrency::parallel_for_each`</ph> loop:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Marshaling Windows Runtime types</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you work with Windows Runtime APIs, you might want to use C++ AMP on data that's stored in a Windows Runtime container such as a <ph id="ph1">`Platform::Array&lt;T&gt;^`</ph> or in complex data types such as classes or structs that are declared by using the <ph id="ph2">`ref`</ph> keyword or the <ph id="ph3">`value`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In these situations, you have to do some extra work to make the data available to C++ AMP.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Platform::Array<ph id="ph1">\&lt;</ph>T&gt;^, where T is a POD type</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you encounter a <ph id="ph1">`Platform::Array&lt;T&gt;^`</ph> and T is a POD type, you can access its underlying storage just by using the <ph id="ph2">`get`</ph> member function:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If T is not a POD type, use the technique that's described in the following section to use the data with C++ AMP.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Windows Runtime types: ref classes and value classes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C++ AMP doesn't support complex data types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This includes non-POD types and any types that are declared by using the <ph id="ph1">`ref`</ph> keyword or the <ph id="ph2">`value`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If an unsupported type is used in a <ph id="ph1">`restrict(amp)`</ph> context, a compile-time error is generated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you encounter an unsupported type, you can copy interesting parts of its data into a <ph id="ph1">`concurrency::array`</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition to making the data available for C++ AMP to consume, this manual-copy approach can also improve performance by maximizing data locality, and by ensuring that data that won't be used isn't copied to the accelerator.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can improve performance further by using a <bpt id="p1">*</bpt>staging array<ept id="p1">*</ept>, which is a special form of <ph id="ph1">`concurrency::array`</ph> that provides a hint to the AMP runtime that the array should be optimized for frequent transfer between it and other arrays on the specified accelerator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create your first Windows Store app using C++</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime Components in C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>