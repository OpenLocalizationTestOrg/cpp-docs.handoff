<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">079f741f9d2c30e03baef9222e6e8c53a217ea56</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomcoclass-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a37176e484e865c07e30a39a4e6dd7605fc0437</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2732886ad6c530f03e604a85bcc85d55cbc81d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComCoClass Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComCoClass Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for creating instances of a class, and obtaining its properties.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your class, derived from <ph id="ph1">`CComCoClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>pclsid</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A pointer to the CLSID of the object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CComCoClass::CreateInstance</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(Static) Creates an instance of the class and queries for an interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CComCoClass::Error</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Static) Returns rich error information to the client.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CComCoClass::GetObjectCLSID</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Static) Returns the object's class identifier.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CComCoClass::GetObjectDescription</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(Static) Override to return the object's description.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>provides methods for retrieving an object's CLSID, setting error information, and creating instances of the class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any class registered in the <bpt id="p1">[</bpt>object map<ept id="p1">](http://msdn.microsoft.com/en-us/b57619cc-534f-4b8f-bfd4-0c12f937202f)</ept> should be derived from <ph id="ph1">`CComCoClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>also defines the default class factory and aggregation model for your object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>uses the following two macros:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_CLASSFACTORY<ept id="p1">](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4)</ept> Declares the class factory to be <bpt id="p2">[</bpt>CComClassFactory<ept id="p2">](../../atl/reference/ccomclassfactory-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DECLARE_AGGREGATABLE<ept id="p1">](http://msdn.microsoft.com/library/e7e568d7-04e0-4226-b5dc-224deed229ab)</ept> Declares that your object can be aggregated.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can override either of these defaults by specifying another macro in your class definition.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, to use <bpt id="p1">[</bpt>CComClassFactory2<ept id="p1">](../../atl/reference/ccomclassfactory2-class.md)</ept> instead of <ph id="ph1">`CComClassFactory`</ph>, specify the <bpt id="p2">[</bpt>DECLARE_CLASSFACTORY2<ept id="p2">](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285)</ept> macro:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcom.h</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CComCoClass::CreateInstance</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use these <ph id="ph1">`CreateInstance`</ph> functions to create an instance of a COM object and retrieve an interface pointer without using the COM API.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The COM interface that should be returned via <ph id="ph1">`pp`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>punkOuter</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>[in] The outer unknown or controlling unknown of the aggregate.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[out] The address of a pointer variable that receives the requested interface pointer if creation succeeds.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CoCreateInstance<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686615)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of possible return values.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Use the first overload of this function for typical object creation; use the second overload when you need to aggregate the object being created.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The ATL class implementing the required COM object (that is, the class used as the first template parameter to <bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../../atl/reference/ccomcoclass-class.md)</ept>) must be in the same project as the calling code.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The creation of the COM object is carried out by the class factory registered for this ATL class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These functions are useful for creating objects that you have prevented from being externally creatable by using the <bpt id="p1">[</bpt>OBJECT_ENTRY_NON_CREATEABLE_EX_AUTO<ept id="p1">](http://msdn.microsoft.com/library/abdc093c-6502-42de-8419-b7ebf45299d1)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>They are also useful in situations where you want to avoid the COM API for reasons of efficiency.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Note that the interface <ph id="ph1">`Q`</ph> must have an IID associated with it that can be retrieved using the <bpt id="p1">[</bpt>__uuidof<ept id="p1">](../../cpp/uuidof-operator.md)</ept> operator.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`CDocument`</ph> is a wizard-generated ATL class derived from <ph id="ph2">`CComCoClass`</ph> that implements the <bpt id="p1">**</bpt>IDocument<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The class is registered in the object map with the <ph id="ph1">`OBJECT_ENTRY_NON_CREATEABLE_EX_AUTO`</ph> macro so clients can't create instances of the document using <bpt id="p1">[</bpt>CoCreateInstance<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686615)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>is a CoClass that provides a method on one of its own COM interfaces to create instances of the document class.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The code below shows how easy it to create instances of the document class using the <ph id="ph1">`CreateInstance`</ph> member inherited from the <ph id="ph2">`CComCoClass`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#11</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CComCoClass::Error</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This static function sets up the <ph id="ph1">`IErrorInfo`</ph> interface to provide error information to the client.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>[in] The string describing the error.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The Unicode version of <ph id="ph1">`Error`</ph> specifies that <ph id="ph2">`lpszDesc`</ph> is of type <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept>; the ANSI version specifies a type of <ph id="ph3">`LPCSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>[in] The IID of the interface defining the error or <ph id="ph1">`GUID_NULL`</ph> (the default value) if the error is defined by the operating system.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`HRESULT`</ph> you want returned to the caller.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default value is 0.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more details about <ph id="ph1">`hRes`</ph>, see Remarks.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[in] The resource identifier where the error description string is stored.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This value should lie between 0x0200 and 0xFFFF, inclusively.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In debug builds, an <bpt id="p1">**</bpt>ASSERT<ept id="p1">**</ept> will result if <ph id="ph1">`nID`</ph> does not index a valid string.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In release builds, the error description string will be set to "Unknown Error."</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>[in] The help context identifier for the error.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>[in] The path and name of the help file describing the error.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>[in] The handle to the resource.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By default, this parameter is <bpt id="p1">**</bpt>_AtlModule::GetResourceInstance<ept id="p1">**</ept>, where <bpt id="p2">**</bpt>_AtlModule<ept id="p2">**</ept> is the global instance of <bpt id="p3">[</bpt>CAtlModule<ept id="p3">](../../atl/reference/catlmodule-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For details, see Remarks.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To call <ph id="ph1">`Error`</ph>, your object must implement the <ph id="ph2">`ISupportErrorInfo Interface`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`hRes`</ph> parameter is nonzero, then <ph id="ph2">`Error`</ph> returns the value of <ph id="ph3">`hRes`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hRes`</ph> is zero, then the first four versions of <ph id="ph2">`Error`</ph> return <ph id="ph3">`DISP_E_EXCEPTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The last two versions return the result of the macro <bpt id="p1">**</bpt>MAKE_HRESULT( 1, FACILITY_ITF,<ept id="p1">**</ept> <ph id="ph1">`nID`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CComCoClass::GetObjectCLSID</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides a consistent way of retrieving the object's CLSID.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object's class identifier.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CComCoClass::GetObjectDescription</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This static function retrieves the text description for your class object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The class object's description.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default implementation returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can override this method with the <bpt id="p1">[</bpt>DECLARE_OBJECT_DESCRIPTION<ept id="p1">](http://msdn.microsoft.com/library/32ac881c-97b1-44e2-a017-0e23eb99ac93)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#12</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>is called by <bpt id="p1">**</bpt>IComponentRegistrar::GetComponents<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IComponentRegistrar<ept id="p1">**</ept> is an Automation interface that allows you to register and unregister individual components in a DLL.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you create a Component Registrar object with the ATL Project Wizard, the wizard will automatically implement the <bpt id="p1">**</bpt>IComponentRegistrar<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IComponentRegistrar<ept id="p1">**</ept> is typically used by Microsoft Transaction Server.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information about the ATL Project Wizard, see the article <bpt id="p1">[</bpt>Creating an ATL Project<ept id="p1">](../../atl/reference/creating-an-atl-project.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>