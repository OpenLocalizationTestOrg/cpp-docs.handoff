<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">770969cb9fc73238ca6b345a4586776fcea407eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\overview-of-file-translation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb13b6d62293b8f0319a8e81760dd927413756ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">822c12b0d60ed6d0565a04ab39fb12a7e870bcfe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overview of File Translation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overview of File Translation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C++ programs, like C programs, consist of one or more files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each of these files is translated in the following conceptual order (the actual order follows the "as if" rule: translation must occur as if these steps had been followed):</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Lexical tokenizing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Character mapping and trigraph processing, line splicing, and tokenizing are performed in this translation phase.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Preprocessing.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This translation phase brings in ancillary source files referenced by <ph id="ph1">`#include`</ph> directives, handles "stringizing" and "charizing" directives, and performs token pasting and macro expansion (see <bpt id="p1">[</bpt>Preprocessor Directives<ept id="p1">](../preprocessor/preprocessor-directives.md)</ept> in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The result of the preprocessing phase is a sequence of tokens that, taken together, define a "translation unit."</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Preprocessor directives always begin with the number-sign (<bpt id="p1">**</bpt><ph id="ph1">#</ph><ept id="p1">**</ept>) character (that is, the first nonwhite-space character on the line must be a number sign).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Only one preprocessor directive can appear on a given line.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Code generation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This translation phase uses the tokens generated in the preprocessing phase to generate object code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>During this phase, syntactic and semantic checking of the source code is performed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Phases of Translation<ept id="p1">](../preprocessor/phases-of-translation.md)</ept> in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The C++ preprocessor is a strict superset of the ANSI C preprocessor, but the C++ preprocessor differs in a few instances.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following list describes several differences between the ANSI C and the C++ preprocessors:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Single-line comments are supported.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Comments<ept id="p1">](../cpp/comments-cpp.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One predefined macro, <bpt id="p1">**</bpt>__cplusplus<ept id="p1">**</ept>, is defined only for C++.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Predefined Macros<ept id="p1">](../preprocessor/predefined-macros.md)</ept> in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The C preprocessor does not recognize the C++ operators: <bpt id="p1">**</bpt>.<ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt>â€“&gt;<ph id="ph2">\*</ph><ept id="p2">**</ept>, and <ph id="ph3">`::`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Operators<ept id="p1">](../cpp/cpp-built-in-operators-precedence-and-associativity.md)</ept> and <bpt id="p2">[</bpt>Expressions<ept id="p2">](../cpp/expressions-cpp.md)</ept>, for more information about operators.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>