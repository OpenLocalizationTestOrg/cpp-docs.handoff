<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5acaa6d15049d962433231dd65f1ddd103316c5a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\overloading-unary-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59b2176020a45a3ba573237bf29fea279f04b052</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7568179a76449da0b2bac123876544afd6d075ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overloading Unary Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overloading Unary Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The unary operators that can be overloaded are the following:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>logical NOT<ept id="p1">](../cpp/logical-negation-operator-exclpt.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>address-of<ept id="p1">](../cpp/address-of-operator-amp.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>one's complement<ept id="p1">](../cpp/one-s-complement-operator-tilde.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>pointer dereference<ept id="p1">](../cpp/indirection-operator-star.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>unary plus<ept id="p1">](../cpp/additive-operators-plus-and.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>unary negation<ept id="p1">](../cpp/additive-operators-plus-and.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>increment<ept id="p1">](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">[</bpt>decrement<ept id="p1">](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>conversion operators</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The postfix increment and decrement operators (<ph id="ph1">`++`</ph> and <bpt id="p1">**</bpt>––<ept id="p1">**</ept>) are treated separately in <bpt id="p2">[</bpt>Increment and Decrement<ept id="p2">](../cpp/increment-and-decrement-operator-overloading-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Conversion operators are also discussed in a separate topic; see <bpt id="p1">[</bpt>User-Defined Type Conversions<ept id="p1">](../cpp/user-defined-type-conversions-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following rules are true of all other unary operators.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To declare a unary operator function as a nonstatic member, you must declare it in the form:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`ret-type`</ph> is the return type and <ph id="ph2">`op`</ph> is one of the operators listed in the preceding table.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To declare a unary operator function as a global function, you must declare it in the form:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`arg`</ph> )</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`ret-type`</ph> and <ph id="ph2">`op`</ph> are as described for member operator functions and the <ph id="ph3">`arg`</ph> is an argument of class type on which to operate.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is no restriction on the return types of the unary operators.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, it makes sense for logical NOT (<ph id="ph1">`!`</ph>) to return an integral value, but this is not enforced.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Operator Overloading</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>