<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9c9f906f58edf34dbd9ead9aef59bad64022db8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\iatlmemmgr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0b2ce03c414af0de66a2e20aefaeebce6ad142c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c833703ab5041f334154ee59e03d993974b65aa4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class represents the interface to a memory manager.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Allocate</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Call this method to allocate a block of memory.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Free</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Call this method to free a block of memory.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>GetSize</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the size of an allocated memory block.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reallocate</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Call this method to reallocate a block of memory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This interface is implemented by <bpt id="p1">[</bpt>CComHeap<ept id="p1">](../../atl/reference/ccomheap-class.md)</ept>, <bpt id="p2">[</bpt>CCRTHeap<ept id="p2">](../../atl/reference/ccrtheap-class.md)</ept>, <bpt id="p3">[</bpt>CLocalHeap<ept id="p3">](../../atl/reference/clocalheap-class.md)</ept>, <bpt id="p4">[</bpt>CGlobalHeap<ept id="p4">](../../atl/reference/cglobalheap-class.md)</ept>, or <bpt id="p5">[</bpt>CWin32Heap<ept id="p5">](../../atl/reference/cwin32heap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The local and global heap functions are slower than other memory management functions, and do not provide as many features.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, new applications should use the <bpt id="p1">[</bpt>heap functions<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366711)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These are available in the <bpt id="p1">[</bpt>CWin32Heap<ept id="p1">](../../atl/reference/cwin32heap-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#94</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlmem.h</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr::Allocate</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Call this method to allocate a block of memory.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The requested number of bytes in the new memory block.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the start of the newly allocated memory block.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>IAtlMemMgr::Free<ept id="p1">](#iatlmemmgr__free)</ept> or <bpt id="p2">[</bpt>IAtlMemMgr::Reallocate<ept id="p2">](#iatlmemmgr__reallocate)</ept> to free the memory allocated by this method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>IAtlMemMgr Overview<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr::Free</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Call this method to free a block of memory.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Pointer to memory previously allocated by this memory manager.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use this method to free memory obtained by <bpt id="p1">[</bpt>IAtlMemMgr::Allocate<ept id="p1">](#iatlmemmgr__allocate)</ept> or <bpt id="p2">[</bpt>IAtlMemMgr::Reallocate<ept id="p2">](#iatlmemmgr__reallocate)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>IAtlMemMgr Overview<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr::GetSize</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the size of an allocated memory block.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pointer to memory previously allocated by this memory manager.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns the size of the memory block in bytes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>IAtlMemMgr Overview<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>IAtlMemMgr::Reallocate</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Call this method to reallocate memory allocated by this memory manager.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pointer to memory previously allocated by this memory manager.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The requested number of bytes in the new memory block.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the start of the newly allocated memory block.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>IAtlMemMgr::Free<ept id="p1">](#iatlmemmgr__free)</ept> or <bpt id="p2">[</bpt>IAtlMemMgr::Reallocate<ept id="p2">](#iatlmemmgr__reallocate)</ept> to free the memory allocated by this method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Conceptually this method frees the existing memory and allocates a new memory block.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In reality, the existing memory may be extended or otherwise reused.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>IAtlMemMgr Overview<ept id="p1">](../../atl/reference/iatlmemmgr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_AllowContextMenu</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowContextMenu<ept id="p1">**</ept> property specifies whether the hosted control is allowed to display its own context menu.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>pbAllowContextMenu</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_AllowShowUI</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowShowUI<ept id="p1">**</ept> property specifies whether the hosted control is allowed to display its own user interface.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>pbAllowShowUI</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_AllowWindowlessActivation</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowWindowlessActivation<ept id="p1">**</ept> property specifies whether the container will allow windowless activation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>pbAllowWindowless</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_BackColor</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BackColor`</ph> property specifies the ambient background color of the container.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>pclrBackground</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>COLOR_BTNFACE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>COLOR_WINDOW<ept id="p2">**</ept> as the default value of this property (depending on whether the parent of the host window is a dialog or not).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_DisplayAsDefault</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DisplayAsDefault<ept id="p1">**</ept> is an ambient property that allows a control to find out if it is the default control.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>pbDisplayAsDefault</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_DocHostDoubleClickFlags</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DocHostDoubleClickFlags<ept id="p1">**</ept> property specifies the operation that should take place in response to a double-click.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>pdwDocHostDoubleClickFlags</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>DOCHOSTUIDBLCLK_DEFAULT<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_DocHostFlags</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DocHostFlags<ept id="p1">**</ept> property specifies the user interface capabilities of the host object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>pdwDocHostFlags</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>DOCHOSTUIFLAG_NO3DBORDER<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_Font</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Font<ept id="p1">**</ept> property specifies the ambient font of the container.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>[out] The address of an <bpt id="p1">**</bpt>IFontDisp<ept id="p1">**</ept> interface pointer used to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the default GUI font or the system font as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_ForeColor</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ForeColor`</ph> property specifies the ambient foreground color of the container.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>pclrForeground</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the system window text color as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_LocaleID</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LocaleID<ept id="p1">**</ept> property specifies the ambient locale ID of the container.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>plcidLocaleID</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the user's default locale as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>With this method you can discover the Ambient LocalID, that is, the LocaleID of the program your control is being used in.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Once you know the LocaleID, you can call code to load locale-specific captions, error message text, and so forth from a resource file or satellite DLL.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_MessageReflect</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MessageReflect<ept id="p1">**</ept> ambient property specifies whether the container will reflect messages to the hosted control.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>pbMessageReflect</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_OptionKeyPath</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OptionKeyPath<ept id="p1">**</ept> property specifies the registry key path to user settings.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>pbstrOptionKeyPath</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_ShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ShowGrabHandles<ept id="p1">**</ept> ambient property allows the control to find out if it should draw itself with grab handles.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>pbShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation always returns <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the value of this property.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_ShowHatching</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ShowHatching<ept id="p1">**</ept> ambient property allows the control to find out if it should draw itself hatched.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>pbShowHatching</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation always returns <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the value of this property.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::get_UserMode</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UserMode<ept id="p1">**</ept> property specifies the ambient user mode of the container.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>pbUserMode</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>[out] The address of a variable to receive the current value of this property.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_AllowContextMenu</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowContextMenu<ept id="p1">**</ept> property specifies whether the hosted control is allowed to display its own context menu.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>bAllowContextMenu</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_AllowShowUI</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowShowUI<ept id="p1">**</ept> property specifies whether the hosted control is allowed to display its own user interface.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>bAllowShowUI</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_AllowWindowlessActivation</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AllowWindowlessActivation<ept id="p1">**</ept> property specifies whether the container will allow windowless activation.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>bAllowWindowless</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_BackColor</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BackColor`</ph> property specifies the ambient background color of the container.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>clrBackground</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>COLOR_BTNFACE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>COLOR_WINDOW<ept id="p2">**</ept> as the default value of this property (depending on whether the parent of the host window is a dialog or not).</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_DisplayAsDefault</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DisplayAsDefault<ept id="p1">**</ept> is an ambient property that allows a control to find out if it is the default control.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_DocHostDoubleClickFlags</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DocHostDoubleClickFlags<ept id="p1">**</ept> property specifies the operation that should take place in response to a double-click.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>dwDocHostDoubleClickFlags</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>DOCHOSTUIDBLCLK_DEFAULT<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_DocHostFlags</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DocHostFlags<ept id="p1">**</ept> property specifies the user interface capabilities of the host object.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>dwDocHostFlags</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <bpt id="p1">**</bpt>DOCHOSTUIFLAG_NO3DBORDER<ept id="p1">**</ept> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_Font</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Font<ept id="p1">**</ept> property specifies the ambient font of the container.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the default GUI font or the system font as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_ForeColor</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ForeColor`</ph> property specifies the ambient foreground color of the container.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>clrForeground</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the system window text color as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_LocaleID</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LocaleID<ept id="p1">**</ept> property specifies the ambient locale ID of the container.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>lcidLocaleID</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses the user's default locale as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_MessageReflect</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MessageReflect<ept id="p1">**</ept> ambient property specifies whether the container will reflect messages to the hosted control.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_OptionKeyPath</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OptionKeyPath<ept id="p1">**</ept> property specifies the registry key path to user settings.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>bstrOptionKeyPath</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatch::put_UserMode</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UserMode<ept id="p1">**</ept> property specifies the ambient user mode of the container.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>[in] The new value of this property.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The ATL host object implementation uses <ph id="ph1">`VARIANT_TRUE`</ph> as the default value of this property.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>IAxWinAmbientDispatchEx::SetAmbientDispatch</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>This method is called to supplement the default ambient property interface with a user-defined interface.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>pDispatch</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Pointer to the new interface.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`SetAmbientDispatch`</ph> is called with a pointer to a new interface, this new interface will be used to invoke any properties or methods asked for by the hosted control — if those properties are not already provided by <bpt id="p1">[</bpt>IAxWinAmbientDispatch<ept id="p1">](../../atl/reference/iaxwinambientdispatch-interface.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::AttachControl</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Attaches an existing (and previously initialized) control to the host object using the window identified by <ph id="ph1">`hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>pUnkControl</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface of the control to be attached to the host object.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>[in] A handle to the window to be used for hosting.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::CreateControl</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Creates a control, initializes it, and hosts it in the window identified by <ph id="ph1">`hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>[in] A string identifying the control to create.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed by <bpt id="p1">**</bpt>MSHTML:<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>[in] A handle to the window to be used for hosting.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>[in] An interface pointer for a stream containing initialization data for the control.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>This window will be subclassed by the host object exposing this interface so that messages can be reflected to the control and other container features will work.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Calling this method is equivalent to calling <bpt id="p1">[</bpt>IAxWinHostWindow::CreateControlEx<ept id="p1">](#iaxwinhostwindow__createcontrolex)</ept>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To create a licensed ActiveX control, see <bpt id="p1">[</bpt>IAxWinHostWindowLic::CreateControlLic<ept id="p1">](#iaxwinhostwindowlic__createcontrollicex)</ept>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::CreateControlEx</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Creates an ActiveX control, initializes it, and hosts it in the specified window, similar to <bpt id="p1">[</bpt>IAxWinHostWindow::CreateControl<ept id="p1">](#iaxwinhostwindow__createcontrol)</ept>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>[in] A string identifying the control to create.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed with <bpt id="p1">**</bpt>MSHTML:<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>[in] A handle to the window to be used for hosting.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>[in] An interface pointer for a stream containing initialization data for the control.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>[out] The address of a pointer that will receive the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface of the created control.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>riidAdvise</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>[in] The interface identifier of an outgoing interface on the contained object.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>IID_NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>punkAdvise</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface of the sink object to be connected to the connection point on the contained object specified by <ph id="ph1">`iidSink`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">`CreateControl`</ph> method, <ph id="ph2">`CreateControlEx`</ph> also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To create a licensed ActiveX control, see <bpt id="p1">[</bpt>IAxWinHostWindowLic::CreateControlLicEx<ept id="p1">](#iaxwinhostwindowlic__createcontrollicex)</ept>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::QueryControl</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Returns the specified interface pointer provided by the hosted control.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>[in] The ID of an interface on the control being requested.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>[out] The address of a pointer that will receive the specified interface of the created control.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::SetExternalDispatch</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Sets the external dispinterface, which is available to contained controls through the <bpt id="p1">[</bpt>IDocHostUIHandlerDispatch::GetExternal<ept id="p1">](../../atl/reference/idochostuihandlerdispatch-interface.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>[in] A pointer to an <ph id="ph1">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindow::SetExternalUIHandler</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Call this function to set the external <bpt id="p1">[</bpt>IDocHostUIHandlerDispatch<ept id="p1">](../../atl/reference/idochostuihandlerdispatch-interface.md)</ept> interface for the <ph id="ph1">`CAxWindow`</ph> object.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>[in] A pointer to an <bpt id="p1">**</bpt>IDocHostUIHandlerDispatch<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>This function is used by controls (such as the Web browser control) that query the host's site for the <ph id="ph1">`IDocHostUIHandlerDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindowLic::CreateControlLic</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Creates a licensed control, initializes it, and hosts it in the window identified by <ph id="ph1">`hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>[in] The BSTR that contains the license key for the control.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IAxWinHostWindow::CreateControl<ept id="p1">](#iaxwinhostwindow__createcontrol)</ept> for a description of the remaining parameters and return value.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Calling this method is equivalent to calling <bpt id="p1">[</bpt>IAxWinHostWindowLic::CreateControlLicEx<ept id="p1">](#iaxwinhostwindowlic__createcontrollicex)</ept></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id="ph1">`IAxWinHostWindowLic::CreateControlLic`</ph>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>IAxWinHostWindowLic::CreateControlLicEx</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Creates a licensed ActiveX control, initializes it, and hosts it in the specified window, similar to <bpt id="p1">[</bpt>IAxWinHostWindow::CreateControl<ept id="p1">](#iaxwinhostwindow__createcontrol)</ept>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>[in] The BSTR that contains the license key for the control.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IAxWinHostWindow::CreateControlEx<ept id="p1">](#iaxwinhostwindow__createcontrolex)</ept> for a description of the remaining parameters and return value.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id="p1">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id="ph1">`IAxWinHostWindowLic::CreateControlLicEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>