<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">debdf7c9ce21dce950983e632763cbf8f881fda3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\classes-and-structs-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64e8a55c78e33ccd29a78a3320d3997e2b5e4a30</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84522709802f74ad769748a4f7fab3bd2497b13b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Classes and Structs  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Classes and Structs  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares a class or struct whose <bpt id="p1">*</bpt>object lifetime<ept id="p1">*</ept> is administered automatically.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When the object is no longer accessible or goes out of scope, Visual C++ automatically discards the memory that is allocated to the object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>class_access<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The accessibility of the class or struct outside the assembly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Possible values are <bpt id="p1">**</bpt>public<ept id="p1">**</ept> and <ph id="ph1">`private`</ph> (<ph id="ph2">`private`</ph> is the default).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Nested classes or structs cannot have a <bpt id="p1">*</bpt>class_access<ept id="p1">*</ept> specifier.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The name of the class or struct.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>modifier<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>abstract<ept id="p1">](../windows/abstract-cpp-component-extensions.md)</ept> and <bpt id="p2">[</bpt>sealed<ept id="p2">](../windows/sealed-cpp-component-extensions.md)</ept> are valid modifiers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>inherit_access<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The accessibility of <ph id="ph1">`base_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The only permitted accessibility is <ph id="ph1">`public`</ph> (<ph id="ph2">`public`</ph> is the default).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>base_type<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A base type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, a value type cannot act as a base type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the language-specific descriptions of this parameter in the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and <ph id="ph2">[!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]</ph> sections.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default member accessibility of an object declared with <bpt id="p1">**</bpt>ref class<ept id="p1">**</ept> or <bpt id="p2">**</bpt>value class<ept id="p2">**</ept> is <ph id="ph1">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>And the default member accessibility of an object declared with <bpt id="p1">**</bpt>ref struct<ept id="p1">**</ept> or <bpt id="p2">**</bpt>value struct<ept id="p2">**</ept> is <ph id="ph1">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a reference type inherits from another reference type, virtual functions in the base class must explicitly be overridden (with <bpt id="p1">[</bpt>override<ept id="p1">](../windows/override-cpp-component-extensions.md)</ept>) or hidden (with <bpt id="p2">[</bpt>new (new slot in vtable)<ept id="p2">](../windows/new-new-slot-in-vtable-cpp-component-extensions.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The derived class functions must also be explicitly marked as <ph id="ph1">`virtual`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To detect at compile time whether a type is a <ph id="ph1">`ref class`</ph> or <ph id="ph2">`ref struct`</ph>, or a <ph id="ph3">`value class`</ph> or <ph id="ph4">`value struct`</ph>, use <ph id="ph5">`__is_ref_class (``type``)`</ph>, <ph id="ph6">`__is_value_class (``type``)`</ph>, or <ph id="ph7">`__is_simple_value_class (``type``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiler Support for Type Traits<ept id="p1">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information on classes and structs, see</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instantiating Classes and Structs</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>C++ Stack Semantics for Reference Types</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Classes, Structures, and Unions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Destructors and finalizers in How to: Define and consume classes and structs (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>User-Defined Operators (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>User-Defined Conversions (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>How to: Wrap Native Class for Use by C</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Generic Classes (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Ref classes and structs<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)</ept> and <bpt id="p2">[</bpt>Value classes and structs<ept id="p2">](http://msdn.microsoft.com/library/windows/apps/hh699861.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>base_type<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A base type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ref class`</ph> or <ph id="ph2">`ref struct`</ph> can inherit from zero or more interfaces and zero or one <ph id="ph3">`ref`</ph> types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`value class`</ph> or <ph id="ph2">`value struct`</ph> can only inherit from zero or more interfaces.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When you declare an object by using the <ph id="ph1">`ref class`</ph> or <ph id="ph2">`ref struct`</ph> keywords, the object is accessed by a handle to an object; that is, a reference-counter pointer to the object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the declared variable goes out of scope, the compiler automatically deletes the underlying object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the object is  used as a parameter in a call or is stored in a variable, a handle to the object is actually passed or stored.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you declare an object by using the <ph id="ph1">`value class`</ph> or <ph id="ph2">`value struct`</ph> keywords, the object lifetime of the declared object is not supervised.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The object is like any other standard C++ class or struct.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following table lists differences from the syntax shown in the <bpt id="p1">**</bpt>All Runtimes<ept id="p1">**</ept> section that are specific to C++/CLI.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>base_type<ept id="p1">*</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A base type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ref class`</ph> or <ph id="ph2">`ref struct`</ph> can inherit from zero or more managed interfaces and zero or one ref types.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`value class`</ph> or <ph id="ph2">`value struct`</ph> can only inherit from zero or more managed interfaces.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref class`</ph> and <ph id="ph2">`ref struct`</ph> keywords tell the compiler that the class or structure is to be allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the object is  used as a parameter in a call or is stored in a variable, a reference to the object is actually passed or stored.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`value class`</ph> and <ph id="ph2">`value struct`</ph> keywords tells the compiler that the value of the allocated class or structure is passed to functions or stored in members.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>