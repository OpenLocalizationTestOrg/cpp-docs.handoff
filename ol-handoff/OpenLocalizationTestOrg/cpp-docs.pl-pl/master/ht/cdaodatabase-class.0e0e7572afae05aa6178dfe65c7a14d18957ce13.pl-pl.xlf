<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a30e42eb21d216eb469c2aa04b0438bd6356057</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaodatabase-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e7974e51ef6ed6b720c3c654efb20b08b509a6f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43f337f23116dd440579b7435b76e2d75f1aaa08</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoDatabase Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoDatabase Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a connection to a database through which you can operate on the data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CDaoDatabase</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> to connect the object to a database.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CanTransact</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the database supports transactions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CanUpdate</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the <ph id="ph1">`CDaoDatabase`</ph> object is updatable (not read-only).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Close</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Closes the database connection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Create</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates the underlying DAO database object and initializes the <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CreateRelation</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Defines a new relation among the tables in the database.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteQueryDef</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Deletes a querydef object saved in the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteRelation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Deletes an existing relation between tables in the database.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteTableDef</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Deletes the definition of a table in the database.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This deletes the actual table and all of its data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Execute</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Executes an action query.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> for a query that returns results throws an exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetConnect</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the connection string used to connect the <ph id="ph1">`CDaoDatabase`</ph> object to a database.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Used for ODBC.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetName</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the name of the database currently in use.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryDefCount</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the number of queries defined for the database.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryDefInfo</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns information about a specified query defined in the database.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the number of seconds after which database query operations will time out.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Affects all subsequent open, add new, update, and edit operations and other operations on ODBC data sources (only) such as <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> calls.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRecordsAffected</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns the number of records affected by the last update, edit, or add operation or by a call to <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRelationCount</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Returns the number of relations defined between tables in the database.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRelationInfo</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Returns information about a specified relation defined between tables in the database.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetTableDefCount</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns the number of tables defined in the database.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetTableDefInfo</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns information about a specified table in the database.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetVersion</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the version of the database engine associated with the database.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::IsOpen</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the <ph id="ph1">`CDaoDatabase`</ph> object is currently connected to a database.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Open</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Establishes a connection to a database.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::SetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Sets the number of seconds after which database query operations (on ODBC data sources only) will time out.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Affects all subsequent open, add new, update, and delete operations.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::m_pDAODatabase</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A pointer to the underlying DAO database object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::m_pWorkspace</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept> object that contains the database and defines its transaction space.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For information about the database formats supported, see the <bpt id="p1">[</bpt>GetName<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__getname)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can have one or more <ph id="ph1">`CDaoDatabase`</ph> objects active at a time in a given "workspace," represented by a <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The workspace maintains a collection of open database objects, called the Databases collection.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The MFC DAO database classes are distinct from the MFC database classes based on ODBC.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CDaoDatabase`</ph> supplies an interface similar to that of the ODBC class <bpt id="p1">[</bpt>CDatabase<ept id="p1">](../../mfc/reference/cdatabase-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The main difference is that <ph id="ph1">`CDatabase`</ph> accesses the DBMS through Open Database Connectivity (ODBC) and an ODBC driver for that DBMS.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>accesses data through a Data Access Object (DAO) based on the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In general, the MFC classes based on DAO are more capable than the MFC classes based on ODBC; the DAO-based classes can access data, including through ODBC drivers, via their own database engine.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The DAO-based classes also support Data Definition Language (DDL) operations, such as adding tables via the classes, without having to call DAO directly.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can create database objects implicitly, when you create recordset objects.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>But you can also create database objects explicitly.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To use an existing database explicitly with <ph id="ph1">`CDaoDatabase`</ph>, do either of the following:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CDaoDatabase`</ph> object, passing a pointer to an open <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Or construct a <ph id="ph1">`CDaoDatabase`</ph> object without specifying the workspace (MFC creates a temporary workspace object).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To create a new Microsoft Jet (.MDB) database, construct a <ph id="ph1">`CDaoDatabase`</ph> object and call its <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaodatabase__create)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Do <bpt id="p1">*</bpt>not<ept id="p1">*</ept> call <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> after <bpt id="p3">**</bpt>Create<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To open an existing database, construct a <ph id="ph1">`CDaoDatabase`</ph> object and call its <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaodatabase__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Any of these techniques appends the DAO database object to the workspace's Databases collection and opens a connection to the data.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you then construct <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept>, <bpt id="p2">[</bpt>CDaoTableDef<ept id="p2">](../../mfc/reference/cdaotabledef-class.md)</ept>, or <bpt id="p3">[</bpt>CDaoQueryDef<ept id="p3">](../../mfc/reference/cdaoquerydef-class.md)</ept> objects for operating on the connected database, pass the constructors for these objects a pointer to your <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you finish using the connection, call the <bpt id="p1">[</bpt>Close<ept id="p1">](#cdaodatabase__close)</ept> member function and destroy the <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> closes any recordsets you have not closed previously.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Transactions</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Database transaction processing is supplied at the workspace level — see the <bpt id="p1">[</bpt>BeginTrans<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__begintrans)</ept>, <bpt id="p2">[</bpt>CommitTrans<ept id="p2">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__committrans)</ept>, and <bpt id="p3">[</bpt>Rollback<ept id="p3">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__rollback)</ept> member functions of class <ph id="ph1">`CDaoWorkspace`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>ODBC Connections</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The recommended way to work with ODBC data sources is to attach external tables to a Microsoft Jet (.MDB) database.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Collections</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Each database maintains its own collections of tabledef, querydef, recordset, and relation objects.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CDaoDatabase`</ph> supplies member functions for manipulating these objects.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The objects are stored in DAO, not in the MFC database object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>MFC supplies classes for tabledef, querydef, and recordset objects but not for relation objects.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CanTransact</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the database allows transactions.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Nonzero if the database supports transactions; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Transactions are managed in the database's workspace.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CanUpdate</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDaoDatabase`</ph> object allows updates.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDaoDatabase`</ph> object allows updates; otherwise 0, indicating either that you passed <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> in <ph id="ph2">`bReadOnly`</ph> when you opened the <ph id="ph3">`CDaoDatabase`</ph> object or that the database itself is read-only.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaodatabase__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For information about database updatability, see the topic "Updatable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CDaoDatabase</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>pWorkspace</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CDaoWorkspace`</ph> object that will contain the new database object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If you accept the default value of <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the constructor creates a temporary <ph id="ph1">`CDaoWorkspace`</ph> object that uses the default DAO workspace.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can get a pointer to the workspace object via the <bpt id="p1">[</bpt>m_pWorkspace<ept id="p1">](#cdaodatabase__m_pworkspace)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>After constructing the object, if you are creating a new Microsoft Jet (.MDB) database, call the object's <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaodatabase__create)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you are, instead, opening an existing database, call the object's <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaodatabase__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When you finish with the object, you should call its <bpt id="p1">[</bpt>Close<ept id="p1">](#cdaodatabase__close)</ept> member function and then destroy the <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You might find it convenient to embed the <ph id="ph1">`CDaoDatabase`</ph> object in your document class.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoDatabase`</ph> object is also created implicitly if you open a <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> object without passing a pointer to an existing <ph id="ph2">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This database object is closed when you close the recordset object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Close</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Call this member function to disconnect from a database and close any open recordsets, tabledefs, and querydefs associated with the database.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>It is good practice to close these objects yourself before you call this member function.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Closing a <ph id="ph1">`CDaoDatabase`</ph> object removes it from the Databases collection in the associated <bpt id="p1">[</bpt>workspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> does not destroy the <ph id="ph1">`CDaoDatabase`</ph> object, you can reuse the object by opening the same database or a different database.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>Update<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__update)</ept> member function (if there are pending edits) and the <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> member function on all open recordset objects before you close a database.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If you exit a function that declares <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> or <ph id="ph1">`CDaoDatabase`</ph> objects on the stack, the database is closed, any unsaved changes are lost, all pending transactions are rolled back, and any pending edits to your data are lost.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If you try to close a database object while any recordset objects are open, or if you try to close a workspace object while any database objects belonging to that specific workspace are open, those recordset objects will be closed and any pending updates or edits will be rolled back.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If you try to close a workspace object while any database objects belonging to it are open, the operation closes all database objects belonging to that specific workspace object, which may result in unclosed recordset objects being closed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you do not close your database object, MFC reports an assertion failure in debug builds.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the database object is defined outside the scope of a function, and you exit the function without closing it, the database object will remain open until explicitly closed or the module in which it is defined is out of scope.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Create</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To create a new Microsoft Jet (.MDB) database, call this member function after you construct a <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A string expression that is the name of the database file that you are creating.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>It can be the full path and filename, such as "C:<ph id="ph1">\\</ph>\MYDB.MDB".</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You must supply a name.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If you do not supply a filename extension, .MDB is appended.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If your network supports the uniform naming convention (UNC), you can also specify a network path, such as "<ph id="ph1">\\\\\\</ph>\MYSERVER<ph id="ph2">\\</ph>\MYSHARE<ph id="ph3">\\</ph>\MYDIR<ph id="ph4">\\</ph>\MYDB".</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Only Microsoft Jet (.MDB) database files can be created using this member function.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>(Double backslashes are required in string literals because "<ph id="ph1">\\</ph>" is the C++ escape character.)</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A string expression used to specify collating order for creating the database.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>dbLangGeneral<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangGeneral<ept id="p1">**</ept> English, German, French, Portuguese, Italian, and Modern Spanish</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangArabic<ept id="p1">**</ept> Arabic</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangCyrillic<ept id="p1">**</ept> Russian</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangCzech<ept id="p1">**</ept> Czech</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangDutch<ept id="p1">**</ept> Dutch</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangGreek<ept id="p1">**</ept> Greek</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangHebrew<ept id="p1">**</ept> Hebrew</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangHungarian<ept id="p1">**</ept> Hungarian</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangIcelandic<ept id="p1">**</ept> Icelandic</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangNordic<ept id="p1">**</ept> Nordic languages (Microsoft Jet database engine version 1.0 only)</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangNorwdan<ept id="p1">**</ept> Norwegian and Danish</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangPolish<ept id="p1">**</ept> Polish</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangSpanish<ept id="p1">**</ept> Traditional Spanish</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangSwedfin<ept id="p1">**</ept> Swedish and Finnish</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbLangTurkish<ept id="p1">**</ept> Turkish</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>An integer that indicates one or more options.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbEncrypt<ept id="p1">**</ept> Create an encrypted database.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbVersion10<ept id="p1">**</ept> Create a database with Microsoft Jet database version 1.0.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbVersion11<ept id="p1">**</ept> Create a database with Microsoft Jet database version 1.1.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbVersion20<ept id="p1">**</ept> Create a database with Microsoft Jet database version 2.0.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbVersion30<ept id="p1">**</ept> Create a database with Microsoft Jet database version 3.0.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If you omit the encryption constant, an unencrypted database is created.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>You can specify only one version constant.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If you omit a version constant, a database that uses the Microsoft Jet database version 3.0 is created.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If a database is not encrypted, it is possible, even if you implement user/password security, to directly read the binary disk file that constitutes the database.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> creates the database file and the underlying DAO database object and initializes the C++ object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The object is appended to the associated workspace's Databases collection.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The database object is in an open state; do not call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> after <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>With <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, you can create only Microsoft Jet (.MDB) databases.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>You cannot create ISAM databases or ODBC databases.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::CreateRelation</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Call this member function to establish a relation between one or more fields in a primary table in the database and one or more fields in a foreign table (another table in the database).</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The unique name of the relation object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The name must start with a letter and can contain a maximum of 40 characters.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>It can include numbers and underscore characters but cannot include punctuation or spaces.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The name of the primary table in the relation.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the table does not exist, MFC throws an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The name of the foreign table in the relation.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If the table does not exist, MFC throws an exception of type <ph id="ph1">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A long value that contains information about the relationship type.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>You can use this value to enforce referential integrity, among other things.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>You can use the bitwise-OR operator ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) to combine any of the following values (as long as the combination makes sense):</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationUnique<ept id="p1">**</ept> Relationship is one-to-one.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationDontEnforce<ept id="p1">**</ept> Relationship is not enforced (no referential integrity).</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationInherited<ept id="p1">**</ept> Relationship exists in a noncurrent database that contains the two attached tables.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationUpdateCascade<ept id="p1">**</ept> Updates will cascade (for more on cascades, see Remarks).</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationDeleteCascade<ept id="p1">**</ept> Deletions will cascade.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>lpszField</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string containing the name of a field in the primary table (named by <ph id="ph1">`lpszTable`</ph>).</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>lpszForeignField</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string containing the name of a field in the foreign table (named by <ph id="ph1">`lpszForeignTable`</ph>).</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>relinfo</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoRelationInfo<ept id="p1">](../../mfc/reference/cdaorelationinfo-structure.md)</ept> object that contains information about the relation you want to create.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The relationship cannot involve a query or an attached table from an external database.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Use the first version of the function when the relation involves one field in each of the two tables.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Use the second version when the relation involves multiple fields.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The maximum number of fields in a relation is 14.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This action creates an underlying DAO relation object, but this is an MFC implementation detail since MFC's encapsulation of relation objects is contained within class <ph id="ph1">`CDaoDatabase`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>MFC does not supply a class for relations.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If you set the relation object's attributes to activate cascade operations, the database engine automatically updates or deletes records in one or more other tables when changes are made to related primary key tables.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For example, suppose you establish a cascade delete relationship between a Customers table and an Orders table.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>When you delete records from the Customers table, records in the Orders table related to that customer are also deleted.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>In addition, if you establish cascade delete relationships between the Orders table and other tables, records from those tables are automatically deleted when you delete records from the Customers table.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CreateRelation Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteQueryDef</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Call this member function to delete the specified querydef — saved query — from the <ph id="ph1">`CDaoDatabase`</ph> object's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The name of the saved query to delete.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Afterwards, that query is no longer defined in the database.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For information about creating querydef objects, see class <bpt id="p1">[</bpt>CDaoQueryDef<ept id="p1">](../../mfc/reference/cdaoquerydef-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A querydef object becomes associated with a particular <ph id="ph1">`CDaoDatabase`</ph> object when you construct the <ph id="ph2">`CDaoQueryDef`</ph> object, passing it a pointer to the database object.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteRelation</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Call this member function to delete an existing relation from the database object's Relations collection.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The name of the relation to delete.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Afterwards, the relation no longer exists.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Delete Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::DeleteTableDef</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Call this member function to delete the specified table and all of its data from the <ph id="ph1">`CDaoDatabase`</ph> object's TableDefs collection.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The name of the tabledef to delete.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Afterwards, that table is no longer defined in the database.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Be very careful not to delete system tables.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For information about creating tabledef objects, see class <bpt id="p1">[</bpt>CDaoTableDef<ept id="p1">](../../mfc/reference/cdaotabledef-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A tabledef object becomes associated with a particular <ph id="ph1">`CDaoDatabase`</ph> object when you construct the <ph id="ph2">`CDaoTableDef`</ph> object, passing it a pointer to the database object.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Delete Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Execute</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Call this member function to run an action query or execute a SQL statement on the database.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string containing a valid SQL command to execute.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An integer that specifies options relating to the integrity of the query.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>You can use the bitwise-OR operator ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) to combine any of the following constants (provided the combination makes sense — for example, you would not combine <bpt id="p2">**</bpt>dbInconsistent<ept id="p2">**</ept> with <bpt id="p3">**</bpt>dbConsistent<ept id="p3">**</ept>):</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbDenyWrite<ept id="p1">**</ept> Deny write permission to other users.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbInconsistent<ept id="p1">**</ept> (Default) Inconsistent updates.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbConsistent<ept id="p1">**</ept> Consistent updates.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSQLPassThrough<ept id="p1">**</ept> SQL pass-through.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Causes the SQL statement to be passed to an ODBC data source for processing.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbFailOnError<ept id="p1">**</ept> Roll back updates if an error occurs.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbSeeChanges<ept id="p1">**</ept> Generate a run-time error if another user is changing data you are editing.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>If both <bpt id="p1">**</bpt>dbInconsistent<ept id="p1">**</ept> and <bpt id="p2">**</bpt>dbConsistent<ept id="p2">**</ept> are included or if neither is included, the result is the default.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>For an explanation of these constants, see the topic "Execute Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> works only for action queries or SQL pass-through queries that do not return results.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>It does not work for select queries, which return records.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For a definition and information about action queries, see the topics "Action Query" and "Execute Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Given a syntactically correct SQL statement and proper permissions, the <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> member function will not fail even if not a single row can be modified or deleted.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Therefore, always use the <bpt id="p1">**</bpt>dbFailOnError<ept id="p1">**</ept> option when using the <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> member function to run an update or delete query.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This option causes MFC to throw an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept> and rolls back all successful changes if any of the records affected are locked and cannot be updated or deleted.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Note that you can always call <ph id="ph1">`GetRecordsAffected`</ph> to see how many records were affected.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>GetRecordsAffected<ept id="p1">](#cdaodatabase__getrecordsaffected)</ept> member function of the database object to determine the number of records affected by the most recent <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`GetRecordsAffected`</ph> returns information about the number of records deleted, updated, or inserted when executing an action query.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The count returned will not reflect changes in related tables when cascade updates or deletes are in effect.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> does not return a recordset.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> on a query that selects records causes MFC to throw an exception of type <ph id="ph1">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>(There is no <ph id="ph1">`ExecuteSQL`</ph> member function analogous to <ph id="ph2">`CDatabase::ExecuteSQL`</ph>.)</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetConnect</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the connection string used to connect the <ph id="ph1">`CDaoDatabase`</ph> object to an ODBC or ISAM database.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The connection string if <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaodatabase__open)</ept> has been called successfully on an ODBC data source; otherwise, an empty string.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For a Microsoft Jet (.MDB) database, the string is always empty unless you set it for use with the <bpt id="p1">**</bpt>dbSQLPassThrough<ept id="p1">**</ept> option used with the <bpt id="p2">[</bpt>Execute<ept id="p2">](#cdaodatabase__execute)</ept> member function or used in opening a recordset.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The string provides information about the source of an open database or a database used in a pass-through query.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The connection string is composed of a database type specifier and zero or more parameters separated by semicolons.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Using the MFC DAO classes to connect to a data source via ODBC is less efficient than connecting via an attached table.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The connection string is used to pass additional information to ODBC and certain ISAM drivers as needed.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It is not used for .MDB databases.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>For Microsoft Jet database base tables, the connection string is an empty string ("") except when you use it for a SQL pass-through query as described under Return Value above.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaodatabase__open)</ept> member function for a description of how the connection string is created.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Once the connection string has been set in the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> call, you can later use it to check the setting to determine the type, path, user ID, Password, or ODBC data source of the database.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetName</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of the currently open database, which is the name of an existing database file or the name of a registered ODBC data source.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The full path and file name of the database if successful; otherwise, an empty <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If your network supports the uniform naming convention (UNC), you can also specify a network path—for example, "<ph id="ph1">\\\\\\</ph>\MYSERVER<ph id="ph2">\\</ph>\MYSHARE<ph id="ph3">\\</ph>\MYDIR<ph id="ph4">\\</ph>\MYDB.MDB".</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>(Double backslashes are required in string literals because "<ph id="ph1">\\</ph>" is the C++ escape character.)</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>You might, for example, want to display this name in a heading.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If an error occurs while the name is being retrieved, MFC throws an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>For better performance when external databases are being accessed, we recommend that you attach external database tables to a Microsoft Jet database (.MDB) rather than connecting directly to the data source.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The database type is indicated by the file or directory that the path points to, as follows:</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Pathname points to..</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Database type</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>.MDB file</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Microsoft Jet database (Microsoft Access)</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Directory that contains .DBF file(s)</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>dBASE database</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Directory that contains .XLS file</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Microsoft Excel database</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Directory that contains .PDX file(s)</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Paradox database</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Directory that contains appropriately formatted text database files</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Text format database</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>For ODBC databases such as SQL Server and Oracle, the database's connection string identifies a data source name (DSN) that's registered by ODBC.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryDefCount</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of queries defined in the database's QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The number of queries defined in the database.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>is useful if you need to loop through all querydefs in the QueryDefs collection.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To obtain information about a given query in the collection, see <bpt id="p1">[</bpt>GetQueryDefInfo<ept id="p1">](#cdaodatabase__getquerydefinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryDefInfo</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about a query defined in the database.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The index of the predefined query in the database's QueryDefs collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>querydefinfo</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoQueryDefInfo<ept id="p1">](../../mfc/reference/cdaoquerydefinfo-structure.md)</ept> object that returns the information requested.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the recordset to retrieve.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return about the recordset:</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>(Default) Name, Type</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Primary information plus: Date Created, Date of Last Update, Returns Records, Updatable</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Primary and secondary information plus: SQL, Connect, ODBCTimeout</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>A string containing the name of a query defined in the database, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Two versions of the function are supplied so you can select a query either by index in the database's QueryDefs collection or by the name of the query.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>For a description of the information returned in <bpt id="p1">*</bpt>querydefinfo<ept id="p1">*</ept>, see the <bpt id="p2">[</bpt>CDaoQueryDefInfo<ept id="p2">](../../mfc/reference/cdaoquerydefinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>If you request one level of information, you get any prior levels of information as well.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the current number of seconds to allow before subsequent operations on the connected database are timed out.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>A short integer containing the timeout value in seconds.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An operation might time out due to network access problems, excessive query processing time, and so on.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>While the setting is in effect, it affects all open, add new, update, and delete operations on any recordsets associated with this <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>You can change the current timeout setting by calling <bpt id="p1">[</bpt>SetQueryTimeout<ept id="p1">](#cdaodatabase__setquerytimeout)</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Changing the query timeout value for a recordset after opening does not change the value for the recordset.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>For example, subsequent <bpt id="p1">[</bpt>Move<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__move)</ept> operations do not use the new value.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The default value is initially set when the database engine is initialized.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The default value for query timeouts is taken from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>If there is no registry setting, the default is 60 seconds.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Not all databases support the ability to set a query timeout value.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If you set a query timeout value of 0, no timeout occurs; and communication with the database may stop responding.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>This behavior may be useful during development.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>If the call fails, MFC throws an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "QueryTimeout Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRecordsAffected</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the number of records affected by the most recent call of the <bpt id="p1">[</bpt>Execute<ept id="p1">](#cdaodatabase__execute)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>A long integer containing the number of records affected.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The value returned includes the number of records deleted, updated, or inserted by an action query run with <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The count returned will not reflect changes in related tables when cascade updates or deletes are in effect.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "RecordsAffected Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRelationCount</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the number of relations defined between tables in the database.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The number of relations defined between tables in the database.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetRelationCount<ept id="p1">**</ept> is useful if you need to loop through all defined relations in the database's Relations collection.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>To obtain information about a given relation in the collection, see <bpt id="p1">[</bpt>GetRelationInfo<ept id="p1">](#cdaodatabase__getrelationinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>To illustrate the concept of a relation, consider a Suppliers table and a Products table, which might have a one-to-many relationship.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>In this relationship, one supplier can supply more than one product.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Other relations are one-to-one and many-to-many.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetRelationInfo</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain information about a specified relation in the database's Relations collection.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The index of the relation object in the database's Relations collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>relinfo</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoRelationInfo<ept id="p1">](../../mfc/reference/cdaorelationinfo-structure.md)</ept> object that returns the information requested.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the relation to retrieve.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return about the relation:</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>(Default) Name, Table, Foreign Table</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Attributes, Field Information</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The Field Information is a <bpt id="p1">[</bpt>CDaoRelationFieldInfo<ept id="p1">](../../mfc/reference/cdaorelationfieldinfo-structure.md)</ept> object containing the fields from the primary table involved in the relation.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>A string containing the name of the relation object, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Two versions of this function provide access either by index or by name.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>For a description of the information returned in <bpt id="p1">*</bpt>relinfo<ept id="p1">*</ept>, see the <bpt id="p2">[</bpt>CDaoRelationInfo<ept id="p2">](../../mfc/reference/cdaorelationinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>If you request information at one level, you also get information at any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>If you set the relation object's attributes to activate cascade operations ( <bpt id="p1">**</bpt>dbRelationUpdateCascades<ept id="p1">**</ept> or <bpt id="p2">**</bpt>dbRelationDeleteCascades<ept id="p2">**</ept>), the Microsoft Jet database engine automatically updates or deletes records in one or more other tables when changes are made to related primary key tables.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>For example, suppose you establish a cascade delete relationship between a Customers table and an Orders table.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>When you delete records from the Customers table, records in the Orders table related to that customer are also deleted.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>In addition, if you establish cascade delete relationships between the Orders table and other tables, records from those tables are automatically deleted when you delete records from the Customers table.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetTableDefCount</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of tables defined in the database.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The number of tabledefs defined in the database.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>is useful if you need to loop through all tabledefs in the database's TableDefs collection.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>To obtain information about a given table in the collection, see <bpt id="p1">[</bpt>GetTableDefInfo<ept id="p1">](#cdaodatabase__gettabledefinfo)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetTableDefInfo</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about a table defined in the database.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The index of the tabledef object in the database's TableDefs collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoTableDefInfo<ept id="p1">](../../mfc/reference/cdaotabledefinfo-structure.md)</ept> object that returns the information requested.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the table to retrieve.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return about the relation:</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>(Default) Name, Updatable, Attributes</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Primary information plus: Date Created, Date Last Updated, Source Table Name, Connect</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Primary and secondary information plus: Validation Rule, Validation Text, Record Count</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The name of the tabledef object, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Two versions of the function are supplied so you can select a table either by index in the database's TableDefs collection or by the name of the table.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>For a description of the information returned in <ph id="ph1">`tabledefinfo`</ph>, see the <bpt id="p1">[</bpt>CDaoTableDefInfo<ept id="p1">](../../mfc/reference/cdaotabledefinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If you request information at one level, you get information for any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AFX_DAO_ALL_INFO`</ph> option provides information that can be slow to obtain.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>In this case, counting the records in the table could be very time consuming if there are many records.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::GetVersion</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the version of the Microsoft Jet database file.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that indicates the version of the database file associated with the object.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The value returned represents the version number in the form "major.minor"; for example, "3.0".</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The product version number (for example, 3.0) consists of the version number (3), a period, and the release number (0).</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The versions to date are 1.0, 1.1, 2.0, and 3.0.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Version Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::IsOpen</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDaoDatabase`</ph> object is currently open on a database.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDaoDatabase`</ph> object is currently open; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::m_pDAODatabase</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the OLE interface for the DAO database object underlying the <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Use this pointer if you need to access the DAO interface directly.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>For information about calling DAO directly, see <bpt id="p1">[</bpt>Technical Note 54<ept id="p1">](../../mfc/tn054-calling-dao-directly-while-using-mfc-dao-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::m_pWorkspace</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the <bpt id="p1">[</bpt>CDaoWorkspace<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md)</ept> object that contains the database object.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Use this pointer if you need to access the workspace directly — for example, to obtain pointers to other database objects in the workspace's Databases collection.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::Open</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>You must call this member function to initialize a newly constructed <ph id="ph1">`CDaoDatabase`</ph> object that represents an existing database.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>A string expression that is the name of an existing Microsoft Jet (.MDB) database file.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If the filename has an extension, it is required.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>If your network supports the uniform naming convention (UNC), you can also specify a network path, such as "<ph id="ph1">\\\\\\</ph>\MYSERVER<ph id="ph2">\\</ph>\MYSHARE<ph id="ph3">\\</ph>\MYDIR<ph id="ph4">\\</ph>\MYDB.MDB".</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>(Double backslashes are required in string literals because "<ph id="ph1">\\</ph>" is the C++ escape character.)</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Some considerations apply when using <ph id="ph1">`lpszName`</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If it:</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Refers to a database that is already open for exclusive access by another user, MFC throws an exception of type <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Trap that exception to let your user know that the database is unavailable.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Is an empty string ("") and <bpt id="p1">*</bpt>lpszConnect<ept id="p1">*</ept> is "ODBC;", a dialog box listing all registered ODBC data source names is displayed so the user can select a database.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>You should avoid direct connections to ODBC data sources; use an attached table instead.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Otherwise does not refer to an existing database or valid ODBC data source name, MFC throws an exception of type <ph id="ph1">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>For details about DAO error codes, see the DAOERR.H file.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Trappable Data Access Errors" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>A Boolean value that is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the database is to be opened for exclusive (nonshared) access and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if the database is to be opened for shared access.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>If you omit this argument, the database is opened for shared access.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A Boolean value that is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the database is to be opened for read-only access and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if the database is to be opened for read/write access.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>If you omit this argument, the database is opened for read/write access.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>All dependent recordsets inherit this attribute.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>A string expression used for opening the database.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This string constitutes the ODBC connect arguments.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>You must supply the exclusive and read-only arguments to supply a source string.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>If the database is a Microsoft Jet database (.MDB), this string is empty ("").</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The syntax for the default value — <bpt id="p1">**</bpt>_T<ept id="p1">**</ept>("") — provides portability for Unicode as well as ANSI builds of your application.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> associates the database with the underlying DAO object.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>You cannot use the database object to construct recordset, tabledef, or querydef objects until it is initialized.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> appends the database object to the associated workspace's Databases collection.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Use the parameters as follows:</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>If you are opening a Microsoft Jet (.MDB) database, use the <ph id="ph1">`lpszName`</ph> parameter and pass an empty string for the <ph id="ph2">`lpszConnect`</ph> parameter or pass a password string of the form ";PWD=password" if the database is password-protected (.MDB databases only).</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>If you are opening an ODBC data source, pass a valid ODBC connection string in <ph id="ph1">`lpszConnect`</ph> and an empty string in <ph id="ph2">`lpszName`</ph>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "OpenDatabase Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>For better performance when accessing external databases, including ISAM databases and ODBC data sources, it is recommended that you attach external database tables to a Microsoft Jet engine database (.MDB) rather than connecting directly to the data source.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>It is possible for a connection attempt to time out if, for example, the DBMS host is unavailable.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If the connection attempt fails, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> throws an exception of type <bpt id="p2">[</bpt>CDaoException<ept id="p2">](../../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The remaining remarks apply only to ODBC databases:</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>If the database is an ODBC database and the parameters in your <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> call do not contain enough information to make the connection, the ODBC driver opens a dialog box to obtain the necessary information from the user.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, your connection string, <ph id="ph1">`lpszConnect`</ph>, is stored privately and is available by calling the <bpt id="p2">[</bpt>GetConnect<ept id="p2">](#cdaodatabase__getconnect)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>If you wish, you can open your own dialog box before you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> to get information from the user, such as a password, then add that information to the connection string you pass to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Or you might want to save the connection string you pass (perhaps in the Windows registry) so you can reuse it the next time your application calls <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> on a <ph id="ph1">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>You can also use the connection string for multiple levels of login authorization (each for a different <ph id="ph1">`CDaoDatabase`</ph> object) or to convey other database-specific information.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>CDaoDatabase::SetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Call this member function to override the default number of seconds to allow before subsequent operations on the connected database time out.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The number of seconds to allow before a query attempt times out.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>An operation might time out because of network access problems, excessive query processing time, and so on.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetQueryTimeout`</ph> before opening your recordset or before calling the recordset's <bpt id="p1">[</bpt>AddNew<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__addnew)</ept>, <bpt id="p2">[</bpt>Update<ept id="p2">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__update)</ept>, or <bpt id="p3">[</bpt>Delete<ept id="p3">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__delete)</ept> member functions if you want to change the query timeout value.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The setting affects all subsequent <bpt id="p1">[</bpt>Open<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__open)</ept>, <ph id="ph1">`AddNew`</ph>, <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> calls to any recordsets associated with this <ph id="ph2">`CDaoDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Changing the query timeout value for a recordset after opening does not change the value for the recordset.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>For example, subsequent <bpt id="p1">[</bpt>Move<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__move)</ept> operations do not use the new value.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The default value for query timeouts is 60 seconds.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Not all databases support the ability to set a query timeout value.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If you set a query timeout value of 0, no timeout occurs; the communication with the database may stop responding.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>This behavior may be useful during development.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "QueryTimeout Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>CDaoWorkspace Class</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>CDaoRecordset Class</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>CDaoTableDef Class</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>CDaoQueryDef Class</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>CDatabase Class</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>CDaoException Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>