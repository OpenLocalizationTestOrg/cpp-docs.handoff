<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1bdb7bd22e130c35f1364a672d7486b176c865d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\mbsrtowcs-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">036e4a8d123e721af6e18b03d4b97d2c85c76762</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">287088acf54c315ee55f52a5ca74f835271aaafa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>mbsrtowcs_s | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>mbsrtowcs_s</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert a multibyte character string in the current locale to its wide character string representation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A version of <bpt id="p1">[</bpt>mbsrtowcs<ept id="p1">](../../c-runtime-library/reference/mbsrtowcs.md)</ept> with security enhancements as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of characters converted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Address of buffer to store the resulting converted wide character string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The size of <ph id="ph1">`wcstr`</ph> in words (wide characters).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Indirect pointer to the location of the multibyte character string to be converted.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The maximum number of wide characters to store in the <ph id="ph1">`wcstr`</ph> buffer, not including the terminating null, or <bpt id="p1">[</bpt>_TRUNCATE<ept id="p1">](../../c-runtime-library/truncate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`mbstate_t`</ph> conversion state object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If this value is a null pointer, a static internal conversion state object is used.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the internal <ph id="ph1">`mbstate_t`</ph> object is not thread-safe, we recommend that you always pass your own <ph id="ph2">`mbstate`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Zero if conversion is successful, or an error code on failure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Error condition</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Return value and</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>is a null pointer and <ph id="ph1">`sizeInWords`</ph> &gt; 0</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>is a null pointer</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The string indirectly pointed to by <ph id="ph1">`mbstr`</ph> contains a multibyte sequence that is not valid for the current locale.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The destination buffer is too small to contain the converted string (unless <ph id="ph1">`count`</ph> is <ph id="ph2">`_TRUNCATE`</ph>; for more information, see Remarks)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If any one of these conditions occurs, the invalid parameter exception is invoked as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept> .</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns an error code and sets <ph id="ph1">`errno`</ph> as indicated in the table.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbsrtowcs_s`</ph> function converts a string of multibyte characters indirectly pointed to by <ph id="ph2">`mbstr`</ph> into wide characters stored in the buffer pointed to by <ph id="ph3">`wcstr`</ph>, by using the conversion state contained in <ph id="ph4">`mbstate`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The conversion will continue for each character until one of these conditions is met:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A multibyte null character is encountered</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An invalid multibyte character is encountered</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The number of wide characters stored in the <ph id="ph1">`wcstr`</ph> buffer equals <ph id="ph2">`count`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The destination string <ph id="ph1">`wcstr`</ph> is always null-terminated, even in the case of an error, unless <ph id="ph2">`wcstr`</ph> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count`</ph> is the special value <bpt id="p1">[</bpt>_TRUNCATE<ept id="p1">](../../c-runtime-library/truncate.md)</ept>, <ph id="ph2">`mbsrtowcs_s`</ph> converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mbsrtowcs_s`</ph> successfully converts the source string, it puts the size in wide characters of the converted string and the null terminator into <ph id="ph2">`*``pReturnValue`</ph>, provided <ph id="ph3">`pReturnValue`</ph> is not a null pointer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This occurs even if the <ph id="ph1">`wcstr`</ph> argument is a null pointer and lets you determine the required buffer size.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that if <ph id="ph1">`wcstr`</ph> is a null pointer, <ph id="ph2">`count`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`wcstr`</ph> is not a null pointer, the pointer object pointed to by <ph id="ph2">`mbstr`</ph> is assigned a null pointer if conversion stopped because a terminating null character was reached.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Otherwise, it is assigned the address just past the last multibyte character converted, if any.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This allows a subsequent function call to restart conversion where this call stopped.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mbstate`</ph> is a null pointer, the library internal <ph id="ph2">`mbstate_t`</ph> conversion state static object is used.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because this internal static object is not thread-safe, we recommend that you pass your own <ph id="ph1">`mbstate`</ph> value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mbsrtowcs_s`</ph> encounters a multibyte character that is not valid in the current locale, it puts -1 in <ph id="ph2">`*``pReturnValue`</ph>, sets the destination buffer <ph id="ph3">`wcstr`</ph> to an empty string, sets <ph id="ph4">`errno`</ph> to <ph id="ph5">`EILSEQ`</ph>, and returns <ph id="ph6">`EILSEQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the sequences pointed to by <ph id="ph1">`mbstr`</ph> and <ph id="ph2">`wcstr`</ph> overlap, the behavior of <ph id="ph3">`mbsrtowcs_s`</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>is affected by the LC_TYPE category of the current locale.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Ensure that <ph id="ph1">`wcstr`</ph> and <ph id="ph2">`mbstr`</ph> do not overlap, and that <ph id="ph3">`count`</ph> correctly reflects the number of multibyte characters to convert.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbsrtowcs_s`</ph> function differs from <bpt id="p1">[</bpt>mbstowcs_s, _mbstowcs_s_l<ept id="p1">](../../c-runtime-library/reference/mbstowcs-s-mbstowcs-s-l.md)</ept> by its restartability.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The conversion state is stored in <ph id="ph1">`mbstate`</ph> for subsequent calls to the same or other restartable functions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Results are undefined when mixing the use of restartable and nonrestartable functions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, an application should use <ph id="ph1">`mbsrlen`</ph> instead of <ph id="ph2">`mbslen`</ph>, if a subsequent call to <ph id="ph3">`mbsrtowcs_s`</ph> is used instead of</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In C++, using this function is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the requirement to specify a size argument) and they can automatically replace older, non-secure functions by using their newer, secure counterparts.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbsrtowcs_s`</ph> function is multithread safe if no function in the current thread calls <ph id="ph2">`setlocale`</ph> as long as this function is executing and the <ph id="ph3">`mbstate`</ph> argument is not a null pointer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Interpretation of Multibyte-Character Sequences</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>mbrtowc</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>mbtowc, _mbtowc_l</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>mbstowcs_s, _mbstowcs_s_l</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>mbsinit</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>