<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5282cd9dcc6df35678f8a27fa85815f1b84f47b1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\lzcnt16-lzcnt-lzcnt64.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfaed32741c83fb112b0595201bed9c9cecf5dd5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dae8f3c3a2af764cb1723d414f693b98404ed22</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__lzcnt16, __lzcnt, __lzcnt64 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__lzcnt16, __lzcnt, __lzcnt64</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Counts the number of leading zeros in a 16-, 32-, or 64-byte integer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The 16-, 32-, or 64-bit unsigned integer to scan for leading zeros.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The number of leading zero bits in the <ph id="ph1">`value`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`value`</ph> is zero, the return value is the size of the input operand (16, 32, or 64).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the most significant bit of <ph id="ph1">`value`</ph> is one, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Intrinsic</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Architecture</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>AMD: Advanced Bit Manipulation (ABM)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Intel: Haswell</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>AMD: Advanced Bit Manipulation (ABM)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Intel: Haswell</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>AMD: Advanced Bit Manipulation (ABM) in 64-bit mode.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Intel: Haswell</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header file<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each of these intrinsics generates the <ph id="ph1">`lzcnt`</ph> instruction.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The size of the value that the <ph id="ph1">`lzcnt`</ph> instruction returns is the same as the size of its argument.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In 32-bit mode there are no 64-bit general-purpose registers, hence no 64-bit <ph id="ph1">`lzcnt`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To determine hardware support for the <ph id="ph1">`lzcnt`</ph> instruction call the <ph id="ph2">`__cpuid`</ph> intrinsic with <ph id="ph3">`InfoType=0x80000001`</ph> and check bit 5 of <ph id="ph4">`CPUInfo[2] (ECX)`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This bit will be 1 if the instruction is supported, and 0 otherwise.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you run code that uses this intrinsic on hardware that does not support the <ph id="ph1">`lzcnt`</ph> instruction, the results are unpredictable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>On Intel processors that do not support the <ph id="ph1">`lzcnt`</ph> instruction, the instruction byte encoding is executed as <ph id="ph2">`bsr`</ph> (bit scan reverse).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If code portability is a concern, consider use of the <ph id="ph1">`_BitScanReverse`</ph> intrinsic instead.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_BitScanReverse, _BitScanReverse64<ept id="p1">](../intrinsics/bitscanreverse-bitscanreverse64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Portions of this content are Copyright 2007 by Advanced Micro Devices, Inc. All rights reserved.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reproduced with permission from Advanced Micro Devices, Inc.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>