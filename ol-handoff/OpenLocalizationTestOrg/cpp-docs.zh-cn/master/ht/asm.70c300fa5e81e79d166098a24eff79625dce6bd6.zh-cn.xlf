<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a7b003f59a7c407060442cab3d96f57aacf497e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\assembler\inline\asm.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a22f7a3f88add8a19ed02d3ba083ca3110ca847b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">deecc85eef8b01c6cf86f9db3be9b50e1bb7b927</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__asm | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__asm</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__asm`</ph> keyword invokes the inline assembler and can appear wherever a C or C++ statement is legal.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It cannot appear by itself.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The term "<ph id="ph1">`__asm`</ph> block" here refers to any instruction or group of instructions, whether or not in braces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Visual C++ support for the Standard C++ <ph id="ph1">`asm`</ph> keyword is limited to the fact that the compiler will not generate an error on the keyword.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, an <ph id="ph1">`asm`</ph> block will not generate any meaningful code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__asm`</ph> instead of <ph id="ph2">`asm`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>__asm <bpt id="p1">*</bpt>assembly-instruction<ept id="p1">*</ept> [ ; ]</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>__asm { <bpt id="p1">*</bpt>assembly-instruction-list<ept id="p1">*</ept> } [ ; ]</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Grammar</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>opt</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>opt</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>assembly-instruction-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>opt</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>opt</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If used without braces, the <ph id="ph1">`__asm`</ph> keyword means that the rest of the line is an assembly-language statement.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If used with braces, it means that each line between the braces is an assembly-language statement.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For compatibility with previous versions, <ph id="ph1">`_asm`</ph> is a synonym for <ph id="ph2">`__asm`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Since the <ph id="ph1">`__asm`</ph> keyword is a statement separator, you can put assembly instructions on the same line.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before Visual C++ 2005, the instruction</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>did not cause native code to be generated when compiled with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>; the compiler translated the instruction to a CLR break instruction.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>now results in native code generation for the function.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you want a function to cause a break point in your code and if you want that function compiled to MSIL, use <bpt id="p1">[</bpt>__debugbreak<ept id="p1">](../../intrinsics/debugbreak.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code fragment is a simple <ph id="ph1">`__asm`</ph> block enclosed in braces:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Alternatively, you can put <ph id="ph1">`__asm`</ph> in front of each assembly instruction:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`__asm`</ph> keyword is a statement separator, you can also put assembly instructions on the same line:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>All three examples generate the same code, but the first style (enclosing the <ph id="ph1">`__asm`</ph> block in braces) has some advantages.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The braces clearly separate assembly code from C or C++ code and avoid needless repetition of the <ph id="ph1">`__asm`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Braces can also prevent ambiguities.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you want to put a C or C++ statement on the same line as an <ph id="ph1">`__asm`</ph> block, you must enclose the block in braces.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Without the braces, the compiler cannot tell where assembly code stops and C or C++ statements begin.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Finally, because the text in braces has the same format as ordinary MASM text, you can easily cut and paste text from existing MASM source files.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike braces in C and C++, the braces enclosing an <ph id="ph1">`__asm`</ph> block don't affect variable scope.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also nest <ph id="ph1">`__asm`</ph> blocks; nesting does not affect variable scope.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inline Assembler</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>