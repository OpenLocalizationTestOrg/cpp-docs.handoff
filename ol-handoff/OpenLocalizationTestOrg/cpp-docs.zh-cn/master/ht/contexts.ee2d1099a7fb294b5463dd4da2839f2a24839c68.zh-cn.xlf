<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5eef42cb02b5545cedd5f7d110da93648e4c727e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\contexts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0128850be2fc966dc04890331ef4820a5d01735</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e55aec0222396127cf94b5756ebaae06f1f8f8b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contexts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Contexts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes the role of contexts in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A thread that is attached to a scheduler is known as an <bpt id="p1">*</bpt>execution context<ept id="p1">*</ept>, or just <bpt id="p2">*</bpt>context<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::wait<ept id="p1">](reference/concurrency-namespace-functions.md#wait)</ept> function and the concurrency::<bpt id="p2">[</bpt>Context class<ept id="p2">](../../parallel/concrt/reference/context-class.md)</ept> enable you to control the behavior of contexts.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`wait`</ph> function to suspend the current context for a specified time.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Context`</ph> class when you need more control over when contexts block, unblock, and yield, or when you want to oversubscribe the current context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id="p2">[</bpt>Asynchronous Agents Library<ept id="p2">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The wait Function</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::wait<ept id="p1">](reference/concurrency-namespace-functions.md#wait)</ept> function cooperatively yields the execution of the current context for a specified number of milliseconds.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The runtime uses the yield time to perform other tasks.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>After the specified time has elapsed, the runtime reschedules the context for execution.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`wait`</ph> function might suspend the current context longer than the value provided for the <ph id="ph2">`milliseconds`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Passing 0 (zero) for the <ph id="ph1">`milliseconds`</ph> parameter causes the runtime to suspend the current context until all other active contexts are given the opportunity to perform work.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This lets you yield a task to all other active tasks.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For an example that uses the <ph id="ph1">`wait`</ph> function to yield the current context, and thus allow for other contexts to run, see <bpt id="p1">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id="p1">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Context Class</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The concurrency::<bpt id="p1">[</bpt>Context class<ept id="p1">](../../parallel/concrt/reference/context-class.md)</ept> provides a programming abstraction for an execution context and offers two important features: the ability to cooperatively block, unblock, and yield the current context, and the ability to oversubscribe the current context.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Cooperative Blocking</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Context`</ph> class lets you block or yield the current execution context.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Blocking or yielding is useful when the current context cannot continue because a resource is not available.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Context::Block<ept id="p1">](reference/context-class.md#block)</ept> method blocks the current context.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A context that is blocked yields its processing resources so that the runtime can perform other tasks.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Context::Unblock<ept id="p1">](reference/context-class.md#unblock)</ept> method unblocks a blocked context.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Context::Unblock`</ph> method must be called from a different context than the one that called <ph id="ph2">`Context::Block`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The runtime throws <bpt id="p1">[</bpt>concurrency::context_self_unblock<ept id="p1">](../../parallel/concrt/reference/context-self-unblock-class.md)</ept> if a context attempts to unblock itself.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To cooperatively block and unblock a context, you typically call <bpt id="p1">[</bpt>concurrency::Context::CurrentContext<ept id="p1">](reference/context-class.md#currentcontext)</ept> to retrieve a pointer to the <ph id="ph1">`Context`</ph> object that is associated with the current thread and save the result.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You then call the <ph id="ph1">`Context::Block`</ph> method to block the current context.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Later, call <ph id="ph1">`Context::Unblock`</ph> from a separate context to unblock the blocked context.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must match each pair of calls to <ph id="ph1">`Context::Block`</ph> and <ph id="ph2">`Context::Unblock`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The runtime throws <bpt id="p1">[</bpt>concurrency::context_unblock_unbalanced<ept id="p1">](../../parallel/concrt/reference/context-unblock-unbalanced-class.md)</ept> when the <ph id="ph1">`Context::Block`</ph> or <ph id="ph2">`Context::Unblock`</ph> method is called consecutively without a matching call to the other method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, you do not have to call <ph id="ph1">`Context::Block`</ph> before you call <ph id="ph2">`Context::Unblock`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, if one context calls <ph id="ph1">`Context::Unblock`</ph> before another context calls <ph id="ph2">`Context::Block`</ph> for the same context, that context remains unblocked.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Context::Yield<ept id="p1">](reference/context-class.md#yield)</ept> method yields execution so that the runtime can perform other tasks and then reschedule the context for execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`Context::Block`</ph> method, the runtime does not reschedule the context.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For an example that uses the <ph id="ph1">`Context::Block`</ph>, <ph id="ph2">`Context::Unblock`</ph>, and <ph id="ph3">`Context::Yield`</ph> methods to implement a cooperative semaphore class, see <bpt id="p1">[</bpt>How to: Use the Context Class to Implement a Cooperative Semaphore<ept id="p1">](../../parallel/concrt/how-to-use-the-context-class-to-implement-a-cooperative-semaphore.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Oversubscription</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default scheduler creates the same number of threads as there are available hardware threads.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">*</bpt>oversubscription<ept id="p1">*</ept> to create additional threads for a given hardware thread.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For computationally intensive operations, oversubscription typically does not scale because it introduces additional overhead.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, for tasks that have a high amount of latency, for example, reading data from disk or from a network connection, oversubscription can improve the overall efficiency of some applications.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Enable oversubscription only from a thread that was created by the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Oversubscription has no effect when it is called from a thread that was not created by the runtime (including the main thread).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To enable oversubscription in the current context, call the <bpt id="p1">[</bpt>concurrency::Context::Oversubscribe<ept id="p1">](reference/context-class.md#oversubscribe)</ept> method with the <ph id="ph1">`_BeginOversubscription`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you enable oversubscription on a thread that was created by the Concurrency Runtime, it causes the runtime to create one additional thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After all tasks that require oversubscription finish, call <ph id="ph1">`Context::Oversubscribe`</ph> with the <ph id="ph2">`_BeginOversubscription`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can enable oversubscription multiple times from the current context, but you must disable it the same number of times that you enable it.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Oversubscription can also be nested; that is, a task that is created by another task that uses oversubscription can also oversubscribe its context.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, if both a nested task and its parent belong to the same context, only the outermost call to <ph id="ph1">`Context::Oversubscribe`</ph> causes the creation of an additional thread.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The runtime throws <bpt id="p1">[</bpt>concurrency::invalid_oversubscribe_operation<ept id="p1">](../../parallel/concrt/reference/invalid-oversubscribe-operation-class.md)</ept> if oversubscription is disabled before it is enabled.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For an example that uses oversubscription to offset the latency that is caused by reading data from a network connection, see <bpt id="p1">[</bpt>How to: Use Oversubscription to Offset Latency<ept id="p1">](../../parallel/concrt/how-to-use-oversubscription-to-offset-latency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>How to: Use Schedule Groups to Influence Order of Execution</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>How to: Use the Context Class to Implement a Cooperative Semaphore</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>How to: Use Oversubscription to Offset Latency</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>