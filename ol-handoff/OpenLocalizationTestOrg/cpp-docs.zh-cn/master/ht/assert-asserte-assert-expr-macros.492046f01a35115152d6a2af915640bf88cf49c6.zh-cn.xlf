<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9761a4648cf092015c090b9f9ed6be13d15fd38f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\assert-asserte-assert-expr-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f22663ae1eac031d7de1212416613dcafdf7fe8b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d615df5725417ef67658fd7e3c312ec39bc0333b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_ASSERT, _ASSERTE, _ASSERT_EXPR Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_ASSERT, _ASSERTE, _ASSERT_EXPR Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Evaluate an expression and generate a debug report when the result is <ph id="ph1">`False`</ph> (debug version only).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A scalar expression (including pointer expressions) that evaluates to nonzero (true) or 0 (false).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A wide string to display as part of the report.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_ASSERT_EXPR`</ph>, <ph id="ph2">`_ASSERT`</ph> and <ph id="ph3">`_ASSERTE`</ph> macros provide an application with a clean and simple mechanism for checking assumptions during the debugging process.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They are very flexible because they do not need to be enclosed in <ph id="ph1">`#ifdef`</ph> statements to prevent them from being called in a retail build of an application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This flexibility is achieved by using the <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_ASSERT`</ph> and <ph id="ph2">`_ASSERTE`</ph> are only available when <ph id="ph3">`_DEBUG`</ph> is defined at compile time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_DEBUG`</ph> is not defined, calls to these macros are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_ASSERT`</ph> and <ph id="ph2">`_ASSERTE`</ph> evaluate their <ph id="ph3">`booleanExpression`</ph> argument and when the result is <ph id="ph4">`false`</ph> (0), they print a diagnostic message and call <bpt id="p1">[</bpt>_CrtDbgReportW<ept id="p1">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> to generate a debug report.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_ASSERT`</ph> macro prints a simple diagnostic message,  <ph id="ph2">`_ASSERTE`</ph> includes a string representation of the failed expression in the message, and <ph id="ph3">`_ASSERT_EXPR`</ph> includes the <ph id="ph4">`message`</ph> string in the diagnostic message.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These macros do nothing when <ph id="ph1">`booleanExpression`</ph> evaluates to nonzero.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_ASSERT`</ph> and <ph id="ph2">`_ASSERTE`</ph> invoke <ph id="ph3">`_CrtDbgReportW`</ph>, which causes all output to be in wide characters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>properly prints Unicode characters in <ph id="ph1">`booleanExpression`</ph> and <ph id="ph2">`_ASSERT_EXPR`</ph> prints Unicode characters in <ph id="ph3">`message`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`_ASSERTE`</ph> macro specifies the failed expression, and <ph id="ph2">`_ASSERT_EXPR`</ph> lets you specify a message in the generated report, they enable users to identify the problem without referring to the application source code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, a disadvantage exists in that every <ph id="ph1">`message`</ph> printed by <ph id="ph2">`_ASSERT_EXPR`</ph> and every expression evaluated by <ph id="ph3">`_ASSERTE`</ph> is included in the output (debug version) file of your application as a string constant.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, if a large number of calls are made to <ph id="ph1">`_ASSERT_EXPR`</ph> or <ph id="ph2">`_ASSERTE`</ph>, these expressions can greatly increase the size of your output file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unless you specify otherwise with the <bpt id="p1">[</bpt>_CrtSetReportMode<ept id="p1">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id="p2">[</bpt>_CrtSetReportFile<ept id="p2">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions, messages appear in a pop-up dialog box equivalent to setting:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>generates the debug report and determines its destination or destinations, based on the current report mode or modes and file defined for the <ph id="ph1">`_CRT_ASSERT`</ph> report type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, assertion failures and errors are directed to a debug message window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_CrtSetReportMode<ept id="p1">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id="p2">[</bpt>_CrtSetReportFile<ept id="p2">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions are used to define the destinations for each report type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the destination is a debug message window and the user clicks the <bpt id="p1">**</bpt>Retry<ept id="p1">**</ept> button, <ph id="ph1">`_CrtDbgReportW`</ph> returns 1, causing the <ph id="ph2">`_ASSERT_EXPR`</ph>, <ph id="ph3">`_ASSERT`</ph> and <ph id="ph4">`_ASSERTE`</ph> macros to start the debugger provided that just-in-time (JIT) debugging is enabled.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about the reporting process, see the <bpt id="p1">[</bpt>_CrtDbgReport, _CrtDbgReportW<ept id="p1">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about resolving assertion failures and using these macros as a debugging error handling mechanism, see <bpt id="p1">[</bpt>Using Macros for Verification and Reporting<ept id="p1">](/visualstudio/debugger/macros-for-reporting)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In addition to the <ph id="ph1">`_ASSERT`</ph> macros, the <bpt id="p1">[</bpt>assert<ept id="p1">](../../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept> macro can be used to verify program logic.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This macro is available in both the debug and release versions of the libraries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_RPT, _RPTF<ept id="p1">](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md)</ept> debug macros are also available for generating a debug report, but they do not evaluate an expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPT`</ph> macros generate a simple report.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPTF`</ph> macros include the source file and line number where the report macro was called in the generated report.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Wide character versions of these macros are available (<ph id="ph1">`_RPTWn`</ph>, <ph id="ph2">`_RPTFWn`</ph>).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The wide character versions are identical to the narrow character versions except that wide character strings are used for all string parameters and output.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`_ASSERT_EXPR`</ph>, <ph id="ph2">`_ASSERT`</ph> and <ph id="ph3">`_ASSERTE`</ph> are macros and are available by including <ph id="ph4">\&lt;</ph>crtdbg.h&gt;, the application must link with a debug version of the C run-time library when <ph id="ph5">`_DEBUG`</ph> is defined because these macros call other run-time functions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>,                  <ph id="ph1">`_ASSERT`</ph>,</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this program, calls are made to the <ph id="ph1">`_ASSERT`</ph> and <ph id="ph2">`_ASSERTE`</ph> macros to test the condition <ph id="ph3">`string1 == string2`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the condition fails, these macros print a diagnostic message.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_RPTn`</ph> and <ph id="ph2">`_RPTFn`</ph> group of macros is also exercised in this program, as an alternative to the <ph id="ph3">`printf`</ph> function.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Debug Routines</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>assert Macro, _assert, _wassert</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_RPT, _RPTF, _RPTW, _RPTFW Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>