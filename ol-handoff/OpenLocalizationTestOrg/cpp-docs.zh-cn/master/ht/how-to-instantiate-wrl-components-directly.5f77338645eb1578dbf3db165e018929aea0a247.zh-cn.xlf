<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a00ce409f3cdc9a1268b500448dd06b3a0dd45af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\how-to-instantiate-wrl-components-directly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">161826bae580f842ddcc65ff6b1fc2389df674fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd3845f87cd7de89881cb0bdff8889eb51d91681</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Instantiate WRL Components Directly | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Instantiate WRL Components Directly</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learn how to use the <ph id="ph1">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id="ph2">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) <bpt id="p1">[</bpt>Microsoft::WRL::Make<ept id="p1">](../windows/make-function.md)</ept> and <bpt id="p2">[</bpt>Microsoft::WRL::Details::MakeAndInitialize<ept id="p2">](../windows/makeandinitialize-function.md)</ept> functions to instantiate a component from the module that defines it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By instantiating components directly, you can reduce overhead when you don't need class factories or other mechanisms.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can instantiate a component directly in both <ph id="ph1">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> apps and in desktop apps.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To learn how to use <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic <ph id="ph2">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> component and instantiate it from an external <ph id="ph3">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id="p1">[</bpt>Walkthrough: Creating a Basic Windows Runtime Component<ept id="p1">](../windows/walkthrough-creating-a-basic-windows-runtime-component-using-wrl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To learn how to use <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a classic COM component and instantiate it from an external desktop app, see <bpt id="p1">[</bpt>How to: Create a Classic COM Component<ept id="p1">](../windows/how-to-create-a-classic-com-component-using-wrl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This document shows two examples.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first example uses the <ph id="ph1">`Make`</ph> function to instantiate a component.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second example uses the <ph id="ph1">`MakeAndInitialize`</ph> function to instantiate a component that can fail during construction.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(Because COM typically uses <ph id="ph1">`HRESULT`</ph> values, instead of exceptions, to indicate errors, a COM type typically does not throw from its constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>enables a component to validate its construction arguments through the <ph id="ph1">`RuntimeClassInitialize`</ph> method.) Both examples define a basic logger interface and implement that interface by defining a class that writes messages to the console.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You canâ€™t use the <ph id="ph1">`new`</ph> operator to instantiate <ph id="ph2">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> components.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you always use <ph id="ph1">`Make`</ph> or <ph id="ph2">`MakeAndInitialize`</ph> to instantiate a component directly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To create and instantiate a basic logger component</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a <bpt id="p1">**</bpt>Win32 Console Application<ept id="p1">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Name the project, for example, <ph id="ph1">`WRLLogger`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Midl File (.idl)<ept id="p1">**</ept> file to the project, name the file <ph id="ph1">`ILogger.idl`</ph>, and then add this code:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>wrl-logger-make#1</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the following code to replace the contents of WRLLogger.cpp.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>wrl-logger-make#2</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To handle construction failure for the basic logger component</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the following code to replace the definition of the <ph id="ph1">`CConsoleWriter`</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This version holds a private string member variable and overrides the <ph id="ph1">`RuntimeClass::RuntimeClassInitialize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>fails if the call to <ph id="ph1">`SHStrDup`</ph> fails.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>wrl-logger-makeandinitialize#1</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the following code to replace the definition of <ph id="ph1">`wmain`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This version uses <ph id="ph1">`MakeAndInitialize`</ph> to instantiate the <ph id="ph2">`CConsoleWriter`</ph> object and checks the <ph id="ph3">`HRESULT`</ph> result.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>wrl-logger-makeandinitialize#2</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Windows Runtime C++ Template Library (WRL)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Microsoft::WRL::Make</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Microsoft::WRL::Details::MakeAndInitialize</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>