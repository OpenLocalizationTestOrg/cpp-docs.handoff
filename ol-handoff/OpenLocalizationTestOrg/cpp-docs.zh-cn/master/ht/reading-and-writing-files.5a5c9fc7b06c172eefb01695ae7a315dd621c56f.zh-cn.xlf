<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df55b16d75958ead58cb80f81303adada2c088bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reading-and-writing-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e32694923846a4f1efbab10e67fb896dabf20e5c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2a834639c9daa4b711be1c499ae0e38659a5c50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reading and Writing Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reading and Writing Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you've used the C run-time library file-handling functions, MFC reading and writing operations will appear familiar.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article describes reading directly from and writing directly to a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also do buffered file I/O with the <bpt id="p1">[</bpt>CArchive<ept id="p1">](../mfc/reference/carchive-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To read from and write to the file</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Write<ept id="p2">**</ept> member functions to read and write data in the file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Seek`</ph> member function is also available for moving to a specific offset within the file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Read<ept id="p1">**</ept> takes a pointer to a buffer and the number of bytes to read and returns the actual number of bytes that were read.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the required number of bytes could not be read because end-of-file (EOF) is reached, the actual number of bytes read is returned.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If any read error occurs, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write<ept id="p1">**</ept> is similar to <bpt id="p2">**</bpt>Read<ept id="p2">**</ept>, but the number of bytes written is not returned.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If a write error occurs, including not writing all the bytes specified, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you have a valid <ph id="ph1">`CFile`</ph> object, you can read from it or write to it as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#2</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You should normally carry out input/output operations within a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> exception handling block.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exception Handling (MFC)<ept id="p1">](../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Files</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>