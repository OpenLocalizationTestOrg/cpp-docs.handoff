<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cafbbf0b907717b5c62602abd370a8553464332b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\destructors-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a755701af31773dabf0884e3afe11f70fe76800c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9e7c8934476aa40ee97ce3d6013d987ba5984ed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Destructors (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Destructors (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A destructor is a member function that is invoked automatically when the object goes out of scope or is explicitly destroyed by a call to <ph id="ph1">`delete`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A destructor has the same name as the class, preceded by a tilde (<ph id="ph1">`~`</ph>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, the destructor for class <ph id="ph1">`String`</ph> is declared: <ph id="ph2">`~String()`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you do not define a destructor, the compiler will provide a default one; for many classes this is sufficient.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You only need to define a custom destructor when the class stores handles to system resources that need to be released, or pointers that own the memory they point to.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Consider the following declaration of a <ph id="ph1">`String`</ph> class:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the preceding example, the destructor <ph id="ph1">`String::~String`</ph> uses the <ph id="ph2">`delete`</ph> operator to deallocate the space dynamically allocated for text storage.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Delcaring destructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Destructors are functions with the same name as the class but preceded by a tilde (<ph id="ph1">`~`</ph>)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Several rules govern the declaration of destructors.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Destructors:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Do not accept arguments.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Do not return a value (or <ph id="ph1">`void`</ph>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Cannot be declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`volatile`</ph>, or <bpt id="p2">**</bpt>static<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, they can be invoked for the destruction of objects declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`volatile`</ph>, or <bpt id="p2">**</bpt>static<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Can be declared as <bpt id="p1">**</bpt>virtual<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using virtual destructors, you can destroy objects without knowing their type â€” the correct destructor for the object is invoked using the virtual function mechanism.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that destructors can also be declared as pure virtual functions for abstract classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using destructors</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Destructors are called when one of the following events occurs:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A local (automatic) object with block scope goes out of scope.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An object allocated using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator is explicitly deallocated using <bpt id="p2">**</bpt>delete<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The lifetime of a temporary object ends.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A program ends and global or static objects exist.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The destructor is explicitly called using the destructor function's fully qualified name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Destructors can freely call class member functions and access class member data.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are two restrictions on the use of destructors:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>you cannot take its address</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>derived classes do not inherit the destructor of their base class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Order of destruction</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When an object goes out of scope or is deleted, the sequence of events in its complete destruction is as follows:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The class's destructor is called, and the body of the destructor function is executed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Destructors for nonstatic member objects are called in the reverse order in which they appear in the class declaration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The optional member initialization list used in construction of these members does not affect the order of construction or destruction.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Destructors for nonvirtual base classes are called in the reverse order of declaration.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Destructors for virtual base classes are called in the reverse order of declaration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Virtual base classes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Destructors for virtual base classes are called in the reverse order of their appearance in a directed acyclic graph (depth-first, left-to-right, postorder traversal).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>the following figure depicts an inheritance graph.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Inheritance graph that shows virtual base classes</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inheritance Graph Showing Virtual Base Classes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following lists the class heads for the classes shown in the figure.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To determine the order of destruction of the virtual base classes of an object of type <ph id="ph1">`E`</ph>, the compiler builds a list by applying the following algorithm:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Traverse the graph left, starting at the deepest point in the graph (in this case, <ph id="ph1">`E`</ph>).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Perform leftward traversals until all nodes have been visited.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note the name of the current node.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Revisit the previous node (down and to the right) to find out whether the node being remembered is a virtual base class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the remembered node is a virtual base class, scan the list to see whether it has already been entered.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If it is not a virtual base class, ignore it.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the remembered node is not yet in the list, add it to the bottom of the list.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Traverse the graph up and along the next path to the right.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Go to step 2.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the last upward path is exhausted, note the name of the current node.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Go to step 3.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Continue this process until the bottom node is again the current node.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Therefore, for class <ph id="ph1">`E`</ph>, the order of destruction is:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The nonvirtual base class <ph id="ph1">`E`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The nonvirtual base class <ph id="ph1">`D`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The nonvirtual base class <ph id="ph1">`C`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The virtual base class <ph id="ph1">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The virtual base class <ph id="ph1">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This process produces an ordered list of unique entries.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No class name appears twice.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Once the list is constructed, it is walked in reverse order, and the destructor for each of the classes in the list from the last to the first is called.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The order of construction or destruction is primarily important when constructors or destructors in one class rely on the other component being created first or persisting longer â€” for example, if the destructor for <ph id="ph1">`A`</ph> (in the figure shown above) relied on <ph id="ph2">`B`</ph> still being present when its code executed, or vice versa.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Such interdependencies between classes in an inheritance graph are inherently dangerous because classes derived later can alter which is the leftmost path, thereby changing the order of construction and destruction.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Nonvirtual base classes</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The destructors for nonvirtual base classes are called in the reverse order in which the base class names are declared.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Consider the following class declaration:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the preceding example, the destructor for <ph id="ph1">`Base2`</ph> is called before the destructor for <ph id="ph2">`Base1`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Explicit destructor calls</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Calling a destructor explicitly is seldom necessary.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>However, it can be useful to perform cleanup of objects placed at absolute addresses.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These objects are commonly allocated using a user-defined <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator that takes a placement argument.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator cannot deallocate this memory because it is not allocated from the free store (for more information, see <bpt id="p2">[</bpt>The new and delete Operators<ept id="p2">](../cpp/new-and-delete-operators.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A call to the destructor, however, can perform appropriate cleanup.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To explicitly call the destructor for an object, <ph id="ph1">`s`</ph>, of class <ph id="ph2">`String`</ph>, use one of the following statements:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The notation for explicit calls to destructors, shown in the preceding, can be used regardless of whether the type defines a destructor.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This allows you to make such explicit calls without knowing if a destructor is defined for the type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An explicit call to a destructor where none is defined has no effect.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>