<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11c5b9193f9f2f3675d9997aea4e004601a3ae5a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\arguments-to-main.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1de207020d17498441eb669da094cb402abf4fbf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6564cb305faa6c30cb131de1942916a8e431b98d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Arguments to main | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Arguments to main</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ANSI 2.1.2.2.1<ept id="p1">**</ept> The semantics of the arguments to main</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Microsoft C, the function called at program startup is called <bpt id="p1">**</bpt>main<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There is no prototype declared for <bpt id="p1">**</bpt>main<ept id="p1">**</ept>, and it can be defined with zero, two, or three parameters:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The third line above, where <bpt id="p1">**</bpt>main<ept id="p1">**</ept> accepts three parameters, is a Microsoft extension to the ANSI C standard.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The third parameter, <bpt id="p1">**</bpt>envp<ept id="p1">**</ept>, is an array of pointers to environment variables.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>envp<ept id="p1">**</ept> array is terminated by a null pointer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>The main Function and Program Execution<ept id="p1">](../c-language/main-function-and-program-execution.md)</ept> for more information about <bpt id="p2">**</bpt>main<ept id="p2">**</ept> and <bpt id="p3">**</bpt>envp<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The variable <bpt id="p1">**</bpt>argc<ept id="p1">**</ept> never holds a negative value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The array of strings ends with <bpt id="p1">**</bpt>argv[argc]<ept id="p1">**</ept>, which contains a null pointer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All elements of the <bpt id="p1">**</bpt>argv<ept id="p1">**</ept> array are pointers to strings.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A program invoked with no command-line arguments will receive a value of one for <bpt id="p1">**</bpt>argc<ept id="p1">**</ept>, as the name of the executable file is placed in <bpt id="p2">**</bpt>argv[0]<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(In MS-DOS versions prior to 3.0, the executable-file name is not available.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The letter "C" is placed in <bpt id="p1">**</bpt>argv[0]<ept id="p1">**</ept>.) Strings pointed to by <bpt id="p2">**</bpt>argv[1]<ept id="p2">**</ept> through <bpt id="p3">**</bpt>argv[argc â€“ 1]<ept id="p3">**</ept> represent program parameters.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameters <bpt id="p1">**</bpt>argc<ept id="p1">**</ept> and <bpt id="p2">**</bpt>argv<ept id="p2">**</ept> are modifiable and retain their last-stored values between program startup and program termination.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Environment</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>