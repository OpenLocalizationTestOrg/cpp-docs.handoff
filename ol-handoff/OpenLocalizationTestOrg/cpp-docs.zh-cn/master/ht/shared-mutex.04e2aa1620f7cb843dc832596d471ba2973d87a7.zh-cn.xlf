<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2988985bb3cc729aea85a76183c79f4f938a35c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\shared-mutex.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f62c8679ba4fc5f8a171f535a5c48b229b2fe1fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">652d032d78e135c72104084eaa82e56e28018ec0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>shared_mutex<ph id="ph1">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>shared_mutex</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;shared_mutex&gt; header provides synchronization primitives for protection of shared data that can be accessed by multiple threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition to the exclusive access control provided by mutex classes, the shared mutex classes also allow shared ownership by multiple threads for non-exclusive access.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Shared mutexes can be used to control resources that can be read by several threads without causing a race condition, but must be written exclusively by a single thread.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The header &lt;shared_mutex&gt; defines the classes <ph id="ph1">`shared_mutex`</ph> and <ph id="ph2">`shared_timed_mutex`</ph>, the template class <ph id="ph3">`shared_lock`</ph>, and the template function <ph id="ph4">`swap`</ph> for shared mutex support.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>shared_mutex Class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A shared mutex type that can be locked exclusively by one agent or shared non-exclusively by multiple agents.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>shared_timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A shared timed mutex type that can be locked exclusively by one agent or shared non-exclusively by multiple agents.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>shared_lock Class</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A template class that wraps a shared mutex to support timed lock operations and non-exclusive sharing by multiple agents.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>swap Function</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Swaps the content of the shared mutex objects referenced by the function parameters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An instance of the class <ph id="ph1">`shared_mutex`</ph> is a <bpt id="p1">*</bpt>shared mutex type<ept id="p1">*</ept>, a type that controls the shared ownership of a mutex within a scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A shared mutex type meets all the requirements of a mutex type, as well as members to support shared non-exclusive ownership.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A shared mutex type supports the additional methods <ph id="ph1">`lock_shared`</ph>, <ph id="ph2">`unlock_shared`</ph>, and <ph id="ph3">`try_lock_shared`</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock_shared`</ph> method blocks the calling thread until the thread obtains shared ownership of the mutex.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unlock_shared`</ph> method releases shared ownership of the mutex held by the calling thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock_shared`</ph> method tries to obtain shared ownership of the mutex without blocking.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Its return type is convertible to <ph id="ph1">`bool`</ph> and is <ph id="ph2">`true`</ph> if the method obtains ownership, but is otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`shared_timed_mutex`</ph> is a <bpt id="p1">*</bpt>shared timed mutex type<ept id="p1">*</ept>, a type that meets the requirements of both a shared mutex type and a timed mutex type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A shared timed mutex type supports the additional methods <ph id="ph1">`try_lock_shared_for`</ph> and <ph id="ph2">`try_lock_shared_until`</ph>:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock_shared_for`</ph> method attempts to obtain shared ownership of the mutex until the duration specified by the parameter has passed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the duration is not positive, the method is equivalent to <ph id="ph1">`try_lock_shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The method does not return within the duration specified unless shared ownership is obtained.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Its return value is <ph id="ph1">`true`</ph> if the method obtains ownership, but is otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`try_lock_shared_until`</ph> method attempts to obtain shared ownership of the mutex until the specified absolute time has passed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the specified time has already passed, the method is equivalent to <ph id="ph1">`try_lock_shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method does not return before the time specified unless shared ownership is obtained.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Its return value is <ph id="ph1">`true`</ph> if the method obtains ownership, but is otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`shared_lock`</ph> template class extends support for timed locking and transfer of ownership to a shared mutex.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ownership of the mutex may be obtained at or after construction, and may be transferred to another <ph id="ph1">`shared_lock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Objects of type <ph id="ph1">`shared_lock`</ph> can be moved, but not copied.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The STL synchronization types in Visual Studio 2015 are based on Windows synchronization primitives and no longer use ConcRT (except when the target platform is Windows XP).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The types defined in &lt;shared_mutex&gt; should not be used with any ConcRT types or functions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>shared_mutex Class</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`shared_mutex`</ph> implements a non-recursive mutex with shared ownership semantics.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>class shared_mutex { public: shared_mutex(); ~shared_mutex(); shared_mutex(const shared_mutex&amp;) = delete; shared_mutex&amp; operator=(const shared_mutex&amp;) = delete; // Exclusive ownership void lock(); // blocking bool try_lock(); void unlock(); // Shared ownership void lock_shared(); // blocking bool try_lock_shared(); void unlock_shared(); // Getters typedef void** native_handle_type; // implementation defined native_handle_type native_handle(); };</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>shared_timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`shared_timed_mutex`</ph> implements a non-recursive mutex with shared ownership semantics that meets the requirements of a timed mutex type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>class shared_timed_mutex { public: shared_timed_mutex(); ~shared_timed_mutex(); shared_timed_mutex(const shared_timed_mutex&amp;) = delete; shared_timed_mutex&amp; operator=(const shared_timed_mutex&amp;) = delete; // Exclusive ownership void lock(); // blocking bool try_lock(); template <ph id="ph1">\&lt;</ph>class Rep, class Period&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>bool try_lock_for(const chrono::duration<ph id="ph1">\&lt;</ph>Rep, Period&gt;&amp; rel_time); template <ph id="ph2">\&lt;</ph>class Clock, class Duration&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>bool try_lock_until(const chrono::time_point<ph id="ph1">\&lt;</ph>Clock, Duration&gt;&amp; abs_time); void unlock(); // Shared ownership void lock_shared(); // blocking bool try_lock_shared(); template <ph id="ph2">\&lt;</ph>class Rep, class Period&gt;</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>bool try_lock_shared_for(const chrono::duration<ph id="ph1">\&lt;</ph>Rep, Period&gt;&amp; rel_time); template <ph id="ph2">\&lt;</ph>class Clock, class Duration&gt;</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>bool try_lock_shared_until(const chrono::time_point<ph id="ph1">\&lt;</ph>Clock, Duration&gt;&amp; abs_time); void unlock_shared(); };</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>shared_lock Class</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Template class <ph id="ph1">`shared_lock`</ph> controls the shared ownership of a shared mutex object within a scope.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The template parameter must be a shared mutex type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>class shared_lock { public: typedef Mutex mutex_type; shared_lock() noexcept; explicit shared_lock(mutex_type&amp; m); // blocking shared_lock(mutex_type&amp; m, defer_lock_t) noexcept; shared_lock(mutex_type&amp; m, try_to_lock_t); shared_lock(mutex_type&amp; m, adopt_lock_t); template <ph id="ph1">\&lt;</ph>class Clock, class Duration&gt;</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>shared_lock(mutex_type&amp; m, const chrono::time_point<ph id="ph1">\&lt;</ph>Clock, Duration&gt;&amp; abs_time); template <ph id="ph2">\&lt;</ph>class Rep, class Period&gt;</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>shared_lock(mutex_type&amp; m, const chrono::duration<ph id="ph1">\&lt;</ph>Rep, Period&gt;&amp; rel_time); ~shared_lock(); shared_lock(shared_lock const&amp;) = delete; shared_lock&amp; operator=(shared_lock const&amp;) = delete; shared_lock(shared_lock&amp;&amp; u) noexcept; shared_lock&amp; operator=(shared_lock&amp;&amp; u) noexcept; void lock(); // blocking bool try_lock(); template <ph id="ph2">\&lt;</ph>class Rep, class Period&gt;</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>bool try_lock_for(const chrono::duration<ph id="ph1">\&lt;</ph>Rep, Period&gt;&amp; rel_time); template <ph id="ph2">\&lt;</ph>class Clock, class Duration&gt;</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>bool try_lock_until(const chrono::time_point<ph id="ph1">\&lt;</ph>Clock, Duration&gt;&amp; abs_time); void unlock(); // Setters void swap(shared_lock&amp; u) noexcept; mutex_type<bpt id="p1">*</bpt> release() noexcept; // Getters bool owns_lock() const noexcept; explicit operator bool () const noexcept; mutex_type<ept id="p1">*</ept> mutex() const noexcept; private: mutex_type* pm; // exposition only bool owns; // exposition only };</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>swap Function</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Swaps the <ph id="ph1">`shared_lock`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Exchanges the content of two <ph id="ph1">`shared_lock`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Effectively the same as <ph id="ph1">`x``.swap(``y``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> &lt;shared_mutex&gt;</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>mutex&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>