<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c1931a60ffa3ce09916064724fe1c4070e0e84e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ctreectrl-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a6bb255a3ef0944408bc2216ec4f1716d6bacd7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">018cb1d76180e451031c519c1528287ba62a103f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CTreeCtrl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CTreeCtrl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of the Windows common tree view control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CTreeCtrl</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Create</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a tree view control and attaches it to a <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CreateDragImage</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creates a dragging bitmap for the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CreateEx</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a tree control with the specified Windows extended styles and attaches it to a <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::DeleteAllItems</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Deletes all items in a tree view control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::DeleteItem</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Deletes a new item in a tree view control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EditLabel</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Edits a specified tree view item in-place.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EndEditLabelNow</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Cancels the edit operation on the label of a tree-view item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EnsureVisible</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Ensures that a tree view item is visible in its tree view control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Expand</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Expands, or collapses, the child items of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetBkColor</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the current background color of the control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetCheck</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the check state of a tree control item.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetChildItem</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves the child of a specified tree view item.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetCount</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves the number of tree items associated with a tree view control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetDropHilightItem</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetEditControl</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the edit control used to edit the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the extended styles that the current tree-view control is using.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetFirstVisibleItem</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves the first visible item of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetImageList</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the image list associated with a tree view control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetIndent</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves the offset (in pixels) of a tree view item from its parent.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Retrieves the color used to draw the insertion mark for the tree view.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItem</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retrieves the attributes of a specified tree view item.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemData</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the 32-bit application-specific value associated with an item.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemExpandedImageIndex</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemHeight</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves the current height of the tree view items.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemImage</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves the images associated with an item.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemPartRect</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemRect</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of a tree view item.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemState</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns the state of an item.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemStateEx</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieves the extended state of the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemText</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the text of an item.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetLastVisibleItem</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Retrieves the last expanded item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetLineColor</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Retrieves the current line color for the tree view control.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextItem</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Retrieves the next tree view item that matches a specified relationship.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextSiblingItem</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Retrieves the next sibling of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextVisibleItem</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Retrieves the next visible item of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetParentItem</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Retrieves the parent of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetPrevSiblingItem</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Retrieves the previous sibling of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetPrevVisibleItem</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Retrieves the previous visible item of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetRootItem</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Retrieves the root of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetScrollTime</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Retrieves the maximum scroll time for the tree view control.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetSelectedCount</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Retrieves the number of selected items in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetSelectedItem</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Retrieves the currently selected tree view item.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetTextColor</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Retrieves the current text color of the control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetToolTips</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Retrieves the handle to the child ToolTip control used by a tree view control.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetVisibleCount</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Retrieves the number of visible tree items associated with a tree view control.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::HitTest</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns the current position of the cursor related to the <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::InsertItem</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Inserts a new item in a tree view control.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::ItemHasChildren</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the specified item has child items.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::MapAccIdToItem</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Maps the specified accessibility identifier to the handle to a tree-view item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::MapItemToAccID</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Maps the specified handle to a tree-view item in the current tree-view control to an accessibility identifier.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Select</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Selects, scrolls into view, or redraws a specified tree view item.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectDropTarget</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Redraws the tree item as the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectItem</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Selects a specified tree view item.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectSetFirstVisible</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Selects a specified tree view item as the first visible item.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetAutoscrollInfo</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Sets the autoscroll rate of the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetBkColor</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Sets the background color of the control.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetCheck</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Sets the check state of a tree control item.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Sets the extended styles for the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetImageList</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Sets the handle of the image list associated with a tree view control.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetIndent</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Sets the offset (in pixels) of a tree view item from its parent.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetInsertMark</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Sets the insertion mark in a tree view control.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Sets the color used to draw the insertion mark for the tree view.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItem</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Sets the attributes of a specified tree view item.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemData</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit application-specific value associated with an item.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemExpandedImageIndex</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemHeight</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Sets the height of the tree view items.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemImage</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Associates images with an item.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemState</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Sets the state of an item.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemStateEx</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Sets the extended state of the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemText</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Sets the text of an item.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetLineColor</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Sets the current line color for the tree view control.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetScrollTime</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Sets the maximum scroll time for the tree view control.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetTextColor</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Sets the text color of the control.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetToolTips</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Sets a tree view control's child ToolTip control.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::ShowInfoTip</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Displays the infotip for the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SortChildren</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Sorts the children of a given parent item.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SortChildrenCB</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Sorts the children of a given parent item using an application-defined sort function.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A "tree view control" is a window that displays a hierarchical list of items, such as the headings in a document, the entries in an index, or the files and directories on a disk.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Each item consists of a label and an optional bitmapped image, and each item can have a list of subitems associated with it.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>By clicking an item, the user can expand and collapse the associated list of subitems.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This control (and therefore the <ph id="ph1">`CTreeCtrl`</ph> class) is available only to programs running under Windows 98 and Windows NT version 4 and later.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CTreeCtrl`</ph>, see:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Controls</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Using CTreeCtrl</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tree View Control Reference<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb759988)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Knowledge Base article Q222905: HOWTO: Display a Context Menu for CTreeCtrl</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcmn.h</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Create</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you specify the tree control in a dialog box template, or if you are using <bpt id="p1">[</bpt>CTreeView<ept id="p1">](../../mfc/reference/ctreeview-class.md)</ept>, your tree control is created automatically when the dialog box or view is created.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Specifies the tree view control's style.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Apply window styles, described in <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept>, and any combination of <bpt id="p2">[</bpt>tree view control styles<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb760013)</ept> as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Specifies the tree view control's size and position.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It can be either a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id="p2">[</bpt>RECT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Specifies the tree view control's parent window, usually a <ph id="ph1">`CDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Specifies the tree view control's ID.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Nonzero if initialization was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If you want to create the tree control as a child window of some other window, use the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If you create the tree control using <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, you must pass it <bpt id="p2">**</bpt>WS_VISIBLE<ept id="p2">**</ept>, in addition to other tree view styles.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CTreeCtrl`</ph> in two steps.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>First call the constructor, then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the tree view control and attaches it to the <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>To create a tree control with extended window styles, call <bpt id="p1">[</bpt>CreateEx<ept id="p1">](#ctreectrl__createex)</ept> instead of <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#1</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CreateEx</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Call this function to create a control (a child window) and associate it with the <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Specifies the extended style of the control being created.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>For a list of extended Windows styles, see the <ph id="ph1">`dwExStyle`</ph> parameter for <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Specifies the tree view control's style.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Apply window styles, described in <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept>, and any combination of <bpt id="p2">[</bpt>tree view control styles<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb760013)</ept> as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id="ph1">`pParentWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A pointer to the window that is the control's parent.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The control's child-window ID.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Nonzero if successful otherwise 0.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CreateEx`</ph> instead of <bpt id="p1">[</bpt>Create<ept id="p1">](#ctreectrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id="p2">**</bpt>WS_EX_<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CreateDragImage</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Call this function to create a dragging bitmap for the given item in a tree view control, create an image list for the bitmap, and add the bitmap to the image list.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Handle of the tree item to be dragged.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Pointer to the image list to which the dragging bitmap was added, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>An application uses the image-list functions to display the image when the item is being dragged.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CImageList`</ph> object is permanent, and you must delete it when finished.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#2</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::CTreeCtrl</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::DeleteAllItems</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Call this function to delete all items from the tree view control.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#3</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::DeleteItem</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Call this function to delete an item from the tree view control.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Handle of the tree item to be deleted.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>hitem<ept id="p1">*</ept> has the <bpt id="p2">**</bpt>TVI_ROOT<ept id="p2">**</ept> value, all items are deleted from the tree view control.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#4</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EditLabel</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Call this function to begin in-place editing of the specified item's text.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Handle of the tree item to be edited.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>If successful, a pointer to the <ph id="ph1">`CEdit`</ph> object that is used to edit the item text; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The editing is accomplished by replacing the text of the item with a single-line edit control containing the text.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#5</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EndEditLabelNow</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Concludes the edit operation on the label of a tree-view item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>to discard changes to the tree-view item before concluding the edit operation, or <ph id="ph1">`false`</ph> to save changes to the tree-view item before concluding the operation.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_ENDEDITLABELNOW<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773564)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::EnsureVisible</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Call this function to ensure that a tree view item is visible.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Handle of the tree item being made visible.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the system scrolled the items in the tree-view control to ensure that the specified item is visible.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If necessary, the function expands the parent item or scrolls the tree view control so that the item is visible.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#6</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Expand</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Call this function to expand or collapse the list of child items, if any, associated with the given parent item.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Handle of the tree item being expanded.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A flag indicating the type of action to be taken.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This flag can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Collapses the list.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Collapses the list and removes the child items.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TVIS_EXPANDEDONCE<ept id="p1">**</ept> state flag is reset.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>This flag must be used with the <ph id="ph1">`TVE_COLLAPSE`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Expands the list.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Collapses the list if it is currently expanded or expands it if it is currently collapsed.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::EnsureVisible<ept id="p1">](#ctreectrl__ensurevisible)</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetBkColor</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_GETBKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773570)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that represents the current window background color for the control.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>If this value is -1, the control is using the system window color.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>In this case, you can use <ph id="ph1">`::GetSysColor(COLOR_WINDOW)`</ph> to get the current system color that the control is using.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetTextColor<ept id="p1">](#ctreectrl__settextcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetCheck</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve an item's check state.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HTREEITEM<ept id="p1">**</ept> about which to receive the state information.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Nonzero if the tree control item is checked; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetCheck<ept id="p1">](#ctreectrl__setcheck)</ept>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetChildItem</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the tree view item that is the child of the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The handle of the child item if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#7</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetCount</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a count of the items in a tree view control.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The number of items in the tree view control.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#8</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetDropHilightItem</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the item that is the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The handle of the item dropped if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#9</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetEditControl</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the handle of the edit control being used to edit a tree view item's text.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>A pointer to the edit control used to edit the item text, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#10</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Retrieves the extended styles that the current tree-view control is using.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>A value that contains a bitwise combination (OR) of the current tree-view control's extended styles.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Tree-View Control Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_GETEXTENDEDSTYLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773580)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetFirstVisibleItem</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the first visible item of the tree view control.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The handle of the first visible item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetCheck<ept id="p1">](#ctreectrl__setcheck)</ept>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetImageList</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the handle of the normal or state image list associated with the tree view control.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Type of image list to retrieve.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The image list can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Retrieves the normal image list, which contains the selected and nonselected images for the tree view item.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Retrieves the state image list, which contains the images for tree view items that are in a user-defined state.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Pointer to the control's image list if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Each item in a tree view control can have a pair of bitmapped images associated with it.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>One image is displayed when the item is selected, and the other is displayed when the item is not selected.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>For example, an item might display an open folder when it is selected and a closed folder when it is not selected.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>For more information on image lists, see the <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#11</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetIndent</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the amount, in pixels, that child items are indented relative to their parent items.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The amount of indentation measured in pixels.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#12</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_GETINSERTMARKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773590)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the current insertion mark color.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#13</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItem</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the attributes of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TVITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::DeleteItem<ept id="p1">](#ctreectrl__deleteitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemData</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the 32-bit application-specific value associated with the specified item.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Handle of the item whose data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A 32-bit application-specific value associated with the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#14</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemExpandedImageIndex</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Handle to a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The index of the image to display when the specified item is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_GETITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773596)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>That message returns the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure that describes the tree-view control item, and then this method retrieves the <ph id="ph1">`iExpandedImage`</ph> member from that structure.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemHeight</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_GETITEMHEIGHT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773599)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The height of the item, in pixels.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#15</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemImage</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Each item in a tree view control can have a pair of bitmapped images associated with it.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The handle of the item whose image is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>An integer that receives the index of the item's image within the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>An integer that receives the index of the item's selected image within the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The images appear on the left side of an item's label.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>One image is displayed when the item is selected, and the other is displayed when the item is not selected.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>For example, an item might display an open folder when it is selected and a closed folder when it is not selected.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the index of the item's image and its selected image within the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#16</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemPartRect</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Handle to a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Identifier for the part.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Must be set to <ph id="ph1">`TVGIPR_BUTTON`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>If this method is successful, the structure receives the rectangle coordinates of the part specified by <ph id="ph1">`hItem`</ph> and <ph id="ph2">`nPart`</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Each tree control item is bounded by a graphics rectangle.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Whenever a point in that rectangle is clicked, the item is said to be <bpt id="p1">*</bpt>hit<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>This method returns the largest rectangle such that when a point in the rectangle is clicked, the item identified by the <ph id="ph1">`hItem`</ph> parameter is hit.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>This method sends the <ph id="ph1">`TVM_GETITEMPARTRECT`</ph> message, which is described in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>TreeView_GetItemPartRect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773847)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The following code example uses an accessibility identifier and the <bpt id="p1">[</bpt>CTreeCtrl::MapAccIdToItem<ept id="p1">](#ctreectrl__mapaccidtoitem)</ept> method to retrieve a handle to the root tree-view item.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Then the example uses the handle and the <bpt id="p1">[</bpt>CTreeCtrl::GetItemPartRect<ept id="p1">](#ctreectrl__getitempartrect)</ept> method to draw a 3D rectangle around that item.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>We used the <bpt id="p1">[</bpt>CTreeCtrl::MapItemToAccID<ept id="p1">](#ctreectrl__mapitemtoaccid)</ept> method to associate the root tree-view item with an accessibility identifier.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#5</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemRect</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the bounding rectangle for <ph id="ph1">`hItem`</ph> and determine whether it is visible or not.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The handle of a tree view control item.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that receives the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The coordinates are relative to the upper-left corner of the tree view control.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>bTextOnly</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>If this parameter is nonzero, the bounding rectangle includes only the text of the item.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Otherwise it includes the entire line that the item occupies in the tree view control.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Nonzero if the item is visible, with the bounding rectangle contained in <ph id="ph1">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Otherwise, 0 with <ph id="ph1">`lpRect`</ph> uninitialized.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#17</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemState</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Returns the state of the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Handle of the item whose state is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Mask indicating one or more states to be retrieved.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>For more information on possible values for <ph id="ph1">`nStateMask`</ph>, see the discussion of the <bpt id="p1">**</bpt>state<ept id="p1">**</ept> and <bpt id="p2">**</bpt>stateMask<ept id="p2">**</ept> members of the <bpt id="p3">[</bpt>TVITEM<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that holds the bitwise OR of the values specified by nStateMask.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>For information on possible values, see <bpt id="p1">[</bpt>CTreeCtrl::GetItem<ept id="p1">](#ctreectrl__getitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>To find the value for a specific state, perform a bitwise AND operation of the state value and the return value, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#18</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemStateEx</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Retrieves the extended state of the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Handle to a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The extended state of the item.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`uStateEx`</ph> member of the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_GETITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773596)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>That message returns the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure that describes the tree-view control item, and this method retrieves the <ph id="ph1">`uStateEx`</ph> member from that structure.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetItemText</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Returns the text of the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Handle of the item whose text is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object containing the item's text.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetNextItem<ept id="p1">](#ctreectrl__getnextitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetLastVisibleItem</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Retrieves the last unexpanded node item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The handle to the last unexpanded node item if the method is successful; otherwise, <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_GETNEXTITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773622)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`TVGN_LASTVISIBLE`</ph> flag in the <ph id="ph2">`flag`</ph> parameter of that message.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>One or more of these variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The following code example retrieves a handle to the last unexpanded tree-view node item, and then draws a 3D rectangle around that item.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#6</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetLineColor</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the win32 message <bpt id="p1">[</bpt>TVM_GETLINECOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773619)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The current line color.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#19</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextItem</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the tree view item that has the specified relationship, indicated by the <ph id="ph1">`nCode`</ph> parameter, to <ph id="ph2">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>A flag indicating the type of relation to <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>This flag can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Retrieves the currently selected item.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Retrieves the first child item of the item specified by the <ph id="ph1">`hItem`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Retrieves the item that is the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Retrieves the first visible item.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Retrieves the last expanded item in the tree.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This does not retrieve the last item visible in the tree-view window.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Retrieves the next sibling item.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Retrieves the next visible item that follows the specified item.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Retrieves the parent of the specified item.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Retrieves the previous sibling item.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Retrieves the first visible item that precedes the specified item.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Retrieves the first child item of the root item of which the specified item is a part.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The handle of the next item if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>This function will return <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the item being retrieved is the root node of the tree.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>For example, if you use this message with the <ph id="ph1">`TVGN_PARENT`</ph> flag on a first-level child of the tree view's root node, the message will return <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>For an example of using <ph id="ph1">`GetNextItem`</ph> in a loop, see <bpt id="p1">[</bpt>CTreeCtrl::DeleteItem<ept id="p1">](#ctreectrl__deleteitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#20</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextSiblingItem</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the next sibling of <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The handle of the next sibling item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#21</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetNextVisibleItem</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the next visible item of <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The handle of the next visible item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetCheck<ept id="p1">](#ctreectrl__setcheck)</ept>.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetParentItem</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the parent of <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The handle of the parent item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This function will return <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the parent of the specified item is the root node of the tree.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::EnsureVisible<ept id="p1">](#ctreectrl__ensurevisible)</ept>.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetPrevSiblingItem</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the previous sibling of <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The handle of the previous sibling; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#22</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetPrevVisibleItem</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the previous visible item of <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The handle of the previous visible item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#23</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetRootItem</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the root item of the tree view control.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The handle of the root item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::EditLabel<ept id="p1">](#ctreectrl__editlabel)</ept>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetScrollTime</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the maximum scroll time for the tree view control.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The maximum scroll time, in milliseconds.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the win32 message <bpt id="p1">[</bpt>TVM_GETSCROLLTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773625)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetSelectedCount</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Retrieves the number of selected items in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The number of selected items.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_GETSELECTEDCOUNT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773629)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetSelectedItem</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the currently selected item of the tree view control.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The handle of the selected item; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#24</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetTextColor</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_GETTEXTCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773633)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that represents the current text color.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>If this value is -1, the control is using the system color for the text color.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetTextColor<ept id="p1">](#ctreectrl__settextcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetToolTips</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_GETTOOLTIPS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773729)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CToolTipCtrl<ept id="p1">](../../mfc/reference/ctooltipctrl-class.md)</ept> object to be used by the tree control.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>Create<ept id="p1">](#ctreectrl__create)</ept> member function uses the style <bpt id="p2">**</bpt>TVS_NOTOOLTIPS<ept id="p2">**</ept>, no tooltips are used, and <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The MFC implementation of <ph id="ph1">`GetToolTips`</ph> returns a <ph id="ph2">`CToolTipCtrl`</ph> object, which is used by the tree control, rather than a handle to a tooltip control.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#25</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::GetVisibleCount</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a count of the visible items in a tree view control.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The number of visible items in the tree view control; otherwise – 1.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetCheck<ept id="p1">](#ctreectrl__setcheck)</ept>.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::HitTest</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Call this function to determine the location of the specified point relative to the client area of a tree view control.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Client coordinates of the point to test.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Pointer to an integer that receives information about the results of the hit test.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>It can be one or more of the values listed under the <bpt id="p1">**</bpt>flags<ept id="p1">**</ept> member in the Remarks section.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Address of a <bpt id="p1">[</bpt>TVHITTESTINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773448)</ept> structure that contains the position to hit test and that receives information about the results of the hit test.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>The handle of the tree view item that occupies the specified point or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no item occupies the point.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>When this function is called, the <ph id="ph1">`pt`</ph> parameter specifies the coordinates of the point to test.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The function returns the handle of the item at the specified point or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no item occupies the point.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`pFlags`</ph> parameter contains a value that indicates the location of the specified point.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>TVHT_ABOVE</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Above the client area.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>TVHT_BELOW</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Below the client area.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>TVHT_NOWHERE</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>In the client area, but below the last item.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEM</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>On the bitmap or label associated with an item.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMBUTTON</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>On the button associated with an item.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMICON</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>On the bitmap associated with an item.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMINDENT</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>In the indentation associated with an item.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMLABEL</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>On the label (string) associated with an item.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMRIGHT</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>In the area to the right of an item.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>TVHT_ONITEMSTATEICON</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>On the state icon for a tree-view item that is in a user-defined state.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>TVHT_TOLEFT</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>To the left of the client area.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>TVHT_TORIGHT</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>To the right of the client area.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#26</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::InsertItem</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Call this function to insert a new item in a tree view control.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>lpInsertStruct</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`TVINSERTSTRUCT`</ph> that specifies the attributes of the tree view item to be inserted.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Integer specifying which attributes to set.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`TVITEM`</ph> structure in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Address of a string containing the item's text.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Index of the item's image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Index of the item's selected image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Specifies values for the item's states.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>See Tree View Control Item States in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of appropriate states.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Specifies which states are to be set.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`TVITEM`</ph> structure in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>A 32-bit application-specific value associated with the item.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Handle of the inserted item's parent.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>hInsertAfter</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Handle of the item after which the new item is to be inserted.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Handle of the new item if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The example shows situations in which you might want to use each version of the function when inserting a tree control item.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#27</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::ItemHasChildren</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Use this function to determine whether the tree item specified by <ph id="ph1">`hItem`</ph> has child items.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Nonzero if the tree item specified by <ph id="ph1">`hItem`</ph> has child items; 0 if it does not.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>If so, you can then use <bpt id="p1">[</bpt>CTreeCtrl::GetChildItem<ept id="p1">](#ctreectrl__getchilditem)</ept> to retrieve those child items.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetSelectedItem<ept id="p1">](#ctreectrl__getselecteditem)</ept>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::MapAccIdToItem</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Maps the specified accessibility identifier to the handle of a tree-view item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>An accessibility identifier for an element in the tree-view item.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The handle to a tree-view item ( <ph id="ph1">`HTREEITEM`</ph>) that corresponds to the <ph id="ph2">`uAccId`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`hItem`</ph> member of the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Accessibility aids are applications that help people with disabilities use computers.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>An accessibility identifier is used by the <ph id="ph1">`IAccessible`</ph> interface to uniquely specify an element in a window.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>For more information about accessibility identifiers, search for the "About Active Accessibility Support" topic at <bpt id="p1">[</bpt>Microsoft Developer Network<ept id="p1">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_MAPACCIDTOHTREEITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773734)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>The following code example uses an accessibility identifier and the <bpt id="p1">[</bpt>CTreeCtrl::MapAccIdToItem<ept id="p1">](#ctreectrl__mapaccidtoitem)</ept> method to retrieve a handle to the root tree-view item.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The example uses the handle and the <bpt id="p1">[</bpt>CTreeCtrl::GetItemPartRect<ept id="p1">](#ctreectrl__getitempartrect)</ept> method to draw a 3D rectangle around that item.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>We used the <bpt id="p1">[</bpt>CTreeCtrl::MapItemToAccID<ept id="p1">](#ctreectrl__mapitemtoaccid)</ept> method to associate the root tree-view item with an accessibility identifier.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#5</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::MapItemToAccID</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Maps the specified handle of a tree-view item in the current tree-view control to an accessibility identifier.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>A handle of a tree-view item in the control.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`hItem`</ph> member of the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>The accessibility identifier that corresponds to the <ph id="ph1">`hItem`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Accessibility aids are applications that help people with disabilities use computers.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>An accessibility identifier is used by the <ph id="ph1">`IAccessible`</ph> interface to uniquely specify an element in a window.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>For more information about accessibility identifiers, search for the "About Active Accessibility Support" topic at <bpt id="p1">[</bpt>Microsoft Developer Network<ept id="p1">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_MAPHTREEITEMTOACCID<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773735)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The following code example obtains an identification number for a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>This code example obtains a unique identification number for the root country/region node.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#2</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::Select</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Call this function to select the given tree view item, scroll the item into view, or redraw the item in the style used to indicate the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>The type of action to take.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Sets the selection to the given item.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Redraws the given item in the style used to indicate the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Scrolls the tree view vertically so that the given item is the first visible item.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCode`</ph> contains the value <ph id="ph2">`TVGN_CARET`</ph>, the parent window receives the <bpt id="p1">**</bpt>TVN_SELCHANGING<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TVN_SELCHANGED<ept id="p2">**</ept> notification messages.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>In addition, if the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>In this case, the parent window receives the <bpt id="p1">**</bpt>TVN_ITEMEXPANDING<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TVN_ITEMEXPANDED<ept id="p2">**</ept> notification messages.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::HitTest<ept id="p1">](#ctreectrl__hittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectDropTarget</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Call this function to redraw the item in the style used to indicate the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#9</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectItem</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Call this function to select the given tree view item.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Handle of a tree item.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hItem`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, then this function selects no item.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#26</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SelectSetFirstVisible</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Call this function to scroll the tree view vertically so that the given item is the first visible item.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Handle of the tree item to be set as the first visible item.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>The function sends a message to the window with the <ph id="ph1">`TVM_SELECTITEM`</ph> and <ph id="ph2">`TVGN_FIRSTVISIBLE`</ph> message parameters.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#28</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetAutoscrollInfo</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Sets the autoscroll rate of the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>The number of pixels per second to scroll.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>The time interval between updates of the control.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Always returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The autoscroll parameters are used to scroll into view an item that is currently not visible.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>The tree-view control must have the <ph id="ph1">`TVS_EX_AUTOHSCROLL`</ph> extended style, which is described in <bpt id="p1">[</bpt>Tree-View Control Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_SETAUTOSCROLLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773738)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The following code example sets the autoscroll behavior of the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The code example sets the tree-view control to automatically scroll 30 pixels per second every 5 seconds until the tree item is in view.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#4</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetBkColor</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETBKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773741)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the new background color.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>If this value is -1, the control will revert to using the system color for the background color.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that represents the current text color.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>If this value is -1, the control is using the system color for the text color.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::SetTextColor<ept id="p1">](#ctreectrl__settextcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetCheck</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Call this member function to set the check state for a tree control item.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HTREEITEM<ept id="p1">**</ept> to receive the check state change.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Indicates whether the tree control item is to be checked or unchecked.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`SetCheck`</ph> sets the item to be checked.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>When the tree control item is checked ( <ph id="ph1">`fCheck`</ph> set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>), the item appears with an adjacent checkmark.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#29</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>To use checkboxes, set TVS_CHECKBOXES before populating the tree control.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#30</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Sets the extended styles for the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>A bitmask that specifies which styles in the current tree-view control are affected by this method.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>If this parameter is zero, it is ignored and the value of the <ph id="ph1">`dwExStyles`</ph> parameter is assigned to the tree-view control.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Specify zero or a bitwise combination (OR) of styles described in <bpt id="p1">[</bpt>Tree-View Control Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>A bitmask that specifies which styles in the current tree-view control to set or clear.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>To set a combination of styles, specify a bitwise combination (OR) of styles described in <bpt id="p1">[</bpt>Tree-View Control Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>To clear a set of styles, specify zero.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>A value that contains the previous extended control styles.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>This method clears the styles specified in the <ph id="ph1">`dwExMask`</ph> parameter, then sets the styles specified in the <ph id="ph2">`dwExStyles`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Only the extended styles that correspond to the bits in <ph id="ph1">`dwExMask`</ph> change.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_SETEXTENDEDSTYLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773744)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>The following code example adds the <ph id="ph1">`TVS_EX_AUTOHSCROLL`</ph> extended style to the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#3</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetImageList</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Call this function to set the normal or state image list for a tree view control and redraw the control using the new images.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Pointer to the image list to assign.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pImageList`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all images are removed from the tree view control.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>Type of image list to set.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>The image list can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Sets the normal image list, which contains the selected and nonselected images for the tree view item.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>You must use this state for overlay images.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Sets the state image list, which contains the images for tree view items that are in a user-defined state.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Pointer to the previous image list, if any; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetImageList<ept id="p1">](#ctreectrl__getimagelist)</ept>.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetIndent</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Call this function to set the width of indentation for a tree view control and redraw the control to reflect the new width.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Width, in pixels, of the indentation.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndent`</ph> is less than the system-defined minimum width, the new width is set to the system-defined minimum.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetIndent<ept id="p1">](#ctreectrl__getindent)</ept>.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetInsertMark</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773753)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>HTREEITEM<ept id="p1">**</ept> that specifies at which item the insertion mark will be placed.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>If this argument is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the insertion mark is removed.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>fAfter</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>BOOL<ept id="p1">**</ept> value that specifies if the insertion mark is placed before or after the specified item.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>If this argument is nonzero, the insertion mark will be placed after the item.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>If this argument is zero, the insertion mark will be placed before the item.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#31</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETINSERTMARKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773755)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the new insertion mark color.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the previous insertion mark color.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetInsertMarkColor<ept id="p1">](#ctreectrl__getinsertmarkcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItem</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Call this function to set the attributes of the specified tree view item.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TVITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure that contains the new item attributes, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Handle of the item whose attributes are to be set.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>hItem<ept id="p1">**</ept> member of the <ph id="ph1">`TVITEM`</ph> structure in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>Integer specifying which attributes to set.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>mask<ept id="p1">**</ept> member of the <ph id="ph1">`TVITEM`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Address of a string containing the item's text.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Index of the item's image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`iImage`</ph> member of the <ph id="ph2">`TVITEM`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Index of the item's selected image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>iSelectedImage<ept id="p1">**</ept> member of the <ph id="ph1">`TVITEM`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Specifies values for the item's states.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>State<ept id="p1">**</ept> member of the <ph id="ph1">`TVITEM`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Specifies which states are to be set.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>stateMask<ept id="p1">**</ept> member of the <ph id="ph1">`TVITEM`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>A 32-bit application-specific value associated with the item.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`TVITEM`</ph> structure, the <bpt id="p1">**</bpt>hItem<ept id="p1">**</ept> member identifies the item, and the <bpt id="p2">**</bpt>mask<ept id="p2">**</ept> member specifies which attributes to set.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>mask<ept id="p1">**</ept> member or the <ph id="ph1">`nMask`</ph> parameter specifies the <ph id="ph2">`TVIF_TEXT`</ph> value, the <bpt id="p2">**</bpt>pszText<ept id="p2">**</ept> member or the <ph id="ph3">`lpszItem`</ph> is the address of a null-terminated string and the <bpt id="p3">**</bpt>cchTextMax<ept id="p3">**</ept> member is ignored.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>mask<ept id="p1">**</ept> (or <ph id="ph1">`nMask`</ph>) specifies the <ph id="ph2">`TVIF_STATE`</ph> value, the <bpt id="p2">**</bpt>stateMask<ept id="p2">**</ept> member or the <ph id="ph3">`nStateMask`</ph> parameter specifies which item states to change and the <bpt id="p3">**</bpt>state<ept id="p3">**</ept> member or <ph id="ph4">`nState`</ph> parameter contains the values for those states.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#32</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemData</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Call this function to set the 32-bit application-specific value associated with the specified item.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Handle of the item whose data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>A 32-bit application-specific value associated with the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#33</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemExpandedImageIndex</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Handle to a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>The index of the image to display when the specified item is in the expanded state.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_SETITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773758)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>This method assigns the <ph id="ph1">`iExpandedImage`</ph> parameter to the <ph id="ph2">`iExpandedImage`</ph> member of a <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure, and then uses that structure in the message.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>The following code example is a trivial test to determine whether the <bpt id="p1">[</bpt>CTreeCtrl::GetItemExpandedImageIndex<ept id="p1">](#ctreectrl__getitemexpandedimageindex)</ept> method returns the value set by the <bpt id="p2">[</bpt>CTreeCtrl::SetItemExpandedImageIndex<ept id="p2">](#ctreectrl__setitemexpandedimageindex)</ept> method.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#8</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemHeight</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETITEMHEIGHT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773761)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Specifies the new height of every item in the tree view, in pixels.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>If this argument is less than the height of the images, then it will be set to the height of the images.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>If this argument is not even, it will be rounded down to the nearest even value.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>If this argument is -1, the control will revert to using its default item height.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The previous height of the items, in pixels.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetItemHeight<ept id="p1">](#ctreectrl__getitemheight)</ept>.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemImage</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Associates images with an item.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Handle of the item whose image is to be set.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Index of the item's image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>Index of the item's selected image in the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Each item in a tree view control can have a pair of bitmapped images associated with it.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>The images appear on the left side of an item's label.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>One image is displayed when the item is selected, and the other is displayed when the item is not selected.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>For example, an item might display an open folder when it is selected and a closed folder when it is not selected.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Call this function to set the index of the item's image and its selected image within the tree view control's image list.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>For more information on images, see <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetItemImage<ept id="p1">](#ctreectrl__getitemimage)</ept>.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemState</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>Sets the state of the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Handle of the item whose state is to be set.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Specifies new states for the item.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Specifies which states are to be changed.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>For information on states, see <bpt id="p1">[</bpt>CTreeCtrl::GetItem<ept id="p1">](#ctreectrl__getitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetItemState<ept id="p1">](#ctreectrl__getitemstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemStateEx</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>Sets the extended state of the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Handle to a tree-view control item.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>The extended state of the item.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`uStateEx`</ph> member of the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_SETITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773758)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>This method assigns the <ph id="ph1">`uStateEx`</ph> parameter to the <ph id="ph2">`uStateEx`</ph> member of a <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure, and then uses that structure in the message.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>The following code example defines a variable, <ph id="ph1">`m_treeCtrl`</ph>, that is used to access the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>The code example also defines an unsigned integer and several HTREEITEM variables.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>These variables are used in the next example.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The following code example sets a tree-view item to disabled state.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>This code example sets the Pennsylvania node to disabled state.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl_s1#7</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetItemText</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Sets the text of the item specified by <ph id="ph1">`hItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Handle of the item whose text is to be set.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Address of a string containing the new text for the item</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#34</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetLineColor</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Call this member function to set the current line color for the tree view control.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The new line color.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>The previous line color.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the win32 message <bpt id="p1">[</bpt>TVM_SETLINECOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773764)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#35</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetScrollTime</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Call this member function to set the maximum scroll time for the tree view control.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>uScrollTime</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>The new maximum scroll time, in milliseconds.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>If this value is less than 100, it will be rounded up to 100.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>The previous maximum scroll time, in milliseconds.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the win32 message <bpt id="p1">[</bpt>TVM_SETSCROLLTIME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773767)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetTextColor</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETTEXTCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773769)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the new text color.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>If this argument is -1, the control will revert to using the system color for the text color.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that represents the previous text color.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>If this value is -1, the control was using the system color for the text color.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#36</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SetToolTips</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TVM_SETTOOLTIPS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773772)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CToolTipCtrl<ept id="p1">](../../mfc/reference/ctooltipctrl-class.md)</ept> object that the tree control will use.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CToolTipCtrl<ept id="p1">](../../mfc/reference/ctooltipctrl-class.md)</ept> object containing the tooltip previously used by the control, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if no tooltips were used previously.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>To use tooltips, indicate the <bpt id="p1">**</bpt>TVS_NOTOOLTIPS<ept id="p1">**</ept> style when you create the <ph id="ph1">`CTreeCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CTreeCtrl::GetToolTips<ept id="p1">](#ctreectrl__gettooltips)</ept>.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::ShowInfoTip</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>Displays the infotip for the specified item in the current tree-view control.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>A handle to a tree-view item in the control.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`hItem`</ph> member of the <bpt id="p1">[</bpt>TVITEMEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>For more information about the difference between tooltips and infotips, search for the "Tooltips and Infotips" topic at <bpt id="p1">[</bpt>Microsoft Developer Network<ept id="p1">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TVM_SHOWINFOTIP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773779)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SortChildren</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Call this function to alphabetically sort the child items of the given parent item in a tree view control.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Handle of the parent item whose child items are to be sorted.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hItem`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, sorting will proceed from the root of the tree.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>will not recurse through the tree; only the immediate children of <ph id="ph1">`hItem`</ph> will be sorted.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#37</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>CTreeCtrl::SortChildrenCB</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Call this function to sort tree view items using an application-defined callback function that compares the items.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>pSort</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>TVSORTCB<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773462)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>The structure's comparison function, <bpt id="p1">**</bpt>lpfnCompare<ept id="p1">**</ept>, must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lParam1`</ph> and <ph id="ph2">`lParam2`</ph> parameters correspond to the <bpt id="p1">**</bpt>lParam<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>TVITEM<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure for the two items being compared.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lParamSort`</ph> parameter corresponds to the <bpt id="p1">**</bpt>lParam<ept id="p1">**</ept> member of the <ph id="ph2">`TV_SORTCB`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#38</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CTreeCtrl#39</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>MFC Sample CMNCTRL1</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>CImageList Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>