<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de831dd91fc21c4b408bbaf376d69c920f76176a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\rvalue-reference-declarator-amp-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60daf2a4cc8693a9c8697301f8b9898da21864bb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dae6d43d563e7e018a1e3845d89fe7aa68030d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Rvalue Reference Declarator: <ph id="ph1">&amp;amp;&amp;amp;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Rvalue Reference Declarator:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds a reference to an rvalue expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Rvalue references enable you to distinguish an lvalue from an rvalue.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Lvalue references and rvalue references are syntactically and semantically similar, but they follow somewhat different rules.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about lvalues and rvalues, see <bpt id="p1">[</bpt>Lvalues and Rvalues<ept id="p1">](../cpp/lvalues-and-rvalues-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about lvalue references, see <bpt id="p1">[</bpt>Lvalue Reference Declarator: &amp;<ept id="p1">](../cpp/lvalue-reference-declarator-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following sections describe how rvalue references support the implementation of <bpt id="p1">*</bpt>move semantics<ept id="p1">*</ept> and <bpt id="p2">*</bpt>perfect forwarding<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Move Semantics</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Rvalue references support the implementation of <bpt id="p1">*</bpt>move semantics<ept id="p1">*</ept>, which can significantly increase the performance of your applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Move semantics enables you to write code that transfers resources (such as dynamically allocated memory) from one object to another.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Move semantics works because it enables resources to be transferred from temporary objects that cannot be referenced elsewhere in the program.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To implement move semantics, you typically provide a <bpt id="p1">*</bpt>move constructor,<ept id="p1">*</ept> and optionally a move assignment operator (<ph id="ph1">`operator=`</ph>), to your class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copy and assignment operations whose sources are rvalues then automatically take advantage of move semantics.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unlike the default copy constructor, the compiler does not provide a default move constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about how to write a move constructor and how to use it in your application, see <bpt id="p1">[</bpt>Move Constructors and Move Assignment Operators (C++)<ept id="p1">](../cpp/move-constructors-and-move-assignment-operators-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also overload ordinary functions and operators to take advantage of move semantics.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>introduces move semantics into the Standard Template Library (STL).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`string`</ph> class implements operations that perform move semantics.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Consider the following example that concatenates several strings and prints the result:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Before <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, each call to <ph id="ph2">`operator+`</ph> allocates and returns a new temporary <ph id="ph3">`string`</ph> object (an rvalue).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>cannot append one string to the other because it does not know whether the source strings are lvalues or rvalues.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the source strings are both lvalues, they might be referenced elsewhere in the program and therefore must not be modified.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By using rvalue references, <ph id="ph1">`operator+`</ph> can be modified to take rvalues, which cannot be referenced elsewhere in the program.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`operator+`</ph> can now append one string to another.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This can significantly reduce the number of dynamic memory allocations that the <ph id="ph1">`string`</ph> class must perform.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`string`</ph> class, see <bpt id="p1">[</bpt>basic_string Class<ept id="p1">](../standard-library/basic-string-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Move semantics also helps when the compiler cannot use Return Value Optimization (RVO) or Named Return Value Optimization (NRVO).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In these cases, the compiler calls the move constructor if the type defines it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about Named Return Value Optimization, see <bpt id="p1">[</bpt>Named Return Value Optimization in Visual C++ 2005<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=131571)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To better understand move semantics, consider the example of inserting an element into a <ph id="ph1">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the capacity of the <ph id="ph1">`vector`</ph> object is exceeded, the <ph id="ph2">`vector`</ph> object must reallocate memory for its elements and then copy each element to another memory location to make room for the inserted element.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When an insertion operation copies an element, it creates a new element, calls the copy constructor to copy the data from the previous element to the new element, and then destroys the previous element.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Move semantics enables you to move objects directly without having to perform expensive memory allocation and copy operations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To take advantage of move semantics in the <ph id="ph1">`vector`</ph> example, you can write a move constructor to move data from one object to another.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about the introduction of move semantics into the STL in <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, see <bpt id="p1">[</bpt>C++ Standard Library<ept id="p1">](../standard-library/cpp-standard-library-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Perfect Forwarding</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Perfect forwarding reduces the need for overloaded functions and helps avoid the forwarding problem.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>forwarding problem<ept id="p1">*</ept> can occur when you write a generic function that takes references as its parameters and it passes (or <bpt id="p2">*</bpt>forwards<ept id="p2">*</ept>) these parameters to another function.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, if the generic function takes a parameter of type <ph id="ph1">`const T&amp;`</ph>, then the called function cannot modify the value of that parameter.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the generic function takes a parameter of type <ph id="ph1">`T&amp;`</ph>, then the function cannot be called by using an rvalue (such as a temporary object or integer literal).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Ordinarily, to solve this problem, you must provide overloaded versions of the generic function that take both <ph id="ph1">`T&amp;`</ph> and <ph id="ph2">`const T&amp;`</ph> for each of its parameters.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As a result, the number of overloaded functions increases exponentially with the number of parameters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Rvalue references enable you to write one version of a function that accepts arbitrary arguments and forwards them to another function as if the other function had been called directly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Consider the following example that declares four types, <ph id="ph1">`W`</ph>, <ph id="ph2">`X`</ph>, <ph id="ph3">`Y`</ph>, and <ph id="ph4">`Z`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The constructor for each type takes a different combination of <ph id="ph1">`const`</ph> and non-<ph id="ph2">`const`</ph> lvalue references as its parameters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Suppose you want to write a generic function that generates objects.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows one way to write this function:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows a valid call to the <ph id="ph1">`factory`</ph> function:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, the following example does not contain a valid call to the <ph id="ph1">`factory`</ph> function because <ph id="ph2">`factory`</ph> takes lvalue references that are modifiable as its parameters, but it is called by using rvalues:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Ordinarily, to solve this problem, you must create an overloaded version of the <ph id="ph1">`factory`</ph> function for every combination of <ph id="ph2">`A&amp;`</ph> and <ph id="ph3">`const A&amp;`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Rvalue references enable you to write one version of the <ph id="ph1">`factory`</ph> function, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This example uses rvalue references as the parameters to the <ph id="ph1">`factory`</ph> function.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The purpose of the <bpt id="p1">[</bpt>std::forward<ept id="p1">](../standard-library/utility-functions.md#forward)</ept> function is to forward the parameters of the factory function to the constructor of the template class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`main`</ph> function that uses the revised <ph id="ph2">`factory`</ph> function to create instances of the <ph id="ph3">`W`</ph>, <ph id="ph4">`X`</ph>, <ph id="ph5">`Y`</ph>, and <ph id="ph6">`Z`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The revised <ph id="ph1">`factory`</ph> function forwards its parameters (either lvalues or rvalues) to the appropriate class constructor.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Additional Properties of Rvalue References</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can overload a function to take an lvalue reference and an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>By overloading a function to take a <ph id="ph1">`const`</ph> lvalue reference or an rvalue reference, you can write code that distinguishes between non-modifiable objects (lvalues) and modifiable temporary values (rvalues).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can pass an object to a function that takes an rvalue reference unless the object is marked as <ph id="ph1">`const`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example shows the function <ph id="ph1">`f`</ph>, which is overloaded to take an lvalue reference and an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`main`</ph> function calls <ph id="ph2">`f`</ph> with both lvalues and an rvalue.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In this example, the first call to <ph id="ph1">`f`</ph> passes a local variable (an lvalue) as its argument.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">`f`</ph> passes a temporary object as its argument.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the temporary object cannot be referenced elsewhere in the program, the call binds to the overloaded version of <ph id="ph1">`f`</ph> that takes an rvalue reference, which is free to modify the object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The compiler treats a named rvalue reference as an lvalue and an unnamed rvalue reference as an rvalue.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When you write a function that takes an rvalue reference as its parameter, that parameter is treated as an lvalue in the body of the function.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The compiler treats a named rvalue reference as an lvalue because a named object can be referenced by several parts of a program; it would be dangerous to allow multiple parts of a program to modify or remove resources from that object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, if multiple parts of a program try to transfer resources from the same object, only the first part will successfully transfer the resource.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example shows the function <ph id="ph1">`g`</ph>, which is overloaded to take an lvalue reference and an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`f`</ph> takes an rvalue reference as its parameter (a named rvalue reference) and returns an rvalue reference (an unnamed rvalue reference).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the call to <ph id="ph1">`g`</ph> from <ph id="ph2">`f`</ph>, overload resolution selects the version of <ph id="ph3">`g`</ph> that takes an lvalue reference because the body of <ph id="ph4">`f`</ph> treats its parameter as an lvalue.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the call to <ph id="ph1">`g`</ph> from <ph id="ph2">`main`</ph>, overload resolution selects the version of <ph id="ph3">`g`</ph> that takes an rvalue reference because <ph id="ph4">`f`</ph> returns an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`main`</ph> function passes an rvalue to <ph id="ph2">`f`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The body of <ph id="ph1">`f`</ph> treats its named parameter as an lvalue.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The call from <ph id="ph1">`f`</ph> to <ph id="ph2">`g`</ph> binds the parameter to an lvalue reference (the first overloaded version of <ph id="ph3">`g`</ph>).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can cast an lvalue to an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The STL <bpt id="p1">[</bpt>std::move<ept id="p1">](../standard-library/utility-functions.md#move)</ept> function enables you to convert an object to an rvalue reference to that object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the <ph id="ph1">`static_cast`</ph> keyword to cast an lvalue to an rvalue reference, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Function templates deduce their template argument types and then use reference collapsing rules.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is common to write a function template that passes (or <bpt id="p1">*</bpt>forwards<ept id="p1">*</ept>) its parameters to another function.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It is important to understand how template type deduction works for function templates that take rvalue references.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the function argument is an rvalue, the compiler deduces the argument to be an rvalue reference.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, if you pass an rvalue reference to an object of type <ph id="ph1">`X`</ph> to a template function that takes type <ph id="ph2">`T&amp;&amp;`</ph> as its parameter, template argument deduction deduces <ph id="ph3">`T`</ph> to be <ph id="ph4">`X`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Therefore, the parameter has type <ph id="ph1">`X&amp;&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the function argument is an lvalue or <ph id="ph1">`const`</ph> lvalue, the compiler deduces its type to be an lvalue reference or <ph id="ph2">`const`</ph> lvalue reference of that type.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example declares one structure template and then specializes it for various reference types.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`print_type_and_value`</ph> function takes an rvalue reference as its parameter and forwards it to the appropriate specialized version of the <ph id="ph2">`S::print`</ph> method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`main`</ph> function demonstrates the various ways to call the <ph id="ph2">`S::print`</ph> method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To resolve each call to the <ph id="ph1">`print_type_and_value`</ph> function, the compiler first performs template argument deduction.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The compiler then applies reference collapsing rules when it substitutes the deduced template arguments for the parameter types.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, passing the local variable <ph id="ph1">`s1`</ph> to the <ph id="ph2">`print_type_and_value`</ph> function causes the compiler to produce the following function signature:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The compiler uses reference collapsing rules to reduce the signature to the following:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This version of the <ph id="ph1">`print_type_and_value`</ph> function then forwards its parameter to the correct specialized version of the <ph id="ph2">`S::print`</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following table summarizes the reference collapsing rules for template argument type deduction:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Expanded type</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Collapsed type</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Template argument deduction is an important element of implementing perfect forwarding.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The section Perfect Forwarding, which is presented earlier in this topic, describes perfect forwarding in more detail.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Rvalue references distinguish lvalues from rvalues.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>They can help you improve the performance of your applications by eliminating the need for unnecessary memory allocations and copy operations.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>They also enable you to write one version of a function that accepts arbitrary arguments and forwards them to another function as if the other function had been called directly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator: &amp;</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Lvalues and Rvalues</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Move Constructors and Move Assignment Operators (C++)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>