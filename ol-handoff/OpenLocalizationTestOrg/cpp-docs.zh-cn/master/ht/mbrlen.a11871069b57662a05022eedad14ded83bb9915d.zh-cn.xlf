<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e1b11004e81fa0a9011f2785152c388306315f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\mbrlen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46ce177df8d83dea8ce8f459be6d1fff54346613</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7f356a0836b513cb5fb11143c2c631e32c62af6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>mbrlen | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>mbrlen</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determine the number of bytes that are required to complete a multibyte character in the current locale, with the capability of restarting in the middle of a multibyte character.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer to the next byte to inspect in a multibyte character string.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to inspect.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Pointer to the current shift state of the initial byte of <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One of the following values:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">`count`</ph> or fewer bytes complete the multibyte character that represents the wide null character.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>1 to <ph id="ph1">`count`</ph>, inclusive</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">`count`</ph> or fewer bytes complete a valid multibyte character.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The value returned is the number of bytes that complete the multibyte character.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(size_t)(-2)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">`count`</ph> bytes contribute to an incomplete but potentially valid multibyte character and all <ph id="ph2">`count`</ph> bytes have been processed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(size_t)(-1)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An encoding error occurred.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">`count`</ph> or fewer bytes do not contribute to a complete and valid multibyte character.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`errno`</ph> is set to EILSEQ and the conversion state in <ph id="ph2">`mbstate`</ph> is unspecified.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbrlen`</ph> function inspects at most <ph id="ph2">`count`</ph> bytes starting with the byte pointed to by <ph id="ph3">`str`</ph> to determine the number of bytes that are required to complete the next multibyte character, including any shift sequences.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is equivalent to the call <ph id="ph1">`mbrtowc(NULL, str, count, &amp;mbstate)`</ph> where <ph id="ph2">`mbstate`</ph> is either a user-provided <ph id="ph3">`mbstate_t`</ph> object, or a static internal object provided by the library.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbrlen`</ph> function saves and uses the shift state of an incomplete multibyte character in the <ph id="ph2">`mbstate`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This gives <ph id="ph1">`mbrlen`</ph> the capability of restarting in the middle of a multibyte character if need be, examining at most <ph id="ph2">`count`</ph> bytes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mbstate`</ph> is a null pointer, <ph id="ph2">`mbrlen`</ph> uses an internal, static <ph id="ph3">`mbstate_t`</ph> object to store the shift state.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the internal <ph id="ph1">`mbstate_t`</ph> object is not thread-safe, we recommend that you always allocate and pass your own <ph id="ph2">`mbstate`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mbrlen`</ph> function differs from <bpt id="p1">[</bpt>_mbclen, mblen, _mblen_l<ept id="p1">](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)</ept> by its restartability.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The shift state is stored in <ph id="ph1">`mbstate`</ph> for subsequent calls to the same or other restartable functions.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Results are undefined when mixing the use of restartable and nonrestartable functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, an application should use <ph id="ph1">`wcsrlen`</ph> instead of <ph id="ph2">`wcslen`</ph> if a subsequent call to <ph id="ph3">`wcsrtombs`</ph> is used instead of</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>not applicable</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This example shows how the interpretation of multibyte characters depends on the current code page, and demonstrates the resuming capability of <ph id="ph1">`mbrlen`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>System::String::Length</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>