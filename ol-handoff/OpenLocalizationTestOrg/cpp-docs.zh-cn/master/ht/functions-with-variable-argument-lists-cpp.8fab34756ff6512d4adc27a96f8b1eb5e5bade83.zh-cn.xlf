<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c070a0125b4c7a7c9602dd1af73b8e4beadbe265</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\functions-with-variable-argument-lists-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d270f7ec2810946614ae6739e96dbdb584cc4ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7716b5e3fa6a3347d98b8c56c7a575019c2a24e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Functions with Variable Argument Lists  (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Functions with Variable Argument Lists  (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Function declarations in which the last member of  is the ellipsis (...) can take a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In these cases, C++ provides type checking only for the explicitly declared arguments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use variable argument lists when you need to make a function so general that even the number and types of arguments can vary.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The  family of functions is an example of functions that use variable argument lists.<ph id="ph1">`printf`</ph><bpt id="p1">*</bpt>argument-declaration-list<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Functions with variable arguments</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To access arguments after those declared, use the macros contained in the standard include file STDARG.H as described below.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Microsoft C++ allows the ellipsis to be specified as an argument if the ellipsis is the last argument and the ellipsis is preceded by a comma.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, the declaration <ph id="ph1">`int Func( int i, ... );`</ph> is legal, but <ph id="ph2">`int Func( int i ... );`</ph> is not.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Declaration of a function that takes a variable number of arguments requires at least one placeholder argument, even if it is not used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If this placeholder argument is not supplied, there is no way to access the remaining arguments.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When arguments of type <ph id="ph1">`char`</ph> are passed as variable arguments, they are converted to type <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Similarly, when arguments of type <bpt id="p1">**</bpt>float<ept id="p1">**</ept> are passed as variable arguments, they are converted to type <bpt id="p2">**</bpt>double<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Arguments of other types are subject to the usual integral and floating-point promotions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Standard Conversions<ept id="p1">](standard-conversions.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Functions that require variable lists are declared by using the ellipsis (...) in the argument list.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the types and macros that are described in the STDARG.H include file to access arguments that are passed by a variable list.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about these macros, see <bpt id="p1">[</bpt>va_arg, va_copy, va_end, va_start<ept id="p1">](../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>in the documentation for the C Run-Time Library.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example shows how the macros work together with the  type (declared in STDARG.H):</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The previous example illustrates these important concepts:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You must establish a list marker as a variable of type <ph id="ph1">`va_list`</ph> before any variable arguments are accessed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous example, the marker is called <ph id="ph1">`vl`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The individual arguments are accessed by using the <ph id="ph1">`va_arg`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You must tell the <ph id="ph1">`va_arg`</ph> macro the type of argument to retrieve so that it can transfer the correct number of bytes from the stack.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you specify an incorrect type of a size different from that supplied by the calling program to <ph id="ph1">`va_arg`</ph>, the results are unpredictable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You should explicitly cast the result obtained by using the <ph id="ph1">`va_arg`</ph> macro to the type that you want.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must call the  macro to terminate variable-argument processing.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>