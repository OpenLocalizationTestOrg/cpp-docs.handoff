<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea590ced6b17fd552d793ce837dff65fda4999bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\rules-and-limitations-for-dllimport-dllexport.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">105de7f45b5bbfc5faabafc6b705d3424a4b0ab7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66757a390dc6e3cb8562cab55fe1f8d59f5199a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Rules and Limitations for dllimport-dllexport | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Rules and Limitations for dllimport/dllexport</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you declare a function without the <bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept> or <ph id="ph1">`dllexport`</ph> attribute, the function is not considered part of the DLL interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, the definition of the function must be present in that module or in another module of the same program.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To make the function part of the DLL interface, you must declare the definition of the function in the other module as <ph id="ph1">`dllexport`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Otherwise, a linker error is generated when the client is built.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a single module in your program contains <bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept> and <ph id="ph1">`dllexport`</ph> declarations for the same function, the <ph id="ph2">`dllexport`</ph> attribute takes precedence over the <bpt id="p2">**</bpt>dllimport<ept id="p2">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, a compiler warning is generated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You cannot initialize a static data pointer with the address of a data object declared with the <bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, the following code generates errors:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializing a static function pointer with the address of a function declared with <bpt id="p1">**</bpt>dllimport<ept id="p1">**</ept> sets the pointer to the address of the DLL import thunk (a code stub that transfers control to the function) rather than the address of the function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This assignment does not generate an error message:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because a program that includes the <ph id="ph1">`dllexport`</ph> attribute in the declaration of an object must provide the definition for that object, you can initialize a global or local static function pointer with the address of a <ph id="ph2">`dllexport`</ph> function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Similarly, you can initialize a global or local static data pointer with the address of a <ph id="ph1">`dllexport`</ph> data object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DLL Import and Export Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>