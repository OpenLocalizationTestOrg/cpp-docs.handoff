<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fbdb7216f9aac2ee1bc6c6ddaff572d6fd833be</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\const-and-volatile-pointers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ffc0e127d22dc5bc72a5618f3690df76646a967</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ed85873eed122fc3f4509cbc863ab2174e60d55</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>const and volatile Pointers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>const and volatile Pointers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>const<ept id="p1">](../cpp/const-cpp.md)</ept> and <bpt id="p2">[</bpt>volatile<ept id="p2">](../cpp/volatile-cpp.md)</ept> keywords change how pointers are treated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword specifies that the pointer cannot be modified after initialization; the pointer is protected from modification thereafter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`volatile`</ph> keyword specifies that the value associated with the name that follows can be modified by actions other than those in the user application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`volatile`</ph> keyword is useful for declaring objects in shared memory that can be accessed by multiple processes or global data areas used for communication with interrupt service routines.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a name is declared as <ph id="ph1">`volatile`</ph>, the compiler reloads the value from memory each time it is accessed by the program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This dramatically reduces the possible optimizations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, when the state of an object can change unexpectedly, it is the only way to ensure predictable program performance.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To declare the object pointed to by the pointer as <bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph>, use a declaration of the form:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To declare the value of the pointer — that is, the actual address stored in the pointer — as <bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph>, use a declaration of the form:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The C++ language prevents assignments that would allow modification of an object or pointer declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Such assignments would remove the information that the object or pointer was declared with, thereby violating the intent of the original declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Consider the following declarations:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Given the preceding declarations of two objects (<ph id="ph1">`cch`</ph>, of type <bpt id="p1">**</bpt>const char<ept id="p1">**</ept>, and <ph id="ph2">`ch`</ph>, of type <bpt id="p2">**</bpt>char)<ept id="p2">**</ept>, the following declaration/initializations are valid:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following declaration/initializations are erroneous.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">`pch2`</ph> declares a pointer through which a constant object might be modified and is therefore disallowed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">`pch3`</ph> specifies that the <ph id="ph2">`pointer`</ph> is constant, not the object; the declaration is disallowed for the same reason the <ph id="ph3">`pch2`</ph> declaration is disallowed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following eight assignments show assigning through pointer and changing of pointer value for the preceding declarations; for now, assume that the initialization was correct for <ph id="ph1">`pch1`</ph> through <ph id="ph2">`pch8`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Pointers declared as <ph id="ph1">`volatile`</ph>, or as a mixture of <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph2">`volatile`</ph>, obey the same rules.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Pointers to <bpt id="p1">**</bpt>const<ept id="p1">**</ept> objects are often used in function declarations as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The preceding statement declares a function, <bpt id="p1">[</bpt>strcpy_s<ept id="p1">](../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)</ept>, where two of the three arguments are of type pointer to <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because the arguments are passed by reference and not by value, the function would be free to modify both <ph id="ph1">`strDestination`</ph> and <ph id="ph2">`strSource`</ph> if <ph id="ph3">`strSource`</ph> were not declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">`strSource`</ph> as <bpt id="p1">**</bpt>const<ept id="p1">**</ept> assures the caller that <ph id="ph2">`strSource`</ph> cannot be changed by the called function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because there is a standard conversion from <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> <bpt id="p2">**</bpt><ph id="ph1">\*</ph><ept id="p2">**</ept> to <bpt id="p3">**</bpt>const<ept id="p3">**</ept> <bpt id="p4">*</bpt>typename<ept id="p4">*</ept> <bpt id="p5">**</bpt><ph id="ph2">\*</ph><ept id="p5">**</ept>, it is legal to pass an argument of type <bpt id="p6">**</bpt>char <ph id="ph3">\*</ph><ept id="p6">**</ept> to <bpt id="p7">[</bpt>strcpy_s<ept id="p7">](../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, the reverse is not true; no implicit conversion exists to remove the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> attribute from an object or pointer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>const<ept id="p1">**</ept> pointer of a given type can be assigned to a pointer of the same type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, a pointer that is not <bpt id="p1">**</bpt>const<ept id="p1">**</ept> cannot be assigned to a <bpt id="p2">**</bpt>const<ept id="p2">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code shows correct and incorrect assignments:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following sample shows how to declare an object as const if you have a pointer to a pointer to an object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Pointers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>