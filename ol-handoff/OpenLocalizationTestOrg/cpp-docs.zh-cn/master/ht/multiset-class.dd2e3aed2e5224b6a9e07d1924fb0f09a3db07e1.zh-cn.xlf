<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">117d4ef6b3665ba7e90e866f7f78cc426181bbf7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\multiset-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b44fd27ddb802bfef7f42ed916dc7f6811078a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06cbe566bf27a35b5d16d6d6d705a41158eeeddf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>multiset Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>multiset Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Standard Template Library multiset class is used for the storage and retrieval of data from a collection in which the values of the elements contained need not be unique and in which they serve as the key values according to which the data is automatically ordered.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The key value of an element in a multiset may not be changed directly.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instead, old values must be deleted and elements with new values inserted.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The element data type to be stored in the multiset.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compare</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type that provides a function object that can compare two element values as sort keys to determine their relative order in the multiset.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The binary predicate <bpt id="p1">**</bpt>less<ept id="p1">**</ept><ph id="ph1">\&lt;</ph>Key&gt; is the default value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In C++14 you can enable heterogeneous lookup by specifying the <ph id="ph1">`std::less&lt;&gt;`</ph> or <ph id="ph2">`std::greater&lt;&gt;`</ph> predicate that has no type parameters.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Heterogeneous Lookup in Associative Containers<ept id="p1">](../standard-library/stl-containers.md#sequence_containers)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type that represents the stored allocator object that encapsulates details about the multiset's allocation and deallocation of memory.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>allocator<ept id="p1">**</ept><bpt id="p2">*</bpt><ph id="ph1">\&lt;</ph>Key&gt;.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The STL multiset class is:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An associative container, which is a variable size container that supports the efficient retrieval of element values based on an associated key value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reversible, because it provides bidirectional iterators to access its elements.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Sorted, because its elements are ordered by key values within the container in accordance with a specified comparison function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Multiple in the sense that its elements do not need to have unique keys, so that one key value can have many element values associated with it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A simple associative container because its element values are its key values.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A template class, because the functionality it provides is generic and so independent of the specific type of data contained as elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The data type to be used is, instead, specified as a parameter in the class template along with the comparison function and allocator.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The iterator provided by the multiset class is a bidirectional iterator, but the class member functions <bpt id="p1">[</bpt>insert<ept id="p1">](#multiset__insert)</ept> and <bpt id="p2">[</bpt>multiset<ept id="p2">](#multiset__multiset)</ept> have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The different iterator concepts form a family related by refinements in their functionality.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each iterator concept has its own set of requirements and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ <ph id="ph1">`First`</ph>, <ph id="ph2">`Last`</ph>) in the context of the class's member functions.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The choice of container type should be based in general on the type of searching and inserting required by the application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Associative containers are optimized for the operations of lookup, insertion and removal.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The member functions that explicitly support these operations are efficient, performing them in a time that is on average proportional to the logarithm of the number of elements in the container.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The multiset should be the associative container of choice when the conditions associating the values with their keys are satisfies by the application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The elements of a multiset may be multiple and serve as their own sort keys, so keys are not unique.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A model for this type of structure is an ordered list of, say, words in which the words may occur more than once.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Had multiple occurrences of the words not been allowed, then a set would have been the appropriate container structure.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If unique definitions were attached as values to the list of unique key words, then a map would be an appropriate structure to contain this data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If instead the definitions were not unique, then a multimap would be the container of choice.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The multiset orders the sequence it controls by calling a stored function object of type <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This stored object is a comparison function that may be accessed by calling the member function <bpt id="p1">[</bpt>key_comp<ept id="p1">](#multiset__key_comp)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In general, the elements need be merely less than comparable to establish this order: so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This results in an ordering between the nonequivalent elements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A binary predicate <bpt id="p1">*</bpt>f<ept id="p1">*</ept>( <bpt id="p2">*</bpt>x<ept id="p2">*</ept>, <bpt id="p3">*</bpt>y<ept id="p3">*</ept>) is a function object that has two argument objects <bpt id="p4">*</bpt>x<ept id="p4">*</ept> and <bpt id="p5">*</bpt>y<ept id="p5">*</ept> and a return value of <bpt id="p6">**</bpt>true<ept id="p6">**</ept> or <bpt id="p7">**</bpt>false<ept id="p7">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An ordering imposed on a set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects x and y are defined to be equivalent when both <bpt id="p1">*</bpt>f<ept id="p1">*</ept>( <bpt id="p2">*</bpt>x,y<ept id="p2">*</ept>) and <bpt id="p3">*</bpt>f<ept id="p3">*</ept>( <bpt id="p4">*</bpt>y,x<ept id="p4">*</ept>) are false.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In C++14 you can enable heterogeneous lookup by specifying the <ph id="ph1">`std::less&lt;&gt;`</ph> or <ph id="ph2">`std::greater&lt;&gt;`</ph> predicate that has no type parameters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Heterogeneous Lookup in Associative Containers<ept id="p1">](../standard-library/stl-containers.md#sequence_containers)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>multiset</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`multiset`</ph> that is empty or that is a copy of all or part of a specified <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A typedef for the <ph id="ph1">`allocator`</ph> class for the <ph id="ph2">`multiset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>const_iterator</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read a <ph id="ph1">`const`</ph> element in the <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>const_pointer</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A typedef for a pointer to a <ph id="ph1">`const`</ph> element in a <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>const_reference</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A typedef for a reference to a <ph id="ph1">`const`</ph> element stored in a <ph id="ph2">`multiset`</ph> for reading and performing <ph id="ph3">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read any <ph id="ph1">`const`</ph> element in the <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>difference_type</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A signed integer typedef for the number of elements of a <ph id="ph1">`multiset`</ph> in a range between elements pointed to by iterators.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>iterator</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read or modify any element in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>key_compare</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A typedef for a function object that can compare two keys to determine the relative order of two elements in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>key_type</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A typedef for a function object that can compare two sort keys to determine the relative order of two elements in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A typedef for a pointer to an element in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A typedef for a reference to an element stored in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>reverse_iterator</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read or modify an element in a reversed <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>size_type</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An unsigned integer type that can represent the number of elements in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>value_compare</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The typedef for a function object that can compare two elements as sort keys to determine their relative order in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>value_type</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A typedef that describes an object stored as an element as a <ph id="ph1">`multiset`</ph> in its capacity as a value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>begin</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the first element in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>cbegin</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the first element in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>cend</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>count</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a <ph id="ph1">`multiset`</ph> whose key matches the key specified as a parameter.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>crbegin</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a reversed set.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>crend</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed set.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>emplace</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>emplace_hint</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into a <ph id="ph1">`multiset`</ph>, with a placement hint.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>empty</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Tests if a <ph id="ph1">`multiset`</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>end</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the location after the last element in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>equal_range</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The first iterator in the pair points to the first element in a <ph id="ph1">`multiset`</ph> with a key that is greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The second iterator in the pair points to first element in the <ph id="ph1">`multiset`</ph> with a key that is equal to or greater than the key.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>erase</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a <ph id="ph1">`multiset`</ph> from specified positions or removes elements that match a specified key.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>find</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the first location of an element in a <ph id="ph1">`multiset`</ph> that has a key equal to a specified key.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>get_allocator</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns a copy of the <ph id="ph1">`allocator`</ph> object that is used to construct the <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>insert</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Inserts an element or a range of elements into a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>key_comp</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Provides a function object that can compare two sort keys to determine the relative order of two elements in the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>lower_bound</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a <ph id="ph1">`multiset`</ph> with a key that is equal to or greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>max_size</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>rbegin</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the first element in a reversed <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>rend</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the location succeeding the last element in a reversed <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>size</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two <ph id="ph1">`multiset`</ph>s.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>upper_bound</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a <ph id="ph1">`multiset`</ph> with a key that is greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>value_comp</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the comparison object that is used to order element values in a <ph id="ph1">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Replaces the elements of a <ph id="ph1">`multiset`</ph> with a copy of another <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>set&gt;</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>multiset::allocator_type</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A type that represents the allocator class for the multiset object</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Allocator`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Allocator`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#multiset__get_allocator)</ept> for an example using</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>multiset::begin</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in the multiset.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator addressing the first element in the multiset or the location succeeding an empty multiset.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>multiset::cbegin</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the first element in the range.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id="ph2">`cbegin() == cend()`</ph>).</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`cbegin`</ph>, the elements in the range cannot be modified.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`begin()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`begin()`</ph> and <ph id="ph4">`cbegin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>multiset::cend</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional-access iterator that points just beyond the end of the range.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>is used to test whether an iterator has passed the end of its range.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`end()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`end()`</ph> and <ph id="ph4">`cend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`cend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>multiset::clear</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a multiset.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>multiset::const_iterator</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the multiset.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_iterator`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#multiset__begin)</ept> for an example using <ph id="ph1">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>multiset::const_pointer</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a multiset.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_pointer`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#multiset__iterator)</ept> should be used to access the elements in a multiset object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>multiset::const_reference</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element stored in a multiset for reading and performing <bpt id="p2">**</bpt>const<ept id="p2">**</ept> operations.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>multiset::const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read any <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the multiset.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the multiset in reverse.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rend<ept id="p1">](#multiset__rend)</ept> for an example of how to declare and use the <ph id="ph1">`const_reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>multiset::count</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a multiset whose key matches a parameter-specified key.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The key of the elements to be matched from the multiset.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The number of elements in the multiset whose sort key matches the parameter key.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The member function returns the number of elements <bpt id="p1">*</bpt>x<ept id="p1">*</ept> in the range</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>[ <ph id="ph1">`lower_bound`</ph> (_ <bpt id="p1">*</bpt>Key<ept id="p1">*</ept> ), <ph id="ph2">`upper_bound`</ph> (<ph id="ph3">\_</ph> <bpt id="p2">*</bpt>Key<ept id="p2">*</ept> ) ).</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the multiset::count member function.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>multiset::crbegin</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a reversed multiset.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A const reverse bidirectional iterator addressing the first element in a reversed multiset or addressing what had been the last element in the unreversed multiset.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>is used with a reversed multiset just as begin is used with a multiset.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crbegin`</ph>, the multiset object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a multiset backwards.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>multiset::crend</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed multiset.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A  const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed multiset (the location that had preceded the first element in the unreversed multiset).</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>is used with a reversed multiset just as <bpt id="p1">[</bpt>end<ept id="p1">](#multiset__end)</ept> is used with a multiset.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crend`</ph>, the multiset object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its multiset.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`crend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>multiset::difference_type</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A signed integer type that can be used to represent the number of elements of a multiset in a range between elements pointed to by iterators.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is typically used to represent the number of elements in the range [ <ph id="ph2">` first`</ph>, <ph id="ph3">` last`</ph>) between the iterators <ph id="ph4">` first`</ph> and <ph id="ph5">` last`</ph>, includes the element pointed to by <ph id="ph6">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id="ph7">` last`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Note that although <ph id="ph1">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers like set, subtraction between iterators is only supported by random-access iterators provided by a random-access container like vector.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>multiset::emplace</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The arguments forwarded to construct an element to be inserted into the multiset.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>An iterator to the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>During emplacement, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>multiset::emplace_hint</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The arguments forwarded to construct an element to be inserted into the multiset.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The place to start searching for the correct point of insertion.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>(If that point immediately precedes <ph id="ph1">`where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An iterator to the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>During emplacement, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>set::emplace_hint<ept id="p1">](../standard-library/set-class.md#set__emplace_hint)</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>multiset::empty</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Tests if a multiset is empty.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the multiset is empty; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the multiset is nonempty.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>multiset::end</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If the multiset is empty, then <ph id="ph1">`multiset::end() == multiset::begin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>end<ept id="p1">**</ept> is used to test whether an iterator has passed the end of its multiset.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The value returned by <bpt id="p1">**</bpt>end<ept id="p1">**</ept> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>multiset::find<ept id="p1">](#multiset__find)</ept>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>multiset::equal_range</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators respectively to the first element in a multiset with a key that is greater than a specified key and to the first element in the multiset with a key that is equal to or greater than the key.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The argument key to be compared with the sort key of an element from the multiset being searched.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>A pair of iterators such that the first is the <bpt id="p1">[</bpt>lower_bound<ept id="p1">](#multiset__lower_bound)</ept> of the key and the second is the <bpt id="p2">[</bpt>upper_bound<ept id="p2">](#multiset__upper_bound)</ept> of the key.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>To access the first iterator of a pair <ph id="ph1">`pr`</ph> returned by the member function, use <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, and to dereference the lower bound iterator, use <ph id="ph1">\*</ph>( <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>To access the second iterator of a pair <ph id="ph1">`pr`</ph> returned by the member function, use <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, and to dereference the upper bound iterator, use <ph id="ph1">\*</ph>( <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>multiset::erase</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a multiset from specified positions or removes elements that match a specified key.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Position of the element to be removed.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Position of the first element to be removed.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Position just beyond the last element to be removed.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The key value of the elements to be removed.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the multiset if no such element exists.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>For the third member function, returns the number of elements that have been removed from the multiset.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>set::erase<ept id="p1">](../standard-library/set-class.md#set__erase)</ept>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>multiset::find</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Returns an iterator that refers to the location of an element in a multiset that has a key equivalent to a specified key.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The key value to be matched by the sort key of an element from the multiset being searched.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>An iterator that refers to the location of an element with a specified key, or the location succeeding the last element in the multiset ( <ph id="ph1">`multiset::end()`</ph>) if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The member function returns an iterator that refers to an element in the multiset whose key is equivalent to the argument <ph id="ph1">`key`</ph> under a binary predicate that induces an ordering based on a less than comparability relation.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>find<ept id="p1">**</ept> is assigned to a <bpt id="p2">**</bpt>const_iterator<ept id="p2">**</ept>, the multiset object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>find<ept id="p1">**</ept> is assigned to an <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>, the multiset object can be modified</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>multiset::get_allocator</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator object used to construct the multiset.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The allocator used by the multiset.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Allocators for the multiset class specify how the class manages storage.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The default allocators supplied with STL container classes is sufficient for most programming needs.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Writing and using your own allocator class is an advanced C++ topic.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>multiset::insert</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Inserts an element or a range of elements into a multiset.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The value of an element to be inserted into the multiset.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The place to start searching for the correct point of insertion.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>(If that point immediately precedes <ph id="ph1">`Where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Template parameter that specifies the argument type that the multiset can use to construct an element of <bpt id="p1">[</bpt>value_type<ept id="p1">](../standard-library/map-class.md#map__value_type)</ept>, and perfect-forwards <ph id="ph1">`Val`</ph> as an argument.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The position of the first element to be copied.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The position just beyond the last element to be copied.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Template function argument that meets the requirements of an <bpt id="p1">[</bpt>input iterator<ept id="p1">](../standard-library/input-iterator-tag-struct.md)</ept> that points to elements of a type that can be used to construct <bpt id="p2">[</bpt>value_type<ept id="p2">](../standard-library/map-class.md#map__value_type)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>initializer_list<ept id="p1">](../standard-library/initializer-list.md)</ept> from which to copy the elements.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The single-element-insert member functions, (1) and (2), return an iterator to the position where the new element was inserted into the multiset.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the multiset.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>No pointers or references are invalidated by this function, but it may invalidate all iterators to the container.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>During the insertion of just one element, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>value_type<ept id="p1">](../standard-library/map-class.md#map__value_type)</ept> of a container is a typedef that belongs to the container, and, for set, <ph id="ph1">`multiset&lt;V&gt;::value_type`</ph> is type <ph id="ph2">`const V`</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The range member function (5) inserts the sequence of element values into a multiset that corresponds to each element addressed by an iterator in the range <ph id="ph1">`[First, Last)`</ph>; therefore, <ph id="ph2">`Last`</ph> does not get inserted.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The container member function <ph id="ph1">`end()`</ph> refers to the position just after the last element in the container—for example, the statement <ph id="ph2">`s.insert(v.begin(), v.end());`</ph> inserts all elements of <ph id="ph3">`v`</ph> into <ph id="ph4">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The initializer list member function (6) uses an <bpt id="p1">[</bpt>initializer_list<ept id="p1">](../standard-library/initializer-list.md)</ept> to copy elements into the multiset.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>For insertion of an element constructed in place—that is, no copy or move operations are performed—see <bpt id="p1">[</bpt>multiset::emplace<ept id="p1">](#multiset__emplace)</ept> and <bpt id="p2">[</bpt>multiset::emplace_hint<ept id="p2">](#multiset__emplace_hint)</ept>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>multiset::iterator</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>A type that provides a constant <bpt id="p1">[</bpt>bidirectional iterator<ept id="p1">](../standard-library/bidirectional-iterator-tag-struct.md)</ept> that can read any element in a multiset.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#multiset__begin)</ept> for an example of how to declare and use an <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>multiset::key_comp</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the comparison object used to order keys in a multiset.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns the function object that a multiset uses to order its elements, which is the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Compare`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The stored object defines the member function:</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bool operator<ept id="p1">**</ept>( <bpt id="p2">**</bpt>const Key&amp;<ept id="p2">**</ept> <bpt id="p3">*</bpt>x<ept id="p3">*</ept>, <bpt id="p4">**</bpt>const Key&amp;<ept id="p4">**</ept> <bpt id="p5">*</bpt>y<ept id="p5">*</ept>);</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>which returns true if <bpt id="p1">*</bpt>x<ept id="p1">*</ept> strictly precedes <bpt id="p2">*</bpt>y<ept id="p2">*</ept> in the sort order.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Note that both <bpt id="p1">[</bpt>key_compare<ept id="p1">](#multiset__key_compare)</ept> and <bpt id="p2">[</bpt>value_compare<ept id="p2">](#multiset__value_compare)</ept> are synonyms for the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Both types are provided for the classes set and multiset, where they are identical, for compatibility with the classes map and multimap, where they are distinct.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>multiset::key_compare</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the multiset.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>key_compare<ept id="p1">**</ept> is a synonym for the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Compare`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>key_comp<ept id="p1">](#multiset__key_comp)</ept> for an example of how to declare and use <ph id="ph1">`key_compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>multiset::key_type</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>A type that provides a function object that can compare sort keys to determine the relative order of two elements in the multiset.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Key`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>value_type<ept id="p1">](#multiset__value_type)</ept> for an example of how to declare and use <ph id="ph1">`key_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>multiset::lower_bound</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a multiset with a key that is equal to or greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The argument key to be compared with the sort key of an element from the multiset being searched.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> or <ph id="ph1">`const_iterator`</ph> that addresses the location of an element in a multiset that with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the multiset if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>multiset::max_size</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the multiset.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The maximum possible length of the multiset.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>multiset::multiset</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Constructs a multiset that is empty or that is a copy of all or part of some other multiset.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The storage allocator class to be used for this multiset object, which defaults to <ph id="ph1">`Allocator`</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The comparison function of type <ph id="ph1">`const Compare`</ph> used to order the elements in the multiset, which defaults to <ph id="ph2">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The multiset of which the constructed multiset is to be a copy.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The initializer_list from which to copy the elements.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>All constructors store a type of allocator object that manages memory storage for the multiset and that can later be returned by calling <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#multiset__get_allocator)</ept>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>All constructors initialize their multiset.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>All constructors store a function object of type Compare that is used to establish an order among the keys of the multiset and that can later be returned by calling <bpt id="p1">[</bpt>key_comp<ept id="p1">](#multiset__key_comp)</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The first three constructors specify an empty initial multiset, the second specifying the type of comparison function ( <ph id="ph1">`Comp`</ph>) to be used in establishing the order of the elements and the third explicitly specifying the allocator type ( <ph id="ph2">`Al`</ph>) to be used.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The keyword <ph id="ph1">`explicit`</ph> suppresses certain kinds of automatic type conversion.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The fourth constructor specifies a copy of the multiset <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The fifth constructor specifies a copy of the multiset by moving <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The sixth, seventh, and eighth constructors specify an initializer_list from which to copy the elements.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The next three constructors copy the range <ph id="ph1">`[First, Last)`</ph> of a multiset with increasing explicitness in specifying the type of comparison function and allocator.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>multiset::operator=</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Replaces the elements of this <ph id="ph1">`multiset`</ph> using elements from another <ph id="ph2">`multiset`</ph>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`multiset`</ph> from which elements are copied or moved.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>copies or moves the elements in <ph id="ph1">` right`</ph> into this <ph id="ph2">`multiset`</ph>, depending on the reference type (lvalue or rvalue) used.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Elements that are in this <ph id="ph1">`multiset`</ph> before <ph id="ph2">`operator=`</ph> executes are discarded.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>multiset::pointer</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element in a multiset.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#multiset__iterator)</ept> should be used to access the elements in a multiset object.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>multiset::rbegin</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in a reversed multiset.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator addressing the first element in a reversed multiset or addressing what had been the last element in the unreversed multiset.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>is used with a reversed multiset just as rbegin is used with a multiset.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, then the multiset object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, then the multiset object can be modified.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a multiset backwards.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>multiset::reference</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a multiset.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>multiset::rend</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a reversed multiset.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed multiset (the location that had preceded the first element in the unreversed multiset).</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>is used with a reversed multiset just as <bpt id="p1">[</bpt>end<ept id="p1">](#multiset__end)</ept> is used with a multiset.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, then the multiset object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, then the multiset object can be modified.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its multiset.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`rend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>multiset::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify an element in a reversed multiset.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`reverse_iterator`</ph> is use to iterate through the multiset in reverse.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#multiset__rbegin)</ept> for an example of how to declare and use <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>multiset::size</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the multiset.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The current length of the multiset.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>multiset::size_type</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>An unsigned integer type that can represent the number of elements in a multiset.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>size<ept id="p1">](#multiset__size)</ept> for an example of how to declare and use</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>multiset::swap</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two multisets.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The argument multiset providing the elements to be swapped with the target multiset.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The member function invalidates no references, pointers, or iterators that designate elements in the two multisets whose elements are being exchanged.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>multiset::upper_bound</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a multiset with a key that is greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The argument key to be compared with the sort key of an element from the multiset being searched.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> or <ph id="ph1">`const_iterator`</ph> that addresses the location of an element in a multiset with a key that is greater than the argument key, or that addresses the location succeeding the last element in the multiset if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>multiset::value_comp</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the comparison object used to order element values in a multiset.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Returns the function object that a multiset uses to order its elements, which is the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Compare`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The stored object defines the member function:</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bool operator<ept id="p1">**</ept>( <bpt id="p2">**</bpt>const Key&amp;<ept id="p2">**</ept><ph id="ph1">`_xVal`</ph>, <bpt id="p3">**</bpt>const Key&amp;<ept id="p3">**</ept><ph id="ph2">`_yVal`</ph>);</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>which returns true if <ph id="ph1">`_xVal`</ph> precedes and is not equal to <ph id="ph2">`_yVal`</ph> in the sort order.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Note that both <bpt id="p1">[</bpt>key_compare<ept id="p1">](#multiset__key_compare)</ept> and <bpt id="p2">[</bpt>value_compare<ept id="p2">](#multiset__value_compare)</ept> are synonyms for the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Both types are provided for the classes set and multiset, where they are identical, for compatibility with the classes map and multimap, where they are distinct.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>multiset::value_compare</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The type that provides a function object that can compare two sort keys to determine their relative order in the multiset.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Note that both <bpt id="p1">[</bpt>key_compare<ept id="p1">](#multiset__key_compare)</ept> and <bpt id="p2">**</bpt>value_compare<ept id="p2">**</ept> are synonyms for the template parameter <ph id="ph1">`Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Both types are provided for the classes set and multiset, where they are identical, for compatibility with the classes map and multimap, where they are distinct.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Compare`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>multiset Class<ept id="p1">](../standard-library/multiset-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>value_comp<ept id="p1">](#multiset__value_comp)</ept> for an example of how to declare and use <ph id="ph1">`value_compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>multiset::value_type</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A type that describes an object stored as an element as a multiset in its capacity as a value.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Note that both <bpt id="p1">[</bpt>key_type<ept id="p1">](#multiset__key_type)</ept> and <ph id="ph1">`value_type`</ph> are synonyms for the template parameter <bpt id="p2">**</bpt>Key<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Both types are provided for the classes set and multiset, where they are identical, for compatibility with the classes map and multimap, where they are distinct.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Key`</ph>, see the Remarks section of the topic.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>set&gt; Members</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>