<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32b006b1381f06d038254141ed6bfb0d85864789</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\allocator-traits-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a86af2dd528809f3eaa31ba61e05332639b776e5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c079e97ecd261ae202bb1ea012900cc508acc326</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>allocator_traits Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>allocator_traits Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that supplements an <bpt id="p1">*</bpt>allocator type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An allocator type is any type that describes an allocator object that is used for managing allocated storage.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Specifically, for any allocator type <ph id="ph1">`Alloc`</ph>, you can use <ph id="ph2">`allocator_traits&lt;Alloc&gt;`</ph> to determine all the information that is needed by an allocator-enabled container.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see the default <bpt id="p1">[</bpt>allocator Class<ept id="p1">](../standard-library/allocator-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This type is a synonym for the template parameter <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::const_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`pointer_traits&lt;pointer&gt;::rebind&lt;const value_type&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::const_void_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`pointer_traits&lt;pointer&gt;::rebind&lt;const void&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::difference_type`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`pointer_traits&lt;pointer&gt;::difference_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`value_type *`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::propagate_on_container_copy_assignment`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`false_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::propagate_on_container_move_assignment`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`false_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the type holds true, an allocator-enabled container copies its stored allocator on a move assignment.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::propagate_on_container_swap`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`false_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the type holds true, an allocator-enabled container swaps its stored allocator on a swap.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::size_type`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`make_unsigned&lt;difference_type&gt;::type`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This type is a synonym for <ph id="ph1">`Alloc::value_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This type is <ph id="ph1">`Alloc::void_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id="ph2">`pointer_traits&lt;pointer&gt;::rebind&lt;void&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following static methods call the corresponding method on a given allocator parameter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>allocator_traits::allocate Method</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Static method that allocates memory by using the given allocator parameter.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>allocator_traits::construct Method</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to construct an object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>allocator_traits::deallocate Method</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to deallocate a specified number of objects.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>allocator_traits::destroy Method</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>allocator_traits::max_size Method</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>allocator_traits::select_on_container_copy_construction Method</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Static method that calls <ph id="ph1">`select_on_container_copy_construction`</ph> on the specified allocator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>memory&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>allocator_traits::allocate Method</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Static method that allocates memory by using the given allocator parameter.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The number of elements to allocate.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const_pointer`</ph> that might assist the allocator object in satisfying the request for storage by locating the address of an allocated object prior to the request.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A null pointer is treated as no hint.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Each method returns a pointer to the allocated object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first static method returns <ph id="ph1">`al.allocate(count)`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second method returns <ph id="ph1">`al.allocate(count, hint)`</ph>, if that expression is well formed; otherwise it returns <ph id="ph2">`al.allocate(count)`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>allocator_traits::construct Method</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to construct an object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A pointer to the location where the object is to be constructed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A list of arguments that is passed to the object constructor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The static member function calls <ph id="ph1">`al.construct(ptr, args...)`</ph>, if that expression is well formed; otherwise it evaluates <ph id="ph2">`::new (static_cast&lt;void *&gt;(ptr)) Uty(std::forward&lt;Types&gt;(args)...)`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>allocator_traits::deallocate Method</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to deallocate a specified number of objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A pointer to the starting location of the objects to be deallocated.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The number of objects to deallocate.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This method calls <ph id="ph1">`al.deallocate(ptr, count)`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This method throws nothing.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>allocator_traits::destroy Method</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A pointer to the location of the object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method calls <ph id="ph1">`al.destroy(ptr)`</ph>, if that expression is well formed; otherwise it evaluates <ph id="ph2">`ptr-&gt;~Uty()`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>allocator_traits::max_size Method</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`al.max_size()`</ph>, if that expression is well formed; otherwise it returns <ph id="ph2">`numeric_limits&lt;size_type&gt;::max()`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>allocator_traits::select_on_container_copy_construction Method</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Static method that calls <ph id="ph1">`select_on_container_copy_construction`</ph> on the specified allocator.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An allocator object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`al.select_on_container_copy_construction()`</ph>, if that type is well formed; otherwise it returns <ph id="ph2">`al`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This method is used to specify an allocator when the associated container is copy-constructed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>memory&gt;</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>pointer_traits Struct</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>scoped_allocator_adaptor Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>