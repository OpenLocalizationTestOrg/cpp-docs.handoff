<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b5a8d7504f31e230e2bec7a6df5b6a7ef1e46cd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\building-c-cpp-side-by-side-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33383722ac464a654784b7f675be264b9f5d2c7d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f39632c022e925c8e7ccf15b5dc769e3a98892d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building C-C++ Side-by-side Assemblies | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building C/C++ Side-by-side Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>side-by-side assembly<ept id="p1">](http://msdn.microsoft.com/en-us/501bbffe-5927-4656-8eee-1f6ecfafef5e)</ept> is a collection of resources—a group of DLLs, windows classes, COM servers, type libraries, or interfaces—available for an application to use at runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The primary advantage of repackaging DLLs in assemblies is that multiple versions of assemblies can be used by applications at the same time and it is possible to service currently installed assemblies in case of an update release.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A Visual C++ application may use one or several DLLs in different parts of the application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At runtime, the DLLs are loaded into the main process and the required code is executed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The application relies on the operating system to locate the requested DLLs, understand what other dependent DLLs have to be loaded and then load them together with the requested DLL.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On Windows operating systems versions earlier than Windows XP, Windows Server 2003, and Windows Vista, the operating system loader searches for dependent DLLs in either the application's local folder or another folder specified on the system path.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On Windows XP, Windows Server 2003, and Windows Vista, the operating system loader can also search for dependent DLLs using a <bpt id="p1">[</bpt>manifest<ept id="p1">](http://msdn.microsoft.com/library/aa375365)</ept> file and search for side-by-side assemblies that contain these DLLs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, when a DLL is built with Visual Studio, it has an <bpt id="p1">[</bpt>application manifest<ept id="p1">](http://msdn.microsoft.com/library/aa374191)</ept> embedded as an RT_MANIFEST resource with ID equal to 2.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Just as for an executable, this manifest describes dependencies of this DLL on other assemblies.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This assumes that the DLL is not part of a side-by-side assembly and applications that depend on this DLL are not going to use an application manifest to load it, but instead rely on the operating system loader to find this DLL on the system path.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is important for a DLL that uses an application manifest to have the manifest embedded as a resource with ID equal to 2.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the DLL is dynamically loaded at runtime (for example, using the <bpt id="p1">[</bpt>LoadLibrary<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684175)</ept> function), the operating system loader loads dependent assemblies specified in the DLL's manifest.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An external application manifest for DLLs is not checked during a <ph id="ph1">`LoadLibrary`</ph> call.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the manifest is not embedded, the loader may attempt to load incorrect versions of assemblies or fail to find to find dependent assemblies.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>One or several related DLLs can be repackaged into a side-by-side assembly with a corresponding <bpt id="p1">[</bpt>assembly manifest<ept id="p1">](http://msdn.microsoft.com/library/aa374219)</ept>, which describes which files form the assembly as well as the dependence of the assembly on other side-by-side assemblies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If an assembly contains one DLL, it is recommended to embed the assembly manifest into this DLL as a resource with ID equal to 1, and give the private assembly the same name as the DLL.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if the name of the DLL is mylibrary.dll, the value of the name attribute used in the <ph id="ph1">\&lt;</ph>assemblyIdentity&gt; element of the manifest may also be mylibrary.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In some cases, when a library has an extension other than .dll (for example, an MFC ActiveX Controls project creates an .ocx library) an external assembly manifest can be created.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this case, the name of the assembly and its manifest must be different than the name of the DLL (for example, MyAssembly, MyAssembly.manifest, and mylibrary.ocx).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However it is still recommended to rename such libraries to have the extension.dll and embed the manifest as a resource to reduce the future maintenance cost of this assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about how the operating system searches for private assemblies, see <bpt id="p1">[</bpt>Assembly Searching Sequence<ept id="p1">](http://msdn.microsoft.com/library/aa374224)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This change may allow deployment of corresponding DLLs as a <bpt id="p1">[</bpt>private assembly<ept id="p1">](http://msdn.microsoft.com/en-us/4c6dac5f-fdd3-4125-b54a-74941ee6b3b4)</ept> in an application local folder or as a <bpt id="p2">[</bpt>shared assembly<ept id="p2">](http://msdn.microsoft.com/en-us/d408b0a9-8dc5-4cd0-93b3-429de7d12b17)</ept> in the WinSxS assembly cache.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Several steps have to be followed in order to achieve correct runtime behavior of this new assembly; they are described in <bpt id="p1">[</bpt>Guidelines for Creating Side-by-side Assemblies<ept id="p1">](http://msdn.microsoft.com/en-us/e10fe92c-bce8-420e-a84c-2748e929eb1b)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>After an assembly is correctly authored it can deployed as either a shared or private assembly together with an application that depends on it.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When installing side-by-side assemblies as a shared assembly, you may either follow the guidelines outlined in <bpt id="p1">[</bpt>Installing Win32 Assemblies for Side-by-Side Sharing on Windows XP<ept id="p1">](http://msdn.microsoft.com/library/aa369532)</ept> or use <bpt id="p2">[</bpt>merge modules<ept id="p2">](http://msdn.microsoft.com/library/aa369820)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When installing side-by-side assemblies as a private assembly, you may just copy the corresponding DLL, resources and assembly manifest as part of the installation process to the application local folder on the target computer, ensuring that this assembly can be found by the loader at runtime (see <bpt id="p1">[</bpt>Assembly Searching Sequence<ept id="p1">](http://msdn.microsoft.com/library/aa374224)</ept>).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Another way is to use <bpt id="p1">[</bpt>Windows Installer<ept id="p1">](http://msdn.microsoft.com/library/cc185688)</ept> and follow the guidelines outlined in <bpt id="p2">[</bpt>Installing Win32 Assemblies for the Private Use of an Application on Windows XP<ept id="p2">](http://msdn.microsoft.com/library/aa369534)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Deployment Examples</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Building C/C++ Isolated Applications</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Building C/C++ Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>