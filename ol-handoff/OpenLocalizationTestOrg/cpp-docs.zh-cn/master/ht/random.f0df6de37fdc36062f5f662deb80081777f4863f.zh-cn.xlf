<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebb232dadf4093a0de686e4abb981d6d9699bdc9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\random.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">beb9db1dd21317471fd186f52417e233819ba6a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18cb5dd10a12956dbb9846b5d068ee1159c58e8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>random<ph id="ph1">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>random</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines facilities for random number generation, allowing creation of uniformly distributed random numbers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>random number generator<ept id="p1">*</ept> is an object that produces a sequence of pseudo-random values.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A generator that produces values that are uniformly distributed in a specified range is a <bpt id="p1">*</bpt>Uniform Random Number Generator<ept id="p1">*</ept> (URNG).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A template class designed to function as a URNG is referred to as an <bpt id="p1">*</bpt>engine<ept id="p1">*</ept> if that class has certain common traits, which are discussed later in this article.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A URNG can be—and usually is—combined with a <bpt id="p1">*</bpt>distribution<ept id="p1">*</ept> by passing the URNG as an argument to the distribution's <ph id="ph1">`operator()`</ph> to produce values that are distributed in a manner that is defined by the distribution.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These links jump to the major sections of this article:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Categorized Listing</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Engines and Distributions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Quick Tips</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Here are some tips to keep in mind when using <ph id="ph1">`&lt;random&gt;`</ph>:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For most purposes, URNGs produce raw bits that must be shaped by distributions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(A notable exception to this is <bpt id="p1">[</bpt>std::shuffle()<ept id="p1">](../standard-library/algorithm-functions.md#std__shuffle)</ept> because it uses a URNG directly.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A single instantiation of a URNG or distribution cannot safely be called concurrently because running a URNG or distribution is a modifying operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Predefined typedefs<ept id="p1">](#typedefs)</ept> of several engines are provided; this is the preferred way to create a URNG if an engine is being used.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The most useful pairing for most applications is the <ph id="ph1">`mt19937`</ph> engine with <ph id="ph2">`uniform_int_distribution`</ph>, as shown in the <bpt id="p1">[</bpt>code example<ept id="p1">](#code)</ept> later in this article.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are many options to choose from in the <ph id="ph1">`&lt;random&gt;`</ph> header, and any of them is preferable to the outdated C Runtime function <ph id="ph2">`rand()`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information about what's wrong with <ph id="ph1">`rand()`</ph> and how <ph id="ph2">`&lt;random&gt;`</ph> addresses these shortcomings, see <bpt id="p1">[</bpt>this video<ept id="p1">](http://go.microsoft.com/fwlink/LinkId=397615)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code example shows how to generate some random numbers in this case five of them using a generator created with non-deterministic seed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>While these are high quality random numbers and different every time this program is run, they are not necessarily in a useful range.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To control the range, use a uniform distribution as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The next code example shows a more realistic set of use cases with uniformly distributed random number generators shuffling the contents of a vector and an array.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example Output and Code Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This code demonstrates two different randomizations—randomize a vector of integers and shuffle an array of indexed data—with a test template function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first call to the test function uses the crypto-secure, non-deterministic, not-seedable, non-repeatable URNG <ph id="ph1">`random_device`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The second test run uses <ph id="ph1">`mersenne_twister_engine`</ph> as URNG, with a deterministic 32-bit constant seed, which means the results are repeatable.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The third test run seeds <ph id="ph1">`mersenne_twister_engine`</ph> with a 32-bit non-deterministic result from <ph id="ph2">`random_device`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The fourth test run expands on this by using a <bpt id="p1">[</bpt>seed sequence<ept id="p1">](../standard-library/seed-seq-class.md)</ept> filled with <ph id="ph1">`random_device`</ph> results, which effectively gives more than 32-bit non-deterministic randomness (but still not crypto-secure).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, read on.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Categorized Listing</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Uniform Random Number Generators</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>URNGs are often described in terms of these properties:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Period length<ept id="p1">**</ept>: How many iterations it takes to repeat the sequence of numbers generated.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The longer the better.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Performance<ept id="p1">**</ept>: How quickly numbers can be generated and how much memory it takes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The smaller the better.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Quality<ept id="p1">**</ept>: How close to true random numbers the generated sequence is.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is often called "<bpt id="p1">*</bpt>randomness<ept id="p1">*</ept>".</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following sections list the uniform random number generators (URNGs) provided in the <ph id="ph1">`&lt;random&gt;`</ph> header.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Non-Deterministic Generator</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>random_device Class</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Generates a non-deterministic, cryptographically secure random sequence by using an external device.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Usually used to seed an engine.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Low performance, very high quality.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Remarks<ept id="p1">](#comments)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Engine Typedefs with Predefined Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For instantiating engines and engine adaptors.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Engines and Distributions<ept id="p1">](#engdist)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The default engine.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Knuth engine.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>1988 minimal standard engine (Lewis, Goodman, and Miller, 1969).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Updated minimal standard engine <ph id="ph1">`minstd_rand0`</ph> (Park, Miller, and Stockmeyer, 1993).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>32-bit Mersenne twister engine (Matsumoto and Nishimura, 1998).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>64-bit Mersenne twister engine (Matsumoto and Nishimura, 2000).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>24-bit RANLUX engine (Martin Lüscher and Fred James, 1994).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Used as a base for <ph id="ph1">`ranlux24`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>48-bit RANLUX engine (Martin Lüscher and Fred James, 1994).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Used as a base for <ph id="ph1">`ranlux48`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Engine Templates</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Engine templates are used as standalone URNGs or as base engines passed to <bpt id="p1">[</bpt>engine adaptors<ept id="p1">](#engadapt)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Usually these are instantiated with a <bpt id="p1">[</bpt>predefined engine typedef<ept id="p1">](#typedefs)</ept> and passed to a <bpt id="p2">[</bpt>distribution<ept id="p2">](#distributions)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Engines and Distributions<ept id="p1">](#engdist)</ept> section.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>linear_congruential_engine Class</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Generates a random sequence by using the linear congruential algorithm.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Most simplistic and lowest quality.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>mersenne_twister_engine Class</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Generates a random sequence by using the Mersenne twister algorithm.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Most complex, and is highest quality except for the random_device class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Very fast performance.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>subtract_with_carry_engine Class</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Generates a random sequence by using the subtract-with-carry algorithm.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>An improvement on <ph id="ph1">`linear_congruential_engine`</ph>, but much lower quality and performance than <ph id="ph2">`mersenne_twister_engine`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Engine Adaptor Templates</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Engine adaptors are templates that adapt other (base) engines.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Usually these are instantiated with a <bpt id="p1">[</bpt>predefined engine typedef<ept id="p1">](#typedefs)</ept> and passed to a <bpt id="p2">[</bpt>distribution<ept id="p2">](#distributions)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Engines and Distributions<ept id="p1">](#engdist)</ept> section.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>discard_block_engine Class</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Generates a random sequence by discarding values returned by its base engine.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>independent_bits_engine Class</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Generates a random sequence with a specified number of bits by repacking bits from the values returned by its base engine.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>shuffle_order_engine Class</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Generates a random sequence by reordering the values returned from its base engine.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Engine Templates<ept id="p1">](#eng)</ept>]</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Random Number Distributions</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following sections list the distributions provided in the <ph id="ph1">`&lt;random&gt;`</ph> header.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Distributions are a post-processing mechanism, usually using URNG output as input and distributing the output by a defined statistical probability density function.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Engines and Distributions<ept id="p1">](#engdist)</ept> section.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Uniform Distributions</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>uniform_int_distribution Class</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Produces a uniform integer value distribution across a range in the closed interval <ph id="ph1">\[</ph>a, b] (inclusive-inclusive).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>uniform_real_distribution Class</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Produces a uniform real (floating-point) value distribution across a range in the half-open interval [a, b) (inclusive-exclusive).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>generate_canonical</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Produces an even distribution of real (floating point) values of a given precision across [0, 1) (inclusive-exclusive).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept>]</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Bernoulli Distributions</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>bernoulli_distribution Class</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Produces a Bernoulli distribution of <ph id="ph1">`bool`</ph> values.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>binomial_distribution Class</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Produces a binomial distribution of integer values.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>geometric_distribution Class</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Produces a geometric distribution of integer values.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>negative_binomial_distribution Class</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Produces a negative binomial distribution of integer values.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept>]</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Normal Distributions</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>cauchy_distribution Class</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Produces a Cauchy distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>chi_squared_distribution Class</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Produces a chi-squared distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>fisher_f_distribution Class</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Produces an F-distribution (also known as Snedecor's F distribution or the Fisher–Snedecor distribution) of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>lognormal_distribution Class</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Produces a log-normal distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>normal_distribution Class</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Produces a normal (Gaussian) distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>student_t_distribution Class</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Produces a Student's <bpt id="p1">*</bpt>t<ept id="p1">*</ept>-distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept>]</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Poisson Distributions</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>exponential_distribution Class</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Produces an exponential distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>extreme_value_distribution Class</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Produces an extreme value distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>gamma_distribution Class</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Produces a gamma distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>poisson_distribution Class</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Produces a Poisson distribution of integer values.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>weibull_distribution Class</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Produces a Weibull distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept>]</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Sampling Distributions</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>discrete_distribution Class</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Produces a discrete integer distribution.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>piecewise_constant_distribution Class</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Produces a piecewise constant distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>piecewise_linear_distribution Class</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Produces a piecewise linear distribution of real (floating point) values.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept>]</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This section lists the general utility functions provided in the <ph id="ph1">`&lt;random&gt;`</ph> header.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>seed_seq Class</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Generates a non-biased scrambled seed sequence.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Used to avoid replication of random variate streams.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Useful when many URNGs are instantiated from engines.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This section lists the operators provided in the <ph id="ph1">`&lt;random&gt;`</ph> header.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Tests whether the URNG on the left side of the operator is equal to the engine on the right side.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Tests whether the URNG on the left side of the operator is not equal to the engine on the right side.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Writes state information to a stream.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Extracts state information from a stream.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Engines and Distributions</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Refer to the following sections for information about each of these template class categories defined in <ph id="ph1">`&lt;random&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Both of these template class categories take a type as an argument and use shared template parameter names to describe the properties of the type that are permitted as an actual argument type, as follows:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>indicates a <ph id="ph1">`short`</ph>, <ph id="ph2">`int`</ph>, <ph id="ph3">`long`</ph>, <ph id="ph4">`long long`</ph>, <ph id="ph5">`unsigned short`</ph>, <ph id="ph6">`unsigned int`</ph>, <ph id="ph7">`unsigned long`</ph>, or <ph id="ph8">`unsigned long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>indicates <ph id="ph1">`unsigned short`</ph>, <ph id="ph2">`unsigned int`</ph>, <ph id="ph3">`unsigned long`</ph>, or <ph id="ph4">`unsigned long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>indicates a <ph id="ph1">`float`</ph>, <ph id="ph2">`double`</ph>, or <ph id="ph3">`long double`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Engines</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Engine Templates<ept id="p1">](#eng)</ept> and <bpt id="p2">[</bpt>Engine Adaptor Templates<ept id="p2">](#engadapt)</ept> are templates whose parameters customize the generator created.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>engine<ept id="p1">*</ept> is a class or template class whose instances (generators) act as a source of random numbers uniformly distributed between a minimum and maximum value.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>engine adaptor<ept id="p1">*</ept> delivers a sequence of values that have different randomness properties by taking values produced by some other random number engine and applying an algorithm of some kind to those values.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Every engine and engine adaptor has the following members:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>is the type that is returned by the generator's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`numeric-type`</ph> is passed as a template parameter on instantiation.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>returns values that are uniformly distributed between <ph id="ph1">`min()`</ph> and <ph id="ph2">`max()`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>returns the minimum value that is returned by the generator's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Engine adaptors use the base engine's <ph id="ph1">`min()`</ph> result.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>returns the maximum value that is returned by the generator's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`result_type`</ph> is an integral (integer-valued) type, <ph id="ph2">`max()`</ph> is the maximum value that can actually be returned (inclusive); when <ph id="ph3">`result_type`</ph> is a floating-point (real-valued) type, <ph id="ph4">`max()`</ph> is the smallest value greater than all values that can be returned (non-inclusive).</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Engine adaptors use the base engine's <ph id="ph1">`max()`</ph> result.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>seeds the generator with seed value <ph id="ph1">`s`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For engines, the signature is <ph id="ph1">`void seed(result_type s = default_seed)`</ph> for default parameter support (engine adaptors define a separate <ph id="ph2">`void seed()`</ph>, see next subsection).</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>seeds the generator by using a <bpt id="p1">[</bpt>seed_seq<ept id="p1">](../standard-library/seed-seq-class.md)</ept><ph id="ph1">`Seq`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>An explicit constructor with argument <ph id="ph1">`result_type x`</ph> that creates a generator seeded as if by calling <ph id="ph2">`seed(x)`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>An explicit constructor with argument <ph id="ph1">`seed_seq&amp; seq`</ph> that creates a generator seeded as if by calling <ph id="ph2">`seed(seq)`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>effectively calls <ph id="ph1">`operator()``count`</ph> times and discards each value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Engine adaptors<ept id="p1">**</ept> additionally support these members (<ph id="ph1">`Engine`</ph> is the first template parameter of an engine adaptor, designating the base engine's type):</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A default constructor to initialize the generator as if from the base engine's default constructor.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An explicit constructor with argument <ph id="ph1">`const Engine&amp; eng`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This is to support copy construction using the base engine.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>An explicit constructor with argument <ph id="ph1">`Engine&amp;&amp; eng`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This is to support move construction using the base engine.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>that initializes the generator with the base engine's default seed value.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>property function that returns the base engine that was used to construct the generator.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Every engine maintains a <bpt id="p1">*</bpt>state<ept id="p1">*</ept> that determines the sequence of values that will be generated by subsequent calls to <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The states of two generators instantiated from engines of the same type can be compared by using <ph id="ph1">`operator==`</ph> and <ph id="ph2">`operator!=`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the two states compare as equal, they will generate the same sequence of values.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The state of an object can be saved to a stream as a sequence of 32-bit unsigned values by using the <ph id="ph1">`operator&lt;&lt;`</ph> of the generator.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The state is not changed by saving it.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A saved state can be read into generator instantiated from an engine of the same type by using <ph id="ph1">`operator&gt;&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Distributions</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Random Number Distributions<ept id="p1">](#distributions)</ept> is a class or template class whose instances transform a stream of uniformly distributed random numbers obtained from an engine into a stream of random numbers that have a particular distribution.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Every distribution has the following members:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>is the type that is returned by the distribution's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`numeric-type`</ph> is passed as a template parameter on instantiation.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>returns values that are distributed according to the distribution's definition, by using <ph id="ph1">`gen`</ph> as a source of uniformly distributed random values and the stored <bpt id="p1">*</bpt>parameters of the distribution<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>returns values distributed in accordance with the distribution's definition, using <ph id="ph1">`gen`</ph> as a source of uniformly distributed random values and the parameters structure <ph id="ph2">`p`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>is the package of parameters optionally passed to <ph id="ph1">`operator()`</ph> and is used in place of the stored parameters to generate its return value.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const param&amp;`</ph> constructor initializes the stored parameters from its argument.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>gets the stored parameters.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>sets the stored parameters from its argument.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>returns the minimum value that is returned by the distribution's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>returns the maximum value that is returned by the distribution's <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`result_type`</ph> is an integral (integer-valued) type, <ph id="ph2">`max()`</ph> is the maximum value that can actually be returned (inclusive); when <ph id="ph3">`result_type`</ph> is a floating-point (real-valued) type, <ph id="ph4">`max()`</ph> is the smallest value greater than all values that can be returned (non-inclusive).</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>discards any cached values, so that the result of the next call to <ph id="ph1">`operator()`</ph> does not depend on any values obtained from the engine before the call.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A parameter structure is an object that stores all of the parameters needed for a distribution.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>It contains:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>, which is the type of its distribution.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>One or more constructors that take the same parameter lists as the distribution constructors take.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The same parameter-access functions as the distribution.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Equality and inequality comparison operators.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For more information, see the reference subtopics below this one, linked previously in this article.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>There are two highly useful URNGs in Visual Studio—<ph id="ph1">`mt19937`</ph> and <ph id="ph2">`random_device`</ph>—as shown in this comparison table:</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>URNG</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Fast</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Crypto-secure</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Seedable</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Deterministic</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>* When provided with a known seed.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Although the ISO C++ Standard does not require <ph id="ph1">`random_device`</ph> to be cryptographically secure, in Visual Studio it is implemented to be cryptographically secure.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>(The term "cryptographically secure" does not imply guarantees, but refers to a minimum level of entropy—and therefore, the level of predictability—a given randomization algorithm provides.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For more information, see the Wikipedia article <bpt id="p1">[</bpt>Cryptographically secure pseudorandom number generator<ept id="p1">](http://go.microsoft.com/fwlink/LinkId=398017)</ept>.) Because the ISO C++ Standard does not require this, other platforms may implement <ph id="ph1">`random_device`</ph> as a simple pseudo-random number generator (not cryptographically secure) and may only be suitable as a seed source for another generator.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Check the documentation for those platforms when using <ph id="ph1">`random_device`</ph> in cross-platform code.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>By definition, <ph id="ph1">`random_device`</ph> results are not reproducible, and a side-effect is that it may run significantly slower than other URNGs.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Most applications that are not required to be cryptographically secure use <ph id="ph1">`mt19937`</ph> or a similar engine, although you may want to seed it with a call to <ph id="ph2">`random_device`</ph>, as shown in the <bpt id="p1">[</bpt>code example<ept id="p1">](#code)</ept>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>