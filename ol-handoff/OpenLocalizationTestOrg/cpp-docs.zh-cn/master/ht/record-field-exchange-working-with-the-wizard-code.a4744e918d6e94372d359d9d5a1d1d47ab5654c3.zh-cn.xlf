<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cc015c58d426c7e334f9e4f59e02a4bf9afbb20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\record-field-exchange-working-with-the-wizard-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c412e72a0347b5998a0e512698e9c274ebc6d920</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c43aabfcdf2ca009b0056e5a13e9cb8a6f3adfd7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Record Field Exchange: Working with the Wizard Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Record Field Exchange: Working with the Wizard Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains the code that the MFC Application Wizard and <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> (as described in <bpt id="p2">[</bpt>Adding an MFC ODBC Consumer<ept id="p2">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept>) write to support RFX and how you might want to alter that code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic applies to classes derived from <ph id="ph1">`CRecordset`</ph> in which bulk row fetching has not been implemented.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you are using bulk row fetching, bulk record field exchange (Bulk RFX) is implemented.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Bulk RFX is similar to RFX.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To understand the differences, see <bpt id="p1">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id="p1">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you create a recordset class with the MFC Application Wizard or <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept>, the wizard writes the following RFX-related elements for you, based on the data source, table, and column choices you make in the wizard:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declarations of the recordset field data members in the recordset class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An override of</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initialization of recordset field data members in the recordset class constructor</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Field Data Member Declarations</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The wizards write a recordset class declaration in an .h file that resembles the following for class <ph id="ph1">`CSections`</ph>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you add parameter data members or new field data members that you bind yourself, add them after the wizard-generated ones.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Also, notice that the wizard overrides the <ph id="ph1">`DoFieldExchange`</ph> member function of class <ph id="ph2">`CRecordset`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>DoFieldExchange Override</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DoFieldExchange<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> is the heart of RFX.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`DoFieldExchange`</ph> any time it needs to move data either from data source to recordset or from recordset to data source.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>also supports obtaining information about field data members through the <bpt id="p1">[</bpt>IsFieldDirty<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__isfielddirty)</ept> and <bpt id="p2">[</bpt>IsFieldNull<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`DoFieldExchange`</ph> override is for the <ph id="ph2">`CSections`</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The wizard writes the function in the .cpp file for your recordset class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Notice the following key features of the function:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This section of the function is called the field map.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">`CFieldExchange::SetFieldType`</ph>, through the <ph id="ph2">`pFX`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This call specifies that all RFX function calls up to the end of <ph id="ph1">`DoFieldExchange`</ph> or the next call to <ph id="ph2">`SetFieldType`</ph> are output columns.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CFieldExchange::SetFieldType<ept id="p1">](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Several calls to the <ph id="ph1">`RFX_Text`</ph> global function â€” one per field data member (all of which are <ph id="ph2">`CString`</ph> variables in the example).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These calls specify the relationship between a column name on the data source and a field data member.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The RFX functions do the actual data transfer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The class library supplies RFX functions for all the common data types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about RFX functions, see <bpt id="p1">[</bpt>Record Field Exchange: Using the RFX Functions<ept id="p1">](../../data/odbc/record-field-exchange-using-the-rfx-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The order of the columns in your result set must match the order of the RFX function calls in <ph id="ph1">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pFX`</ph> pointer to a <bpt id="p1">[</bpt>CFieldExchange<ept id="p1">](../../mfc/reference/cfieldexchange-class.md)</ept> object that the framework passes when it calls <ph id="ph2">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFieldExchange`</ph> object specifies the operation that <ph id="ph2">`DoFieldExchange`</ph> is to perform, the direction of transfer, and other context information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Recordset Constructor</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The recordset constructor that the wizards write contains two things related to RFX:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An initialization for each field data member</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An initialization for the <bpt id="p1">[</bpt>m_nFields<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__m_nfields)</ept> data member, which contains the number of field data members</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The constructor for the <ph id="ph1">`CSections`</ph> recordset example looks like this:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you add any field data members manually, as you might if you bind new columns dynamically, you must increment <ph id="ph1">`m_nFields`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Do so by appending another line of code, such as:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is the code for adding three new fields.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you add any parameter data members, you must initialize the <bpt id="p1">[</bpt>m_nParams<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__m_nparams)</ept> data member, which contains the number of parameter data members.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Put the <ph id="ph1">`m_nParams`</ph> initialization outside the brackets.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Record Field Exchange (RFX)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>