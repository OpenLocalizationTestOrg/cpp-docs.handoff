<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7d41beff1b2bfd642319fb3b656e40cefdcd9e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-provide-work-functions-to-the-call-and-transformer-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17f22f4911e1c9c37d46d73f67c6780b70374b18</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0729c689f0dfb4936757d62d8f85ffeb4a8a2d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Provide Work Functions to the call and transformer Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Provide Work Functions to the call and transformer Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic illustrates several ways to provide work functions to the <bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> and <bpt id="p2">[</bpt>concurrency::transformer<ept id="p2">](../../parallel/concrt/reference/transformer-class.md)</ept> classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first example shows how to pass a lambda expression to a <ph id="ph1">`call`</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The second example shows how to pass a function object to a <ph id="ph1">`call`</ph> object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The third example shows how to bind a class method to a <ph id="ph1">`call`</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For illustration, every example in this topic uses the <ph id="ph1">`call`</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an example that uses the <ph id="ph1">`transformer`</ph> class, see <bpt id="p1">[</bpt>How to: Use transformer in a Data Pipeline<ept id="p1">](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows a common way to use the <ph id="ph1">`call`</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This example passes a lambda function to the <ph id="ph1">`call`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>concrt-call-lambda#1</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example resembles the previous one, except that it uses the <ph id="ph1">`call`</ph> class together with a function object (functor).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>concrt-call-functor#1</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example resembles the previous one, except that it uses the <bpt id="p1">[</bpt>std::bind1st<ept id="p1">](../../standard-library/functional-functions.md#bind1st_function)</ept> and <bpt id="p2">[</bpt>std::mem_fun<ept id="p2">](../../standard-library/functional-functions.md#mem_fun_function)</ept> functions to bind a <ph id="ph1">`call`</ph> object to a class method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use this technique if you have to bind a <ph id="ph1">`call`</ph> or <ph id="ph2">`transformer`</ph> object to a specific class method instead of the function call operator, <ph id="ph3">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>concrt-call-method#1</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also assign the result of the <ph id="ph1">`bind1st`</ph> function to a <bpt id="p1">[</bpt>std::function<ept id="p1">](../../standard-library/function-class.md)</ept> object or use the <ph id="ph2">`auto`</ph> keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>concrt-call-method#2</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`call.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc call.cpp</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How to: Use transformer in a Data Pipeline</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>call Class</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>transformer Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>