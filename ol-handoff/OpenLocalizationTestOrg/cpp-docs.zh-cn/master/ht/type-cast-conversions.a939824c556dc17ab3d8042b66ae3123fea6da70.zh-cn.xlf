<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f73bac3584e7154a50fabfcc97444cbe37051d50</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\type-cast-conversions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae3cd529591859eb1e4baa7d504c08beceedf0d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d730a8c408f7930d855508a919c70a083c148833</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type-Cast Conversions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type-Cast Conversions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use type casts to explicitly convert types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>cast-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>unary expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(<ept id="p1">**</ept>  <bpt id="p2">*</bpt>type-name<ept id="p2">*</ept>  <bpt id="p3">**</bpt>)<ept id="p3">**</ept>  <bpt id="p4">*</bpt>cast-expression<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-name<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>specifier-qualifier-list abstract-declarator<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-name<ept id="p1">*</ept> is a type and <bpt id="p2">*</bpt>cast-expression<ept id="p2">*</ept> is a value to be converted to that type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An expression with a type cast is not an l-value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>cast-expression<ept id="p1">*</ept> is converted as though it had been assigned to a variable of type <bpt id="p2">*</bpt>type-name<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The conversion rules for assignments (outlined in <bpt id="p1">[</bpt>Assignment Conversions<ept id="p1">](../c-language/assignment-conversions.md)</ept>) apply to type casts as well.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following table shows the types that can be cast to any given type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Legal Type Casts</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Destination Types</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Potential Sources</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Integral types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Any integer type or floating-point type, or pointer to an object</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Floating-point</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any arithmetic type</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A pointer to an object, or (<bpt id="p1">**</bpt>void <ph id="ph1">\*</ph><ept id="p1">**</ept>)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any integer type, (<bpt id="p1">**</bpt>void <ph id="ph1">\*</ph><ept id="p1">**</ept>), a pointer to an object, or a function pointer</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Function pointer</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Any integral type, a pointer to an object, or a function pointer</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A structure, union, or array</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Void type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Any type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any identifier can be cast to <ph id="ph1">`void`</ph> type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, if the type specified in a type-cast expression is not <ph id="ph1">`void`</ph>, then the identifier being cast to that type cannot be a <ph id="ph2">`void`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any expression can be cast to <ph id="ph1">`void`</ph>, but an expression of type <ph id="ph2">`void`</ph> cannot be cast to any other type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, a function with <ph id="ph1">`void`</ph> return type cannot have its return cast to another type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note that a <bpt id="p1">**</bpt>void <ph id="ph1">\*</ph><ept id="p1">**</ept> expression has a type pointer to <ph id="ph2">`void`</ph>, not type <ph id="ph3">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If an object is cast to <ph id="ph1">`void`</ph> type, the resulting expression cannot be assigned to any item.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Similarly, a type-cast object is not an acceptable l-value, so no assignment can be made to a type-cast object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A type cast can be an l-value expression as long as the size of the identifier does not change.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For information on l-value expressions, see <bpt id="p1">[</bpt>L-Value and R-Value Expressions<ept id="p1">](../c-language/l-value-and-r-value-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can convert an expression to type <ph id="ph1">`void`</ph> with a cast, but the resulting expression can be used only where a value is not required.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An object pointer converted to <bpt id="p1">**</bpt>void <ph id="ph1">\*</ph><ept id="p1">**</ept> and back to the original type will return to its original value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Type Conversions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>