<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3772b1a90b699d2deb6a573c54b802122109fbf1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\string-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f00ed1be3b678a05188263a2d9e7a4a45492812f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e41d928b366b8a043b47c5f9fac41bcec782395</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>string<ph id="ph2">&amp;gt;</ph> operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>string<ph id="ph2">&amp;gt;</ph> operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator!=<ept id="p1">](#operator_neq)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;gt;</ph><ept id="p1">](#operator_gt_)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph><ept id="p1">](#operator_gt__gt_)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">=</ph><ept id="p1">](#operator_gt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;lt;</ph><ept id="p1">](#operator_lt_)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph><ept id="p1">](#operator_lt__lt_)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">=</ph><ept id="p1">](#operator_lt__eq)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator+<ept id="p1">](#operator_add)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator==<ept id="p1">](#operator_eq_eq)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_add"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator+</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Concatenates two string objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be concatenated.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be concatenated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string that is the concatenation of the input strings.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The functions each overload <ph id="ph1">`operator+`</ph> to concatenate two objects of template class <bpt id="p1">[</bpt>basic_string Class<ept id="p1">](../standard-library/basic-string-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All effectively return <ph id="ph1">`basic_string`</ph><ph id="ph2">\&lt;</ph> <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Traits<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Allocator<ept id="p3">**</ept>&gt;(_ <bpt id="p4">*</bpt>Left<ept id="p4">*</ept>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>append<ept id="p1">](../standard-library/basic-string-class.md#basic_string__append)</ept>(<ph id="ph1">\_</ph> <bpt id="p2">*</bpt>Right<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_neq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator!=</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is not equal to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is not lexicographically equal to the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The comparison between string objects is based on a pairwise lexicographical comparison of their characters.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Two strings are equal if they have the same number of characters and their respective character values are the same.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Otherwise, they are unequal.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_eq_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator==</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is equal to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is lexicographically equal to the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The comparison between string objects is based on a pairwise lexicographical comparison of their characters.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Two strings are equal if they have the same number of characters and their respective character values are the same.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Otherwise, they are unequal.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_lt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;lt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is less than to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is lexicographically less than the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings compares them character by character until:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, and so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_lt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is less than or equal to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is lexicographically less than or equal to the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings compares them character by character until:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_lt__lt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A template function that writes a string into the output stream.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>_Ostr</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The output stream being written to.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The string to be entered into the output stream.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Writes the value of the specified string to the output stream <ph id="ph1">`_Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The template function overloads <bpt id="p1">**</bpt>operator&lt;&lt;<ept id="p1">**</ept> to insert an object _ <bpt id="p2">*</bpt>Str<ept id="p2">*</ept> of template class <bpt id="p3">[</bpt>basic_string<ept id="p3">](../standard-library/basic-string-class.md)</ept> into the stream <ph id="ph1">\_</ph> <bpt id="p4">*</bpt>Ostr.<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The function effectively returns <ph id="ph1">\_</ph> <bpt id="p1">*</bpt>Ostr<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>write<ept id="p1">**</ept>( <ph id="ph1">\_</ph> <bpt id="p2">*</bpt>Str<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>c_str<ept id="p1">](../standard-library/basic-string-class.md#basic_string__c_str)</ept>, <ph id="ph1">\_</ph> <bpt id="p2">*</bpt>Str<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size<ept id="p1">](../standard-library/basic-string-class.md#basic_string__size)</ept>).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_gt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is greater than to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is lexicographically greater than the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings compares them character by character until:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds that the strings have the same number of characters, and so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_gt__eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">=</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Tests if the string object on the left side of the operator is greater than or equal to the string object on the right side.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A C-style string or an object of type <ph id="ph1">`basic_string`</ph> to be compared.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the string object on the left side of the operator is lexicographically greater than or equal to the string object on the right side; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A lexicographical comparison between strings compares them character by character until:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It finds no inequalities and finds the strings have the same number of characters, and so the strings are equal.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="operator_gt__gt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  operator<ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A template function that reads a string from an input stream.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The input stream used to extract the sequence</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The string that is being extracted from the input stream.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Reads the value of the specified string from <ph id="ph1">`_Istr`</ph> and returns it into <ph id="ph2">` right.`</ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The operator skips the leading white spaces unless the <ph id="ph1">`skipws`</ph> flag is set.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It reads all the following characters until the next character is a white space or the end of the file is reached.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The template function overloads <bpt id="p1">**</bpt>operator&gt;&gt;<ept id="p1">**</ept> to replace the sequence controlled by <ph id="ph1">` right`</ph> with a sequence of elements extracted from the stream <ph id="ph2">`_Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Extraction stops:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>At end of file.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After the function extracts <ph id="ph1">`_Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept> elements, if that value is nonzero.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>After the function extracts <ph id="ph1">`_Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>max_size<ept id="p1">](../standard-library/basic-string-class.md#basic_string__max_size)</ept> elements.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>After the function extracts an element <bpt id="p1">*</bpt>ch<ept id="p1">*</ept> for which <bpt id="p2">[</bpt>use_facet<ept id="p2">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><ph id="ph1">&lt; </ph><bpt id="p3">**</bpt>ctype<ept id="p3">**</ept><ph id="ph2">\&lt;</ph> <bpt id="p4">**</bpt>CharType<ept id="p4">**</ept>&gt; &gt;( <ph id="ph3">`getloc`</ph>).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>is<ept id="p1">**</ept>( <bpt id="p2">**</bpt>ctype<ept id="p2">**</ept><ph id="ph1">\&lt;</ph> <bpt id="p3">**</bpt>CharType<ept id="p3">**</ept>&gt;:: <bpt id="p4">**</bpt>space<ept id="p4">**</ept>, <bpt id="p5">*</bpt>ch<ept id="p5">*</ept>) is true, in which case the character is put back.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If the function extracts no elements, it calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <ph id="ph1">`ios_base::failbit`</ph>).</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In any case, it calls <bpt id="p1">**</bpt>istr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept>(0) and returns <ph id="ph1">\*</ph> <bpt id="p2">**</bpt>this<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>string&gt;<ept id="p1">](../standard-library/string.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>