<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fabe356c9d1e3123ad6da8b3fc204e89f75f0956</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdc-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b56ab1c75f2b0b62f6688a79dae29317111bdb61</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">912a8feb9bbf1dd59b3870baf2405ee6bb6ef1f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDC Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDC Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines a class of device-context objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::CDC<ept id="p1">](#cdc__cdc)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AbortDoc<ept id="p1">](#cdc__abortdoc)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Terminates the current print job, erasing everything the application has written to the device since the last call of the <ph id="ph1">`StartDoc`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AbortPath<ept id="p1">](#cdc__abortpath)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Closes and discards any paths in the device context.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AddMetaFileComment<ept id="p1">](#cdc__addmetafilecomment)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies the comment from a buffer into a specified enhanced-format metafile.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AlphaBlend<ept id="p1">](#cdc__alphablend)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Displays bitmaps that have transparent or semitransparent pixels.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AngleArc<ept id="p1">](#cdc__anglearc)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Draws a line segment and an arc, and moves the current position to the ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Arc<ept id="p1">](#cdc__arc)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Draws an elliptical arc.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ArcTo<ept id="p1">](#cdc__arcto)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Draws an elliptical arc.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This function is similar to <ph id="ph1">`Arc`</ph>, except that the current position is updated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Attach<ept id="p1">](#cdc__attach)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Attaches a Windows device context to this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Opens a path bracket in the device context.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::BitBlt<ept id="p1">](#cdc__bitblt)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Copies a bitmap from a specified device context.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Chord<ept id="p1">](#cdc__chord)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Draws a chord (a closed figure bounded by the intersection of an ellipse and a line segment).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::CloseFigure<ept id="p1">](#cdc__closefigure)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Closes an open figure in a path.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::CreateCompatibleDC<ept id="p1">](#cdc__createcompatibledc)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creates a memory-device context that is compatible with another device context.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use it to prepare images in memory.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::CreateDC<ept id="p1">](#cdc__createdc)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates a device context for a specific device.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::CreateIC<ept id="p1">](#cdc__createic)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Creates an information context for a specific device.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This provides a fast way to get information about the device without creating a device context.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DeleteDC<ept id="p1">](#cdc__deletedc)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Deletes the Windows device context associated with this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DeleteTempMap<ept id="p1">](#cdc__deletetempmap)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Called by the <ph id="ph1">`CWinApp`</ph> idle-time handler to delete any temporary <ph id="ph2">`CDC`</ph> object created by <ph id="ph3">`FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Also detaches the device context.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Detach<ept id="p1">](#cdc__detach)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Detaches the Windows device context from this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DPtoHIMETRIC<ept id="p1">](#cdc__dptohimetric)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Converts device units into <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DPtoLP<ept id="p1">](#cdc__dptolp)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Converts device units into logical units.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Draw3dRect<ept id="p1">](#cdc__draw3drect)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Draws a three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawDragRect<ept id="p1">](#cdc__drawdragrect)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Erases and redraws a rectangle as it is dragged.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawEdge<ept id="p1">](#cdc__drawedge)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Draws the edges of a rectangle.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawEscape<ept id="p1">](#cdc__drawescape)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Accesses drawing capabilities of a video display that are not directly available through the graphics device interface (GDI).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawFocusRect<ept id="p1">](#cdc__drawfocusrect)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Draws a rectangle in the style used to indicate focus.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawFrameControl<ept id="p1">](#cdc__drawframecontrol)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Draw a frame control.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawIcon<ept id="p1">](#cdc__drawicon)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Draws an icon.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawState<ept id="p1">](#cdc__drawstate)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Displays an image and applies a visual effect to indicate a state.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawText<ept id="p1">](#cdc__drawtext)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Draws formatted text in the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::DrawTextEx<ept id="p1">](#cdc__drawtextex)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Draws formatted text in the specified rectangle using additional formats.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Ellipse<ept id="p1">](#cdc__ellipse)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Draws an ellipse.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EndDoc<ept id="p1">](#cdc__enddoc)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Ends a print job started by the <ph id="ph1">`StartDoc`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EndPage<ept id="p1">](#cdc__endpage)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Informs the device driver that a page is ending.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EndPath<ept id="p1">](#cdc__endpath)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Closes a path bracket and selects the path defined by the bracket into the device context.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EnumObjects<ept id="p1">](#cdc__enumobjects)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Enumerates the pens and brushes available in a device context.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Escape<ept id="p1">](#cdc__escape)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Allows applications to access facilities that are not directly available from a particular device through GDI.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Also allows access to Windows escape functions.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Escape calls made by an application are translated and sent to the device driver.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ExcludeClipRect<ept id="p1">](#cdc__excludecliprect)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ExcludeUpdateRgn<ept id="p1">](#cdc__excludeupdatergn)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ExtFloodFill<ept id="p1">](#cdc__extfloodfill)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Fills an area with the current brush.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Provides more flexibility than the <bpt id="p1">[</bpt>CDC::FloodFill<ept id="p1">](#cdc__floodfill)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ExtTextOut<ept id="p1">](#cdc__exttextout)</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Writes a character string within a rectangular region using the currently selected font.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FillPath<ept id="p1">](#cdc__fillpath)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FillRect<ept id="p1">](#cdc__fillrect)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Fills a given rectangle by using a specific brush.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FillRgn<ept id="p1">](#cdc__fillrgn)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Fills a specific region with the specified brush.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FillSolidRect<ept id="p1">](#cdc__fillsolidrect)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Fills a rectangle with a solid color.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FlattenPath<ept id="p1">](#cdc__flattenpath)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Transforms any curves in the path selected into the current device context, and turns each curve into a sequence of lines.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FloodFill<ept id="p1">](#cdc__floodfill)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Fills an area with the current brush.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FrameRect<ept id="p1">](#cdc__framerect)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Draws a border around a rectangle.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FrameRgn<ept id="p1">](#cdc__framergn)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Draws a border around a specific region using a brush.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::FromHandle<ept id="p1">](#cdc__fromhandle)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CDC`</ph> object when given a handle to a device context.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CDC`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CDC`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetArcDirection<ept id="p1">](#cdc__getarcdirection)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns the current arc direction for the device context.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetAspectRatioFilter<ept id="p1">](#cdc__getaspectratiofilter)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Retrieves the setting for the current aspect-ratio filter.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetBkColor<ept id="p1">](#cdc__getbkcolor)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Retrieves the current background color.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetBkMode<ept id="p1">](#cdc__getbkmode)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Retrieves the background mode.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetBoundsRect<ept id="p1">](#cdc__getboundsrect)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns the current accumulated bounding rectangle for the specified device context.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetBrushOrg<ept id="p1">](#cdc__getbrushorg)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Retrieves the origin of the current brush.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCharABCWidths<ept id="p1">](#cdc__getcharabcwidths)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Retrieves the widths, in logical units, of consecutive characters in a given range from the current font.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCharABCWidthsI<ept id="p1">](#cdc__getcharabcwidthsi)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Retrieves the widths, in logical units, of consecutive glyph indices in a specified range from the current TrueType font.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCharacterPlacement<ept id="p1">](#cdc__getcharacterplacement)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Retrieves various types of information on a character string.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCharWidth<ept id="p1">](#cdc__getcharwidth)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Retrieves the fractional widths of consecutive characters in a given range from the current font.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCharWidthI<ept id="p1">](#cdc__getcharwidthi)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range from the current font.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetClipBox<ept id="p1">](#cdc__getclipbox)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Retrieves the dimensions of the tightest bounding rectangle around the current clipping boundary.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetColorAdjustment<ept id="p1">](#cdc__getcoloradjustment)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Retrieves the color adjustment values for the device context.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentBitmap<ept id="p1">](#cdc__getcurrentbitmap)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentBrush<ept id="p1">](#cdc__getcurrentbrush)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentFont<ept id="p1">](#cdc__getcurrentfont)</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CFont`</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentPalette<ept id="p1">](#cdc__getcurrentpalette)</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CPalette`</ph> object.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentPen<ept id="p1">](#cdc__getcurrentpen)</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetCurrentPosition<ept id="p1">](#cdc__getcurrentposition)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Retrieves the current position of the pen (in logical coordinates).</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetDCBrushColor<ept id="p1">](#cdc__getdcbrushcolor)</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Retrieves the current brush color.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetDCPenColor<ept id="p1">](#cdc__getdcpencolor)</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Retrieves the current pen color.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetDeviceCaps<ept id="p1">](#cdc__getdevicecaps)</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Retrieves a specified kind of device-specific information about a given display device's capabilities.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetFontData<ept id="p1">](#cdc__getfontdata)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Retrieves font metric information from a scalable font file.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The information to retrieve is identified by specifying an offset into the font file and the length of the information to return.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetFontLanguageInfo<ept id="p1">](#cdc__getfontlanguageinfo)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returns information about the currently selected font for the specified display context.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetGlyphOutline<ept id="p1">](#cdc__getglyphoutline)</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Retrieves the outline curve or bitmap for an outline character in the current font.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetGraphicsMode<ept id="p1">](#cdc__getgraphicsmode)</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Retrieves the current graphics mode for the specified device context.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetHalftoneBrush<ept id="p1">](#cdc__gethalftonebrush)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Retrieves a halftone brush.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetKerningPairs<ept id="p1">](#cdc__getkerningpairs)</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Retrieves the character kerning pairs for the font that is currently selected in the specified device context.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetLayout<ept id="p1">](#cdc__getlayout)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Retrieves the layout of a device context (DC).</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The layout can be either left to right (default) or right to left (mirrored).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetMapMode<ept id="p1">](#cdc__getmapmode)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Retrieves the current mapping mode.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetMiterLimit<ept id="p1">](#cdc__getmiterlimit)</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Returns the miter limit for the device context.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetNearestColor<ept id="p1">](#cdc__getnearestcolor)</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Retrieves the closest logical color to a specified logical color that the given device can represent.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetOutlineTextMetrics<ept id="p1">](#cdc__getoutlinetextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Retrieves font metric information for TrueType fonts.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetOutputCharWidth<ept id="p1">](#cdc__getoutputcharwidth)</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Retrieves the widths of individual characters in a consecutive group of characters from the current font using the output device context.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetOutputTabbedTextExtent<ept id="p1">](#cdc__getoutputtabbedtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Computes the width and height of a character string on the output device context.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetOutputTextExtent<ept id="p1">](#cdc__getoutputtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Computes the width and height of a line of text on the output device context using the current font to determine the dimensions.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetOutputTextMetrics<ept id="p1">](#cdc__getoutputtextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics for the current font from the output device context.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetPath<ept id="p1">](#cdc__getpath)</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates defining the endpoints of lines and the control points of curves found in the path that is selected into the device context.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetPixel<ept id="p1">](#cdc__getpixel)</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Retrieves the RGB color value of the pixel at the specified point.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetPolyFillMode<ept id="p1">](#cdc__getpolyfillmode)</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Retrieves the current polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetROP2<ept id="p1">](#cdc__getrop2)</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Retrieves the current drawing mode.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetSafeHdc<ept id="p1">](#cdc__getsafehdc)</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">[</bpt>CDC::m_hDC<ept id="p1">](#cdc__m_hdc)</ept>, the output device context.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetStretchBltMode<ept id="p1">](#cdc__getstretchbltmode)</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Retrieves the current bitmap-stretching mode.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTabbedTextExtent<ept id="p1">](#cdc__gettabbedtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Computes the width and height of a character string on the attribute device context.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextAlign<ept id="p1">](#cdc__gettextalign)</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Retrieves the text-alignment flags.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextCharacterExtra<ept id="p1">](#cdc__gettextcharacterextra)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Retrieves the current setting for the amount of intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextColor<ept id="p1">](#cdc__gettextcolor)</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Retrieves the current text color.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextExtent<ept id="p1">](#cdc__gettextextent)</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Computes the width and height of a line of text on the attribute device context using the current font to determine the dimensions.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextExtentExPointI<ept id="p1">](#cdc__gettextextentexpointi)</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextExtentPointI<ept id="p1">](#cdc__gettextextentpointi)</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Retrieves the width and height of the specified array of glyph indices.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextFace<ept id="p1">](#cdc__gettextface)</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Copies the typeface name of the current font into a buffer as a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetTextMetrics<ept id="p1">](#cdc__gettextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics for the current font from the attribute device context.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetViewportExt<ept id="p1">](#cdc__getviewportext)</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-extents of the viewport.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetViewportOrg<ept id="p1">](#cdc__getviewportorg)</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-coordinates of the viewport origin.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetWindow<ept id="p1">](#cdc__getwindow)</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Returns the window associated with the display device context.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetWindowExt<ept id="p1">](#cdc__getwindowext)</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-extents of the associated window.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetWindowOrg<ept id="p1">](#cdc__getwindoworg)</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-coordinates of the origin of the associated window.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GetWorldTransform<ept id="p1">](#cdc__getworldtransform)</ept></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Retrieves the current world-space to page-space transformation.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GradientFill<ept id="p1">](#cdc__gradientfill)</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Fills rectangle and triangle structures with a gradating color.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::GrayString<ept id="p1">](#cdc__graystring)</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Draws dimmed (grayed) text at the given location.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::HIMETRICtoDP<ept id="p1">](#cdc__himetrictodp)</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Converts <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units into device units.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::HIMETRICtoLP<ept id="p1">](#cdc__himetrictolp)</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Converts <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units into logical units.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::IntersectClipRect<ept id="p1">](#cdc__intersectcliprect)</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Creates a new clipping region by forming the intersection of the current region and a rectangle.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::InvertRect<ept id="p1">](#cdc__invertrect)</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Inverts the contents of a rectangle.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::InvertRgn<ept id="p1">](#cdc__invertrgn)</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Inverts the colors in a region.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::IsPrinting<ept id="p1">](#cdc__isprinting)</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Determines whether the device context is being used for printing.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::LineTo<ept id="p1">](#cdc__lineto)</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Draws a line from the current position up to, but not including, a point.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::LPtoDP<ept id="p1">](#cdc__lptodp)</ept></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Converts logical units into device units.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::LPtoHIMETRIC<ept id="p1">](#cdc__lptohimetric)</ept></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Converts logical units into <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::MaskBlt<ept id="p1">](#cdc__maskblt)</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Combines the color data for the source and destination bitmaps using the given mask and raster operation.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ModifyWorldTransform<ept id="p1">](#cdc__modifyworldtransform)</ept></source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Changes the world transformation for a device context using the specified mode.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::MoveTo<ept id="p1">](#cdc__moveto)</ept></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Moves the current position.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::OffsetClipRgn<ept id="p1">](#cdc__offsetcliprgn)</ept></source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Moves the clipping region of the given device.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::OffsetViewportOrg<ept id="p1">](#cdc__offsetviewportorg)</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Modifies the viewport origin relative to the coordinates of the current viewport origin.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::OffsetWindowOrg<ept id="p1">](#cdc__offsetwindoworg)</ept></source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Modifies the window origin relative to the coordinates of the current window origin.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PaintRgn<ept id="p1">](#cdc__paintrgn)</ept></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Fills a region with the selected brush.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PatBlt<ept id="p1">](#cdc__patblt)</ept></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Creates a bit pattern.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Pie<ept id="p1">](#cdc__pie)</ept></source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Draws a pie-shaped wedge.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PlayMetaFile<ept id="p1">](#cdc__playmetafile)</ept></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Plays the contents of the specified metafile on the given device.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The enhanced version of <ph id="ph1">`PlayMetaFile`</ph> displays the picture stored in the given enhanced-format metafile.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The metafile can be played any number of times.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PlgBlt<ept id="p1">](#cdc__plgblt)</ept></source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the given device context.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolyBezier<ept id="p1">](#cdc__polybezier)</ept></source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Draws one or more Bzier splines.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The current position is neither used nor updated.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolyBezierTo<ept id="p1">](#cdc__polybezierto)</ept></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Draws one or more Bzier splines, and moves the current position to the ending point of the last Bzier spline.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolyDraw<ept id="p1">](#cdc__polydraw)</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Draws a set of line segments and Bzier splines.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This function updates the current position.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Polygon<ept id="p1">](#cdc__polygon)</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Draws a polygon consisting of two or more points (vertices) connected by lines.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Polyline<ept id="p1">](#cdc__polyline)</ept></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Draws a set of line segments connecting the specified points.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolylineTo<ept id="p1">](#cdc__polylineto)</ept></source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Draws one or more straight lines and moves the current position to the ending point of the last line.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolyPolygon<ept id="p1">](#cdc__polypolygon)</ept></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Creates two or more polygons that are filled using the current polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The polygons may be disjoint or they may overlap.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PolyPolyline<ept id="p1">](#cdc__polypolyline)</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Draws multiple series of connected line segments.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The current position is neither used nor updated by this function.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::PtVisible<ept id="p1">](#cdc__ptvisible)</ept></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Specifies whether the given point is within the clipping region.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::RealizePalette<ept id="p1">](#cdc__realizepalette)</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Maps palette entries in the current logical palette to the system palette.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::Rectangle<ept id="p1">](#cdc__rectangle)</ept></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Draws a rectangle using the current pen and fills it using the current brush.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::RectVisible<ept id="p1">](#cdc__rectvisible)</ept></source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Determines whether any part of the given rectangle lies within the clipping region.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ReleaseAttribDC<ept id="p1">](#cdc__releaseattribdc)</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Releases <ph id="ph1">`m_hAttribDC`</ph>, the attribute device context.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ReleaseOutputDC<ept id="p1">](#cdc__releaseoutputdc)</ept></source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Releases <ph id="ph1">`m_hDC`</ph>, the output device context.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ResetDC<ept id="p1">](#cdc__resetdc)</ept></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Updates the <ph id="ph1">`m_hAttribDC`</ph> device context.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::RestoreDC<ept id="p1">](#cdc__restoredc)</ept></source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Restores the device context to a previous state saved with <ph id="ph1">`SaveDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::RoundRect<ept id="p1">](#cdc__roundrect)</ept></source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Draws a rectangle with rounded corners using the current pen and filled using the current brush.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SaveDC<ept id="p1">](#cdc__savedc)</ept></source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Saves the current state of the device context.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ScaleViewportExt<ept id="p1">](#cdc__scaleviewportext)</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Modifies the viewport extent relative to the current values.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ScaleWindowExt<ept id="p1">](#cdc__scalewindowext)</ept></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Modifies the window extents relative to the current values.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::ScrollDC<ept id="p1">](#cdc__scrolldc)</ept></source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Scrolls a rectangle of bits horizontally and vertically.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SelectClipPath<ept id="p1">](#cdc__selectclippath)</ept></source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Selects the current path as a clipping region for the device context, combining the new region with any existing clipping region by using the specified mode.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SelectClipRgn<ept id="p1">](#cdc__selectcliprgn)</ept></source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Combines the given region with the current clipping region by using the specified mode.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SelectObject<ept id="p1">](#cdc__selectobject)</ept></source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Selects a GDI drawing object such as a pen.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SelectPalette<ept id="p1">](#cdc__selectpalette)</ept></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Selects the logical palette.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SelectStockObject<ept id="p1">](#cdc__selectstockobject)</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Selects one of the predefined stock pens, brushes, or fonts provided by Windows.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetAbortProc<ept id="p1">](#cdc__setabortproc)</ept></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Sets a programmer-supplied callback function that Windows calls if a print job must be aborted.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetArcDirection<ept id="p1">](#cdc__setarcdirection)</ept></source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Sets the drawing direction to be used for arc and rectangle functions.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetAttribDC<ept id="p1">](#cdc__setattribdc)</ept></source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`m_hAttribDC`</ph>, the attribute device context.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetBkColor<ept id="p1">](#cdc__setbkcolor)</ept></source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Sets the current background color.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetBkMode<ept id="p1">](#cdc__setbkmode)</ept></source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Sets the background mode.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetBoundsRect<ept id="p1">](#cdc__setboundsrect)</ept></source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Controls the accumulation of bounding-rectangle information for the specified device context.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetBrushOrg<ept id="p1">](#cdc__setbrushorg)</ept></source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Specifies the origin for the next brush selected into a device context.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetColorAdjustment<ept id="p1">](#cdc__setcoloradjustment)</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Sets the color adjustment values for the device context using the specified values.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetDCBrushColor<ept id="p1">](#cdc__setdcbrushcolor)</ept></source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Sets the current brush color.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetDCPenColor<ept id="p1">](#cdc__setdcpencolor)</ept></source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Sets the current pen color.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetGraphicsMode<ept id="p1">](#cdc__setgraphicsmode)</ept></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Sets the current graphics mode for the specified device context.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetLayout<ept id="p1">](#cdc__setlayout)</ept></source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Changes the layout of a device context (DC).</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetMapMode<ept id="p1">](#cdc__setmapmode)</ept></source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Sets the current mapping mode.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetMapperFlags<ept id="p1">](#cdc__setmapperflags)</ept></source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Alters the algorithm that the font mapper uses when it maps logical fonts to physical fonts.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetMiterLimit<ept id="p1">](#cdc__setmiterlimit)</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Sets the limit for the length of miter joins for the device context.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetOutputDC<ept id="p1">](#cdc__setoutputdc)</ept></source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`m_hDC`</ph>, the output device context.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetPixel<ept id="p1">](#cdc__setpixel)</ept></source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Sets the pixel at the specified point to the closest approximation of the specified color.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetPixelV<ept id="p1">](#cdc__setpixelv)</ept></source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Sets the pixel at the specified coordinates to the closest approximation of the specified color.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetPixelV`</ph> is faster than <ph id="ph2">`SetPixel`</ph> because it does not need to return the color value of the point actually painted.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetPolyFillMode<ept id="p1">](#cdc__setpolyfillmode)</ept></source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Sets the polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetROP2<ept id="p1">](#cdc__setrop2)</ept></source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Sets the current drawing mode.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetStretchBltMode<ept id="p1">](#cdc__setstretchbltmode)</ept></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Sets the bitmap-stretching mode.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetTextAlign<ept id="p1">](#cdc__settextalign)</ept></source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Sets the text-alignment flags.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetTextCharacterExtra<ept id="p1">](#cdc__settextcharacterextra)</ept></source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Sets the amount of intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetTextColor<ept id="p1">](#cdc__settextcolor)</ept></source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Sets the text color.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetTextJustification<ept id="p1">](#cdc__settextjustification)</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Adds space to the break characters in a string.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetViewportExt<ept id="p1">](#cdc__setviewportext)</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Sets the x- and y-extents of the viewport.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetViewportOrg<ept id="p1">](#cdc__setviewportorg)</ept></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Sets the viewport origin.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetWindowExt<ept id="p1">](#cdc__setwindowext)</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Sets the x- and y-extents of the associated window.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetWindowOrg<ept id="p1">](#cdc__setwindoworg)</ept></source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Sets the window origin of the device context.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetWorldTransform<ept id="p1">](#cdc__setworldtransform)</ept></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Sets the current world-space to page-space transformation.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept></source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Informs the device driver that a new print job is starting.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StartPage<ept id="p1">](#cdc__startpage)</ept></source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Informs the device driver that a new page is starting.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StretchBlt<ept id="p1">](#cdc__stretchblt)</ept></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Moves a bitmap from a source rectangle and device into a destination rectangle, stretching or compressing the bitmap if necessary to fit the dimensions of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StrokeAndFillPath<ept id="p1">](#cdc__strokeandfillpath)</ept></source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Closes any open figures in a path, strikes the outline of the path by using the current pen, and fills its interior by using the current brush.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StrokePath<ept id="p1">](#cdc__strokepath)</ept></source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Renders the specified path by using the current pen.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::TabbedTextOut<ept id="p1">](#cdc__tabbedtextout)</ept></source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::TextOut<ept id="p1">](#cdc__textout)</ept></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Writes a character string at a specified location using the currently selected font.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::TransparentBlt<ept id="p1">](#cdc__transparentblt)</ept></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Transfers a bit-block of color data from the specified source device context into a destination device context, rendering a specified color transparent in the transfer.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::UpdateColors<ept id="p1">](#cdc__updatecolors)</ept></source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Updates the client area of the device context by matching the current colors in the client area to the system palette on a pixel-by-pixel basis.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::WidenPath<ept id="p1">](#cdc__widenpath)</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the device context.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::operator HDC<ept id="p1">](#cdc__operator_hdc)</ept></source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the device context.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::m_hAttribDC<ept id="p1">](#cdc__m_hattribdc)</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The attribute-device context used by this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::m_hDC<ept id="p1">](#cdc__m_hdc)</ept></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The output-device context used by this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDC`</ph> object provides member functions for working with a device context, such as a display or printer, as well as members for working with a display context associated with the client area of a window.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Do all drawing through the member functions of a <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The class provides member functions for device-context operations, working with drawing tools, type-safe graphics device interface (GDI) object selection, and working with colors and palettes.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>It also provides member functions for getting and setting drawing attributes, mapping, working with the viewport, working with the window extent, converting coordinates, working with regions, clipping, drawing lines, and drawing simple shapes, ellipses, and polygons.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Member functions are also provided for drawing text, working with fonts, using printer escapes, scrolling, and playing metafiles.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CDC`</ph> object, construct it, and then call its member functions that parallel Windows functions that use device contexts.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Under Windows 95/98, all screen coordinates are limited to 16 bits.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Therefore, an <ph id="ph1">`int`</ph> passed to a <ph id="ph2">`CDC`</ph> member function must lie in the range –32768 to 32767.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>For specific uses, the Microsoft Foundation Class Library provides several classes derived from <ph id="ph1">`CDC`</ph> .</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CPaintDC`</ph> encapsulates calls to <ph id="ph2">`BeginPaint`</ph> and <ph id="ph3">`EndPaint`</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CClientDC`</ph> manages a display context associated with a window's client area.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CWindowDC`</ph> manages a display context associated with an entire window, including its frame and controls.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CMetaFileDC`</ph> associates a device context with a metafile.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDC`</ph> provides two member functions, <bpt id="p1">[</bpt>GetLayout<ept id="p1">](#cdc__getlayout)</ept> and <bpt id="p2">[</bpt>SetLayout<ept id="p2">](#cdc__setlayout)</ept>, for reversing the layout of a device context, which does not inherit its layout from a window.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Such right-to-left orientation is necessary for applications written for cultures, such as Arabic or Hebrew, where the character layout is not the European standard.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDC`</ph> contains two device contexts, <bpt id="p1">[</bpt>m_hDC<ept id="p1">](#cdc__m_hdc)</ept> and <bpt id="p2">[</bpt>m_hAttribDC<ept id="p2">](#cdc__m_hattribdc)</ept>, which, on creation of a <ph id="ph2">`CDC`</ph> object, refer to the same device.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDC`</ph> directs all output GDI calls to <ph id="ph2">`m_hDC`</ph> and most attribute GDI calls to <ph id="ph3">`m_hAttribDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>(An example of an attribute call is <ph id="ph1">`GetTextColor`</ph>, while <ph id="ph2">`SetTextColor`</ph> is an output call.)</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>For example, the framework uses these two device contexts to implement a <ph id="ph1">`CMetaFileDC`</ph> object that will send output to a metafile while reading attributes from a physical device.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Print preview is implemented in the framework in a similar fashion.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>You can also use the two device contexts in a similar way in your application-specific code.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>There are times when you may need text-metric information from both the <ph id="ph1">`m_hDC`</ph> and <ph id="ph2">`m_hAttribDC`</ph> device contexts.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The following pairs of functions provide this capability:</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Uses m_hAttribDC</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Uses m_hDC</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetTextExtent<ept id="p1">](#cdc__gettextextent)</ept></source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetOutputTextExtent<ept id="p1">](#cdc__getoutputtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetTabbedTextExtent<ept id="p1">](#cdc__gettabbedtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetOutputTabbedTextExtent<ept id="p1">](#cdc__getoutputtabbedtextextent)</ept></source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetTextMetrics<ept id="p1">](#cdc__gettextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetOutputTextMetrics<ept id="p1">](#cdc__getoutputtextmetrics)</ept></source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetCharWidth<ept id="p1">](#cdc__getcharwidth)</ept></source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetOutputCharWidth<ept id="p1">](#cdc__getoutputcharwidth)</ept></source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CDC`</ph>, see <bpt id="p1">[</bpt>Device Contexts<ept id="p1">](../../mfc/device-contexts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__abortdoc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::AbortDoc</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Terminates the current print job and erases everything the application has written to the device since the last call to the <bpt id="p1">[</bpt>StartDoc<ept id="p1">](#cdc__startdoc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>A value greater than or equal to 0 if successful, or a negative value if an error has occurred.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The following list shows common error values and their meanings:</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_ERROR<ept id="p1">**</ept> General error.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFDISK<ept id="p1">**</ept> Not enough disk space is currently available for spooling, and no more space will become available.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFMEMORY<ept id="p1">**</ept> Not enough memory is available for spooling.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_USERABORT<ept id="p1">**</ept> User terminated the job through the Print Manager.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>This member function replaces the <ph id="ph1">`ABORTDOC`</ph> printer escape.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AbortDoc<ept id="p1">**</ept> should be used to terminate the following:</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Printing operations that do not specify an abort function using <bpt id="p1">[</bpt>SetAbortProc<ept id="p1">](#cdc__setabortproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Printing operations that have not yet reached their first <bpt id="p1">**</bpt>NEWFRAME<ept id="p1">**</ept> or <bpt id="p2">**</bpt>NEXTBAND<ept id="p2">**</ept> escape call.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>If an application encounters a printing error or a canceled print operation, it must not attempt to terminate the operation by using either the <bpt id="p1">[</bpt>EndDoc<ept id="p1">](#cdc__enddoc)</ept> or <bpt id="p2">**</bpt>AbortDoc<ept id="p2">**</ept> member functions of class <ph id="ph1">`CDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>GDI automatically terminates the operation before returning the error value.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>If the application displays a dialog box to allow the user to cancel the print operation, it must call <bpt id="p1">**</bpt>AbortDoc<ept id="p1">**</ept> before destroying the dialog box.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>If Print Manager was used to start the print job, calling <bpt id="p1">**</bpt>AbortDoc<ept id="p1">**</ept> erases the entire spool job — the printer receives nothing.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>If Print Manager was not used to start the print job, the data may have been sent to the printer before <bpt id="p1">**</bpt>AbortDoc<ept id="p1">**</ept> was called.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>In this case, the printer driver would have reset the printer (when possible) and closed the print job.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__abortpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::AbortPath</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Closes and discards any paths in the device context.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>If there is an open path bracket in the device context, the path bracket is closed and the path is discarded.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If there is a closed path in the device context, the path is discarded.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__addmetafilecomment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::AddMetaFileComment</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Copies the comment from a buffer into a specified enhanced-format metafile.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nDataSize<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Specifies the length of the comment buffer, in bytes.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pCommentData<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Points to the buffer that contains the comment.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>A comment may include any private information — for example, the source of the picture and the date it was created.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>A comment should begin with an application signature, followed by the data.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Comments should not contain position-specific data.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Position-specific data specifies the location of a record, and it should not be included because one metafile may be embedded within another metafile.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This function can only be used with enhanced metafiles.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__alphablend"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::AlphaBlend</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Call this member function to display bitmaps that have transparent or semitransparent pixels.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>A pointer to the source device context.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>blend<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Specifies a <bpt id="p1">[</bpt>BLENDFUNCTION<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183393)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>AlphaBlend<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183351)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__anglearc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::AngleArc</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Draws a line segment and an arc.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the center of the circle.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the center of the circle.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nRadius<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Specifies the radius of the circle in logical units.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>This value must be positive.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>fStartAngle<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Specifies the starting angle in degrees relative to the x-axis.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>fSweepAngle<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Specifies the sweep angle in degrees relative to the starting angle.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The line segment is drawn from the current position to the beginning of the arc.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The arc is drawn along the perimeter of a circle with the given radius and center.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The length of the arc is defined by the given start and sweep angles.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AngleArc`</ph> moves the current position to the ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The arc drawn by this function may appear to be elliptical, depending on the current transformation and mapping mode.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Before drawing the arc, this function draws the line segment from the current position to the beginning of the arc.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The arc is drawn by constructing an imaginary circle with the specified radius around the specified center point.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The starting point of the arc is determined by measuring counterclockwise from the x-axis of the circle by the number of degrees in the start angle.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The ending point is similarly located by measuring counterclockwise from the starting point by the number of degrees in the sweep angle.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>If the sweep angle is greater than 360 degrees the arc is swept multiple times.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>This function draws lines by using the current pen.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>The figure is not filled.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__arc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Arc</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Draws an elliptical arc.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x3<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>You can pass either an <ph id="ph1">`LPRECT`</ph> or a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the arc's ending point (in logical units).</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The arc drawn by using the function is a segment of the ellipse defined by the specified bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The actual starting point of the arc is the point at which a ray drawn from the center of the bounding rectangle through the specified starting point intersects the ellipse.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The actual ending point of the arc is the point at which a ray drawn from the center of the bounding rectangle through the specified ending point intersects the ellipse.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>The arc is drawn in a counterclockwise direction.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Since an arc is not a closed figure, it is not filled.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Both the width and height of the rectangle must be greater than 2 units and less than 32,767 units.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#29<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__arcto"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ArcTo</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Draws an elliptical arc.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x3<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>You can pass either a pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> data structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the arc's ending point (in logical units).</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> data structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>This function is similar to <ph id="ph1">`CDC::Arc`</ph>, except that the current position is updated.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>The points ( <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>) and ( <ph id="ph3">`x2`</ph>, <ph id="ph4">`y2`</ph>) specify the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>An ellipse formed by the given bounding rectangle defines the curve of the arc.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>The arc extends counterclockwise (the default arc direction) from the point where it intersects the radial line from the center of the bounding rectangle to ( <bpt id="p1">*</bpt>x3<ept id="p1">*</ept>, <ph id="ph1">`y3`</ph>).</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The arc ends where it intersects the radial line from the center of the bounding rectangle to ( <ph id="ph1">`x4`</ph>, <ph id="ph2">`y4`</ph>).</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>If the starting point and ending point are the same, a complete ellipse is drawn.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>A line is drawn from the current position to the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>If no error occurs, the current position is set to the ending point of the arc.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The arc is drawn using the current pen; it is not filled.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__attach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Attach</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Use this member function to attach an <ph id="ph1">`hDC`</ph> to the <ph id="ph2">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>A Windows device context.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`hDC`</ph> is stored in both <ph id="ph2">`m_hDC`</ph>, the output device context, and in <ph id="ph3">`m_hAttribDC`</ph>, the attribute device context.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__beginpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::BeginPath</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Opens a path bracket in the device context.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>After a path bracket is open, an application can begin calling GDI drawing functions to define the points that lie in the path.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>An application can close an open path bracket by calling the <ph id="ph1">`EndPath`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>When an application calls <ph id="ph1">`BeginPath`</ph>, any previous paths are discarded.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>BeginPath<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183363)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of the drawing functions that define points in a path.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#30<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__bitblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::BitBlt</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Copies a bitmap from the source device context to this current device context.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Specifies the width (in logical units) of the destination rectangle and source bitmap.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Specifies the height (in logical units) of the destination rectangle and source bitmap.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CDC`</ph> object that identifies the device context from which the bitmap will be copied.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>It must be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if <bpt id="p2">*</bpt>dwRop<ept id="p2">*</ept> specifies a raster operation that does not include a source.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the source bitmap.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the source bitmap.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Specifies the raster operation to be performed.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Raster-operation codes define how the GDI combines colors in output operations that involve a current brush, a possible source bitmap, and a destination bitmap.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>BitBlt<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183370)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of the raster-operation codes for <bpt id="p2">*</bpt>dwRop<ept id="p2">*</ept> and their descriptions</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>For a complete list of raster-operation codes, see <bpt id="p1">[</bpt>About Raster Operation Codes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162892)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>The application can align the windows or client areas on byte boundaries to ensure that the <ph id="ph1">`BitBlt`</ph> operations occur on byte-aligned rectangles.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>(Set the <bpt id="p1">**</bpt>CS_BYTEALIGNWINDOW<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CS_BYTEALIGNCLIENT<ept id="p2">**</ept> flags when you register the window classes.)</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BitBlt`</ph> operations on byte-aligned rectangles are considerably faster than <ph id="ph2">`BitBlt`</ph> operations on rectangles that are not byte aligned.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>If you want to specify class styles such as byte-alignment for your own device context, you will have to register a window class rather than relying on the Microsoft Foundation classes to do it for you.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Use the global function <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](../../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>GDI transforms <ph id="ph1">`nWidth`</ph> and <ph id="ph2">`nHeight`</ph>, once by using the destination device context, and once by using the source device context.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>If the resulting extents do not match, GDI uses the Windows <ph id="ph1">`StretchBlt`</ph> function to compress or stretch the source bitmap as necessary.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>If destination, source, and pattern bitmaps do not have the same color format, the <ph id="ph1">`BitBlt`</ph> function converts the source and pattern bitmaps to match the destination.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>The foreground and background colors of the destination bitmap are used in the conversion.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`BitBlt`</ph> function converts a monochrome bitmap to color, it sets white bits (1) to the background color and black bits (0) to the foreground color.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The foreground and background colors of the destination device context are used.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>To convert color to monochrome, <ph id="ph1">`BitBlt`</ph> sets pixels that match the background color to white and sets all other pixels to black.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BitBlt`</ph> uses the foreground and background colors of the color device context to convert from color to monochrome.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Note that not all device contexts support <ph id="ph1">`BitBlt`</ph>.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>To check whether a given device context does support <ph id="ph1">`BitBlt`</ph>, use the <ph id="ph2">`GetDeviceCaps`</ph> member function and specify the <bpt id="p1">**</bpt>RASTERCAPS<ept id="p1">**</ept> index.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::CreateCompatibleDC<ept id="p1">](#cdc__createcompatibledc)</ept>.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__cdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::CDC</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__chord"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Chord</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Draws a chord (a closed figure bounded by the intersection of an ellipse and a line segment).</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the chord's bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the chord's bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the chord's bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the chord's bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x3<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the chord's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the chord's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the point that defines the chord's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the point that defines the chord's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>You can pass either a <ph id="ph1">`LPRECT`</ph> or a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the chord's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the chord.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the point that defines the chord's ending point (in logical units).</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the chord.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>The ( <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>) and ( <ph id="ph3">`x2`</ph>, <ph id="ph4">`y2`</ph>) parameters specify the upper-left and lower-right corners, respectively, of a rectangle bounding the ellipse that is part of the chord.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The ( <bpt id="p1">*</bpt>x3<ept id="p1">*</ept>, <ph id="ph1">`y3`</ph>) and ( <ph id="ph2">`x4`</ph>, <ph id="ph3">`y4`</ph>) parameters specify the endpoints of a line that intersects the ellipse.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>The chord is drawn by using the selected pen and filled by using the selected brush.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The figure drawn by the <ph id="ph1">`Chord`</ph> function extends up to, but does not include the right and bottom coordinates.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>This means that the height of the figure is <ph id="ph1">`y2`</ph> – <ph id="ph2">`y1`</ph> and the width of the figure is <ph id="ph3">`x2`</ph> – <ph id="ph4">`x1`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#31<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__closefigure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::CloseFigure</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Closes an open figure in a path.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>The function closes the figure by drawing a line from the current position to the first point of the figure (usually, the point specified by the most recent call to the <ph id="ph1">`MoveTo`</ph> member function) and connects the lines by using the line join style.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>If a figure is closed by using the <ph id="ph1">`LineTo`</ph> member function instead of <ph id="ph2">`CloseFigure`</ph>, end caps are used to create the corner instead of a join.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloseFigure`</ph> should only be called if there is an open path bracket in the device context.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>A figure in a path is open unless it is explicitly closed by using this function.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>(A figure can be open even if the current point and the starting point of the figure are the same.) Any line or curve added to the path after <ph id="ph1">`CloseFigure`</ph> starts a new figure.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__createcompatibledc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::CreateCompatibleDC</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Creates a memory device context that is compatible with the device specified by <ph id="ph1">`pDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDC`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function creates a memory device context that is compatible with the system display.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>A memory device context is a block of memory that represents a display surface.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>It can be used to prepare images in memory before copying them to the actual device surface of the compatible device.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>When a memory device context is created, GDI automatically selects a 1-by-1 monochrome stock bitmap for it.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>GDI output functions can be used with a memory device context only if a bitmap has been created and selected into that context.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>This function can only be used to create compatible device contexts for devices that support raster operations.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CDC::BitBlt<ept id="p1">](#cdc__bitblt)</ept> member function for information regarding bit-block transfers between device contexts.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>To determine whether a device context supports raster operations, see the <bpt id="p1">**</bpt>RC_BITBLT<ept id="p1">**</ept> raster capability in the member function <ph id="ph1">`CDC::GetDeviceCaps`</ph>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#32<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__createdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::CreateDC</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Creates a device context for the specified device.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the filename (without extension) of the device driver (for example, "EPSON").</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>You can also pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the name of the specific device to be supported (for example, "EPSON FX-80").</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszDeviceName`</ph> parameter is used if the module supports more than one device.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>You can also pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the file or device name for the physical output medium (file or output port).</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>You can also pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`DEVMODE`</ph> structure containing device-specific initialization data for the device driver.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The Windows <bpt id="p1">**</bpt>DocumentProperties<ept id="p1">**</ept> function retrieves this structure filled in for a given device.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpInitData`</ph> parameter must be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the device driver is to use the default initialization (if any) specified by the user through the Control Panel.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The PRINT.H header file is required if the <bpt id="p1">[</bpt>DEVMODE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183565)</ept> structure is used.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Device names follow these conventions: an ending colon (:) is recommended, but optional.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Windows strips the terminating colon so that a device name ending with a colon is mapped to the same port as the same name without a colon.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>The driver and port names must not contain leading or trailing spaces.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>GDI output functions cannot be used with information contexts.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__createic"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::CreateIC</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Creates an information context for the specified device.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the filename (without extension) of the device driver (for example, "EPSON").</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>You can pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the name of the specific device to be supported (for example, "EPSON FX-80").</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszDeviceName`</ph> parameter is used if the module supports more than one device.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>You can pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the file or device name for the physical output medium (file or port).</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>You can pass a <ph id="ph1">`CString`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Points to device-specific initialization data for the device driver.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpInitData`</ph> parameter must be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the device driver is to use the default initialization (if any) specified by the user through the Control Panel.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`CreateDC`</ph> for the data format for device-specific initialization.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>The information context provides a fast way to get information about the device without creating a device context.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Device names follow these conventions: an ending colon (:) is recommended, but optional.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Windows strips the terminating colon so that a device name ending with a colon is mapped to the same port as the same name without a colon.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>The driver and port names must not contain leading or trailing spaces.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>GDI output functions cannot be used with information contexts.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__deletedc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DeleteDC</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>In general, do not call this function; the destructor will do it for you.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Nonzero if the function completed successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DeleteDC`</ph> member function deletes the Windows device contexts that are associated with <ph id="ph2">`m_hDC`</ph> in the current <ph id="ph3">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">`CDC`</ph> object is the last active device context for a given device, the device is notified and all storage and system resources used by the device are released.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>An application should not call <ph id="ph1">`DeleteDC`</ph> if objects have been selected into the device context.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Objects must first be selected out of the device context before it is deleted.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>An application must not delete a device context whose handle was obtained by calling <bpt id="p1">[</bpt>CWnd::GetDC<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__getdc)</ept>.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Instead, it must call <bpt id="p1">[</bpt>CWnd::ReleaseDC<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__releasedc)</ept> to free the device context.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CClientDC<ept id="p1">](../../mfc/reference/cclientdc-class.md)</ept> and <bpt id="p2">[</bpt>CWindowDC<ept id="p2">](../../mfc/reference/cwindowdc-class.md)</ept> classes are provided to wrap this functionality.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DeleteDC`</ph> function is generally used to delete device contexts created with <bpt id="p1">[</bpt>CreateDC<ept id="p1">](#cdc__createdc)</ept>, <bpt id="p2">[</bpt>CreateIC<ept id="p2">](#cdc__createic)</ept>, or <bpt id="p3">[</bpt>CreateCompatibleDC<ept id="p3">](#cdc__createcompatibledc)</ept>.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CPrintDialog::GetPrinterDC<ept id="p1">](../../mfc/reference/cprintdialog-class.md#cprintdialog__getprinterdc)</ept>.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__deletetempmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Called automatically by the <ph id="ph1">`CWinApp`</ph> idle-time handler, <ph id="ph2">`DeleteTempMap`</ph> deletes any temporary <ph id="ph3">`CDC`</ph> objects created by <ph id="ph4">`FromHandle`</ph>, but does not destroy the device context handles ( <ph id="ph5">`hDC`</ph>s) temporarily associated with the <ph id="ph6">`CDC`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__detach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Detach</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Call this function to detach <ph id="ph1">`m_hDC`</ph> (the output device context) from the <ph id="ph2">`CDC`</ph> object and set both <ph id="ph3">`m_hDC`</ph> and <ph id="ph4">`m_hAttribDC`</ph> to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>A Windows device context.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__dptohimetric"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DPtoHIMETRIC</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Use this function when you give <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> sizes to OLE, converting pixels to <bpt id="p2">**</bpt>HIMETRIC<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>If the mapping mode of the device context object is <ph id="ph1">`MM_LOENGLISH`</ph>, <ph id="ph2">`MM_HIENGLISH`</ph>, <ph id="ph3">`MM_LOMETRIC`</ph>, or <ph id="ph4">`MM_HIMETRIC`</ph>, then the conversion is based on the number of pixels in the physical inch.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>If the mapping mode is one of the other non-constrained modes (e.g., <ph id="ph1">`MM_TEXT`</ph>), then the conversion is based on the number of pixels in the logical inch.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__dptolp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DPtoLP</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Converts device units into logical units.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structures or <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>The number of points in the array.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>This parameter is used for the simple case of converting one rectangle from device points to logical points.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>The function maps the coordinates of each point, or dimension of a size, from the device coordinate system into GDI's logical coordinate system.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The conversion depends on the current mapping mode and the settings of the origins and extents for the device's window and viewport.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__draw3drect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Draw3dRect</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Call this member function to draw a three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>You can pass either a pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>clrTopLeft<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Specifies the color of the top and left sides of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Specifies the color of the bottom and right sides of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>cx</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Specifies the width of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>cy</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Specifies the height of the three-dimensional rectangle.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>The rectangle will be drawn with the top and left sides in the color specified by <bpt id="p1">*</bpt>clrTopLeft<ept id="p1">*</ept> and the bottom and right sides in the color specified by <ph id="ph1">`clrBottomRight`</ph>.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#33<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawdragrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawDragRect</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Call this member function repeatedly to redraw a drag rectangle.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that specifies the logical coordinates of a rectangle — in this case, the end position of the rectangle being redrawn.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Specifies the displacement from the top-left corner of the outer border to the top-left corner of the inner border (that is, the thickness of the border) of a rectangle.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that specifies the logical coordinates of the position of a rectangle — in this case, the original position of the rectangle being redrawn.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>sizeLast<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Specifies the displacement from the top-left corner of the outer border to the top-left corner of the inner border (that is, the thickness of the border) of the original rectangle being redrawn.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Pointer to a brush object.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to use the default halftone brush.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pBrushLast<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Pointer to the last brush object used.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to use the default halftone brush.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Call it in a loop as you sample mouse position, in order to give visual feedback.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`DrawDragRect`</ph>, the previous rectangle is erased and a new one is drawn.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>For example, as the user drags a rectangle across the screen, <ph id="ph1">`DrawDragRect`</ph> will erase the original rectangle and redraw a new one in its new position.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`DrawDragRect`</ph> draws the rectangle by using a halftone brush to eliminate flicker and to create the appearance of a smoothly moving rectangle.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>The first time you call <ph id="ph1">`DrawDragRect`</ph>, the <ph id="ph2">`lpRectLast`</ph> parameter should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawedge"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawEdge</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Call this member function to draw the edges of a rectangle of the specified type and style.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>RECT<ept id="p1">**</ept> structure that contains the logical coordinates of the rectangle.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nEdge<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Specifies the type of inner and outer edge to draw.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>This parameter must be a combination of one inner-border flag and one outer-border flag.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>DrawEdge<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162477)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a table of the parameter's types.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>The flags that specify the type of border to be drawn.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`DrawEdge`</ph> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a table of the parameter's values.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>For diagonal lines, the <bpt id="p1">**</bpt>BF_RECT<ept id="p1">**</ept> flags specify the end point of the vector bounded by the rectangle parameter.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawescape"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawEscape</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Accesses drawing capabilities of a video display that are not directly available through the graphics device interface (GDI).</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Specifies the escape function to be performed.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes of data pointed to by the <ph id="ph1">`lpszInputData`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Points to the input structure required for the specified escape.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Specifies the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Greater than zero if successful, except for the <bpt id="p1">**</bpt>QUERYESCSUPPORT<ept id="p1">**</ept> draw escape, which checks for implementation only; or zero if the escape is not implemented; or less than zero if an error occurred.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>When an application calls <ph id="ph1">`DrawEscape`</ph>, the data identified by <ph id="ph2">`nInputSize`</ph> and <ph id="ph3">`lpszInputData`</ph> is passed directly to the specified display driver.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawfocusrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawFocusRect</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Draws a rectangle in the style used to indicate that the rectangle has the focus.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that specifies the logical coordinates of the rectangle to be drawn.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Since this is a Boolean XOR function, calling this function a second time with the same rectangle removes the rectangle from the display.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>The rectangle drawn by this function cannot be scrolled.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>To scroll an area containing a rectangle drawn by this function, first call <ph id="ph1">`DrawFocusRect`</ph> to remove the rectangle from the display, then scroll the area, and then call <ph id="ph2">`DrawFocusRect`</ph> again to draw the rectangle in the new position.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DrawFocusRect`</ph> works only in <ph id="ph2">`MM_TEXT`</ph> mode.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>In other modes, this function does not draw the focus rectangle correctly, but it does not return error values.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawframecontrol"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawFrameControl</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Call this member function to draw a frame control of the specified type and style.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>RECT<ept id="p1">**</ept> structure that contains the logical coordinates of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Specifies the type of frame control to draw.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">*</bpt>uType<ept id="p1">*</ept> parameter in <bpt id="p2">[</bpt>DrawFrameControl<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162480)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of this parameter's possible values.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Specifies the initial state of the frame control.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Can be one or more of the values described for the <bpt id="p1">*</bpt>uState<ept id="p1">*</ept> parameter in <ph id="ph1">`DrawFrameControl`</ph> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`nState`</ph> value <bpt id="p1">**</bpt>DFCS_ADJUSTRECT<ept id="p1">**</ept> to adjust the bounding rectangle to exclude the surrounding edge of the push button.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>In several cases, <ph id="ph1">`nState`</ph> depends on the <ph id="ph2">`nType`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The following list shows the relationship between the four <ph id="ph1">`nType`</ph> values and <ph id="ph2">`nState`</ph>:</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFC_BUTTON<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTON3STATE<ept id="p1">**</ept> Three-state button</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTONCHECK<ept id="p1">**</ept> Check box</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTONPUSH<ept id="p1">**</ept> Push button</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTONRADIO<ept id="p1">**</ept> Radio button</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTONRADIOIMAGE<ept id="p1">**</ept> Image for radio button (nonsquare needs image)</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_BUTTONRADIOMASK<ept id="p1">**</ept> Mask for radio button (nonsquare needs mask)</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFC_CAPTION<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_CAPTIONCLOSE<ept id="p1">**</ept> Close button</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_CAPTIONHELP<ept id="p1">**</ept> Help button</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_CAPTIONMAX<ept id="p1">**</ept> Maximize button</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_CAPTIONMIN<ept id="p1">**</ept> Minimize button</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_CAPTIONRESTORE<ept id="p1">**</ept> Restore button</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFC_MENU<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_MENUARROW<ept id="p1">**</ept> Submenu arrow</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_MENUBULLET<ept id="p1">**</ept> Bullet</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_MENUCHECK<ept id="p1">**</ept> Check mark</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFC_SCROLL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLCOMBOBOX<ept id="p1">**</ept> Combo box scroll bar</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLDOWN<ept id="p1">**</ept> Down arrow of scroll bar</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLLEFT<ept id="p1">**</ept> Left arrow of scroll bar</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLRIGHT<ept id="p1">**</ept> Right arrow of scroll bar</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLSIZEGRIP<ept id="p1">**</ept> Size grip in bottom-right corner of window</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DFCS_SCROLLUP<ept id="p1">**</ept> Up arrow of scroll bar</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>This code draws the size gripper in the bottom-right corner of your window.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>It's appropriate for the <ph id="ph1">`OnPaint`</ph> handler of a dialog box, which has no styles and normally doesn't contain other controls (like a status bar) that may give it a size gripper.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#34<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawicon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawIcon</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>Draws an icon on the device represented by the current <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the icon.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the icon.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Identifies the handle of the icon to be drawn.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Specifies the logical x- and y-coordinates of the upper-left corner of the icon.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>You can pass a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Nonzero if the function completed successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>The function places the icon's upper-left corner at the location specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>The location is subject to the current mapping mode of the device context.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>The icon resource must have been previously loaded by using the functions <ph id="ph1">`CWinApp::LoadIcon`</ph>, <ph id="ph2">`CWinApp::LoadStandardIcon`</ph>, or <ph id="ph3">`CWinApp::LoadOEMIcon`</ph>.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_TEXT`</ph> mapping mode must be selected prior to using this function.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::IsIconic<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__isiconic)</ept>.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawstate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawState</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Call this member function to display an image and apply a visual effect to indicate a state, such as a disabled or default state.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>For all <ph id="ph1">`nFlag`</ph> states except <bpt id="p1">**</bpt>DSS_NORMAL<ept id="p1">**</ept>, the image is converted to monochrome before the visual effect is applied.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Specifies the location of the image.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Specifies the size of the image.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>A handle to a bitmap.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Flags that specify the image type and state.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>DrawState<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162496)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for the possible <ph id="ph2">`nFlags`</ph> types and states.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>A handle to a brush.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>A pointer to a CBitmap object.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>A pointer to a CBrush object.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>A handle to an icon.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>A pointer to text.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bPrefixText<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Text that may contain an accelerator mnemonic.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lData`</ph> parameter specifies the address of the string, and the <ph id="ph2">`nTextLen`</ph> parameter specifies the length.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTextLen`</ph> is 0, the string is assumed to be null-terminated.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>Length of the text string pointed to by <ph id="ph1">`lpszText`</ph>.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTextLen`</ph> is 0, the string is assumed to be null-terminated.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpDrawProc<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>A pointer to a callback function used to render an image.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>This parameter is required if the image type in <ph id="ph1">`nFlags`</ph> is <bpt id="p1">**</bpt>DST_COMPLEX<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>It is optional and can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the image type is <bpt id="p2">**</bpt>DST_TEXT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>For all other image types, this parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>For more information about the callback function, see the <bpt id="p1">[</bpt>DrawStateProc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162497)</ept> function in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Specifies information about the image.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>The meaning of this parameter depends on the image type.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawtext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawText</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Call this member function to format text in the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>To specify additional formatting options, use <bpt id="p1">[</bpt>CDC::DrawTextEx<ept id="p1">](#cdc__drawtextex)</ept>.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Points to the string to be drawn.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the string must be null-terminated.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Specifies the number of chars in the string.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, then <ph id="ph2">`lpszString`</ph> is assumed to be a long pointer to a null-terminated string and <ph id="ph3">`DrawText`</ph> computes the character count automatically.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the rectangle (in logical coordinates) in which the text is to be formatted.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that contains the specified characters to be drawn.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Specifies the method of formatting the text.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>It can be any combination of the values described for the <ph id="ph1">`uFormat`</ph> parameter in <bpt id="p1">[</bpt>DrawText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>(combine using the bitwise OR operator):</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`uFormat`</ph> flag combinations can cause the passed string to be modified.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>DT_MODIFYSTRING<ept id="p1">**</ept> with either <bpt id="p2">**</bpt>DT_END_ELLIPSIS<ept id="p2">**</ept> or <bpt id="p3">**</bpt>DT_PATH_ELLIPSIS<ept id="p3">**</ept> may cause the string to be modified, causing an assertion in the <ph id="ph1">`CString`</ph> override.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The values <ph id="ph1">`DT_CALCRECT`</ph>, <ph id="ph2">`DT_EXTERNALLEADING`</ph>, <bpt id="p1">**</bpt>DT_INTERNAL<ept id="p1">**</ept>, <ph id="ph3">`DT_NOCLIP`</ph>, and <ph id="ph4">`DT_NOPREFIX`</ph> cannot be used with the <ph id="ph5">`DT_TABSTOP`</ph> value.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The height of the text if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>It formats text by expanding tabs into appropriate spaces, aligning text to the left, right, or center of the given rectangle, and breaking text into lines that fit within the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>The type of formatting is specified by <ph id="ph1">`nFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>This member function uses the device context's selected font, text color, and background color to draw the text.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Unless the <ph id="ph1">`DT_NOCLIP`</ph> format is used, <ph id="ph2">`DrawText`</ph> clips the text so that the text does not appear outside the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>All formatting is assumed to have multiple lines unless the <ph id="ph1">`DT_SINGLELINE`</ph> format is given.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>If the selected font is too large for the specified rectangle, the <ph id="ph1">`DrawText`</ph> member function does not attempt to substitute a smaller font.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`DT_CALCRECT`</ph> flag is specified, the rectangle specified by <ph id="ph2">`lpRect`</ph> will be updated to reflect the width and height needed to draw the text.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept> text-alignment flag has been set (see <bpt id="p2">[</bpt>CDC::SetTextAlign<ept id="p2">](#cdc__settextalign)</ept>), <ph id="ph1">`DrawText`</ph> will display text starting at the current position, rather than at the left of the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DrawText`</ph> will not wrap text when the <bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept> flag has been set (that is, the <ph id="ph2">`DT_WORDBREAK`</ph> flag will have no effect).</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>The text color may be set by <bpt id="p1">[</bpt>CDC::SetTextColor<ept id="p1">](#cdc__settextcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__drawtextex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::DrawTextEx</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Formats text in the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Points to the string to be drawn.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the string must be null terminated.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Specifies the number of chars in the string.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, then <ph id="ph2">`lpszString`</ph> is assumed to be a long pointer to a null-terminated string and <ph id="ph3">`DrawText`</ph> computes the character count automatically.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the rectangle (in logical coordinates) in which the text is to be formatted.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that contains the specified characters to be drawn.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Specifies the method of formatting the text.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>It can be any combination of the values described for the <ph id="ph1">`uFormat`</ph> parameter in <bpt id="p1">[</bpt>DrawText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>(Combine using the bitwise <ph id="ph1">`OR`</ph> operator):</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`uFormat`</ph> flag combinations can cause the passed string to be modified.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>DT_MODIFYSTRING<ept id="p1">**</ept> with either <bpt id="p2">**</bpt>DT_END_ELLIPSIS<ept id="p2">**</ept> or <bpt id="p3">**</bpt>DT_PATH_ELLIPSIS<ept id="p3">**</ept> may cause the string to be modified, causing an assertion in the <ph id="ph1">`CString`</ph> override.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The values <ph id="ph1">`DT_CALCRECT`</ph>, <ph id="ph2">`DT_EXTERNALLEADING`</ph>, <bpt id="p1">**</bpt>DT_INTERNAL<ept id="p1">**</ept>, <ph id="ph3">`DT_NOCLIP`</ph>, and <ph id="ph4">`DT_NOPREFIX`</ph> cannot be used with the <ph id="ph5">`DT_TABSTOP`</ph> value.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>DRAWTEXTPARAMS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162500)</ept> structure that specifies additional formatting options.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>It formats text by expanding tabs into appropriate spaces, aligning text to the left, right, or center of the given rectangle, and breaking text into lines that fit within the given rectangle.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The type of formatting is specified by <ph id="ph1">`nFormat`</ph> and <ph id="ph2">`lpDTParams`</ph>.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CDC::DrawText<ept id="p1">](#cdc__drawtext)</ept> and <bpt id="p2">[</bpt>DrawTextEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162499)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>The text color may be set by <bpt id="p1">[</bpt>CDC::SetTextColor<ept id="p1">](#cdc__settextcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__ellipse"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Ellipse</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Draws an ellipse.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the ellipse's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the ellipse's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the ellipse's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the ellipse's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Specifies the ellipse's bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>The center of the ellipse is the center of the bounding rectangle specified by <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph>, or <ph id="ph5">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>The ellipse is drawn with the current pen, and its interior is filled with the current brush.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The figure drawn by this function extends up to, but does not include, the right and bottom coordinates.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>This means that the height of the figure is <ph id="ph1">`y2`</ph> – <ph id="ph2">`y1`</ph> and the width of the figure is <ph id="ph3">`x2`</ph> – <ph id="ph4">`x1`</ph>.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>If either the width or the height of the bounding rectangle is 0, no ellipse is drawn.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__enddoc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::EndDoc</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Ends a print job started by a call to the <bpt id="p1">[</bpt>StartDoc<ept id="p1">](#cdc__startdoc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>Greater than or equal to 0 if the function is successful, or a negative value if an error occurred.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>This member function replaces the <bpt id="p1">**</bpt>ENDDOC<ept id="p1">**</ept> printer escape, and should be called immediately after finishing a successful print job.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>If an application encounters a printing error or a canceled print operation, it must not attempt to terminate the operation by using either <ph id="ph1">`EndDoc`</ph> or <bpt id="p1">[</bpt>AbortDoc<ept id="p1">](#cdc__abortdoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>GDI automatically terminates the operation before returning the error value.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>This function should not be used inside metafiles.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__endpage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::EndPage</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Informs the device that the application has finished writing to a page.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Greater than or equal to 0 if the function is successful, or a negative value if an error occurred.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>This member function is typically used to direct the device driver to advance to a new page.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>This member function replaces the <bpt id="p1">**</bpt>NEWFRAME<ept id="p1">**</ept> printer escape.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">**</bpt>NEWFRAME<ept id="p1">**</ept>, this function is always called after printing a page.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__endpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::EndPath</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Closes a path bracket and selects the path defined by the bracket into the device context.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept>.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__enumobjects"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::EnumObjects</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Enumerates the pens and brushes available in a device context.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nObjectType<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Specifies the object type.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>It can have the values <bpt id="p1">**</bpt>OBJ_BRUSH<ept id="p1">**</ept> or <bpt id="p2">**</bpt>OBJ_PEN<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Is the procedure-instance address of the application-supplied callback function.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>See the "Remarks" section below.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Points to the application-supplied data.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>The data is passed to the callback function along with the object information.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Specifies the last value returned by the <bpt id="p1">[</bpt>callback function<ept id="p1">](../../mfc/reference/callback-function-for-cdc-enumobjects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Its meaning is user-defined.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>For each object of a given type, the callback function that you pass is called with the information for that object.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>The system calls the callback function until there are no more objects or the callback function returns 0.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Note that new features of Microsoft Visual C++ let you use an ordinary function as the function passed to <ph id="ph1">`EnumObjects`</ph>.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>The address passed to <ph id="ph1">`EnumObjects`</ph> is a pointer to a function exported with <bpt id="p1">**</bpt>EXPORT<ept id="p1">**</ept> and with the Pascal calling convention.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>In protect-mode applications, you do not have to create this function with the Windows                         MakeProcInstance function or free the function after use with the FreeProcInstance Windows function.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>You also do not have to export the function name in an <bpt id="p1">**</bpt>EXPORTS<ept id="p1">**</ept> statement in your application's module-definition file.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>You can instead use the <bpt id="p1">**</bpt>EXPORT<ept id="p1">**</ept> function modifier, as in</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>int CALLBACK EXPORT<ept id="p1">**</ept> AFunction <bpt id="p2">**</bpt>(LPSTR<ept id="p2">**</ept>, <bpt id="p3">**</bpt>LPSTR);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>to cause the compiler to emit the proper export record for export by name without aliasing.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>This works for most needs.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>For some special cases, such as exporting a function by ordinal or aliasing the export, you still need to use an <bpt id="p1">**</bpt>EXPORTS<ept id="p1">**</ept> statement in a module-definition file.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>For compiling Microsoft Foundation programs, you will normally use the /GA and /GEs compiler options.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>The /Gw compiler option is not used with the Microsoft Foundation classes.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>(If you do use the Windows function <bpt id="p1">**</bpt>MakeProcInstance<ept id="p1">**</ept>, you will need to explicitly cast the returned function pointer from <bpt id="p2">**</bpt>FARPROC<ept id="p2">**</ept> to the type needed in this API.) Callback registration interfaces are now type-safe (you must pass in a function pointer that points to the right kind of function for the specific callback).</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>Also note that all callback functions must trap Microsoft Foundation exceptions before returning to Windows, since exceptions cannot be thrown across callback boundaries.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>For more information about exceptions, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#35<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__escape"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Escape</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>This member function is practically obsolete for Win32 programming.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Specifies the escape function to be performed.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>For a complete list of escape functions, see <bpt id="p1">[</bpt>Escape<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162701)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes of data pointed to by <ph id="ph1">`lpszInData`</ph>.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Points to the input data structure required for this escape.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Points to the structure that is to receive output from this escape.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpOutData`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no data is returned.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes of data pointed to by the <ph id="ph1">`lpszInputData`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Points to the input structure required for the specified escape.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes of data pointed to by the <ph id="ph1">`lpszOutputData`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>Points to the structure that receives output from this escape.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>This parameter should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no data is returned.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>A positive value is returned if the function is successful, except for the <bpt id="p1">**</bpt>QUERYESCSUPPORT<ept id="p1">**</ept> escape, which only checks for implementation.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Zero is returned if the escape is not implemented.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>A negative value is returned if an error occurred.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The following are common error values:</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_ERROR<ept id="p1">**</ept> General error.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFDISK<ept id="p1">**</ept> Not enough disk space is currently available for spooling, and no more space will become available.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFMEMORY<ept id="p1">**</ept> Not enough memory is available for spooling.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_USERABORT<ept id="p1">**</ept> User ended the job through the Print Manager.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Of the original printer escapes, only <bpt id="p1">**</bpt>QUERYESCSUPPORT<ept id="p1">**</ept> is supported for Win32 applications.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>All other printer escapes are obsolete and are supported only for compatibility with 16-bit applications.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>For Win32 programming, <ph id="ph1">`CDC`</ph> now provides six member functions that supersede their corresponding printer escapes:</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::AbortDoc<ept id="p1">](#cdc__abortdoc)</ept></source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EndDoc<ept id="p1">](#cdc__enddoc)</ept></source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::EndPage<ept id="p1">](#cdc__endpage)</ept></source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::SetAbortProc<ept id="p1">](#cdc__setabortproc)</ept></source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept></source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDC::StartPage<ept id="p1">](#cdc__startpage)</ept></source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>In addition, <bpt id="p1">[</bpt>CDC::GetDeviceCaps<ept id="p1">](#cdc__getdevicecaps)</ept> supports Win32 indexes that supersede other printer escapes.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>GetDeviceCaps<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144877)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>This member function allows applications to access facilities of a particular device that are not directly available through GDI.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Use the first version if your application uses predefined escape values.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Use the second version if your application defines private escape values.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ExtEscape<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162708)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about the second version.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__excludecliprect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ExcludeClipRect</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Specifies the rectangle.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>Can also be a <ph id="ph1">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>Specifies the new clipping region's type.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> The region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> No region was created.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> The region is empty.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> The region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>The width of the rectangle, specified by the absolute value of <ph id="ph1">`x2`</ph> – <ph id="ph2">`x1`</ph>, must not exceed 32,767 units.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>This limit applies to the height of the rectangle as well.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__excludeupdatergn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ExcludeUpdateRgn</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Prevents drawing within invalid areas of a window by excluding an updated region in the window from the clipping region associated with the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Points to the window object whose window is being updated.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>The type of excluded region.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> The region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> No region was created.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> The region is empty.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> The region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__extfloodfill"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ExtFloodFill</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Fills an area of the display surface with the current brush.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point where filling begins.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point where filling begins.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Specifies the color of the boundary or of the area to be filled.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>The interpretation of <ph id="ph1">`crColor`</ph> depends on the value of <ph id="ph2">`nFillType`</ph>.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Specifies the type of flood fill to be performed.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>It must be either of the following values:</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FLOODFILLBORDER<ept id="p1">**</ept> The fill area is bounded by the color specified by <ph id="ph1">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>This style is identical to the filling performed by <ph id="ph1">`FloodFill`</ph>.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FLOODFILLSURFACE<ept id="p1">**</ept> The fill area is defined by the color specified by <ph id="ph1">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Filling continues outward in all directions as long as the color is encountered.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>This style is useful for filling areas with multicolored boundaries.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0 if the filling could not be completed, if the given point has the boundary color specified by <ph id="ph1">`crColor`</ph> (if <bpt id="p1">**</bpt>FLOODFILLBORDER<ept id="p1">**</ept> was requested), if the given point does not have the color specified by <ph id="ph2">`crColor`</ph> (if <bpt id="p2">**</bpt>FLOODFILLSURFACE<ept id="p2">**</ept> was requested), or if the point is outside the clipping region.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>This member function offers more flexibility than <ph id="ph1">`FloodFill`</ph> because you can specify a fill type in <ph id="ph2">`nFillType`</ph>.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFillType`</ph> is set to <bpt id="p1">**</bpt>FLOODFILLBORDER<ept id="p1">**</ept>, the area is assumed to be completely bounded by the color specified by <ph id="ph2">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>The function begins at the point specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> and fills in all directions to the color boundary.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFillType`</ph> is set to <bpt id="p1">**</bpt>FLOODFILLSURFACE<ept id="p1">**</ept>, the function begins at the point specified by <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> and continues in all directions, filling all adjacent areas containing the color specified by <ph id="ph2">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Only memory-device contexts and devices that support raster-display technology support <ph id="ph1">`ExtFloodFill`</ph>.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>GetDeviceCaps<ept id="p1">](#cdc__getdevicecaps)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__exttextout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ExtTextOut</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>Call this member function to write a character string within a rectangular region using the currently selected font.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the character cell for the first character in the specified string.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the top of the character cell for the first character in the specified string.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Specifies the rectangle type.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>This parameter can be one, both, or neither of the following values:</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ETO_CLIPPED<ept id="p1">**</ept> Specifies that text is clipped to the rectangle.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ETO_OPAQUE<ept id="p1">**</ept> Specifies that the current background color fills the rectangle.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>(You can set and query the current background color with the <bpt id="p1">[</bpt>SetBkColor<ept id="p1">](#cdc__setbkcolor)</ept> and <bpt id="p2">[</bpt>GetBkColor<ept id="p2">](#cdc__getbkcolor)</ept> member functions.)</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure that determines the dimensions of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>Points to the specified character string to be drawn.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Points to an array of values that indicate the distance between origins of adjacent character cells.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>For instance, <ph id="ph1">`lpDxWidths`</ph>[ <bpt id="p1">*</bpt>i<ept id="p1">*</ept>] logical units will separate the origins of character cell <bpt id="p2">*</bpt>i<ept id="p2">*</ept> and character cell <bpt id="p3">*</bpt>i<ept id="p3">*</ept> + 1.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpDxWidths`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`ExtTextOut`</ph> uses the default spacing between characters.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters to be drawn.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>The rectangular region can be opaque (filled with the current background color), and it can be a clipping region.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nOptions`</ph> is 0 and <ph id="ph2">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function writes text to the device context without using a rectangular region.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>By default, the current position is not used or updated by the function.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>If an application needs to update the current position when it calls <ph id="ph1">`ExtTextOut`</ph>, the application can call the <ph id="ph2">`CDC`</ph> member function <bpt id="p1">[</bpt>SetTextAlign<ept id="p1">](#cdc__settextalign)</ept> with <ph id="ph3">`nFlags`</ph> set to <bpt id="p2">**</bpt>TA_UPDATECP<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>When this flag is set, Windows ignores <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> on subsequent calls to <ph id="ph1">`ExtTextOut`</ph> and uses the current position instead.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>When an application uses <bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept> to update the current position, <ph id="ph1">`ExtTextOut`</ph> sets the current position either to the end of the previous line of text or to the position specified by the last element of the array pointed to by <ph id="ph2">`lpDxWidths`</ph>, whichever is greater.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__fillpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FillPath</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>Closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>After its interior is filled, the path is discarded from the device context.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__fillrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FillRect</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Call this member function to fill a given rectangle using the specified brush.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure that contains the logical coordinates of the rectangle to be filled.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Identifies the brush used to fill the rectangle.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>The function fills the complete rectangle, including the left and top borders, but it does not fill the right and bottom borders.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>The brush needs to either be created using the <bpt id="p1">[</bpt>CBrush<ept id="p1">](../../mfc/reference/cbrush-class.md)</ept> member functions <bpt id="p2">[</bpt>CreateHatchBrush<ept id="p2">](../../mfc/reference/cbrush-class.md#cbrush__createhatchbrush)</ept>, <bpt id="p3">[</bpt>CreatePatternBrush<ept id="p3">](../../mfc/reference/cbrush-class.md#cbrush__createpatternbrush)</ept>, and <bpt id="p4">[</bpt>CreateSolidBrush<ept id="p4">](../../mfc/reference/cbrush-class.md#cbrush__createsolidbrush)</ept>, or retrieved by the <ph id="ph1">`GetStockObject`</ph> Windows function.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>When filling the specified rectangle, <ph id="ph1">`FillRect`</ph> does not include the rectangle's right and bottom sides.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>GDI fills a rectangle up to, but does not include, the right column and bottom row, regardless of the current mapping mode.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillRect`</ph> compares the values of the <bpt id="p1">**</bpt>top<ept id="p1">**</ept>, <bpt id="p2">**</bpt>bottom<ept id="p2">**</ept>, <bpt id="p3">**</bpt>left<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>right<ept id="p4">**</ept> members of the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>bottom<ept id="p1">**</ept> is less than or equal to <bpt id="p2">**</bpt>top<ept id="p2">**</ept>, or if <bpt id="p3">**</bpt>right<ept id="p3">**</ept> is less than or equal to <bpt id="p4">**</bpt>left<ept id="p4">**</ept>, the rectangle is not drawn.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillRect`</ph> is similar to <bpt id="p1">[</bpt>CDC::FillSolidRect<ept id="p1">](#cdc__fillsolidrect)</ept>; however, <ph id="ph2">`FillRect`</ph> takes a brush and therefore can be used to fill a rectangle with a solid color, a dithered color, hatched brushes, or a pattern.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillSolidRect`</ph> uses only solid colors (indicated by a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> parameter).</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillRect`</ph> usually is slower than <ph id="ph2">`FillSolidRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__fillrgn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FillRgn</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Fills the region specified by <ph id="ph1">`pRgn`</ph> with the brush specified by <ph id="ph2">`pBrush`</ph>.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>A pointer to the region to be filled.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>The coordinates for the given region are specified in logical units.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Identifies the brush to be used to fill the region.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>The brush must either be created using the <ph id="ph1">`CBrush`</ph> member functions <ph id="ph2">`CreateHatchBrush`</ph>, <ph id="ph3">`CreatePatternBrush`</ph>, <ph id="ph4">`CreateSolidBrush`</ph>, or be retrieved by <bpt id="p1">**</bpt>GetStockObject<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreateRoundRectRgn<ept id="p1">](../../mfc/reference/crgn-class.md#crgn__createroundrectrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__fillsolidrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FillSolidRect</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>Call this member function to fill the given rectangle with the specified solid color.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>You can pass either a pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> data structure or a <ph id="ph1">`CRect`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`clr`</ph> Specifies the color to be used to fill the rectangle.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>Specifies the width of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>Specifies the height of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillSolidRect`</ph> is very similar to <bpt id="p1">[</bpt>CDC::FillRect<ept id="p1">](#cdc__fillrect)</ept>; however, <ph id="ph2">`FillSolidRect`</ph> uses only solid colors (indicated by the <bpt id="p2">**</bpt>COLORREF<ept id="p2">**</ept> parameter), while <ph id="ph3">`FillRect`</ph> takes a brush and therefore can be used to fill a rectangle with a solid color, a dithered color, hatched brushes, or a pattern.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FillSolidRect`</ph> usually is faster than <ph id="ph2">`FillRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`FillSolidRect`</ph>, the background color, which was previously set using <bpt id="p1">[</bpt>SetBkColor<ept id="p1">](#cdc__setbkcolor)</ept>, is set to the color indicated by <ph id="ph2">`clr`</ph>.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__flattenpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FlattenPath</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Transforms any curves in the path selected into the current device context, and turns each curve into a sequence of lines.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__floodfill"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FloodFill</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Fills an area of the display surface with the current brush.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point where filling begins.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point where filling begins.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Specifies the color of the boundary.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0 is returned if the filling could not be completed, the given point has the boundary color specified by <ph id="ph1">`crColor`</ph>, or the point is outside the clipping region.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>The area is assumed to be bounded as specified by <ph id="ph1">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FloodFill`</ph> function begins at the point specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> and continues in all directions to the color boundary.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>Only memory-device contexts and devices that support raster-display technology support the <ph id="ph1">`FloodFill`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>For information about <bpt id="p1">**</bpt>RC_BITBLT<ept id="p1">**</ept> capability, see the <ph id="ph1">`GetDeviceCaps`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ExtFloodFill`</ph> function provides similar capability but greater flexibility.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__framerect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FrameRect</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Draws a border around the rectangle specified by <ph id="ph1">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the logical coordinates of the upper-left and lower-right corners of the rectangle.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>You can also pass a <ph id="ph1">`CRect`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Identifies the brush to be used for framing the rectangle.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>The function uses the given brush to draw the border.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>The width and height of the border is always 1 logical unit.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>If the rectangle's <bpt id="p1">**</bpt>bottom<ept id="p1">**</ept> coordinate is less than or equal to <bpt id="p2">**</bpt>top<ept id="p2">**</ept>, or if <bpt id="p3">**</bpt>right<ept id="p3">**</ept> is less than or equal to <bpt id="p4">**</bpt>left<ept id="p4">**</ept>, the rectangle is not drawn.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>The border drawn by <ph id="ph1">`FrameRect`</ph> is in the same position as a border drawn by the <bpt id="p1">**</bpt>Rectangle<ept id="p1">**</ept> member function using the same coordinates (if <bpt id="p2">**</bpt>Rectangle<ept id="p2">**</ept> uses a pen that is 1 logical unit wide).</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>The interior of the rectangle is not filled by <ph id="ph1">`FrameRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__framergn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FrameRgn</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>Draws a border around the region specified by <ph id="ph1">`pRgn`</ph> using the brush specified by <ph id="ph2">`pBrush`</ph>.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`CRgn`</ph> object that identifies the region to be enclosed in a border.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>The coordinates for the given region are specified in logical units.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`CBrush`</ph> object that identifies the brush to be used to draw the border.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>Specifies the width of the border in vertical brush strokes in device units.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>Specifies the height of the border in horizontal brush strokes in device units.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CombineRgn<ept id="p1">](../../mfc/reference/crgn-class.md#crgn__combinergn)</ept>.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__fromhandle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::FromHandle</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CDC`</ph> object when given a handle to a device context.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>Contains a handle to a Windows device context.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored beyond immediate use.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CDC`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CDC`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CPrintDialog::GetPrinterDC<ept id="p1">](../../mfc/reference/cprintdialog-class.md#cprintdialog__getprinterdc)</ept>.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getarcdirection"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetArcDirection</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Returns the current arc direction for the device context.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Specifies the current arc direction, if successful.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Following are the valid return values:</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AD_COUNTERCLOCKWISE<ept id="p1">**</ept> Arcs and rectangles drawn counterclockwise.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AD_CLOCKWISE<ept id="p1">**</ept> Arcs and rectangles drawn clockwise.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>If an error occurs, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>Arc and rectangle functions use the arc direction.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getaspectratiofilter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetAspectRatioFilter</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>Retrieves the setting for the current aspect-ratio filter.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object representing the aspect ratio used by the current aspect ratio filter.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>The aspect ratio is the ratio formed by a device's pixel width and height.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>Information about a device's aspect ratio is used in the creation, selection, and display of fonts.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Windows provides a special filter, the aspect-ratio filter, to select fonts designed for a particular aspect ratio from all of the available fonts.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>The filter uses the aspect ratio specified by the <ph id="ph1">`SetMapperFlags`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getbkcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetBkColor</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Returns the current background color.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>An RGB color value.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>If the background mode is <bpt id="p1">**</bpt>OPAQUE<ept id="p1">**</ept>, the system uses the background color to fill the gaps in styled lines, the gaps between hatched lines in brushes, and the background in character cells.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>The system also uses the background color when converting bitmaps between color and monochrome device contexts.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getbkmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetBkMode</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>Returns the background mode.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>The current background mode, which can be <bpt id="p1">**</bpt>OPAQUE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>TRANSPARENT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>The background mode defines whether the system removes existing background colors on the drawing surface before drawing text, hatched brushes, or any pen style that is not a solid line.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getboundsrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetBoundsRect</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Returns the current accumulated bounding rectangle for the specified device context.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the current bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The rectangle is returned in logical coordinates.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>Specifies whether the bounding rectangle is to be cleared after it is returned.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>This parameter should be  zero or set to the following value:</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_RESET<ept id="p1">**</ept> Forces the bounding rectangle to be cleared after it is returned.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>Specifies the current state of the bounding rectangle if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>It can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ACCUMULATE<ept id="p1">**</ept> Bounding rectangle accumulation is occurring.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_RESET<ept id="p1">**</ept> Bounding rectangle is empty.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_SET<ept id="p1">**</ept> Bounding rectangle is not empty.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ENABLE<ept id="p1">**</ept> Bounding accumulation is on.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_DISABLE<ept id="p1">**</ept> Bounding accumulation is off.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getbrushorg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetBrushOrg</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Retrieves the origin (in device units) of the brush currently selected for the device context.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>The current origin of the brush (in device units) as a <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>The initial brush origin is at (0,0) of the client area.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>The return value specifies this point in device units relative to the origin of the desktop window.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcharacterplacement"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCharacterPlacement</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>Retrieves various types of information on a character string.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>A pointer to the character string to process.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>Specifies the length of the string.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>For the ANSI version, it is a BYTE count and for the Unicode function it is a WORD count.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>GetCharacterPlacement<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144860\(v=vs.85\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Specifies the maximum extent (in logical units) to which the string is processed.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>Characters that, if processed, would exceed this extent are ignored.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>Computations for any required ordering or glyph arrays apply only to the included characters.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>This parameter is used only if the GCP_MAXEXTENT value is specified in the <ph id="ph1">`dwFlags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>Once the limit is reached, processing will stop.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>lpResults</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>GCP_Results<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144842\(v=vs.85\).aspx)</ept> structure that receives the results of the function.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>Specifies how to process the string into the required arrays.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of the values listed in the <ph id="ph1">`dwFlags`</ph> section of the <bpt id="p1">[</bpt>GetCharacterPlacement<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144860\(v=vs.85\).aspx)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object to process.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is the width and height of the string in logical units.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetCharacterPlacement<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144860\(v=vs.85\).aspx)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcharabcwidths"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCharABCWidths</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>Retrieves the widths of consecutive characters in a specified range from the current TrueType font.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>Specifies the first character in the range of characters from the current font for which character widths are returned.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>Specifies the last character in the range of characters from the current font for which character widths are returned.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>ABC<ept id="p1">](../../mfc/reference/abc-structure.md)</ept> structures that receive the character widths when the function returns.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>This array must contain at least as many <bpt id="p1">**</bpt>ABC<ept id="p1">**</ept> structures as there are characters in the range specified by the <ph id="ph1">`nFirstChar`</ph> and <ph id="ph2">`nLastChar`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpABCF<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Points to an application-supplied buffer with an array of <bpt id="p1">[</bpt>ABCFLOAT<ept id="p1">](../../mfc/reference/abcfloat-structure.md)</ept> structures to receive the character widths when the function returns.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The widths returned by this function are in the IEEE floating-point format.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>The widths are returned in logical units.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>This function succeeds only with TrueType fonts.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>The TrueType rasterizer provides "ABC" character spacing after a specific point size has been selected.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>"A" spacing is the distance that is added to the current position before placing the glyph.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>"B" spacing is the width of the black part of the glyph.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>"C" spacing is added to the current position to account for the white space to the right of the glyph.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>The total advanced width is given by A + B + C.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`GetCharABCWidths`</ph> member function retrieves negative "A" or "C" widths for a character, that character includes underhangs or overhangs.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>To convert the ABC widths to font design units, an application should create a font whose height (as specified in the <bpt id="p1">**</bpt>lfHeight<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>LOGFONT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145037)</ept> structure) is equal to the value stored in the <bpt id="p3">**</bpt>ntmSizeEM<ept id="p3">**</ept> member of the <bpt id="p4">[</bpt>NEWTEXTMETRIC<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/dd162741)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>(The value of the <bpt id="p1">**</bpt>ntmSizeEM<ept id="p1">**</ept> member can be retrieved by calling the <bpt id="p2">[</bpt>EnumFontFamilies<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162619)</ept> Windows function.)</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>The ABC widths of the default character are used for characters that are outside the range of the currently selected font.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>To retrieve the widths of characters in non-TrueType fonts, applications should use the <bpt id="p1">[</bpt>GetCharWidth<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144861)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcharabcwidthsi"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCharABCWidthsI</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>Retrieves the widths, in logical units, of consecutive glyph indices in a specified range from the current TrueType font.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>Specifies the first glyph index in the group of consecutive glyph indices from the current font.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>This parameter is only used if the <ph id="ph1">`pgi`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>Specifies the number of glyph indices.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>A pointer to an array containing glyph indices.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>If the value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the <ph id="ph1">`giFirst`</ph> parameter is used instead.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cgi`</ph> parameter specifies the number of glyph indices in this array.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>Pointer to an array of <bpt id="p1">[</bpt>ABC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162454)</ept> structures receiving the character widths.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>This array must contain at least as many <bpt id="p1">**</bpt>ABC<ept id="p1">**</ept> structures as there are glyph indices specified by the <ph id="ph1">`cgi`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetCharABCWidthsI<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144859)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcharwidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCharWidth</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>Retrieves the widths of individual characters in a consecutive group of characters from the current font, using <ph id="ph1">`m_hAttribDC`</ph>, the input device context.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>Specifies the first character in a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>Specifies the last character in a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the width values for a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpFloatBuffer<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>Points to a buffer to receive the character widths.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>The returned widths are in the 32-bit IEEE floating-point format.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>(The widths are measured along the base line of the characters.)</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`nFirstChar`</ph> identifies the letter 'a' and <ph id="ph2">`nLastChar`</ph> identifies the letter 'z', the function retrieves the widths of all lowercase characters.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>The function stores the values in the buffer pointed to by <ph id="ph1">`lpBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>This buffer must be large enough to hold all of the widths.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>That is, there must be at least 26 entries in the example given.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>If a character in the consecutive group of characters does not exist in a particular font, it will be assigned the width value of the default character.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcharwidthi"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCharWidthI</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>Retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range from the current font.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>Specifies the first glyph index in the group of consecutive glyph indices from the current font.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>This parameter is only used if the <ph id="ph1">`pgi`</ph> parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Specifies the number of glyph indices.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>A pointer to an array containing glyph indices.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>If the value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the <ph id="ph1">`giFirst`</ph> parameter is used instead.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cgi`</ph> parameter specifies the number of glyph indices in this array.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>A pointer to a buffer that receives the widths.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetCharWidthI<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144864)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getclipbox"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetClipBox</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>Retrieves the dimensions of the tightest bounding rectangle around the current clipping boundary.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that is to receive the rectangle dimensions.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>The clipping region's type.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> Clipping region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Device context is not valid.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> Clipping region is empty.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> Clipping region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>The dimensions are copied to the buffer pointed to by <ph id="ph1">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcoloradjustment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetColorAdjustment</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Retrieves the color adjustment values for the device context.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>COLORADJUSTMENT<ept id="p1">](../../mfc/reference/coloradjustment-structure.md)</ept> data structure to receive the color adjustment values.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentbitmap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentBitmap</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CBitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CBitmap`</ph> object, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>This member function may return temporary objects.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentbrush"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentBrush</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CBrush`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CBrush`</ph> object, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>This member function may return temporary objects.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentFont</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CFont`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CFont`</ph> object, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>This member function may return temporary objects.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentpalette"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentPalette</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CPalette`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CPalette`</ph> object, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>This member function may return temporary objects.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentpen"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentPen</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the currently selected <ph id="ph1">`CPen`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CPen`</ph> object, if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>This member function may return temporary objects.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getcurrentposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetCurrentPosition</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Retrieves the current position (in logical coordinates).</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>The current position as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>The current position can be set with the <ph id="ph1">`MoveTo`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getdcbrushcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetDCBrushColor</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>Retrieves the current brush color.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is the <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value for the current brush color.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is <bpt id="p1">**</bpt>CLR_INVALID<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetDCBrushColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144872)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getdcpencolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetDCPenColor</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>Retrieves the current pen color.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is the <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value for the current pen color.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is <bpt id="p1">**</bpt>CLR_INVALID<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>This member function utilizes the Win32 function <bpt id="p1">[</bpt>GetDCPenColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144875)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getdevicecaps"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetDeviceCaps</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>Retrieves a wide range of device-specific information about the display device.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>Specifies the type of information to return.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>GetDeviceCaps<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144877)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of values.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>The value of the requested capability if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CPrintDialog::GetDefaults<ept id="p1">](../../mfc/reference/cprintdialog-class.md#cprintdialog__getdefaults)</ept>.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getfontdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetFontData</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>Retrieves font-metric information from a scalable font file.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Specifies the name of the metric table to be returned.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the metric tables documented in the TrueType Font Files specification published by Microsoft Corporation.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the information is retrieved starting at the beginning of the font file.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Specifies the offset from the beginning of the table at which to begin retrieving information.</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the information is retrieved starting at the beginning of the table specified by the <ph id="ph1">`dwTable`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>If this value is greater than or equal to the size of the table, <ph id="ph1">`GetFontData`</ph> returns 0.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the font information.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>If this value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns the size of the buffer required for the font data specified in the <ph id="ph1">`dwTable`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>Specifies the length, in bytes, of the information to be retrieved.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, <ph id="ph1">`GetFontData`</ph> returns the size of the data specified in the <ph id="ph2">`dwTable`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes returned in the buffer pointed to by <ph id="ph1">`lpData`</ph> if the function is successful; otherwise –1.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>The information to retrieve is identified by specifying an offset into the font file and the length of the information to return.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>An application can sometimes use the <ph id="ph1">`GetFontData`</ph> member function to save a TrueType font with a document.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>To do this, the application determines whether the font can be embedded and then retrieves the entire font file, specifying 0 for the <ph id="ph1">`dwTable`</ph>, <ph id="ph2">`dwOffset`</ph>, and <ph id="ph3">`cbData`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>Applications can determine whether a font can be embedded by checking the <bpt id="p1">**</bpt>otmfsType<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>OUTLINETEXTMETRIC<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162755)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>If bit 1 of <bpt id="p1">**</bpt>otmfsType<ept id="p1">**</ept> is set, embedding is not permitted for the font.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>If bit 1 is clear, the font can be embedded.</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>If bit 2 is set, the embedding is read only.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>If an application attempts to use this function to retrieve information for a non-TrueType font, the <ph id="ph1">`GetFontData`</ph> member function returns –1.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getfontlanguageinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetFontLanguageInfo</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>Returns information about the currently selected font for the specified display context.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>The return value identifies characteristics of the currently selected font.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>For a complete listing of possible values, see <bpt id="p1">[</bpt>GetFontLanguageInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144886)</ept>.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetFontLanguageInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144886)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getglyphoutline"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetGlyphOutline</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>Retrieves the outline curve or bitmap for an outline character in the current font.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Specifies the character for which information is to be returned.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Specifies the format in which the function is to return information.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>It can be one of the following values, or 0:</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GGO_BITMAP<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>Returns the glyph bitmap.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>When the function returns, the buffer pointed to by <ph id="ph1">`lpBuffer`</ph> contains a 1-bit-per-pixel bitmap whose rows start on doubleword boundaries.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GGO_NATIVE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>Returns the curve data points in the rasterizer's native format, using device units.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>When this value is specified, any transformation specified in <ph id="ph1">`lpmat2`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>When the value of <ph id="ph1">`nFormat`</ph> is 0, the function fills in a <bpt id="p1">[</bpt>GLYPHMETRICS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144955)</ept> structure but does not return glyph-outline data.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpgm<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">**</bpt>GLYPHMETRICS<ept id="p1">**</ept> structure that describes the placement of the glyph in the character cell.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>Specifies the size of the buffer into which the function copies information about the outline character.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>If this value is 0 and the <ph id="ph1">`nFormat`</ph> parameter is either the <bpt id="p1">**</bpt>GGO_BITMAP<ept id="p1">**</ept> or <bpt id="p2">**</bpt>GGO_NATIVE<ept id="p2">**</ept> values, the function returns the required size of the buffer.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>Points to a buffer into which the function copies information about the outline character.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFormat`</ph> specifies the <bpt id="p1">**</bpt>GGO_NATIVE<ept id="p1">**</ept> value, the information is copied in the form of <bpt id="p2">**</bpt>TTPOLYGONHEADER<ept id="p2">**</ept> and <bpt id="p3">**</bpt>TTPOLYCURVE<ept id="p3">**</ept> structures.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>If this value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> and <ph id="ph1">`nFormat`</ph> is either the <bpt id="p2">**</bpt>GGO_BITMAP<ept id="p2">**</ept> or <bpt id="p3">**</bpt>GGO_NATIVE<ept id="p3">**</ept> value, the function returns the required size of the buffer.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>MAT2<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145048)</ept> structure that contains a transformation matrix for the character.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>This parameter cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, even when the <bpt id="p2">**</bpt>GGO_NATIVE<ept id="p2">**</ept> value is specified for <ph id="ph1">`nFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the buffer required for the retrieved information if <ph id="ph1">`cbBuffer`</ph> is 0 or <ph id="ph2">`lpBuffer`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>Otherwise, it is a positive value if the function is successful, or –1 if there is an error.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>An application can rotate characters retrieved in bitmap format by specifying a 2-by-2 transformation matrix in the structure pointed to by <ph id="ph1">`lpmat2`</ph>.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>A glyph outline is returned as a series of contours.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>Each contour is defined by a <bpt id="p1">[</bpt>TTPOLYGONHEADER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145158)</ept> structure followed by as many <bpt id="p2">**</bpt>TTPOLYCURVE<ept id="p2">**</ept> structures as are required to describe it.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>All points are returned as <bpt id="p1">[</bpt>POINTFX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162806)</ept> structures and represent absolute positions, not relative moves.</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>The starting point given by the <bpt id="p1">**</bpt>pfxStart<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>TTPOLYGONHEADER<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145158)</ept> structure is the point at which the outline for a contour begins.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TTPOLYCURVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145157)</ept> structures that follow can be either polyline records or spline records.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>Polyline records are a series of points; lines drawn between the points describe the outline of the character.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>Spline records represent the quadratic curves used by TrueType (that is, quadratic b-splines).</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getgraphicsmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetGraphicsMode</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>Retrieves the current graphics mode for the specified device context.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>Returns the current graphics mode on success.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>For a list of the values that this method can return, see <bpt id="p1">[</bpt>GetGraphicsMode<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144892)</ept>.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>Returns 0 on failure.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>This method wraps the Windows GDI function <bpt id="p1">[</bpt>GetGraphicsMode<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144892)</ept>.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gethalftonebrush"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetHalftoneBrush</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve a halftone brush.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CBrush`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>A halftone brush shows pixels that are alternately foreground and background colors to create a dithered pattern.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>The following is an example of a dithered pattern created by a halftone brush.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Detail of a dithered pen stroke<ept id="p1">]</ept><bpt id="p2">(../../mfc/reference/media/vc318s1.gif "</bpt>vc318s1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getkerningpairs"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetKerningPairs</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>Retrieves the character kerning pairs for the font that is currently selected in the specified device context.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>Specifies the number of <bpt id="p1">[</bpt>KERNINGPAIR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145024)</ept> structures pointed to by <ph id="ph1">`lpkrnpair`</ph>.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>The function will not copy more kerning pairs than specified by <ph id="ph1">`nPairs`</ph>.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">**</bpt>KERNINGPAIR<ept id="p1">**</ept> structures that receive the kerning pairs when the function returns.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>This array must contain at least as many structures as specified by <ph id="ph1">`nPairs`</ph>.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns the total number of kerning pairs for the font.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>Specifies the number of kerning pairs retrieved or the total number of kerning pairs in the font, if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>Zero is returned if the function fails or there are no kerning pairs for the font.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getlayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetLayout</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the layout of the text and graphics for a device context, such as a printer or a metafile.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>If successful, the layout flags for the current device context.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>GDI_ERROR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>For extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>For a list of the layout flags, see <bpt id="p1">[</bpt>CDC::SetLayout<ept id="p1">](#cdc__setlayout)</ept>.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>The default layout is left to right.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getmapmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetMapMode</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>Retrieves the current mapping mode.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>The mapping mode.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>For a description of the mapping modes, see the <ph id="ph1">`SetMapMode`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>SetLayout<ept id="p1">](#cdc__setlayout)</ept> to change the DC to right-to-left layout, <bpt id="p2">**</bpt>SetLayout<ept id="p2">**</ept> automatically changes the mapping mode to <ph id="ph1">`MM_ISOTROPIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>Consequently, any subsequent call to <ph id="ph1">`GetMapMode`</ph> will return <ph id="ph2">`MM_ISOTROPIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getmiterlimit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetMiterLimit</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>Returns the miter limit for the device context.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>The miter limit is used when drawing geometric lines that have miter joins.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getnearestcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetNearestColor</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>Returns the solid color that best matches a specified logical color.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>Specifies the color to be matched.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>An RGB (red, green, blue) color value that defines the solid color closest to the <ph id="ph1">`crColor`</ph> value that the device can represent.</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source>The given device must be able to represent this color.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getoutlinetextmetrics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetOutlineTextMetrics</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source>Retrieves metric information for TrueType fonts.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>OUTLINETEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162755)</ept> structures.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns the size of the buffer required for the retrieved metric data.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>Specifies the size, in bytes, of the buffer to which information is returned.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Points to an <bpt id="p1">**</bpt>OUTLINETEXTMETRIC<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns the size of the buffer required for the retrieved metric information.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>OUTLINETEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162755)</ept> structure contains most of the font metric information provided with the TrueType format, including a <bpt id="p2">[</bpt>TEXTMETRIC<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>The last four members of the <bpt id="p1">**</bpt>OUTLINETEXTMETRIC<ept id="p1">**</ept> structure are pointers to strings.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>Applications should allocate space for these strings in addition to the space required for the other members.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source>Because there is no system-imposed limit to the size of the strings, the simplest method for allocating memory is to retrieve the required size by specifying <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <ph id="ph1">`lpotm`</ph> in the first call to the <ph id="ph2">`GetOutlineTextMetrics`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getoutputcharwidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetOutputCharWidth</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>Uses the output device context, <ph id="ph1">`m_hDC`</ph>, and retrieves the widths of individual characters in a consecutive group of characters from the current font.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>Specifies the first character in a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>Specifies the last character in a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>Points to a buffer that will receive the width values for a consecutive group of characters in the current font.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`nFirstChar`</ph> identifies the letter 'a' and <ph id="ph2">`nLastChar`</ph> identifies the letter 'z', the function retrieves the widths of all lowercase characters.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>The function stores the values in the buffer pointed to by <ph id="ph1">`lpBuffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>This buffer must be large enough to hold all of the widths; that is, there must be at least 26 entries in the example given.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>If a character in the consecutive group of characters does not exist in a particular font, it will be assigned the width value of the default character.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getoutputtabbedtextextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetOutputTabbedTextExtent</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>Call this member function to compute the width and height of a character string using <bpt id="p1">[</bpt>m_hDC<ept id="p1">](#cdc__m_hdc)</ept>, the output device context.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Points to a character string to be measured.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the length is calculated.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>Specifies the number of tab-stop positions in the array pointed to by <ph id="ph1">`lpnTabStopPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>Points to an array of integers containing the tab-stop positions in logical units.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>Back tabs are not allowed.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters to be measured.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>The dimensions of the string (in logical units) in a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>If the string contains one or more tab characters, the width of the string is based upon the tab stops specified by <ph id="ph1">`lpnTabStopPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>The function uses the currently selected font to compute the dimensions of the string.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>The current clipping region does not offset the width and height returned by the <ph id="ph1">`GetOutputTabbedTextExtent`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>Since some devices do not place characters in regular cell arrays (that is, they kern the characters), the sum of the extents of the characters in a string may not be equal to the extent of the string.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 0 and <ph id="ph2">`lpnTabStopPositions`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, tabs are expanded to eight average character widths.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 1, the tab stops will be separated by the distance specified by the first value in the array to which <ph id="ph2">`lpnTabStopPositions`</ph> points.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpnTabStopPositions`</ph> points to more than a single value, a tab stop is set for each value in the array, up to the number specified by <ph id="ph2">`nTabPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getoutputtextextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetOutputTextExtent</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>Call this member function to use the output device context, <bpt id="p1">[</bpt>m_hDC<ept id="p1">](#cdc__m_hdc)</ept>, and compute the width and height of a line of text, using the current font.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>Points to a string of characters.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the length is calculated.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters to be measured.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>The dimensions of the string (in logical units) returned in a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>The current clipping region does not affect the width and height returned by <ph id="ph1">`GetOutputTextExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>Since some devices do not place characters in regular cell arrays (that is, they carry out kerning), the sum of the extents of the characters in a string may not be equal to the extent of the string.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getoutputtextmetrics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetOutputTextMetrics</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics for the current font using <ph id="ph1">`m_hDC`</ph>, the output device context.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>TEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure that receives the metrics.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetPath</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates defining the endpoints of lines and the control points of curves found in the path that is selected into the device context.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures or <ph id="ph1">`CPoint`</ph> objects where the line endpoints and curve control points are placed.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>Points to an array of bytes where the vertex types are placed.</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Values are one of the following:</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_MOVETO<ept id="p1">**</ept> Specifies that the corresponding point in <ph id="ph1">`lpPoints`</ph> starts a disjoint figure.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_LINETO<ept id="p1">**</ept> Specifies that the previous point and the corresponding point in <ph id="ph1">`lpPoints`</ph> are the endpoints of a line.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> Specifies that the corresponding point in <ph id="ph1">`lpPoints`</ph> is a control point or ending point for a Bzier curve.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> types always occur in sets of three.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>The point in the path immediately preceding them defines the starting point for the Bzier curve.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>The first two <bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> points are the control points, and the third <bpt id="p2">**</bpt>PT_BEZIERTO<ept id="p2">**</ept> point is the end point (if hard-coded).</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>PT_LINETO<ept id="p1">**</ept> or <bpt id="p2">**</bpt>PT_BEZIERTO<ept id="p2">**</ept> type may be combined with the following flag (by using the bitwise operator <ph id="ph1">`OR`</ph>) to indicate that the corresponding point is the last point in a figure and that the figure should be closed:</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_CLOSEFIGURE<ept id="p1">**</ept> Specifies that the figure is automatically closed after the corresponding line or curve is drawn.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>The figure is closed by drawing a line from the line or curve endpoint to the point corresponding to the last <bpt id="p1">**</bpt>PT_MOVETO<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>Specifies the total number of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures that may be placed in the <ph id="ph1">`lpPoints`</ph> array.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>This value must be the same as the number of bytes that may be placed in the <ph id="ph1">`lpTypes`</ph> array.</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`nCount`</ph> parameter is nonzero, the number of points enumerated.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is 0, the total number of points in the path (and <ph id="ph2">`GetPath`</ph> writes nothing to the buffers).</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is nonzero and is less than the number of points in the path, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>The device context must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>The points of the path are returned in logical coordinates.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>Points are stored in the path in device coordinates, so <ph id="ph1">`GetPath`</ph> changes the points from device coordinates to logical coordinates by using the inverse of the current transformation.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FlattenPath`</ph> member function may be called before <ph id="ph2">`GetPath`</ph>, to convert all curves in the path into line segments.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept>.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getpixel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetPixel</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Retrieves the RGB color value of the pixel at the point specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point to be examined.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point to be examined.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>Specifies the logical x- and y-coordinates of the point to be examined.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>For either version of the function, an RGB color value for the color of the given point.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>It is –1 if the coordinates do not specify a point in the clipping region.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>The point must be in the clipping region.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>If the point is not in the clipping region, the function has no effect and returns –1.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>Not all devices support the <bpt id="p1">**</bpt>GetPixel<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>RC_BITBLT<ept id="p1">**</ept> raster capability under the <bpt id="p2">[</bpt>GetDeviceCaps<ept id="p2">](#cdc__getdevicecaps)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetPixel<ept id="p1">**</ept> member function has two forms.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>The first takes two coordinate values; the second takes either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getpolyfillmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetPolyFillMode</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>Retrieves the current polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>The current polygon-filled mode, <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WINDING<ept id="p2">**</ept>, if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`SetPolyFillMode`</ph> member function for a description of the polygon-filling modes.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getrop2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetROP2</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>Retrieves the current drawing mode.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>The drawing mode.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>For a list of the drawing mode values, see the <ph id="ph1">`SetROP2`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>The drawing mode specifies how the colors of the pen and the interior of filled objects are combined with the color already on the display surface.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getsafehdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetSafeHdc</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>Call this member function to get <bpt id="p1">[</bpt>m_hDC<ept id="p1">](#cdc__m_hdc)</ept>, the output device context.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>A device context handle.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>This member function also works with null pointers.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getstretchbltmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetStretchBltMode</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>Retrieves the current bitmap-stretching mode.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>The return value specifies the current bitmap-stretching mode — <bpt id="p1">**</bpt>STRETCH_ANDSCANS<ept id="p1">**</ept>, <bpt id="p2">**</bpt>STRETCH_DELETESCANS<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>STRETCH_ORSCANS<ept id="p3">**</ept> — if the function is successful.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>The bitmap-stretching mode defines how information is removed from bitmaps that are stretched or compressed by the <ph id="ph1">`StretchBlt`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>STRETCH_ANDSCANS<ept id="p1">**</ept> and <bpt id="p2">**</bpt>STRETCH_ORSCANS<ept id="p2">**</ept> modes are typically used to preserve foreground pixels in monochrome bitmaps.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>STRETCH_DELETESCANS<ept id="p1">**</ept> mode is typically used to preserve color in color bitmaps.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettabbedtextextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTabbedTextExtent</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>Call this member function to compute the width and height of a character string using <bpt id="p1">[</bpt>m_hAttribDC<ept id="p1">](#cdc__m_hattribdc)</ept>, the attribute device context.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>Points to a character string.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the length is calculated.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>Specifies the number of tab-stop positions in the array pointed to by <ph id="ph1">`lpnTabStopPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>Points to an array of integers containing the tab-stop positions in logical units.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>Back tabs are not allowed.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters to be drawn.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>The dimensions of the string (in logical units) in a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>If the string contains one or more tab characters, the width of the string is based upon the tab stops specified by <ph id="ph1">`lpnTabStopPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>The function uses the currently selected font to compute the dimensions of the string.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>The current clipping region does not offset the width and height returned by the <ph id="ph1">`GetTabbedTextExtent`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>Since some devices do not place characters in regular cell arrays (that is, they kern the characters), the sum of the extents of the characters in a string may not be equal to the extent of the string.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 0 and <ph id="ph2">`lpnTabStopPositions`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, tabs are expanded to eight times the average character width.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 1, the tab stops will be separated by the distance specified by the first value in the array to which <ph id="ph2">`lpnTabStopPositions`</ph> points.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpnTabStopPositions`</ph> points to more than a single value, a tab stop is set for each value in the array, up to the number specified by <ph id="ph2">`nTabPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextalign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextAlign</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>Retrieves the status of the text-alignment flags for the device context.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>The status of the text-alignment flags.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>The return value is one or more of the following values:</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_BASELINE<ept id="p1">**</ept> Specifies alignment of the x-axis and the baseline of the chosen font within the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_BOTTOM<ept id="p1">**</ept> Specifies alignment of the x-axis and the bottom of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_CENTER<ept id="p1">**</ept> Specifies alignment of the y-axis and the center of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_LEFT<ept id="p1">**</ept> Specifies alignment of the y-axis and the left side of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_NOUPDATECP<ept id="p1">**</ept> Specifies that the current position is not updated.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_RIGHT<ept id="p1">**</ept> Specifies alignment of the y-axis and the right side of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_TOP<ept id="p1">**</ept> Specifies alignment of the x-axis and the top of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept> Specifies that the current position is updated.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>The text-alignment flags determine how the <ph id="ph1">`TextOut`</ph> and <ph id="ph2">`ExtTextOut`</ph> member functions align a string of text in relation to the string's starting point.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>The text-alignment flags are not necessarily single-bit flags and may be equal to 0.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>To test whether a flag is set, an application should follow these steps:</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>Apply the bitwise OR operator to the flag and its related flags, grouped as follows:</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_LEFT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TA_CENTER<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>TA_RIGHT<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_BASELINE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TA_BOTTOM<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>TA_TOP<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_NOUPDATECP<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TA_UPDATECP<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve">
          <source>Apply the bitwise-AND operator to the result and the return value of <ph id="ph1">`GetTextAlign`</ph>.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>Test for the equality of this result and the flag.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextcharacterextra"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextCharacterExtra</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>Retrieves the current setting for the amount of intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>The amount of the intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source>GDI adds this spacing to each character, including break characters, when it writes a line of text to the device context.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>The default value for the amount of intercharacter spacing is 0.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextColor</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>Retrieves the current text color.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>The current text color as an RGB color value.</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source>The text color is the foreground color of characters drawn by using the GDI text-output member functions <bpt id="p1">[</bpt>TextOut<ept id="p1">](#cdc__textout)</ept>, <bpt id="p2">[</bpt>ExtTextOut<ept id="p2">](#cdc__exttextout)</ept>, and <bpt id="p3">[</bpt>TabbedTextOut<ept id="p3">](#cdc__tabbedtextout)</ept>.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextExtent</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>Call this member function to compute the width and height of a line of text using the current font to determine the dimensions.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>Points to a string of characters.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>You can also pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>The dimensions of the string (in logical units) in a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>The information is retrieved from <bpt id="p1">[</bpt>m_hAttribDC<ept id="p1">](#cdc__m_hattribdc)</ept>, the attribute device context.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`GetTextExtent`</ph> assumes the text for which it retrieves the dimension is set along a horizontal line (that is, the escapement is 0).</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source>If you create a font specifying a non-zero escapement, you must convert the angle of the text explicitly to get the dimensions of the string.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source>The current clipping region does not affect the width and height returned by <ph id="ph1">`GetTextExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>Since some devices do not place characters in regular cell arrays (that is, they carry out kerning), the sum of the extents of the characters in a string may not be equal to the extent of the string.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextextentexpointi"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextExtentExPointI</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>Retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters.</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>A pointer to an array of glyph indices for which extents are to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>Specifies the number of glyphs in the array pointed to by <ph id="ph1">`pgiIn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source>Specifies the maximum allowable width, in logical units, of the formatted string.</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by <ph id="ph1">`nMaxExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`lpnFit`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`nMaxExtent`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>alpDx<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>A pointer to an array of integers that receives partial glyph extents.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Each element in the array gives the distance, in logical units, between the beginning of the glyph indices array and one of the glyphs that fits in the space specified by <ph id="ph1">`nMaxExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve">
          <source>Although this array should have at least as many elements as glyph indices specified by <ph id="ph1">`cgi`</ph>, the function fills the array with extents only for as many glyph indices as are specified by <ph id="ph2">`lpnFit`</ph>.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>lpnDx<ept id="p1">*</ept> is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, the function does not compute partial string widths.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the dimensions of the glyph indices array, in logical units.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>This value cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetTextExtentExPointI<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144936)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextextentpointi"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextExtentPointI</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>Retrieves the width and height of the specified array of glyph indices.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>A pointer to an array of glyph indices for which extents are to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve">
          <source>Specifies the number of glyphs in the array pointed to by <ph id="ph1">`pgiIn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the dimensions of the glyph indices array, in logical units.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>This value cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetTextExtentPointI<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144939)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextface"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextFace</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>Call this member function to copy the typeface name of the current font into a buffer.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source>Specifies the size of the buffer (in bytes).</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>If the typeface name is longer than the number of bytes specified by this parameter, the name is truncated.</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszFacename<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>Points to the buffer for the typeface name.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>The number of bytes copied to the buffer, not including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>It is 0 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source>The typeface name is copied as a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gettextmetrics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetTextMetrics</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics for the current font using the attribute device context.</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>TEXTMETRIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145132)</ept> structure that receives the metrics.</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getviewportext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetViewportExt</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-extents of the device context's viewport.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>The x- and y-extents (in device units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getviewportorg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetViewportOrg</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-coordinates of the origin of the viewport associated with the device context.</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>The origin of the viewport (in device coordinates) as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getwindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetWindow</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>Returns the window associated with the display device context.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CWnd`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>This is an advanced function.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source>For example, this member function may not return the view window when printing or in print preview.</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>It always returns the window associated with output.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve">
          <source>Output functions that use the given DC draw into this window.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getwindowext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetWindowExt</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-extents of the window associated with the device context.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>The x- and y-extents (in logical units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getwindoworg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetWindowOrg</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>Retrieves the x- and y-coordinates of the origin of the window associated with the device context.</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve">
          <source>The origin of the window (in logical coordinates) as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__getworldtransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GetWorldTransform</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve">
          <source>Retrieves the current world-space to page-space transformation.</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve">
          <source>Reference to an <bpt id="p1">[</bpt>XFORM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145228)</ept> structure that receives the current world-space to page-space transformation.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source>Returns a nonzero value on success.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>Returns 0 on failure.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve">
          <source>This method wraps the Windows GDI function <bpt id="p1">[</bpt>GetWorldTransform<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144953)</ept>.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__gradientfill"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GradientFill</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve">
          <source>Call this member function to fill rectangle and triangle structures with color that smoothly fades from one side to the other.</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pVertices<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve">
          <source>Pointer to an array of <bpt id="p1">[</bpt>TRIVERTEX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145142)</ept> structures that each define a triangle vertex.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nVertices<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>The number of vertices.</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve">
          <source>Array of <bpt id="p1">[</bpt>GRADIENT_TRIANGLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144959)</ept> structures in triangle mode, or an array of <bpt id="p2">[</bpt>GRADIENT_RECT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd144958)</ept> structures in rectangle mode.</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nMeshElements<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve">
          <source>The number of elements (triangles or rectangles) in <ph id="ph1">`pMesh`</ph>.</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve">
          <source>Specifies gradient fill mode.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>GradientFill<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144957)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">`GradientFill`</ph> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__graystring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::GrayString</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve">
          <source>Draws dimmed (gray) text at the given location by writing the text in a memory bitmap, dimming the bitmap, and then copying the bitmap to the display.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve">
          <source>Identifies the brush to be used for dimming (graying).</source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve">
          <source>Specifies the procedure-instance address of the application-supplied callback function that will draw the string.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve">
          <source>For more information, see the description of the Windows <bpt id="p1">**</bpt>OutputFunc<ept id="p1">**</ept> <bpt id="p2">[</bpt>callback function<ept id="p2">](../../mfc/reference/callback-function-for-cdc-graystring.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the system uses the Windows <ph id="ph1">`TextOut`</ph> function to draw the string, and <ph id="ph2">`lpData`</ph> is assumed to be a long pointer to the character string to be output.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>Specifies a far pointer to data to be passed to the output function.</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpfnOutput`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`lpData`</ph> must be a long pointer to the string to be output.</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters to be output.</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, <ph id="ph1">`GrayString`</ph> calculates the length of the string (assuming that <ph id="ph2">`lpData`</ph> is a pointer to the string).</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1 and the function pointed to by <ph id="ph2">`lpfnOutput`</ph> returns 0, the image is shown but not dimmed.</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the starting position of the rectangle that encloses the string.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the starting position of the rectangle that encloses the string.</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve">
          <source>Specifies the width (in logical units) of the rectangle that encloses the string.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nWidth`</ph> is 0, <ph id="ph2">`GrayString`</ph> calculates the width of the area, assuming <ph id="ph3">`lpData`</ph> is a pointer to the string.</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve">
          <source>Specifies the height (in logical units) of the rectangle that encloses the string.</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nHeight`</ph> is 0, <ph id="ph2">`GrayString`</ph> calculates the height of the area, assuming <ph id="ph3">`lpData`</ph> is a pointer to the string.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve">
          <source>Nonzero if the string is drawn, or 0 if either the <ph id="ph1">`TextOut`</ph> function or the application-supplied output function returned 0, or if there was insufficient memory to create a memory bitmap for dimming.</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve">
          <source>The function dims the text regardless of the selected brush and background.</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GrayString`</ph> member function uses the currently selected font.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_TEXT`</ph> mapping mode must be selected before using this function.</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve">
          <source>An application can draw dimmed (grayed) strings on devices that support a solid gray color without calling the <ph id="ph1">`GrayString`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve">
          <source>The system color <bpt id="p1">**</bpt>COLOR_GRAYTEXT<ept id="p1">**</ept> is the solid-gray system color used to draw disabled text.</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve">
          <source>The application can call the <bpt id="p1">**</bpt>GetSysColor<ept id="p1">**</ept> Windows function to retrieve the color value of <bpt id="p2">**</bpt>COLOR_GRAYTEXT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve">
          <source>If the color is other than 0 (black), the application can call the <ph id="ph1">`SetTextColor`</ph> member function to set the text color to the color value and then draw the string directly.</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>If the retrieved color is black, the application must call <ph id="ph1">`GrayString`</ph> to dim (gray) the text.</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpfnOutput`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, GDI uses the Windows <bpt id="p2">[</bpt>TextOut<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145133)</ept> function, and <ph id="ph2">`lpData`</ph> is assumed to be a far pointer to the character to be output.</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source>If the characters to be output cannot be handled by the <ph id="ph1">`TextOut`</ph> member function (for example, the string is stored as a bitmap), the application must supply its own output function.</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve">
          <source>Also note that all callback functions must trap Microsoft Foundation exceptions before returning to Windows, since exceptions cannot be thrown across callback boundaries.</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve">
          <source>For more information about exceptions, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>The callback function passed to <ph id="ph1">`GrayString`</ph> must use the <ph id="ph2">`__stdcall`</ph> calling convention and must be exported with <ph id="ph3">`__declspec`</ph>.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>When the framework is in preview mode, a call to the <ph id="ph1">`GrayString`</ph> member function is translated to a <ph id="ph2">`TextOut`</ph> call, and the callback function is not called.</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__himetrictodp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::HIMETRICtoDP</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Use this function when you convert <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> sizes from OLE to pixels.</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve">
          <source>If the mapping mode of the device context object is <ph id="ph1">`MM_LOENGLISH`</ph>, <ph id="ph2">`MM_HIENGLISH`</ph>, <ph id="ph3">`MM_LOMETRIC`</ph> or <ph id="ph4">`MM_HIMETRIC`</ph>, then the conversion is based on the number of pixels in the physical inch.</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve">
          <source>If the mapping mode is one of the other non-constrained modes (e.g., <ph id="ph1">`MM_TEXT`</ph>), then the conversion is based on the number of pixels in the logical inch.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__himetrictolp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::HIMETRICtoLP</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source>Call this function to convert <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units into logical units.</source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source>Use this function when you get <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> sizes from OLE and wish to convert them to your application's natural mapping mode.</source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source>The conversion is accomplished by first converting the <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units into pixels and then converting these units into logical units using the device context's current mapping units.</source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source>Note that the extents of the device's window and viewport will affect the result.</source>
        </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__intersectcliprect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::IntersectClipRect</source>
        </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve">
          <source>Creates a new clipping region by forming the intersection of the current region and the rectangle specified by <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph>.</source>
        </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve">
          <source>Specifies the rectangle.</source>
        </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve">
          <source>You can pass either a <ph id="ph1">`CRect`</ph> object or a pointer to a <ph id="ph2">`RECT`</ph> structure for this parameter.</source>
        </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve">
          <source>The new clipping region's type.</source>
        </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> New clipping region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Device context is not valid.</source>
        </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> New clipping region is empty.</source>
        </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> New clipping region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve">
          <source>GDI clips all subsequent output to fit within the new boundary.</source>
        </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve">
          <source>The width and height must not exceed 32,767.</source>
        </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__invertrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::InvertRect</source>
        </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve">
          <source>Inverts the contents of the given rectangle.</source>
        </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> that contains the logical coordinates of the rectangle to be inverted.</source>
        </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve">
          <source>You can also pass a <ph id="ph1">`CRect`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve">
          <source>Inversion is a logical NOT operation and flips the bits of each pixel.</source>
        </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve">
          <source>On monochrome displays, the function makes white pixels black and black pixels white.</source>
        </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve">
          <source>On color displays, the inversion depends on how colors are generated for the display.</source>
        </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`InvertRect`</ph> twice with the same rectangle restores the display to its previous colors.</source>
        </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve">
          <source>If the rectangle is empty, nothing is drawn.</source>
        </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#36<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__invertrgn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::InvertRgn</source>
        </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve">
          <source>Inverts the colors in the region specified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve">
          <source>Identifies the region to be inverted.</source>
        </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve">
          <source>The coordinates for the region are specified in logical units.</source>
        </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve">
          <source>On monochrome displays, the function makes white pixels black and black pixels white.</source>
        </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve">
          <source>On color displays, the inversion depends on how the colors are generated for the display.</source>
        </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__isprinting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::IsPrinting</source>
        </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve">
          <source>Determines whether the device context is being used for printing.</source>
        </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDC`</ph> object is a printer DC; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__lineto"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::LineTo</source>
        </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve">
          <source>Draws a line from the current position up to, but not including, the point specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph1">`point`</ph>).</source>
        </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the endpoint for the line.</source>
        </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the endpoint for the line.</source>
        </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve">
          <source>Specifies the endpoint for the line.</source>
        </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve">
          <source>Nonzero if the line is drawn; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve">
          <source>The line is drawn with the selected pen.</source>
        </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve">
          <source>The current position is set to <bpt id="p1">*</bpt>x<ept id="p1">*</ept>, <bpt id="p2">*</bpt>y<ept id="p2">*</ept> or to <ph id="ph1">`point`</ph>.</source>
        </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRect::CenterPoint<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md#crect__centerpoint)</ept>.</source>
        </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__lptodp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::LPtoDP</source>
        </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve">
          <source>Converts logical units into device units.</source>
        </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve">
          <source>Points to an array of points.</source>
        </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve">
          <source>Each point in the array is a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve">
          <source>The number of points in the array.</source>
        </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve">
          <source>This parameter is used for the common case of mapping a rectangle from logical to device units.</source>
        </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or a <bpt id="p2">[</bpt>CSize<ept id="p2">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve">
          <source>The function maps the coordinates of each point, or dimensions of a size, from GDI's logical coordinate system into a device coordinate system.</source>
        </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve">
          <source>The conversion depends on the current mapping mode and the settings of the origins and extents of the device's window and viewport.</source>
        </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve">
          <source>The x- and y-coordinates of points are 2-byte signed integers in the range –32,768 through 32,767.</source>
        </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve">
          <source>In cases where the mapping mode would result in values larger than these limits, the system sets the values to –32,768 and 32,767, respectively.</source>
        </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__lptohimetric"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::LPtoHIMETRIC</source>
        </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve">
          <source>Call this function to convert logical units into <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">**</bpt>SIZE<ept id="p1">**</ept> structure or a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve">
          <source>Use this function when you give <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> sizes to OLE, converting from your application's natural mapping mode.</source>
        </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve">
          <source>Note that the extents of the device's window and viewport will affect the result.</source>
        </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve">
          <source>The conversion is accomplished by first converting the logical units into pixels using the device context's current mapping units and then converting these units into <bpt id="p1">**</bpt>HIMETRIC<ept id="p1">**</ept> units.</source>
        </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__m_hattribdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::m_hAttribDC</source>
        </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve">
          <source>The attribute device context for this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve">
          <source>By default, this device context is equal to <ph id="ph1">`m_hDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">`CDC`</ph> GDI calls that request information from the device context are directed to <ph id="ph2">`m_hAttribDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CDC<ept id="p1">](../../mfc/reference/cdc-class.md)</ept> class description for more on the use of these two device contexts.</source>
        </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__m_hdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::m_hDC</source>
        </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve">
          <source>The output device context for this <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`m_hDC`</ph> is equal to <ph id="ph2">`m_hAttribDC`</ph>, the other device context wrapped by <ph id="ph3">`CDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">`CDC`</ph> GDI calls that create output go to the <ph id="ph2">`m_hDC`</ph> device context.</source>
        </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve">
          <source>You can initialize <ph id="ph1">`m_hDC`</ph> and <ph id="ph2">`m_hAttribDC`</ph> to point to different devices.</source>
        </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>CDC<ept id="p1">](../../mfc/reference/cdc-class.md)</ept> class description for more on the use of these two device contexts.</source>
        </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__maskblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::MaskBlt</source>
        </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve">
          <source>Combines the color data for the source and destination bitmaps using the given mask and raster operation.</source>
        </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the destination rectangle and source bitmap.</source>
        </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the destination rectangle and source bitmap.</source>
        </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve">
          <source>Identifies the device context from which the bitmap is to be copied.</source>
        </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve">
          <source>It must be zero if the <bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept> parameter specifies a raster operation that does not include a source.</source>
        </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the source bitmap.</source>
        </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the source bitmap.</source>
        </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve">
          <source>Identifies the monochrome mask bitmap combined with the color bitmap in the source device context.</source>
        </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve">
          <source>Specifies the horizontal pixel offset for the mask bitmap specified by the <ph id="ph1">`maskBitmap`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve">
          <source>Specifies the vertical pixel offset for the mask bitmap specified by the <ph id="ph1">`maskBitmap`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve">
          <source>Specifies both foreground and background ternary raster operation codes, which the function uses to control the combination of source and destination data.</source>
        </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve">
          <source>The background raster operation code is stored in the high byte of the high word of this value; the foreground raster operation code is stored in the low byte of the high word of this value; the low word of this value is ignored, and should be zero.</source>
        </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve">
          <source>The macro <bpt id="p1">**</bpt>MAKEROP4<ept id="p1">**</ept> creates such combinations of foreground and background raster operation codes.</source>
        </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve">
          <source>See the Remarks section for a discussion of foreground and background in the context of this function.</source>
        </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`BitBlt`</ph> member function for a list of common raster operation codes.</source>
        </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve">
          <source>A value of 1 in the mask specified by <ph id="ph1">`maskBitmap`</ph> indicates that the foreground raster operation code specified by <bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept> should be applied at that location.</source>
        </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve">
          <source>A value of 0 in the mask indicates that the background raster operation code specified by <bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept> should be applied at that location.</source>
        </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve">
          <source>If the raster operations require a source, the mask rectangle must cover the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve">
          <source>If it does not, the function will fail.</source>
        </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve">
          <source>If the raster operations do not require a source, the mask rectangle must cover the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve">
          <source>If it does not, the function will fail.</source>
        </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve">
          <source>If a rotation or shear transformation is in effect for the source device context when this function is called, an error occurs.</source>
        </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve">
          <source>However, other types of transformations are allowed.</source>
        </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve">
          <source>If the color formats of the source, pattern, and destination bitmaps differ, this function converts the pattern or source format, or both, to match the destination format.</source>
        </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve">
          <source>If the mask bitmap is not a monochrome bitmap, an error occurs.</source>
        </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve">
          <source>When an enhanced metafile is being recorded, an error occurs (and the function returns 0) if the source device context identifies an enhanced-metafile device context.</source>
        </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve">
          <source>Not all devices support <ph id="ph1">`MaskBlt`</ph>.</source>
        </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve">
          <source>An application should call <ph id="ph1">`GetDeviceCaps`</ph> to determine whether a device supports this function.</source>
        </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve">
          <source>If no mask bitmap is supplied, this function behaves exactly like <ph id="ph1">`BitBlt`</ph>, using the foreground raster operation code.</source>
        </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve">
          <source>The pixel offsets in the mask bitmap map to the point (0,0) in the source device context's bitmap.</source>
        </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve">
          <source>This is useful for cases in which a mask bitmap contains a set of masks; an application can easily apply any one of them to a mask-blitting task by adjusting the pixel offsets and rectangle sizes sent to <ph id="ph1">`MaskBlt`</ph>.</source>
        </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__modifyworldtransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ModifyWorldTransform</source>
        </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve">
          <source>Changes the world transformation for a device context using the specified mode.</source>
        </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve">
          <source>Reference to an <bpt id="p1">[</bpt>XFORM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145228)</ept> structure used to modify the world transformation for the given device context.</source>
        </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve">
          <source>Specifies how the transformation data modifies the current world transformation.</source>
        </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve">
          <source>For a list of the values that this parameter can take, see <bpt id="p1">[</bpt>ModifyWorldTransform<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145060)</ept>.</source>
        </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve">
          <source>Returns a nonzero value on success.</source>
        </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve">
          <source>Returns 0 on failure.</source>
        </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve">
          <source>This method wraps the Windows GDI function <bpt id="p1">[</bpt>ModifyWorldTransform<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145060)</ept>.</source>
        </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__moveto"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::MoveTo</source>
        </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve">
          <source>Moves the current position to the point specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or by <ph id="ph1">`point`</ph>).</source>
        </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the new position.</source>
        </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the new position.</source>
        </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve">
          <source>Specifies the new position.</source>
        </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve">
          <source>The x- and y-coordinates of the previous position as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRect::CenterPoint<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md#crect__centerpoint)</ept>.</source>
        </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__offsetcliprgn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::OffsetClipRgn</source>
        </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve">
          <source>Moves the clipping region of the device context by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve">
          <source>Specifies the number of logical units to move left or right.</source>
        </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve">
          <source>Specifies the number of logical units to move up or down.</source>
        </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve">
          <source>Specifies the amount to offset.</source>
        </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve">
          <source>The new region's type.</source>
        </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> Clipping region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Device context is not valid.</source>
        </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> Clipping region is empty.</source>
        </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> Clipping region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve">
          <source>The function moves the region <bpt id="p1">*</bpt>x<ept id="p1">*</ept> units along the x-axis and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> units along the y-axis.</source>
        </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__offsetviewportorg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::OffsetViewportOrg</source>
        </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve">
          <source>Modifies the coordinates of the viewport origin relative to the coordinates of the current viewport origin.</source>
        </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve">
          <source>Specifies the number of device units to add to the current origin's x-coordinate.</source>
        </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve">
          <source>Specifies the number of device units to add to the current origin's y-coordinate.</source>
        </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve">
          <source>The previous viewport origin (in device coordinates) as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__offsetwindoworg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::OffsetWindowOrg</source>
        </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve">
          <source>Modifies the coordinates of the window origin relative to the coordinates of the current window origin.</source>
        </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve">
          <source>Specifies the number of logical units to add to the current origin's x-coordinate.</source>
        </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve">
          <source>Specifies the number of logical units to add to the current origin's y-coordinate.</source>
        </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve">
          <source>The previous window origin (in logical coordinates) as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__operator_hdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::operator HDC</source>
        </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve">
          <source>Use this operator to retrieve the device context handle of the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve">
          <source>If successful, the handle of the device context object; otherwise, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve">
          <source>You can use the handle to call Windows APIs directly.</source>
        </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__paintrgn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PaintRgn</source>
        </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve">
          <source>Fills the region specified by <ph id="ph1">`pRgn`</ph> using the current brush.</source>
        </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve">
          <source>Identifies the region to be filled.</source>
        </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve">
          <source>The coordinates for the given region are specified in logical units.</source>
        </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__patblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PatBlt</source>
        </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve">
          <source>Creates a bit pattern on the device.</source>
        </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the rectangle that is to receive the pattern.</source>
        </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the rectangle that is to receive the pattern.</source>
        </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve">
          <source>Specifies the width (in logical units) of the rectangle that is to receive the pattern.</source>
        </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve">
          <source>Specifies the height (in logical units) of the rectangle that is to receive the pattern.</source>
        </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve">
          <source>Specifies the raster-operation code.</source>
        </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve">
          <source>Raster-operation codes (ROPs) define how GDI combines colors in output operations that involve a current brush, a possible source bitmap, and a destination bitmap.</source>
        </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATCOPY<ept id="p1">**</ept> Copies pattern to destination bitmap.</source>
        </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATINVERT<ept id="p1">**</ept> Combines destination bitmap with pattern using the Boolean XOR operator.</source>
        </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DSTINVERT<ept id="p1">**</ept> Inverts the destination bitmap.</source>
        </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BLACKNESS<ept id="p1">**</ept> Turns all output black.</source>
        </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHITENESS<ept id="p1">**</ept> Turns all output white.</source>
        </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve">
          <source>The pattern is a combination of the selected brush and the pattern already on the device.</source>
        </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve">
          <source>The raster-operation code specified by <bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept> defines how the patterns are to be combined.</source>
        </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve">
          <source>The raster operations listed for this function are a limited subset of the full 256 ternary raster-operation codes; in particular, a raster-operation code that refers to a source cannot be used.</source>
        </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve">
          <source>Not all device contexts support the <ph id="ph1">`PatBlt`</ph> function.</source>
        </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve">
          <source>To determine whether a device context supports <ph id="ph1">`PatBlt`</ph>, call the <ph id="ph2">`GetDeviceCaps`</ph> member function with the <bpt id="p1">**</bpt>RASTERCAPS<ept id="p1">**</ept> index and check the return value for the <bpt id="p2">**</bpt>RC_BITBLT<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__pie"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Pie</source>
        </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve">
          <source>Draws a pie-shaped wedge by drawing an elliptical arc whose center and two endpoints are joined by lines.</source>
        </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the bounding rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x3<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the arc's starting point (in logical units).</source>
        </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the arc's endpoint (in logical units).</source>
        </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve">
          <source>You can pass either a <ph id="ph1">`CRect`</ph> object or a pointer to a <ph id="ph2">`RECT`</ph> structure for this parameter.</source>
        </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve">
          <source>Specifies the starting point of the arc.</source>
        </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve">
          <source>Specifies the endpoint of the arc.</source>
        </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve">
          <source>This point does not have to lie exactly on the arc.</source>
        </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve">
          <source>The center of the arc is the center of the bounding rectangle specified by <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph> (or by <ph id="ph5">`lpRect`</ph>).</source>
        </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve">
          <source>The starting and ending points of the arc are specified by <bpt id="p1">*</bpt>x3<ept id="p1">*</ept>, <ph id="ph1">`y3`</ph>, <ph id="ph2">`x4`</ph>, and <ph id="ph3">`y4`</ph> (or by <ph id="ph4">`ptStart`</ph> and <ph id="ph5">`ptEnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve">
          <source>The arc is drawn with the selected pen, moving in a counterclockwise direction.</source>
        </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve">
          <source>Two additional lines are drawn from each endpoint to the arc's center.</source>
        </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve">
          <source>The pie-shaped area is filled with the current brush.</source>
        </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>x3<ept id="p1">*</ept> equals <ph id="ph1">`x4`</ph> and <ph id="ph2">`y3`</ph> equals <ph id="ph3">`y4`</ph>, the result is an ellipse with a single line from the center of the ellipse to the point ( <bpt id="p2">*</bpt>x3<ept id="p2">*</ept>, <ph id="ph4">`y3`</ph>) or ( <ph id="ph5">`x4`</ph>, <ph id="ph6">`y4`</ph>).</source>
        </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve">
          <source>The figure drawn by this function extends up to but does not include the right and bottom coordinates.</source>
        </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve">
          <source>This means that the height of the figure is <ph id="ph1">`y2`</ph> – <ph id="ph2">`y1`</ph> and the width of the figure is <ph id="ph3">`x2`</ph> – <ph id="ph4">`x1`</ph>.</source>
        </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve">
          <source>Both the width and the height of the bounding rectangle must be greater than 2 units and less than 32,767 units.</source>
        </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#37<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__playmetafile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PlayMetaFile</source>
        </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve">
          <source>Plays the contents of the specified metafile on the device context.</source>
        </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hMF<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve">
          <source>Identifies the metafile to be played.</source>
        </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hEnhMetaFile<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve">
          <source>Identifies the enhanced metafile.</source>
        </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or a <ph id="ph2">`CRect`</ph> object that contains the coordinates of the bounding rectangle used to display the picture.</source>
        </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve">
          <source>The coordinates are specified in logical units.</source>
        </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve">
          <source>The metafile can be played any number of times.</source>
        </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve">
          <source>The second version of <ph id="ph1">`PlayMetaFile`</ph> displays the picture stored in the given enhanced-format metafile.</source>
        </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve">
          <source>When an application calls the second version of <ph id="ph1">`PlayMetaFile`</ph>, Windows uses the picture frame in the enhanced-metafile header to map the picture onto the rectangle pointed to by the <ph id="ph2">`lpBounds`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve">
          <source>(This picture may be sheared or rotated by setting the world transform in the output device before calling <ph id="ph1">`PlayMetaFile`</ph>.) Points along the edges of the rectangle are included in the picture.</source>
        </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve">
          <source>An enhanced-metafile picture can be clipped by defining the clipping region in the output device before playing the enhanced metafile.</source>
        </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve">
          <source>If an enhanced metafile contains an optional palette, an application can achieve consistent colors by setting up a color palette on the output device before calling the second version of <ph id="ph1">`PlayMetaFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve">
          <source>To retrieve the optional palette, use the <bpt id="p1">**</bpt>GetEnhMetaFilePaletteEntries<ept id="p1">**</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve">
          <source>An enhanced metafile can be embedded in a newly created enhanced metafile by calling the second version of <ph id="ph1">`PlayMetaFile`</ph> and playing the source enhanced metafile into the device context for the new enhanced metafile.</source>
        </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve">
          <source>The states of the output device context are preserved by this function.</source>
        </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve">
          <source>Any object created but not deleted in the enhanced metafile is deleted by this function.</source>
        </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve">
          <source>To stop this function, an application can call the <bpt id="p1">**</bpt>CancelDC<ept id="p1">**</ept> Windows function from another thread to terminate the operation.</source>
        </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve">
          <source>In this case, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__plgblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PlgBlt</source>
        </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve">
          <source>Performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the given device context.</source>
        </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve">
          <source>Points to an array of three points in logical space that identifies three corners of the destination parallelogram.</source>
        </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve">
          <source>The upper-left corner of the source rectangle is mapped to the first point in this array, the upper-right corner to the second point in this array, and the lower-left corner to the third point.</source>
        </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve">
          <source>The lower-right corner of the source rectangle is mapped to the implicit fourth point in the parallelogram.</source>
        </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve">
          <source>Identifies the source device context.</source>
        </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve">
          <source>Identifies an optional monochrome bitmap that is used to mask the colors of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the monochrome bitmap.</source>
        </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the monochrome bitmap.</source>
        </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve">
          <source>If the given bitmask handle identifies a valid monochrome bitmap, the function uses this bitmap to mask the bits of color data from the source rectangle.</source>
        </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve">
          <source>The fourth vertex of the parallelogram (D) is defined by treating the first three points (A, B, and C) as vectors and computing D = B + C - A.</source>
        </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve">
          <source>If the bitmask exists, a value of 1 in the mask indicates that the source pixel color should be copied to the destination.</source>
        </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve">
          <source>A value of 0 in the mask indicates that the destination pixel color is not to be changed.</source>
        </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve">
          <source>If the mask rectangle is smaller than the source and destination rectangles, the function replicates the mask pattern.</source>
        </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve">
          <source>Scaling, translation, and reflection transformations are allowed in the source device context; however, rotation and shear transformations are not.</source>
        </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve">
          <source>If the mask bitmap is not a monochrome bitmap, an error occurs.</source>
        </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve">
          <source>The stretching mode for the destination device context is used to determine how to stretch or compress the pixels, if that is necessary.</source>
        </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve">
          <source>When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context.</source>
        </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve">
          <source>The destination coordinates are transformed according to the destination device context; the source coordinates are transformed according to the source device context.</source>
        </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve">
          <source>If the source transformation has a rotation or shear, an error is returned.</source>
        </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve">
          <source>If the destination and source rectangles do not have the same color format, <ph id="ph1">`PlgBlt`</ph> converts the source rectangle to match the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve">
          <source>Not all devices support <ph id="ph1">`PlgBlt`</ph>.</source>
        </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve">
          <source>For more information, see the description of the <bpt id="p1">**</bpt>RC_BITBLT<ept id="p1">**</ept> raster capability in the <ph id="ph1">`CDC::GetDeviceCaps`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve">
          <source>If the source and destination device contexts represent incompatible devices, <ph id="ph1">`PlgBlt`</ph> returns an error.</source>
        </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polybezier"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolyBezier</source>
        </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve">
          <source>Draws one or more Bzier splines.</source>
        </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures that contain the endpoints and control points of the spline(s).</source>
        </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve">
          <source>Specifies the number of points in the <ph id="ph1">`lpPoints`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve">
          <source>This value must be one more than three times the number of splines to be drawn, because each Bzier spline requires two control points and an endpoint, and the initial spline requires an additional starting point.</source>
        </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve">
          <source>This function draws cubic Bzier splines by using the endpoints and control points specified by the <ph id="ph1">`lpPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve">
          <source>The first spline is drawn from the first point to the fourth point by using the second and third points as control points.</source>
        </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve">
          <source>Each subsequent spline in the sequence needs exactly three more points: the end point of the previous spline is used as the starting point, the next two points in the sequence are control points, and the third is the end point.</source>
        </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve">
          <source>The current position is neither used nor updated by the <ph id="ph1">`PolyBezier`</ph> function.</source>
        </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve">
          <source>The figure is not filled.</source>
        </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve">
          <source>This function draws lines by using the current pen.</source>
        </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polybezierto"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolyBezierTo</source>
        </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve">
          <source>Draws one or more Bzier splines.</source>
        </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures that contains the endpoints and control points.</source>
        </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve">
          <source>Specifies the number of points in the <ph id="ph1">`lpPoints`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve">
          <source>This value must be three times the number of splines to be drawn, because each Bzier spline requires two control points and an end point.</source>
        </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve">
          <source>This function draws cubic Bzier splines by using the control points specified by the <ph id="ph1">`lpPoints`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve">
          <source>The first spline is drawn from the current position to the third point by using the first two points as control points.</source>
        </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve">
          <source>For each subsequent spline, the function needs exactly three more points, and uses the end point of the previous spline as the starting point for the next.</source>
        </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PolyBezierTo`</ph> moves the current position to the end point of the last Bzier spline.</source>
        </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve">
          <source>The figure is not filled.</source>
        </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve">
          <source>This function draws lines by using the current pen.</source>
        </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept>.</source>
        </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polydraw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolyDraw</source>
        </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve">
          <source>Draws a set of line segments and Bzier splines.</source>
        </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures that contains the endpoints for each line segment and the endpoints and control points for each Bzier spline.</source>
        </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve">
          <source>Points to an array that specifies how each point in the <ph id="ph1">`lpPoints`</ph> array is used.</source>
        </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve">
          <source>Values can be one of the following:</source>
        </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_MOVETO<ept id="p1">**</ept> Specifies that this point starts a disjoint figure.</source>
        </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve">
          <source>This point becomes the new current position.</source>
        </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_LINETO<ept id="p1">**</ept> Specifies that a line is to be drawn from the current position to this point, which then becomes the new current position.</source>
        </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> Specifies that this point is a control point or ending point for a Bzier spline.</source>
        </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> types always occur in sets of three.</source>
        </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve">
          <source>The current position defines the starting point for the Bzier spline.</source>
        </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve">
          <source>The first two <bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> points are the control points, and the third <bpt id="p2">**</bpt>PT_BEZIERTO<ept id="p2">**</ept> point is the ending point.</source>
        </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve">
          <source>The ending point becomes the new current position.</source>
        </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve">
          <source>If there are not three consecutive <bpt id="p1">**</bpt>PT_BEZIERTO<ept id="p1">**</ept> points, an error results.</source>
        </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>PT_LINETO<ept id="p1">**</ept> or <bpt id="p2">**</bpt>PT_BEZIERTO<ept id="p2">**</ept> type can be combined with the following constant by using the bitwise operator OR to indicate that the corresponding point is the last point in a figure and the figure is closed:</source>
        </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PT_CLOSEFIGURE<ept id="p1">**</ept> Specifies that the figure is automatically closed after the <bpt id="p2">**</bpt>PT_LINETO<ept id="p2">**</ept> or <bpt id="p3">**</bpt>PT_BEZIERTO<ept id="p3">**</ept> type for this point is done.</source>
        </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve">
          <source>A line is drawn from this point to the most recent <bpt id="p1">**</bpt>PT_MOVETO<ept id="p1">**</ept> or <ph id="ph1">`MoveTo`</ph> point.</source>
        </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve">
          <source>This flag is combined with the <bpt id="p1">**</bpt>PT_LINETO<ept id="p1">**</ept> type for a line, or with the <bpt id="p2">**</bpt>PT_BEZIERTO<ept id="p2">**</ept> type of ending point for a Bzier spline, by using the bitwise <ph id="ph1">`OR`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve">
          <source>The current position is set to the ending point of the closing line.</source>
        </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve">
          <source>Specifies the total number of points in the <ph id="ph1">`lpPoints`</ph> array, the same as the number of bytes in the <ph id="ph2">`lpTypes`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve">
          <source>This function can be used to draw disjoint figures in place of consecutive calls to <ph id="ph1">`CDC::MoveTo`</ph>, <ph id="ph2">`CDC::LineTo`</ph>, and <ph id="ph3">`CDC::PolyBezierTo`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve">
          <source>The lines and splines are drawn using the current pen, and figures are not filled.</source>
        </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve">
          <source>If there is an active path started by calling the <ph id="ph1">`CDC::BeginPath`</ph> member function, <ph id="ph2">`PolyDraw`</ph> adds to the path.</source>
        </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve">
          <source>The points contained in the <ph id="ph1">`lpPoints`</ph> array and in <ph id="ph2">`lpTypes`</ph> indicate whether each point is part of a <ph id="ph3">`CDC::MoveTo`</ph>, a <ph id="ph4">`CDC::LineTo`</ph>, or a <bpt id="p1">**</bpt>CDC::BezierTo<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve">
          <source>It is also possible to close figures.</source>
        </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve">
          <source>This function updates the current position.</source>
        </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept>.</source>
        </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polygon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Polygon</source>
        </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve">
          <source>Draws a polygon consisting of two or more points (vertices) connected by lines, using the current pen.</source>
        </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve">
          <source>Points to an array of points that specifies the vertices of the polygon.</source>
        </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve">
          <source>Each point in the array is a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve">
          <source>Specifies the number of vertices in the array.</source>
        </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve">
          <source>The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.</source>
        </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve">
          <source>The current polygon-filling mode can be retrieved or set by using the <ph id="ph1">`GetPolyFillMode`</ph> and <ph id="ph2">`SetPolyFillMode`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#38<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polyline"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Polyline</source>
        </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve">
          <source>Draws a set of line segments connecting the points specified by <ph id="ph1">`lpPoints`</ph>.</source>
        </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures or <ph id="ph1">`CPoint`</ph> objects to be connected.</source>
        </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve">
          <source>Specifies the number of points in the array.</source>
        </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve">
          <source>This value must be at least 2.</source>
        </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve">
          <source>The lines are drawn from the first point through subsequent points using the current pen.</source>
        </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">`LineTo`</ph> member function, the <ph id="ph2">`Polyline`</ph> function neither uses nor updates the current position.</source>
        </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>PolyLine<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162815)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polylineto"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolylineTo</source>
        </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve">
          <source>Draws one or more straight lines.</source>
        </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structures that contains the vertices of the line.</source>
        </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve">
          <source>Specifies the number of points in the array.</source>
        </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve">
          <source>A line is drawn from the current position to the first point specified by the <ph id="ph1">`lpPoints`</ph> parameter by using the current pen.</source>
        </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve">
          <source>For each additional line, the function draws from the ending point of the previous line to the next point specified by <ph id="ph1">`lpPoints`</ph>.</source>
        </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PolylineTo`</ph> moves the current position to the ending point of the last line.</source>
        </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve">
          <source>If the line segments drawn by this function form a closed figure, the figure is not filled.</source>
        </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polypolygon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolyPolygon</source>
        </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve">
          <source>Creates two or more polygons that are filled using the current polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures or <ph id="ph1">`CPoint`</ph> objects that define the vertices of the polygons.</source>
        </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve">
          <source>Points to an array of integers, each of which specifies the number of points in one of the polygons in the <ph id="ph1">`lpPoints`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve">
          <source>The number of entries in the <ph id="ph1">`lpPolyCounts`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve">
          <source>This number specifies the number of polygons to be drawn.</source>
        </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve">
          <source>This value must be at least 2.</source>
        </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve">
          <source>The polygons may be disjoint or overlapping.</source>
        </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve">
          <source>Each polygon specified in a call to the <ph id="ph1">`PolyPolygon`</ph> function must be closed.</source>
        </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve">
          <source>Unlike polygons created by the <bpt id="p1">**</bpt>Polygon<ept id="p1">**</ept> member function, the polygons created by <ph id="ph1">`PolyPolygon`</ph> are not closed automatically.</source>
        </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve">
          <source>The function creates two or more polygons.</source>
        </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve">
          <source>To create a single polygon, an application should use the <bpt id="p1">**</bpt>Polygon<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve">
          <source>The current polygon-filling mode can be retrieved or set by using the <ph id="ph1">`GetPolyFillMode`</ph> and <ph id="ph2">`SetPolyFillMode`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__polypolyline"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PolyPolyline</source>
        </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve">
          <source>Draws multiple series of connected line segments.</source>
        </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve">
          <source>Points to an array of structures that contains the vertices of the polylines.</source>
        </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve">
          <source>The polylines are specified consecutively.</source>
        </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve">
          <source>Points to an array of variables specifying the number of points in the <ph id="ph1">`lpPoints`</ph> array for the corresponding polygon.</source>
        </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve">
          <source>Each entry must be greater than or equal to 2.</source>
        </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve">
          <source>Specifies the total number of counts in the <ph id="ph1">`lpPolyPoints`</ph> array.</source>
        </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve">
          <source>The line segments are drawn by using the current pen.</source>
        </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve">
          <source>The figures formed by the segments are not filled.</source>
        </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve">
          <source>The current position is neither used nor updated by this function.</source>
        </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__ptvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::PtVisible</source>
        </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve">
          <source>Determines whether the given point is within the clipping region of the device context.</source>
        </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point.</source>
        </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point.</source>
        </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve">
          <source>Specifies the point to check in logical coordinates.</source>
        </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified point is within the clipping region; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__queryabort"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::QueryAbort</source>
        </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve">
          <source>Calls the abort function installed by the <bpt id="p1">[</bpt>SetAbortProc<ept id="p1">](#cdc__setabortproc)</ept> member function for a printing application and queries whether the printing should be terminated.</source>
        </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve">
          <source>The return value is nonzero if printing should continue or if there is no abort procedure.</source>
        </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve">
          <source>It is 0 if the print job should be terminated.</source>
        </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve">
          <source>The return value is supplied by the abort function.</source>
        </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__realizepalette"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::RealizePalette</source>
        </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve">
          <source>Maps entries from the current logical palette to the system palette.</source>
        </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve">
          <source>Indicates how many entries in the logical palette were mapped to different entries in the system palette.</source>
        </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve">
          <source>This represents the number of entries that this function remapped to accommodate changes in the system palette since the logical palette was last realized.</source>
        </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve">
          <source>A logical color palette acts as a buffer between color-intensive applications and the system, allowing an application to use as many colors as needed without interfering with its own displayed colors or with colors displayed by other windows.</source>
        </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve">
          <source>When a window has the input focus and calls <ph id="ph1">`RealizePalette`</ph>, Windows ensures that the window will display all the requested colors, up to the maximum number simultaneously available on the screen.</source>
        </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve">
          <source>Windows also displays colors not found in the window's palette by matching them to available colors.</source>
        </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve">
          <source>In addition, Windows matches the colors requested by inactive windows that call the function as closely as possible to the available colors.</source>
        </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve">
          <source>This significantly reduces undesirable changes in the colors displayed in inactive windows.</source>
        </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__rectangle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::Rectangle</source>
        </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve">
          <source>Draws a rectangle using the current pen.</source>
        </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve">
          <source>Specifies the rectangle in logical units.</source>
        </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve">
          <source>You can pass either a <ph id="ph1">`CRect`</ph> object or a pointer to a <ph id="ph2">`RECT`</ph> structure for this parameter.</source>
        </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve">
          <source>The interior of the rectangle is filled using the current brush.</source>
        </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve">
          <source>The rectangle extends up to, but does not include, the right and bottom coordinates.</source>
        </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve">
          <source>This means that the height of the rectangle is <ph id="ph1">`y2`</ph> – <ph id="ph2">`y1`</ph> and the width of the rectangle is <ph id="ph3">`x2`</ph> – <ph id="ph4">`x1`</ph>.</source>
        </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve">
          <source>Both the width and the height of a rectangle must be greater than 2 units and less than 32,767 units.</source>
        </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#39<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__rectvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::RectVisible</source>
        </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve">
          <source>Determines whether any part of the given rectangle lies within the clipping region of the display context.</source>
        </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or a <ph id="ph2">`CRect`</ph> object that contains the logical coordinates of the specified rectangle.</source>
        </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve">
          <source>Nonzero if any portion of the given rectangle lies within the clipping region; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__releaseattribdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ReleaseAttribDC</source>
        </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve">
          <source>Call this member function to set <ph id="ph1">`m_hAttribDC`</ph> to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve">
          <source>This does not cause a <bpt id="p1">**</bpt>Detach<ept id="p1">**</ept> to occur.</source>
        </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve">
          <source>Only the output device context is attached to the <ph id="ph1">`CDC`</ph> object, and only it can be detached.</source>
        </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__releaseoutputdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ReleaseOutputDC</source>
        </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve">
          <source>Call this member function to set the <ph id="ph1">`m_hDC`</ph> member to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve">
          <source>This member function cannot be called when the output device context is attached to the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Detach<ept id="p1">**</ept> member function to detach the output device context.</source>
        </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__resetdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ResetDC</source>
        </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve">
          <source>Call this member function to update the device context wrapped by the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpDevMode<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve">
          <source>A pointer to a Windows <ph id="ph1">`DEVMODE`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve">
          <source>The device context is updated from the information specified in the Windows <ph id="ph1">`DEVMODE`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve">
          <source>This member function only resets the attribute device context.</source>
        </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve">
          <source>An application will typically use the <ph id="ph1">`ResetDC`</ph> member function when a window processes a <ph id="ph2">`WM_DEVMODECHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve">
          <source>You can also use this member function to change the paper orientation or paper bins while printing a document.</source>
        </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve">
          <source>You cannot use this member function to change the driver name, device name, or output port.</source>
        </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve">
          <source>When the user changes the port connection or device name, you must delete the original device context and create a new device context with the new information.</source>
        </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve">
          <source>Before you call this member function, you must ensure that all objects (other than stock objects) that had been selected into the device context have been selected out.</source>
        </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__restoredc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::RestoreDC</source>
        </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve">
          <source>Restores the device context to the previous state identified by <ph id="ph1">`nSavedDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve">
          <source>Specifies the device context to be restored.</source>
        </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve">
          <source>It can be a value returned by a previous <ph id="ph1">`SaveDC`</ph> function call.</source>
        </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSavedDC`</ph> is –1, the most recently saved device context is restored.</source>
        </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve">
          <source>Nonzero if the specified context was restored; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RestoreDC`</ph> restores the device context by popping state information off a stack created by earlier calls to the <ph id="ph2">`SaveDC`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve">
          <source>The stack can contain the state information for several device contexts.</source>
        </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve">
          <source>If the context specified by <ph id="ph1">`nSavedDC`</ph> is not at the top of the stack, <ph id="ph2">`RestoreDC`</ph> deletes all state information between the device context specified by <ph id="ph3">`nSavedDC`</ph> and the top of the stack.</source>
        </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve">
          <source>The deleted information is lost.</source>
        </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__roundrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::RoundRect</source>
        </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve">
          <source>Draws a rectangle with rounded corners using the current pen.</source>
        </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the rectangle (in logical units).</source>
        </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x3<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve">
          <source>Specifies the width of the ellipse used to draw the rounded corners (in logical units).</source>
        </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve">
          <source>Specifies the height of the ellipse used to draw the rounded corners (in logical units).</source>
        </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle in logical units.</source>
        </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve">
          <source>You can pass either a <ph id="ph1">`CRect`</ph> object or a pointer to a <ph id="ph2">`RECT`</ph> structure for this parameter.</source>
        </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve">
          <source>The x-coordinate of <ph id="ph1">`point`</ph> specifies the width of the ellipse to draw the rounded corners (in logical units).</source>
        </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve">
          <source>The y-coordinate of <ph id="ph1">`point`</ph> specifies the height of the ellipse to draw the rounded corners (in logical units).</source>
        </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve">
          <source>The interior of the rectangle is filled using the current brush.</source>
        </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve">
          <source>The figure this function draws extends up to but does not include the right and bottom coordinates.</source>
        </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve">
          <source>This means that the height of the figure is <ph id="ph1">`y2`</ph> – <ph id="ph2">`y1`</ph> and the width of the figure is <ph id="ph3">`x2`</ph> – <ph id="ph4">`x1`</ph>.</source>
        </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve">
          <source>Both the height and the width of the bounding rectangle must be greater than 2 units and less than 32,767 units.</source>
        </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#40<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__savedc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SaveDC</source>
        </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve">
          <source>Saves the current state of the device context by copying state information (such as clipping region, selected objects, and mapping mode) to a context stack maintained by Windows.</source>
        </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve">
          <source>An integer identifying the saved device context.</source>
        </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve">
          <source>It is 0 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve">
          <source>This return value can be used to restore the device context by calling <ph id="ph1">`RestoreDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve">
          <source>The saved device context can later be restored by using <ph id="ph1">`RestoreDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SaveDC`</ph> can be used any number of times to save any number of device-context states.</source>
        </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__scaleviewportext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ScaleViewportExt</source>
        </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve">
          <source>Modifies the viewport extents relative to the current values.</source>
        </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to multiply the current x-extent.</source>
        </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to divide the result of multiplying the current x-extent by the value of the <ph id="ph1">`xNum`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to multiply the current y-extent.</source>
        </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to divide the result of multiplying the current y-extent by the value of the <ph id="ph1">`yNum`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve">
          <source>The previous viewport extents (in device units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve">
          <source>The formulas are written as follows:</source>
        </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve">
          <source>The new viewport extents are calculated by multiplying the current extents by the given numerator and then dividing by the given denominator.</source>
        </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__scalewindowext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ScaleWindowExt</source>
        </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve">
          <source>Modifies the window extents relative to the current values.</source>
        </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to multiply the current x-extent.</source>
        </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to divide the result of multiplying the current x-extent by the value of the <ph id="ph1">`xNum`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to multiply the current y-extent.</source>
        </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve">
          <source>Specifies the amount by which to divide the result of multiplying the current y-extent by the value of the <ph id="ph1">`yNum`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve">
          <source>The previous window extents (in logical units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve">
          <source>The formulas are written as follows:</source>
        </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve">
          <source>The new window extents are calculated by multiplying the current extents by the given numerator and then dividing by the given denominator.</source>
        </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__scrolldc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::ScrollDC</source>
        </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve">
          <source>Scrolls a rectangle of bits horizontally and vertically.</source>
        </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve">
          <source>Specifies the number of horizontal scroll units.</source>
        </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dy<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve">
          <source>Specifies the number of vertical scroll units.</source>
        </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that contains the coordinates of the scrolling rectangle.</source>
        </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that contains the coordinates of the clipping rectangle.</source>
        </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve">
          <source>When this rectangle is smaller than the original one pointed to by <ph id="ph1">`lpRectScroll`</ph>, scrolling occurs only in the smaller rectangle.</source>
        </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve">
          <source>Identifies the region uncovered by the scrolling process.</source>
        </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ScrollDC`</ph> function defines this region; it is not necessarily a rectangle.</source>
        </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that receives the coordinates of the rectangle that bounds the scrolling update region.</source>
        </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve">
          <source>This is the largest rectangular area that requires repainting.</source>
        </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve">
          <source>The values in the structure or object when the function returns are in client coordinates, regardless of the mapping mode for the given device context.</source>
        </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve">
          <source>Nonzero if scrolling is executed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRectUpdate`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, Windows does not compute the update rectangle.</source>
        </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`pRgnUpdate`</ph> and <ph id="ph2">`lpRectUpdate`</ph> are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, Windows does not compute the update region.</source>
        </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pRgnUpdate`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, Windows assumes that it contains a valid pointer to the region uncovered by the scrolling process (defined by the <ph id="ph2">`ScrollDC`</ph> member function).</source>
        </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve">
          <source>The update region returned in <ph id="ph1">`lpRectUpdate`</ph> can be passed to <ph id="ph2">`CWnd::InvalidateRgn`</ph> if required.</source>
        </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve">
          <source>An application should use the <ph id="ph1">`ScrollWindow`</ph> member function of class <ph id="ph2">`CWnd`</ph> when it is necessary to scroll the entire client area of a window.</source>
        </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve">
          <source>Otherwise, it should use <ph id="ph1">`ScrollDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__selectclippath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SelectClipPath</source>
        </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve">
          <source>Selects the current path as a clipping region for the device context, combining the new region with any existing clipping region by using the specified mode.</source>
        </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve">
          <source>Specifies the way to use the path.</source>
        </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve">
          <source>The following values are allowed:</source>
        </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_AND<ept id="p1">**</ept> The new clipping region includes the intersection (overlapping areas) of the current clipping region and the current path.</source>
        </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_COPY<ept id="p1">**</ept> The new clipping region is the current path.</source>
        </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_DIFF<ept id="p1">**</ept> The new clipping region includes the areas of the current clipping region, and those of the current path are excluded.</source>
        </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_OR<ept id="p1">**</ept> The new clipping region includes the union (combined areas) of the current clipping region and the current path.</source>
        </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_XOR<ept id="p1">**</ept> The new clipping region includes the union of the current clipping region and the current path, but without the overlapping areas.</source>
        </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve">
          <source>The device context identified must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__selectcliprgn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SelectClipRgn</source>
        </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve">
          <source>Selects the given region as the current clipping region for the device context.</source>
        </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve">
          <source>Identifies the region to be selected.</source>
        </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve">
          <source>For the first version of this function, if this value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is selected and output is still clipped to the window.</source>
        </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve">
          <source>For the second version of this function, this handle can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> only when the <bpt id="p2">**</bpt>RGN_COPY<ept id="p2">**</ept> mode is specified.</source>
        </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve">
          <source>Specifies the operation to be performed.</source>
        </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve">
          <source>It must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_AND<ept id="p1">**</ept> The new clipping region combines the overlapping areas of the current clipping region and the region identified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_COPY<ept id="p1">**</ept> The new clipping region is a copy of the region identified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve">
          <source>This is functionality is identical to the first version of <ph id="ph1">`SelectClipRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve">
          <source>If the region identified by <ph id="ph1">`pRgn`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the new clipping region becomes the default clipping region (a null region).</source>
        </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_DIFF<ept id="p1">**</ept> The new clipping region combines the areas of the current clipping region with those areas excluded from the region identified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_OR<ept id="p1">**</ept> The new clipping region combines the current clipping region and the region identified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_XOR<ept id="p1">**</ept> The new clipping region combines the current clipping region and the region identified by <ph id="ph1">`pRgn`</ph> but excludes any overlapping areas.</source>
        </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve">
          <source>The region's type.</source>
        </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> New clipping region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Device context or region is not valid.</source>
        </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> New clipping region is empty.</source>
        </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> New clipping region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve">
          <source>Only a copy of the selected region is used.</source>
        </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve">
          <source>The region itself can be selected for any number of other device contexts, or it can be deleted.</source>
        </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve">
          <source>The function assumes that the coordinates for the given region are specified in device units.</source>
        </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve">
          <source>Some printer devices support text output at a higher resolution than graphics output in order to retain the precision needed to express text metrics.</source>
        </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve">
          <source>These devices report device units at the higher resolution, that is, in text units.</source>
        </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve">
          <source>These devices then scale coordinates for graphics so that several reported device units map to only 1 graphic unit.</source>
        </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve">
          <source>You should always call the <ph id="ph1">`SelectClipRgn`</ph> function using text units.</source>
        </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve">
          <source>Applications that must take the scaling of graphics objects in the GDI can use the <bpt id="p1">**</bpt>GETSCALINGFACTOR<ept id="p1">**</ept> printer escape to determine the scaling factor.</source>
        </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve">
          <source>This scaling factor affects clipping.</source>
        </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve">
          <source>If a region is used to clip graphics, GDI divides the coordinates by the scaling factor.</source>
        </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve">
          <source>If the region is used to clip text, GDI makes no scaling adjustment.</source>
        </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve">
          <source>A scaling factor of 1 causes the coordinates to be divided by 2; a scaling factor of 2 causes the coordinates to be divided by 4; and so on.</source>
        </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__selectobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SelectObject</source>
        </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve">
          <source>Selects an object into the device context.</source>
        </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pPen<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CPen<ept id="p1">](../../mfc/reference/cpen-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CBrush<ept id="p1">](../../mfc/reference/cbrush-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CFont<ept id="p1">](../../mfc/reference/cfont-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CBitmap<ept id="p1">](../../mfc/reference/cbitmap-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CRgn<ept id="p1">](../../mfc/reference/crgn-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CGdiObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md)</ept> object to be selected.</source>
        </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve">
          <source>A pointer to the object being replaced.</source>
        </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve">
          <source>This is a pointer to an object of one of the classes derived from <ph id="ph1">`CGdiObject`</ph>, such as <ph id="ph2">`CPen`</ph>, depending on which version of the function is used.</source>
        </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there is an error.</source>
        </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve">
          <source>This function may return a pointer to a temporary object.</source>
        </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve">
          <source>This temporary object is only valid during the processing of one Windows message.</source>
        </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">`CGdiObject::FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve">
          <source>The version of the member function that takes a region parameter performs the same task as the <ph id="ph1">`SelectClipRgn`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve">
          <source>Its return value can be any of the following:</source>
        </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> New clipping region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Device context or region is not valid.</source>
        </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> New clipping region is empty.</source>
        </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> New clipping region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CDC`</ph> provides five versions specialized for particular kinds of GDI objects, including pens, brushes, fonts, bitmaps, and regions.</source>
        </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve">
          <source>The newly selected object replaces the previous object of the same type.</source>
        </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`pObject`</ph> of the general version of <ph id="ph2">`SelectObject`</ph> points to a <bpt id="p1">[</bpt>CPen<ept id="p1">](../../mfc/reference/cpen-class.md)</ept> object, the function replaces the current pen with the pen specified by <ph id="ph3">`pObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve">
          <source>An application can select a bitmap into memory device contexts only and into only one memory device context at a time.</source>
        </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve">
          <source>The format of the bitmap must either be monochrome or compatible with the device context; if it is not, <ph id="ph1">`SelectObject`</ph> returns an error.</source>
        </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve">
          <source>For Windows 3.1 and later, the <ph id="ph1">`SelectObject`</ph> function returns the same value whether it is used in a metafile or not.</source>
        </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve">
          <source>Under previous versions of Windows, <ph id="ph1">`SelectObject`</ph> returned a nonzero value for success and 0 for failure when it was used in a metafile.</source>
        </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__selectpalette"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SelectPalette</source>
        </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve">
          <source>Selects the logical palette that is specified by <ph id="ph1">`pPalette`</ph> as the selected palette object of the device context.</source>
        </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve">
          <source>Identifies the logical palette to be selected.</source>
        </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve">
          <source>This palette must already have been created with the <ph id="ph1">`CPalette`</ph> member function <bpt id="p1">[</bpt>CreatePalette<ept id="p1">](../../mfc/reference/cpalette-class.md#cpalette__createpalette)</ept>.</source>
        </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve">
          <source>Specifies whether the logical palette is forced to be a background palette.</source>
        </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bForceBackground`</ph> is nonzero, the selected palette is always a background palette, regardless of whether the window has the input focus.</source>
        </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bForceBackground`</ph> is 0 and the device context is attached to a window, the logical palette is a foreground palette when the window has the input focus.</source>
        </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CPalette`</ph> object identifying the logical palette replaced by the palette specified by <ph id="ph2">`pPalette`</ph>.</source>
        </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there is an error.</source>
        </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve">
          <source>The new palette becomes the palette object used by GDI to control colors displayed in the device context and replaces the previous palette.</source>
        </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve">
          <source>An application can select a logical palette into more than one device context.</source>
        </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve">
          <source>However, changes to a logical palette will affect all device contexts for which it is selected.</source>
        </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve">
          <source>If an application selects a palette into more than one device context, the device contexts must all belong to the same physical device.</source>
        </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__selectstockobject"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SelectStockObject</source>
        </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve">
          <source>Selects a <bpt id="p1">[</bpt>CGdiObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md)</ept> object that corresponds to one of the predefined stock pens, brushes, or fonts.</source>
        </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve">
          <source>Specifies the kind of stock object desired.</source>
        </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BLACK_BRUSH<ept id="p1">**</ept> Black brush.</source>
        </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DKGRAY_BRUSH<ept id="p1">**</ept> Dark gray brush.</source>
        </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GRAY_BRUSH<ept id="p1">**</ept> Gray brush.</source>
        </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HOLLOW_BRUSH<ept id="p1">**</ept> Hollow brush.</source>
        </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LTGRAY_BRUSH<ept id="p1">**</ept> Light gray brush.</source>
        </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL_BRUSH<ept id="p1">**</ept> Null brush.</source>
        </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHITE_BRUSH<ept id="p1">**</ept> White brush.</source>
        </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BLACK_PEN<ept id="p1">**</ept> Black pen.</source>
        </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL_PEN<ept id="p1">**</ept> Null pen.</source>
        </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHITE_PEN<ept id="p1">**</ept> White pen.</source>
        </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ANSI_FIXED_FONT<ept id="p1">**</ept> ANSI fixed system font.</source>
        </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ANSI_VAR_FONT<ept id="p1">**</ept> ANSI variable system font.</source>
        </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DEVICE_DEFAULT_FONT<ept id="p1">**</ept> Device-dependent font.</source>
        </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OEM_FIXED_FONT<ept id="p1">**</ept> OEM-dependent fixed font.</source>
        </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SYSTEM_FONT<ept id="p1">**</ept> The system font.</source>
        </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve">
          <source>By default, Windows uses the system font to draw menus, dialog-box controls, and other text.</source>
        </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve">
          <source>It is best, however, not to rely on SYSTEM_FONT to obtain the font used by dialogs and windows.</source>
        </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve">
          <source>Instead, use the <ph id="ph1">`SystemParametersInfo`</ph> function with the SPI_GETNONCLIENTMETRICS parameter to retrieve the current font.</source>
        </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SystemParametersInfo`</ph> takes into account the current theme and provides font information for captions, menus, and message dialogs.</source>
        </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SYSTEM_FIXED_FONT<ept id="p1">**</ept> The fixed-width system font used in Windows prior to version 3.0.</source>
        </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve">
          <source>This object is available for compatibility with earlier versions of Windows.</source>
        </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DEFAULT_PALETTE<ept id="p1">**</ept> Default color palette.</source>
        </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve">
          <source>This palette consists of the 20 static colors in the system palette.</source>
        </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CGdiObject`</ph> object that was replaced if the function is successful.</source>
        </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve">
          <source>The actual object pointed to is a <bpt id="p1">[</bpt>CPen<ept id="p1">](../../mfc/reference/cpen-class.md)</ept>, <bpt id="p2">[</bpt>CBrush<ept id="p2">](../../mfc/reference/cbrush-class.md)</ept>, or <bpt id="p3">[</bpt>CFont<ept id="p3">](../../mfc/reference/cfont-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve">
          <source>If the call is unsuccessful, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setabortproc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetAbortProc</source>
        </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve">
          <source>Installs the abort procedure for the print job.</source>
        </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve">
          <source>A pointer to the abort function to install as the abort procedure.</source>
        </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve">
          <source>For more about the callback function, see <bpt id="p1">[</bpt>Callback Function for CDC::SetAbortProc<ept id="p1">](../../mfc/reference/callback-function-for-cdc-setabortproc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve">
          <source>Specifies the outcome of the <ph id="ph1">`SetAbortProc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve">
          <source>Some of the following values are more probable than others, but all are possible.</source>
        </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_ERROR<ept id="p1">**</ept> General error.</source>
        </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFDISK<ept id="p1">**</ept> Not enough disk space is currently available for spooling, and no more space will become available.</source>
        </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_OUTOFMEMORY<ept id="p1">**</ept> Not enough memory is available for spooling.</source>
        </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SP_USERABORT<ept id="p1">**</ept> User ended the job through the Print Manager.</source>
        </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve">
          <source>If an application is to allow the print job to be canceled during spooling, it must set the abort function before the print job is started with the <bpt id="p1">[</bpt>StartDoc<ept id="p1">](#cdc__startdoc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve">
          <source>The Print Manager calls the abort function during spooling to allow the application to cancel the print job or to process out-of-disk-space conditions.</source>
        </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve">
          <source>If no abort function is set, the print job will fail if there is not enough disk space for spooling.</source>
        </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve">
          <source>Note that the features of Microsoft Visual C++ simplify the creation of the callback function passed to <ph id="ph1">`SetAbortProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve">
          <source>The address passed to the <ph id="ph1">`EnumObjects`</ph> member function is a pointer to a function exported with <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> and with the <ph id="ph2">`__stdcall`</ph> calling convention.</source>
        </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve">
          <source>You also do not have to export the function name in an <bpt id="p1">**</bpt>EXPORTS<ept id="p1">**</ept> statement in your application's module-definition file.</source>
        </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve">
          <source>You can instead use the <bpt id="p1">**</bpt>EXPORT<ept id="p1">**</ept> function modifier, as in</source>
        </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BOOL CALLBACK EXPORT<ept id="p1">**</ept> AFunction( <bpt id="p2">**</bpt>HDC<ept id="p2">**</ept>, <ph id="ph1">`int`</ph><bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve">
          <source>to cause the compiler to emit the proper export record for export by name without aliasing.</source>
        </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve">
          <source>This works for most needs.</source>
        </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve">
          <source>For some special cases, such as exporting a function by ordinal or aliasing the export, you still need to use an <bpt id="p1">**</bpt>EXPORTS<ept id="p1">**</ept> statement in a module-definition file.</source>
        </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve">
          <source>Callback registration interfaces are now type-safe (you must pass in a function pointer that points to the right kind of function for the specific callback).</source>
        </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve">
          <source>Also note that all callback functions must trap Microsoft Foundation exceptions before returning to Windows, since exceptions cannot be thrown across callback boundaries.</source>
        </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve">
          <source>For more information about exceptions, see the article <bpt id="p1">[</bpt>Exceptions<ept id="p1">](../../mfc/exception-handling-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setarcdirection"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetArcDirection</source>
        </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve">
          <source>Sets the drawing direction to be used for arc and rectangle functions.</source>
        </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nArcDirection<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve">
          <source>Specifies the new arc direction.</source>
        </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve">
          <source>This parameter can be either of the following values:</source>
        </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AD_COUNTERCLOCKWISE<ept id="p1">**</ept> Figures drawn counterclockwise.</source>
        </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AD_CLOCKWISE<ept id="p1">**</ept> Figures drawn clockwise.</source>
        </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve">
          <source>Specifies the old arc direction, if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve">
          <source>The default direction is counterclockwise.</source>
        </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetArcDirection`</ph> function specifies the direction in which the following functions draw:</source>
        </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve">
          <source>Arc</source>
        </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve">
          <source>Pie</source>
        </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Rectangle<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ellipse<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setattribdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetAttribDC</source>
        </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve">
          <source>Call this function to set the attribute device context, <ph id="ph1">`m_hAttribDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve">
          <source>A Windows device context.</source>
        </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve">
          <source>This member function does not attach the device context to the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve">
          <source>Only the output device context is attached to a <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setbkcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetBkColor</source>
        </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve">
          <source>Sets the current background color to the specified color.</source>
        </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve">
          <source>Specifies the new background color.</source>
        </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve">
          <source>The previous background color as an RGB color value.</source>
        </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve">
          <source>If an error occurs, the return value is 0x80000000.</source>
        </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve">
          <source>If the background mode is <bpt id="p1">**</bpt>OPAQUE<ept id="p1">**</ept>, the system uses the background color to fill the gaps in styled lines, the gaps between hatched lines in brushes, and the background in character cells.</source>
        </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve">
          <source>The system also uses the background color when converting bitmaps between color and monochrome device contexts.</source>
        </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve">
          <source>If the device cannot display the specified color, the system sets the background color to the nearest physical color.</source>
        </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setbkmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetBkMode</source>
        </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve">
          <source>Sets the background mode.</source>
        </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nBkMode<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve">
          <source>Specifies the mode to be set.</source>
        </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve">
          <source>This parameter can be either of the following values:</source>
        </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OPAQUE<ept id="p1">**</ept> Background is filled with the current background color before the text, hatched brush, or pen is drawn.</source>
        </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve">
          <source>This is the default background mode.</source>
        </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRANSPARENT<ept id="p1">**</ept> Background is not changed before drawing.</source>
        </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve">
          <source>The previous background mode.</source>
        </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve">
          <source>The background mode defines whether the system removes existing background colors on the drawing surface before drawing text, hatched brushes, or any pen style that is not a solid line.</source>
        </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::OnCtlColor<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onctlcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setboundsrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetBoundsRect</source>
        </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve">
          <source>Controls the accumulation of bounding-rectangle information for the specified device context.</source>
        </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that is used to set the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve">
          <source>Rectangle dimensions are given in logical coordinates.</source>
        </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve">
          <source>Specifies how the new rectangle will be combined with the accumulated rectangle.</source>
        </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ACCUMULATE<ept id="p1">**</ept> Add the rectangle specified by <ph id="ph1">`lpRectBounds`</ph> to the bounding rectangle (using a rectangle-union operation).</source>
        </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_DISABLE<ept id="p1">**</ept> Turn off bounds accumulation.</source>
        </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ENABLE<ept id="p1">**</ept> Turn on bounds accumulation.</source>
        </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve">
          <source>(The default setting for bounds accumulation is disabled.)</source>
        </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve">
          <source>The current state of the bounding rectangle, if the function is successful.</source>
        </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">`flags`</ph>, the return value can be a combination of <bpt id="p1">**</bpt>DCB_<ept id="p1">**</ept> values:</source>
        </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ACCUMULATE<ept id="p1">**</ept> The bounding rectangle is not empty.</source>
        </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve">
          <source>This value will always be set.</source>
        </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_DISABLE<ept id="p1">**</ept> Bounds accumulation is off.</source>
        </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCB_ENABLE<ept id="p1">**</ept> Bounds accumulation is on.</source>
        </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve">
          <source>Windows can maintain a bounding rectangle for all drawing operations.</source>
        </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve">
          <source>This rectangle can be queried and reset by the application.</source>
        </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve">
          <source>The drawing bounds are useful for invalidating bitmap caches.</source>
        </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setbrushorg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetBrushOrg</source>
        </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve">
          <source>Specifies the origin that GDI will assign to the next brush that the application selects into the device context.</source>
        </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate (in device units) of the new origin.</source>
        </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve">
          <source>This value must be in the range 0–7.</source>
        </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate (in device units) of the new origin.</source>
        </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve">
          <source>This value must be in the range 0–7.</source>
        </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinates of the new origin.</source>
        </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve">
          <source>Each value must be in the range 0–7.</source>
        </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve">
          <source>The previous origin of the brush in device units.</source>
        </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve">
          <source>The default coordinates for the brush origin are (0, 0).</source>
        </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve">
          <source>To alter the origin of a brush, call the <ph id="ph1">`UnrealizeObject`</ph> function for the <ph id="ph2">`CBrush`</ph> object, call <ph id="ph3">`SetBrushOrg`</ph>, and then call the <ph id="ph4">`SelectObject`</ph> member function to select the brush into the device context.</source>
        </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`SetBrushOrg`</ph> with stock <ph id="ph2">`CBrush`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setcoloradjustment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetColorAdjustment</source>
        </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve">
          <source>Sets the color adjustment values for the device context using the specified values.</source>
        </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>COLORADJUSTMENT<ept id="p1">](../../mfc/reference/coloradjustment-structure.md)</ept> data structure containing the color adjustment values.</source>
        </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve">
          <source>The color adjustment values are used to adjust the input color of the source bitmap for calls to the <ph id="ph1">`CDC::StretchBlt`</ph> member function when <bpt id="p1">**</bpt>HALFTONE<ept id="p1">**</ept> mode is set.</source>
        </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setdcbrushcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetDCBrushColor</source>
        </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve">
          <source>Sets the current device context (DC) brush color to the specified color value.</source>
        </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve">
          <source>Specifies the new brush color.</source>
        </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value specifies the previous DC brush color as a <ph id="ph1">`COLORREF`</ph> value.</source>
        </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is <ph id="ph1">`CLR_INVALID`</ph>.</source>
        </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve">
          <source>This method emulates the functionality of the function <bpt id="p1">[</bpt>SetDCBrushColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162969)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setdcpencolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetDCPenColor</source>
        </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve">
          <source>Sets the current device context (DC) pen color to the specified color value.</source>
        </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve">
          <source>Specifies the new pen color.</source>
        </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve">
          <source>This member function utilizes the Win32 function <bpt id="p1">[</bpt>SetDCPenColor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162970)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setgraphicsmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetGraphicsMode</source>
        </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve">
          <source>Sets the graphics mode for the specified device context.</source>
        </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve">
          <source>Specifies the graphics mode.</source>
        </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve">
          <source>For a list of the values that this parameter can take, see <bpt id="p1">[</bpt>SetGraphicsMode<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162977)</ept>.</source>
        </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve">
          <source>Returns the old graphics mode on success.</source>
        </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve">
          <source>Returns 0 on failure.</source>
        </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve">
          <source>This method wraps the Windows GDI function <bpt id="p1">[</bpt>SetGraphicsMode<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162977)</ept>.</source>
        </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setlayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetLayout</source>
        </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve">
          <source>Call this member function to change the layout of the text and graphics for a device context to right to left, the standard layout for cultures such as Arabic and Hebrew.</source>
        </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve">
          <source>Device context layout and bitmap control flags.</source>
        </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve">
          <source>It can be a combination of the following values.</source>
        </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve">
          <source>LAYOUT_BITMAPORIENTATIONPRESERVED</source>
        </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve">
          <source>Disables any reflection for calls to <bpt id="p1">[</bpt>CDC::BitBlt<ept id="p1">](#cdc__bitblt)</ept> and <bpt id="p2">[</bpt>CDC::StretchBlt<ept id="p2">](#cdc__stretchblt)</ept>.</source>
        </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve">
          <source>LAYOUT_RTL</source>
        </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve">
          <source>Sets the default horizontal layout to be right to left.</source>
        </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve">
          <source>LAYOUT_LTR</source>
        </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve">
          <source>Sets the default layout to be left to right.</source>
        </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve">
          <source>If successful, the previous layout of the device context.</source>
        </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve">
          <source>If unsuccessful, <bpt id="p1">**</bpt>GDI_ERROR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve">
          <source>Normally, you would not call <bpt id="p1">**</bpt>SetLayout<ept id="p1">**</ept> for a window.</source>
        </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve">
          <source>Rather, you control the right-to-left layout in a window by setting the <bpt id="p1">[</bpt>extended window styles<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept> such as <bpt id="p2">**</bpt>WS_EX_RTLREADING<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve">
          <source>A device context, such as a printer or a metafile, does not inherit this layout.</source>
        </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve">
          <source>The only way to set the device context for a right-to-left layout is by calling <bpt id="p1">**</bpt>SetLayout<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">**</bpt>SetLayout(LAYOUT_RTL<ept id="p1">**</ept> ), <bpt id="p2">**</bpt>SetLayout<ept id="p2">**</ept> automatically changes the mapping mode to <ph id="ph1">`MM_ISOTROPIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve">
          <source>As a result, a subsequent call to <bpt id="p1">[</bpt>GetMapMode<ept id="p1">](#cdc__getmapmode)</ept> will return <bpt id="p2">**</bpt>MM_ISOTROPIC<ept id="p2">**</ept> instead of <ph id="ph1">`MM_TEXT`</ph>.</source>
        </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve">
          <source>In some cases, such as with many bitmaps, you may want to preserve the left-to-right layout.</source>
        </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve">
          <source>In these cases, render the image by calling <ph id="ph1">`BitBlt`</ph> or <ph id="ph2">`StretchBlt`</ph>, then set the bitmap control flag for <ph id="ph3">`dwLayout`</ph> to <bpt id="p1">**</bpt>LAYOUT_BITMAPORIENTATIONPRESERVED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve">
          <source>Once you change the layout with the <bpt id="p1">**</bpt>LAYOUT_RTL<ept id="p1">**</ept> flag, the flags normally specifying right or left are reversed.</source>
        </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve">
          <source>To avoid confusion, you may want to define alternate names for the standard flags.</source>
        </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve">
          <source>For a list of suggested alternate flag names, see <bpt id="p1">[</bpt>SetLayout<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162979)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setmapmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetMapMode</source>
        </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve">
          <source>Sets the mapping mode.</source>
        </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve">
          <source>Specifies the new mapping mode.</source>
        </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_ANISOTROPIC`</ph> Logical units are converted to arbitrary units with arbitrarily scaled axes.</source>
        </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve">
          <source>Setting the mapping mode to <ph id="ph1">`MM_ANISOTROPIC`</ph> does not change the current window or viewport settings.</source>
        </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve">
          <source>To change the units, orientation, and scaling, call the <bpt id="p1">[</bpt>SetWindowExt<ept id="p1">](#cdc__setwindowext)</ept> and <bpt id="p2">[</bpt>SetViewportExt<ept id="p2">](#cdc__setviewportext)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_HIENGLISH`</ph> Each logical unit is converted to 0.001 inch.</source>
        </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve">
          <source>Positive x is to the right; positive y is up.</source>
        </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_HIMETRIC`</ph> Each logical unit is converted to 0.01 millimeter.</source>
        </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve">
          <source>Positive x is to the right; positive y is up.</source>
        </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_ISOTROPIC`</ph> Logical units are converted to arbitrary units with equally scaled axes; that is, 1 unit along the x-axis is equal to 1 unit along the y-axis.</source>
        </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`SetWindowExt`</ph> and <ph id="ph2">`SetViewportExt`</ph> member functions to specify the desired units and the orientation of the axes.</source>
        </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve">
          <source>GDI makes adjustments as necessary to ensure that the x and y units remain the same size.</source>
        </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_LOENGLISH`</ph> Each logical unit is converted to 0.01 inch.</source>
        </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve">
          <source>Positive x is to the right; positive y is up.</source>
        </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_LOMETRIC`</ph> Each logical unit is converted to 0.1 millimeter.</source>
        </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve">
          <source>Positive x is to the right; positive y is up.</source>
        </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_TEXT`</ph> Each logical unit is converted to 1 device pixel.</source>
        </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve">
          <source>Positive x is to the right; positive y is down.</source>
        </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MM_TWIPS`</ph> Each logical unit is converted to 1/20 of a point.</source>
        </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve">
          <source>(Because a point is 1/72 inch, a twip is 1/1440 inch.) Positive x is to the right; positive y is up.</source>
        </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve">
          <source>The previous mapping mode.</source>
        </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve">
          <source>The mapping mode defines the unit of measure used to convert logical units to device units; it also defines the orientation of the device's x- and y-axes.</source>
        </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve">
          <source>GDI uses the mapping mode to convert logical coordinates into the appropriate device coordinates.</source>
        </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_TEXT`</ph> mode allows applications to work in device pixels, where 1 unit is equal to 1 pixel.</source>
        </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve">
          <source>The physical size of a pixel varies from device to device.</source>
        </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_HIENGLISH`</ph>, <ph id="ph2">`MM_HIMETRIC`</ph>, <ph id="ph3">`MM_LOENGLISH`</ph>, <ph id="ph4">`MM_LOMETRIC`</ph>, and <ph id="ph5">`MM_TWIPS`</ph> modes are useful for applications that must draw in physically meaningful units (such as inches or millimeters).</source>
        </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_ISOTROPIC`</ph> mode ensures a 1:1 aspect ratio, which is useful when it is important to preserve the exact shape of an image.</source>
        </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MM_ANISOTROPIC`</ph> mode allows the x- and y-coordinates to be adjusted independently.</source>
        </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>SetLayout<ept id="p1">](#cdc__setlayout)</ept> to change the DC (device context) to right-to-left layout, <bpt id="p2">**</bpt>SetLayout<ept id="p2">**</ept> automatically changes the mapping mode to <ph id="ph1">`MM_ISOTROPIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](../../mfc/reference/cview-class.md#cview__onpreparedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setmapperflags"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetMapperFlags</source>
        </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve">
          <source>Changes the method used by the font mapper when it converts a logical font to a physical font.</source>
        </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve">
          <source>Specifies whether the font mapper attempts to match a font's aspect height and width to the device.</source>
        </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve">
          <source>When this value is <bpt id="p1">**</bpt>ASPECT_FILTERING<ept id="p1">**</ept>, the mapper selects only fonts whose x-aspect and y-aspect exactly match those of the specified device.</source>
        </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve">
          <source>The previous value of the font-mapper flag.</source>
        </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve">
          <source>An application can use <ph id="ph1">`SetMapperFlags`</ph> to cause the font mapper to attempt to choose only a physical font that exactly matches the aspect ratio of the specified device.</source>
        </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve">
          <source>An application that uses only raster fonts can use the <ph id="ph1">`SetMapperFlags`</ph> function to ensure that the font selected by the font mapper is attractive and readable on the specified device.</source>
        </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve">
          <source>Applications that use scalable (TrueType) fonts typically do not use <ph id="ph1">`SetMapperFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve">
          <source>If no physical font has an aspect ratio that matches the specification in the logical font, GDI chooses a new aspect ratio and selects a font that matches this new aspect ratio.</source>
        </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setmiterlimit"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetMiterLimit</source>
        </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve">
          <source>Sets the limit for the length of miter joins for the device context.</source>
        </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>fMiterLimit<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve">
          <source>Specifies the new miter limit for the device context.</source>
        </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve">
          <source>The miter length is defined as the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls on the outside of the join.</source>
        </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve">
          <source>The miter limit is the maximum allowed ratio of the miter length to the line width.</source>
        </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve">
          <source>The default miter limit is 10.0.</source>
        </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setoutputdc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetOutputDC</source>
        </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve">
          <source>Call this member function to set the output device context, <ph id="ph1">`m_hDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve">
          <source>A Windows device context.</source>
        </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve">
          <source>This member function can only be called when a device context has not been attached to the <ph id="ph1">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve">
          <source>This member function sets <ph id="ph1">`m_hDC`</ph> but does not attach the device context to the <ph id="ph2">`CDC`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setpixel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetPixel</source>
        </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve">
          <source>Sets the pixel at the point specified to the closest approximation of the color specified by <ph id="ph1">`crColor`</ph>.</source>
        </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> RGB value that specifies the color used to paint the point.</source>
        </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>COLORREF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of this value.</source>
        </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve">
          <source>Specifies the logical x- and y-coordinates of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve">
          <source>An RGB value for the color that the point is actually painted.</source>
        </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve">
          <source>This value can be different from that specified by <ph id="ph1">`crColor`</ph> if an approximation of that color is used.</source>
        </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve">
          <source>If the function fails (if the point is outside the clipping region), the return value is –1.</source>
        </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve">
          <source>The point must be in the clipping region.</source>
        </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve">
          <source>If the point is not in the clipping region, the function does nothing.</source>
        </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve">
          <source>Not all devices support the <ph id="ph1">`SetPixel`</ph> function.</source>
        </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve">
          <source>To determine whether a device supports <ph id="ph1">`SetPixel`</ph>, call the <ph id="ph2">`GetDeviceCaps`</ph> member function with the <bpt id="p1">**</bpt>RASTERCAPS<ept id="p1">**</ept> index and check the return value for the <bpt id="p2">**</bpt>RC_BITBLT<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setpixelv"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetPixelV</source>
        </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve">
          <source>Sets the pixel at the specified coordinates to the closest approximation of the specified color.</source>
        </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve">
          <source>Specifies the color to be used to paint the point.</source>
        </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve">
          <source>Specifies the logical x- and y-coordinates of the point to be set.</source>
        </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> data structure or a <bpt id="p2">[</bpt>CPoint<ept id="p2">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve">
          <source>The point must be in both the clipping region and the visible part of the device surface.</source>
        </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve">
          <source>Not all devices support the member function.</source>
        </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>RC_BITBLT<ept id="p1">**</ept> capability in the <ph id="ph1">`CDC::GetDeviceCaps`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetPixelV`</ph> is faster than <ph id="ph2">`SetPixel`</ph> because it does not need to return the color value of the point actually painted.</source>
        </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setpolyfillmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetPolyFillMode</source>
        </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve">
          <source>Sets the polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve">
          <source>Specifies the new filling mode.</source>
        </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve">
          <source>This value may be either <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WINDING<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve">
          <source>The default mode set in Windows is <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve">
          <source>The previous filling mode, if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept>, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.</source>
        </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve">
          <source>That is, the system fills the area between the first and second side, between the third and fourth side, and so on.</source>
        </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve">
          <source>This mode is the default.</source>
        </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>WINDING<ept id="p1">**</ept>, the system uses the direction in which a figure was drawn to determine whether to fill an area.</source>
        </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve">
          <source>Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction.</source>
        </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve">
          <source>Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented.</source>
        </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve">
          <source>When the line passes through a counterclockwise line segment, the count is decremented.</source>
        </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve">
          <source>The area is filled if the count is nonzero when the line reaches the outside of the figure.</source>
        </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setrop2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetROP2</source>
        </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve">
          <source>Sets the current drawing mode.</source>
        </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve">
          <source>Specifies the new drawing mode.</source>
        </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_BLACK<ept id="p1">**</ept> Pixel is always black.</source>
        </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_WHITE<ept id="p1">**</ept> Pixel is always white.</source>
        </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOP<ept id="p1">**</ept> Pixel remains unchanged.</source>
        </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOT<ept id="p1">**</ept> Pixel is the inverse of the screen color.</source>
        </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_COPYPEN<ept id="p1">**</ept> Pixel is the pen color.</source>
        </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOTCOPYPEN<ept id="p1">**</ept> Pixel is the inverse of the pen color.</source>
        </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MERGEPENNOT<ept id="p1">**</ept> Pixel is a combination of the pen color and the inverse of the screen color (final pixel = (NOT screen pixel) OR pen).</source>
        </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MASKPENNOT<ept id="p1">**</ept> Pixel is a combination of the colors common to both the pen and the inverse of the screen (final pixel = (NOT screen pixel) AND pen).</source>
        </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MERGENOTPEN<ept id="p1">**</ept> Pixel is a combination of the screen color and the inverse of the pen color (final pixel = (NOT pen) OR screen pixel).</source>
        </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MASKNOTPEN<ept id="p1">**</ept> Pixel is a combination of the colors common to both the screen and the inverse of the pen (final pixel = (NOT pen) AND screen pixel).</source>
        </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MERGEPEN<ept id="p1">**</ept> Pixel is a combination of the pen color and the screen color (final pixel = pen OR screen pixel).</source>
        </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOTMERGEPEN<ept id="p1">**</ept> Pixel is the inverse of the <bpt id="p2">**</bpt>R2_MERGEPEN<ept id="p2">**</ept> color (final pixel = NOT(pen OR screen pixel)).</source>
        </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_MASKPEN<ept id="p1">**</ept> Pixel is a combination of the colors common to both the pen and the screen (final pixel = pen AND screen pixel).</source>
        </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOTMASKPEN<ept id="p1">**</ept> Pixel is the inverse of the <bpt id="p2">**</bpt>R2_MASKPEN<ept id="p2">**</ept> color (final pixel = NOT(pen AND screen pixel)).</source>
        </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_XORPEN<ept id="p1">**</ept> Pixel is a combination of the colors that are in the pen or in the screen, but not in both (final pixel = pen XOR screen pixel).</source>
        </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>R2_NOTXORPEN<ept id="p1">**</ept> Pixel is the inverse of the <bpt id="p2">**</bpt>R2_XORPEN<ept id="p2">**</ept> color (final pixel = NOT(pen XOR screen pixel)).</source>
        </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve">
          <source>The previous drawing mode.</source>
        </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve">
          <source>It can be any of the values given in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve">
          <source>The drawing mode specifies how the colors of the pen and the interior of filled objects are combined with the color already on the display surface.</source>
        </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve">
          <source>The drawing mode is for raster devices only; it does not apply to vector devices.</source>
        </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve">
          <source>Drawing modes are binary raster-operation codes representing all possible Boolean combinations of two variables, using the binary operators AND, OR, and XOR (exclusive OR), and the unary operation NOT.</source>
        </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setstretchbltmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetStretchBltMode</source>
        </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve">
          <source>Sets the bitmap-stretching mode for the <ph id="ph1">`StretchBlt`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nStretchMode<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve">
          <source>Specifies the stretching mode.</source>
        </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BLACKONWHITE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve">
          <source>Performs a Boolean AND operation using the color values for the eliminated and existing pixels.</source>
        </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve">
          <source>If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.</source>
        </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COLORONCOLOR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve">
          <source>Deletes the pixels.</source>
        </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve">
          <source>This mode deletes all eliminated lines of pixels without trying to preserve their information.</source>
        </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HALFTONE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve">
          <source>Maps pixels from the source rectangle into blocks of pixels in the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve">
          <source>The average color over the destination block of pixels approximates the color of the source pixels.</source>
        </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve">
          <source>After setting the <bpt id="p1">**</bpt>HALFTONE<ept id="p1">**</ept> stretching mode, an application must call the Win32 function <bpt id="p2">[</bpt>SetBrushOrgEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162967)</ept> to set the brush origin.</source>
        </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve">
          <source>If it fails to do so, brush misalignment occurs.</source>
        </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>STRETCH_ANDSCANS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 95/98<ept id="p1">**</ept>: Same as <bpt id="p2">**</bpt>BLACKONWHITE<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>STRETCH_DELETESCANS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 95/98<ept id="p1">**</ept>: Same as <bpt id="p2">**</bpt>COLORONCOLOR<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>STRETCH_HALFTONE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 95/98<ept id="p1">**</ept>: Same as <bpt id="p2">**</bpt>HALFTONE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>STRETCH_ORSCANS<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 95/98<ept id="p1">**</ept>: Same as <bpt id="p2">**</bpt>WHITEONBLACK<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHITEONBLACK<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve">
          <source>Performs a Boolean OR operation using the color values for the eliminated and existing pixels.</source>
        </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve">
          <source>If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.</source>
        </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve">
          <source>The previous stretching mode.</source>
        </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve">
          <source>It can be <bpt id="p1">**</bpt>STRETCH_ANDSCANS<ept id="p1">**</ept>, <bpt id="p2">**</bpt>STRETCH_DELETESCANS<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>STRETCH_ORSCANS<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve">
          <source>The bitmap-stretching mode defines how information is removed from bitmaps that are compressed by using the function.</source>
        </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>BLACKONWHITE<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>STRETCH_ANDSCANS<ept id="p2">**</ept>) and <bpt id="p3">**</bpt>WHITEONBLACK<ept id="p3">**</ept> ( <bpt id="p4">**</bpt>STRETCH_ORSCANS<ept id="p4">**</ept>) modes are typically used to preserve foreground pixels in monochrome bitmaps.</source>
        </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>COLORONCOLOR<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>STRETCH_DELETESCANS<ept id="p2">**</ept>) mode is typically used to preserve color in color bitmaps.</source>
        </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HALFTONE<ept id="p1">**</ept> mode requires more processing of the source image than the other three modes; it is slower than the others, but produces higher quality images.</source>
        </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve">
          <source>Also note that <bpt id="p1">**</bpt>SetBrushOrgEx<ept id="p1">**</ept> must be called after setting the <bpt id="p2">**</bpt>HALFTONE<ept id="p2">**</ept> mode to avoid brush misalignment.</source>
        </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve">
          <source>Additional stretching modes might also be available depending on the capabilities of the device driver.</source>
        </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__settextalign"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetTextAlign</source>
        </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve">
          <source>Sets the text-alignment flags.</source>
        </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve">
          <source>Specifies text-alignment flags.</source>
        </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve">
          <source>The flags specify the relationship between a point and a rectangle that bounds the text.</source>
        </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve">
          <source>The point can be either the current position or coordinates specified by a text-output function.</source>
        </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve">
          <source>The rectangle that bounds the text is defined by the adjacent character cells in the text string.</source>
        </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be one or more flags from the following three categories.</source>
        </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve">
          <source>Choose only one flag from each category.</source>
        </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve">
          <source>The first category affects text alignment in the x-direction:</source>
        </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_CENTER<ept id="p1">**</ept> Aligns the point with the horizontal center of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_LEFT<ept id="p1">**</ept> Aligns the point with the left side of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve">
          <source>This is the default setting.</source>
        </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_RIGHT<ept id="p1">**</ept> Aligns the point with the right side of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve">
          <source>The second category affects text alignment in the y-direction:</source>
        </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_BASELINE<ept id="p1">**</ept> Aligns the point with the base line of the chosen font.</source>
        </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_BOTTOM<ept id="p1">**</ept> Aligns the point with the bottom of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_TOP<ept id="p1">**</ept> Aligns the point with the top of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve">
          <source>This is the default setting.</source>
        </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve">
          <source>The third category determines whether the current position is updated when text is written:</source>
        </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_NOUPDATECP<ept id="p1">**</ept> Does not update the current position after each call to a text-output function.</source>
        </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve">
          <source>This is the default setting.</source>
        </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept> Updates the current x-position after each call to a text-output function.</source>
        </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve">
          <source>The new position is at the right side of the bounding rectangle for the text.</source>
        </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve">
          <source>When this flag is set, the coordinates specified in calls to the <ph id="ph1">`TextOut`</ph> member function are ignored.</source>
        </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve">
          <source>The previous text-alignment setting, if successful.</source>
        </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve">
          <source>The low-order byte contains the horizontal setting and the high-order byte contains the vertical setting; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextOut`</ph> and <ph id="ph2">`ExtTextOut`</ph> member functions use these flags when positioning a string of text on a display or device.</source>
        </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve">
          <source>The flags specify the relationship between a specific point and a rectangle that bounds the text.</source>
        </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve">
          <source>The coordinates of this point are passed as parameters to the <ph id="ph1">`TextOut`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve">
          <source>The rectangle that bounds the text is formed by the adjacent character cells in the text string.</source>
        </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__settextcharacterextra"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetTextCharacterExtra</source>
        </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve">
          <source>Sets the amount of intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve">
          <source>Specifies the amount of extra space (in logical units) to be added to each character.</source>
        </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve">
          <source>If the current mapping mode is not <ph id="ph1">`MM_TEXT`</ph>, <ph id="ph2">`nCharExtra`</ph> is transformed and rounded to the nearest pixel.</source>
        </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve">
          <source>The amount of the previous intercharacter spacing.</source>
        </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve">
          <source>GDI adds this spacing to each character, including break characters, when it writes a line of text to the device context.</source>
        </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve">
          <source>The default value for the amount of intercharacter spacing is 0.</source>
        </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__settextcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetTextColor</source>
        </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve">
          <source>Sets the text color to the specified color.</source>
        </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve">
          <source>Specifies the color of the text as an RGB color value.</source>
        </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve">
          <source>An RGB value for the previous text color.</source>
        </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve">
          <source>The system will use this text color when writing text to this device context and also when converting bitmaps between color and monochrome device contexts.</source>
        </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve">
          <source>If the device cannot represent the specified color, the system sets the text color to the nearest physical color.</source>
        </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve">
          <source>The background color for a character is specified by the <ph id="ph1">`SetBkColor`</ph> and <ph id="ph2">`SetBkMode`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::OnCtlColor<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onctlcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__settextjustification"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetTextJustification</source>
        </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve">
          <source>Adds space to the break characters in a string.</source>
        </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve">
          <source>Specifies the total extra space to be added to the line of text (in logical units).</source>
        </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve">
          <source>If the current mapping mode is not <ph id="ph1">`MM_TEXT`</ph>, the value given by this parameter is converted to the current mapping mode and rounded to the nearest device unit.</source>
        </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nBreakCount<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve">
          <source>Specifies the number of break characters in the line.</source>
        </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve">
          <source>One if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve">
          <source>An application can use the <ph id="ph1">`GetTextMetrics`</ph> member functions to retrieve a font's break character.</source>
        </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`SetTextJustification`</ph> member function is called, a call to a text-output function (such as <ph id="ph2">`TextOut`</ph>) distributes the specified extra space evenly among the specified number of break characters.</source>
        </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve">
          <source>The break character is usually the space character (ASCII 32), but may be defined by a font as some other character.</source>
        </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve">
          <source>The member function <ph id="ph1">`GetTextExtent`</ph> is typically used with <ph id="ph2">`SetTextJustification`</ph>.</source>
        </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetTextExtent`</ph> computes the width of a given line before alignment.</source>
        </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve">
          <source>An application can determine how much space to specify in the <ph id="ph1">`nBreakExtra`</ph> parameter by subtracting the value returned by <ph id="ph2">`GetTextExtent`</ph> from the width of the string after alignment.</source>
        </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetTextJustification`</ph> function can be used to align a line that contains multiple runs in different fonts.</source>
        </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve">
          <source>In this case, the line must be created piecemeal by aligning and writing each run separately.</source>
        </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve">
          <source>Because rounding errors can occur during alignment, the system keeps a running error term that defines the current error.</source>
        </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve">
          <source>When aligning a line that contains multiple runs, <ph id="ph1">`GetTextExtent`</ph> automatically uses this error term when it computes the extent of the next run.</source>
        </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve">
          <source>This allows the text-output function to blend the error into the new run.</source>
        </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve">
          <source>After each line has been aligned, this error term must be cleared to prevent it from being incorporated into the next line.</source>
        </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve">
          <source>The term can be cleared by calling <ph id="ph1">`SetTextJustification`</ph> with <ph id="ph2">`nBreakExtra`</ph> set to 0.</source>
        </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setviewportext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetViewportExt</source>
        </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve">
          <source>Sets the x- and y-extents of the viewport of the device context.</source>
        </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve">
          <source>Specifies the x-extent of the viewport (in device units).</source>
        </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve">
          <source>Specifies the y-extent of the viewport (in device units).</source>
        </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-extents of the viewport (in device units).</source>
        </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve">
          <source>The previous extents of the viewport as a <bpt id="p1">[</bpt>CSize<ept id="p1">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve">
          <source>When an error occurs, the x- and y-coordinates of the returned <ph id="ph1">`CSize`</ph> object are both set to 0.</source>
        </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve">
          <source>The viewport, along with the device-context window, defines how GDI maps points in the logical coordinate system to points in the coordinate system of the actual device.</source>
        </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve">
          <source>In other words, they define how GDI converts logical coordinates into device coordinates.</source>
        </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve">
          <source>When the following mapping modes are set, calls to <ph id="ph1">`SetWindowExt`</ph> and <ph id="ph2">`SetViewportExt`</ph> are ignored:</source>
        </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve">
          <source>MM_HIENGLISH</source>
        </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve">
          <source>MM_LOMETRIC</source>
        </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`MM_ISOTROPIC`</ph> mode is set, an application must call the <ph id="ph2">`SetWindowExt`</ph> member function before it calls <ph id="ph3">`SetViewportExt`</ph>.</source>
        </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](../../mfc/reference/cview-class.md#cview__onpreparedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setviewportorg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetViewportOrg</source>
        </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve">
          <source>Sets the viewport origin of the device context.</source>
        </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate (in device units) of the origin of the viewport.</source>
        </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve">
          <source>The value must be within the range of the device coordinate system.</source>
        </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate (in device units) of the origin of the viewport.</source>
        </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve">
          <source>The value must be within the range of the device coordinate system.</source>
        </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve">
          <source>Specifies the origin of the viewport.</source>
        </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve">
          <source>The values must be within the range of the device coordinate system.</source>
        </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve">
          <source>The previous origin of the viewport (in device coordinates) as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve">
          <source>The viewport, along with the device-context window, defines how GDI maps points in the logical coordinate system to points in the coordinate system of the actual device.</source>
        </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve">
          <source>In other words, they define how GDI converts logical coordinates into device coordinates.</source>
        </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve">
          <source>The viewport origin marks the point in the device coordinate system to which GDI maps the window origin, a point in the logical coordinate system specified by the <bpt id="p1">**</bpt>SetWindowOrg<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve">
          <source>GDI maps all other points by following the same process required to map the window origin to the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve">
          <source>For example, all points in a circle around the point at the window origin will be in a circle around the point at the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve">
          <source>Similarly, all points in a line that passes through the window origin will be in a line that passes through the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](../../mfc/reference/cview-class.md#cview__onpreparedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setwindowext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetWindowExt</source>
        </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve">
          <source>Sets the x- and y-extents of the window associated with the device context.</source>
        </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve">
          <source>Specifies the x-extent (in logical units) of the window.</source>
        </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve">
          <source>Specifies the y-extent (in logical units) of the window.</source>
        </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-extents (in logical units) of the window.</source>
        </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve">
          <source>The previous extents of the window (in logical units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve">
          <source>If an error occurs, the x- and y-coordinates of the returned <ph id="ph1">`CSize`</ph> object are both set to 0.</source>
        </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve">
          <source>The window, along with the device-context viewport, defines how GDI maps points in the logical coordinate system to points in the device coordinate system.</source>
        </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve">
          <source>When the following mapping modes are set, calls to <ph id="ph1">`SetWindowExt`</ph> and <ph id="ph2">`SetViewportExt`</ph> functions are ignored:</source>
        </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`MM_ISOTROPIC`</ph> mode is set, an application must call the <ph id="ph2">`SetWindowExt`</ph> member function before calling <ph id="ph3">`SetViewportExt`</ph>.</source>
        </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](../../mfc/reference/cview-class.md#cview__onpreparedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setwindoworg"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetWindowOrg</source>
        </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve">
          <source>Sets the window origin of the device context.</source>
        </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the new origin of the window.</source>
        </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the new origin of the window.</source>
        </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve">
          <source>Specifies the logical coordinates of the new origin of the window.</source>
        </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve">
          <source>You can pass either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph1">`CPoint`</ph> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve">
          <source>The previous origin of the window as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve">
          <source>The window, along with the device-context viewport, defines how GDI maps points in the logical coordinate system to points in the device coordinate system.</source>
        </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve">
          <source>The window origin marks the point in the logical coordinate system from which GDI maps the viewport origin, a point in the device coordinate system specified by the <bpt id="p1">**</bpt>SetWindowOrg<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve">
          <source>GDI maps all other points by following the same process required to map the window origin to the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve">
          <source>For example, all points in a circle around the point at the window origin will be in a circle around the point at the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve">
          <source>Similarly, all points in a line that passes through the window origin will be in a line that passes through the viewport origin.</source>
        </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__setworldtransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::SetWorldTransform</source>
        </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve">
          <source>Sets a two-dimensional linear transformation between world space and page space for the specified device context.</source>
        </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve">
          <source>This transformation can be used to scale, rotate, shear, or translate graphics output.</source>
        </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve">
          <source>Reference to an <bpt id="p1">[</bpt>XFORM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145228)</ept> structure that contains the transformation data.</source>
        </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve">
          <source>Returns a nonzero value on success.</source>
        </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve">
          <source>Returns 0 on failure.</source>
        </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve">
          <source>To get extended error information, call <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.</source>
        </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve">
          <source>This method wraps the Windows GDI function <bpt id="p1">[</bpt>SetWorldTransform<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145104)</ept>.</source>
        </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__startdoc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::StartDoc</source>
        </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve">
          <source>Informs the device driver that a new print job is starting and that all subsequent <ph id="ph1">`StartPage`</ph> and <ph id="ph2">`EndPage`</ph> calls should be spooled under the same job until an <ph id="ph3">`EndDoc`</ph> call occurs.</source>
        </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpDocInfo<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>DOCINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183574)</ept> structure containing the name of the document file and the name of the output file.</source>
        </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszDocName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve">
          <source>Pointer to a string containing the name of the document file.</source>
        </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is greater than zero.</source>
        </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve">
          <source>This value is the print job identifier for the document.</source>
        </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve">
          <source>This ensures that documents longer than one page will not be interspersed with other jobs.</source>
        </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve">
          <source>For Windows versions 3.1 and later, this function replaces the <bpt id="p1">**</bpt>STARTDOC<ept id="p1">**</ept> printer escape.</source>
        </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve">
          <source>Using this function ensures that documents containing more than one page are not interspersed with other print jobs.</source>
        </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StartDoc`</ph> should not be used inside metafiles.</source>
        </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve">
          <source>This code fragment gets the default printer, opens a print job, and spools one page with "Hello, World!"</source>
        </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve">
          <source>on it.</source>
        </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve">
          <source>Because the text printed by this code isn't scaled to the printer's logical units, the output text may be in such small letters that the result is unreadable.</source>
        </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve">
          <source>The CDC scaling functions, such as <ph id="ph1">`SetMapMode`</ph>, <ph id="ph2">`SetViewportOrg`</ph>, and <ph id="ph3">`SetWindowExt`</ph>, can be used to fix the scaling.</source>
        </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#41<ept id="p2">](../../mfc/codesnippet/cpp/cdc-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__startpage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::StartPage</source>
        </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve">
          <source>Call this member function to prepare the printer driver to receive data.</source>
        </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve">
          <source>Greater than or equal to 0 if the function is successful, or a negative value if an error occurred.</source>
        </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StartPage`</ph> supersedes the <bpt id="p1">**</bpt>NEWFRAME<ept id="p1">**</ept> and <bpt id="p2">**</bpt>BANDINFO<ept id="p2">**</ept> escapes.</source>
        </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve">
          <source>For an overview of the sequence of printing calls, see the <bpt id="p1">[</bpt>StartDoc<ept id="p1">](#cdc__startdoc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve">
          <source>The system disables the <ph id="ph1">`ResetDC`</ph> member function between calls to <ph id="ph2">`StartPage`</ph> and <ph id="ph3">`EndPage`</ph>.</source>
        </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::StartDoc<ept id="p1">](#cdc__startdoc)</ept>.</source>
        </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__stretchblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::StretchBlt</source>
        </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve">
          <source>Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap if necessary to fit the dimensions of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate (in logical units) of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate (in logical units) of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve">
          <source>Specifies the width (in logical units) of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve">
          <source>Specifies the height (in logical units) of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve">
          <source>Specifies the source device context.</source>
        </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate (in logical units) of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate (in logical units) of the upper-left corner of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve">
          <source>Specifies the width (in logical units) of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve">
          <source>Specifies the height (in logical units) of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve">
          <source>Specifies the raster operation to be performed.</source>
        </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve">
          <source>Raster operation codes define how GDI combines colors in output operations that involve a current brush, a possible source bitmap, and a destination bitmap.</source>
        </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve">
          <source>This parameter may be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BLACKNESS<ept id="p1">**</ept> Turns all output black.</source>
        </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DSTINVERT<ept id="p1">**</ept> Inverts the destination bitmap.</source>
        </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MERGECOPY<ept id="p1">**</ept> Combines the pattern and the source bitmap using the Boolean AND operator.</source>
        </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MERGEPAINT<ept id="p1">**</ept> Combines the inverted source bitmap with the destination bitmap using the Boolean OR operator.</source>
        </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTSRCCOPY<ept id="p1">**</ept> Copies the inverted source bitmap to the destination.</source>
        </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTSRCERASE<ept id="p1">**</ept> Inverts the result of combining the destination and source bitmaps using the Boolean OR operator.</source>
        </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATCOPY<ept id="p1">**</ept> Copies the pattern to the destination bitmap.</source>
        </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATINVERT<ept id="p1">**</ept> Combines the destination bitmap with the pattern using the Boolean XOR operator.</source>
        </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATPAINT<ept id="p1">**</ept> Combines the inverted source bitmap with the pattern using the Boolean OR operator.</source>
        </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve">
          <source>Combines the result of this operation with the destination bitmap using the Boolean OR operator.</source>
        </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SRCAND<ept id="p1">**</ept> Combines pixels of the destination and source bitmaps using the Boolean AND operator.</source>
        </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SRCCOPY<ept id="p1">**</ept> Copies the source bitmap to the destination bitmap.</source>
        </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SRCERASE<ept id="p1">**</ept> Inverts the destination bitmap and combines the result with the source bitmap using the Boolean AND operator.</source>
        </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SRCINVERT<ept id="p1">**</ept> Combines pixels of the destination and source bitmaps using the Boolean XOR operator.</source>
        </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SRCPAINT<ept id="p1">**</ept> Combines pixels of the destination and source bitmaps using the Boolean OR operator.</source>
        </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHITENESS<ept id="p1">**</ept> Turns all output white.</source>
        </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve">
          <source>Nonzero if the bitmap is drawn; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve">
          <source>The function uses the stretching mode of the destination device context (set by <ph id="ph1">`SetStretchBltMode`</ph>) to determine how to stretch or compress the bitmap.</source>
        </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StretchBlt`</ph> function moves the bitmap from the source device given by <ph id="ph2">`pSrcDC`</ph> to the destination device represented by the device-context object whose member function is being called.</source>
        </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xSrc`</ph>, <ph id="ph2">`ySrc`</ph>, <ph id="ph3">`nSrcWidth`</ph>, and <ph id="ph4">`nSrcHeight`</ph> parameters define the upper-left corner and dimensions of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>x<ept id="p1">*</ept>, <bpt id="p2">*</bpt>y<ept id="p2">*</ept>, <ph id="ph1">`nWidth`</ph>, and <ph id="ph2">`nHeight`</ph> parameters give the upper-left corner and dimensions of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve">
          <source>The raster operation specified by <bpt id="p1">*</bpt>dwRop<ept id="p1">*</ept> defines how the source bitmap and the bits already on the destination device are combined.</source>
        </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StretchBlt`</ph> function creates a mirror image of a bitmap if the signs of the <ph id="ph2">`nSrcWidth`</ph> and <ph id="ph3">`nWidth`</ph> or <ph id="ph4">`nSrcHeight`</ph> and <ph id="ph5">`nHeight`</ph> parameters differ.</source>
        </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSrcWidth`</ph> and <ph id="ph2">`nWidth`</ph> have different signs, the function creates a mirror image of the bitmap along the x-axis.</source>
        </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSrcHeight`</ph> and <ph id="ph2">`nHeight`</ph> have different signs, the function creates a mirror image of the bitmap along the y-axis.</source>
        </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StretchBlt`</ph> function stretches or compresses the source bitmap in memory and then copies the result to the destination.</source>
        </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve">
          <source>If a pattern is to be merged with the result, it is not merged until the stretched source bitmap is copied to the destination.</source>
        </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve">
          <source>If a brush is used, it is the selected brush in the destination device context.</source>
        </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve">
          <source>The destination coordinates are transformed according to the destination device context; the source coordinates are transformed according to the source device context.</source>
        </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve">
          <source>If the destination, source, and pattern bitmaps do not have the same color format, <ph id="ph1">`StretchBlt`</ph> converts the source and pattern bitmaps to match the destination bitmaps.</source>
        </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve">
          <source>The foreground and background colors of the destination device context are used in the conversion.</source>
        </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`StretchBlt`</ph> must convert a monochrome bitmap to color, it sets white bits (1) to the background color and black bits (0) to the foreground color.</source>
        </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve">
          <source>To convert color to monochrome, it sets pixels that match the background color to white (1) and sets all other pixels to black (0).</source>
        </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve">
          <source>The foreground and background colors of the device context with color are used.</source>
        </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve">
          <source>Not all devices support the <ph id="ph1">`StretchBlt`</ph> function.</source>
        </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve">
          <source>To determine whether a device supports <ph id="ph1">`StretchBlt`</ph>, call the <ph id="ph2">`GetDeviceCaps`</ph> member function with the <bpt id="p1">**</bpt>RASTERCAPS<ept id="p1">**</ept> index and check the return value for the <bpt id="p2">**</bpt>RC_STRETCHBLT<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__strokeandfillpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::StrokeAndFillPath</source>
        </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve">
          <source>Closes any open figures in a path, strokes the outline of the path by using the current pen, and fills its interior by using the current brush.</source>
        </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve">
          <source>The device context must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StrokeAndFillPath`</ph> member function has the same effect as closing all the open figures in the path, and stroking and filling the path separately, except that the filled region will not overlap the stroked region even if the pen is wide.</source>
        </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__strokepath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::StrokePath</source>
        </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve">
          <source>Renders the specified path by using the current pen.</source>
        </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve">
          <source>The device context must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__tabbedtextout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::TabbedTextOut</source>
        </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve">
          <source>Call this member function to write a character string at the specified location, expanding tabs to the values specified in the array of tab-stop positions.</source>
        </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the starting point of the string.</source>
        </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the starting point of the string.</source>
        </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve">
          <source>Points to the character string to draw.</source>
        </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve">
          <source>You can pass either a pointer to an array of characters or a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object for this parameter.</source>
        </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCount`</ph> is –1, the length is calculated.</source>
        </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve">
          <source>Specifies the number of values in the array of tab-stop positions.</source>
        </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve">
          <source>Points to an array containing the tab-stop positions (in logical units).</source>
        </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve">
          <source>The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</source>
        </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the starting position from which tabs are expanded (in logical units).</source>
        </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the specified characters.</source>
        </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve">
          <source>The dimensions of the string (in logical units) as a <ph id="ph1">`CSize`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve">
          <source>Text is written in the currently selected font.</source>
        </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 0 and <ph id="ph2">`lpnTabStopPositions`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, tabs are expanded to eight times the average character width.</source>
        </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nTabPositions`</ph> is 1, the tab stops are separated by the distance specified by the first value in the <ph id="ph2">`lpnTabStopPositions`</ph> array.</source>
        </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`lpnTabStopPositions`</ph> array contains more than one value, a tab stop is set for each value in the array, up to the number specified by <ph id="ph2">`nTabPositions`</ph>.</source>
        </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nTabOrigin`</ph> parameter allows an application to call the <ph id="ph2">`TabbedTextOut`</ph> function several times for a single line.</source>
        </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve">
          <source>If the application calls the function more than once with the <ph id="ph1">`nTabOrigin`</ph> set to the same value each time, the function expands all tabs relative to the position specified by <ph id="ph2">`nTabOrigin`</ph>.</source>
        </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve">
          <source>By default, the current position is not used or updated by the function.</source>
        </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve">
          <source>If an application needs to update the current position when it calls the function, the application can call the <bpt id="p1">[</bpt>SetTextAlign<ept id="p1">](#cdc__settextalign)</ept> member function with <ph id="ph1">`nFlags`</ph> set to <bpt id="p2">**</bpt>TA_UPDATECP<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve">
          <source>When this flag is set, Windows ignores the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters on subsequent calls to <ph id="ph1">`TabbedTextOut`</ph>, using the current position instead.</source>
        </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__textout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::TextOut</source>
        </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve">
          <source>Writes a character string at the specified location using the currently selected font.</source>
        </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the starting point of the text.</source>
        </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>y<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the starting point of the text.</source>
        </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve">
          <source>Points to the character string to be drawn.</source>
        </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in the string.</source>
        </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that contains the characters to be drawn.</source>
        </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve">
          <source>Character origins are at the upper-left corner of the character cell.</source>
        </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve">
          <source>By default, the current position is not used or updated by the function.</source>
        </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve">
          <source>If an application needs to update the current position when it calls <ph id="ph1">`TextOut`</ph>, the application can call the <ph id="ph2">`SetTextAlign`</ph> member function with <ph id="ph3">`nFlags`</ph> set to <bpt id="p1">**</bpt>TA_UPDATECP<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve">
          <source>When this flag is set, Windows ignores the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters on subsequent calls to <ph id="ph1">`TextOut`</ph>, using the current position instead.</source>
        </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CDC::BeginPath<ept id="p1">](#cdc__beginpath)</ept>.</source>
        </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__transparentblt"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::TransparentBlt</source>
        </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve">
          <source>Call this member function to transfer a bit-block of the color data, which corresponds to a rectangle of pixels from the specified source device context, into a destination device context.</source>
        </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the destination rectangle.</source>
        </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve">
          <source>Pointer to the source device context.</source>
        </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve">
          <source>Specifies the width, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve">
          <source>Specifies the height, in logical units, of the source rectangle.</source>
        </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve">
          <source>The RGB color in the source bitmap to treat as transparent.</source>
        </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TransparentBlt`</ph> allows for transparency; that is, the RGB color indicated by <ph id="ph2">`clrTransparent`</ph> is rendered transparent for the transfer.</source>
        </trans-unit>
        <trans-unit id="3627" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TransparentBlt<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145141)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3628" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__updatecolors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::UpdateColors</source>
        </trans-unit>
        <trans-unit id="3629" translate="yes" xml:space="preserve">
          <source>Updates the client area of the device context by matching the current colors in the client area to the system palette on a pixel-by-pixel basis.</source>
        </trans-unit>
        <trans-unit id="3630" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3631" translate="yes" xml:space="preserve">
          <source>An inactive window with a realized logical palette may call <ph id="ph1">`UpdateColors`</ph> as an alternative to redrawing its client area when the system palette changes.</source>
        </trans-unit>
        <trans-unit id="3632" translate="yes" xml:space="preserve">
          <source>For more information about using color palettes, see <bpt id="p1">[</bpt>UpdateColors<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145166)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3633" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UpdateColors`</ph> member function typically updates a client area faster than redrawing the area.</source>
        </trans-unit>
        <trans-unit id="3634" translate="yes" xml:space="preserve">
          <source>However, because the function performs the color translation based on the color of each pixel before the system palette changed, each call to this function results in the loss of some color accuracy.</source>
        </trans-unit>
        <trans-unit id="3635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdc__widenpath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDC::WidenPath</source>
        </trans-unit>
        <trans-unit id="3636" translate="yes" xml:space="preserve">
          <source>Redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the device context.</source>
        </trans-unit>
        <trans-unit id="3637" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3638" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3639" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3640" translate="yes" xml:space="preserve">
          <source>This function is successful only if the current pen is a geometric pen created by the second version of <ph id="ph1">`CreatePen`</ph> member function, or if the pen is created with the first version of <ph id="ph2">`CreatePen`</ph> and has a width, in device units, of greater than 1.</source>
        </trans-unit>
        <trans-unit id="3641" translate="yes" xml:space="preserve">
          <source>The device context must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="3642" translate="yes" xml:space="preserve">
          <source>Any Bzier curves in the path are converted to sequences of straight lines approximating the widened curves.</source>
        </trans-unit>
        <trans-unit id="3643" translate="yes" xml:space="preserve">
          <source>As such, no Bzier curves remain in the path after <ph id="ph1">`WidenPath`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="3644" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="3645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="3646" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="3647" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CPaintDC Class<ept id="p1">](../../mfc/reference/cpaintdc-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="3648" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWindowDC Class<ept id="p1">](../../mfc/reference/cwindowdc-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="3649" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CClientDC Class<ept id="p1">](../../mfc/reference/cclientdc-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="3650" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CMetaFileDC Class<ept id="p1">](../../mfc/reference/cmetafiledc-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>