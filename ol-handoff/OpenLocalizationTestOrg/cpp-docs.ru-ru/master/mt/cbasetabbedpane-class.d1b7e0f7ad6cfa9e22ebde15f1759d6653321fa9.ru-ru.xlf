<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10c0149d390110b9e48aad086248bc920df1a4e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cbasetabbedpane-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c29e11066facf6962f16910e4354f2617c0a51b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2668546f9c507f9f7bda6262b0f4e871076e84a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CBaseTabbedPane Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CBaseTabbedPane Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Extends the functionality of the <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept> to support the creation of tabbed windows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Default constructor.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::AddTab<ept id="p1">](#cbasetabbedpane__addtab)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Adds a new tab to a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::AllowDestroyEmptyTabbedPane<ept id="p1">](#cbasetabbedpane__allowdestroyemptytabbedpane)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies whether an empty tabbed pane can be destroyed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::ApplyRestoredTabInfo<ept id="p1">](#cbasetabbedpane__applyrestoredtabinfo)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Applies tab settings, which are loaded from the registry, to a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::CanFloat<ept id="p1">](#cbasetabbedpane__canfloat)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Determines whether the pane can float.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::CanFloat<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canfloat)</ept>.)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::CanSetCaptionTextToTabName<ept id="p1">](#cbasetabbedpane__cansetcaptiontexttotabname)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Determines whether the caption for the tabbed pane should display the same text as the active tab.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::ConvertToTabbedDocument<ept id="p1">](#cbasetabbedpane__converttotabbeddocument)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CDockablePane::ConvertToTabbedDocument<ept id="p1">](../../mfc/reference/cdockablepane-class.md#cdockablepane__converttotabbeddocument)</ept>.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::DetachPane<ept id="p1">](#cbasetabbedpane__detachpane)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Converts one or more dockable panes to MDI tabbed documents.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::EnableSetCaptionTextToTabName<ept id="p1">](#cbasetabbedpane__enablesetcaptiontexttotabname)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enables or disables the ability of the tabbed pane to synchronize caption text with the label text on the active tab.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::FillDefaultTabsOrderArray<ept id="p1">](#cbasetabbedpane__filldefaulttabsorderarray)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Restores the internal tab order to a default state.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::FindBarByTabNumber<ept id="p1">](#cbasetabbedpane__findbarbytabnumber)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a pane that resides in a tab when the tab is identified by a zero-based tab index.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::FindPaneByID<ept id="p1">](#cbasetabbedpane__findpanebyid)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns a pane that is identified by the pane ID.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::FloatTab<ept id="p1">](#cbasetabbedpane__floattab)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Floats a pane, but only if the pane currently resides in a detachable tab.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetDefaultTabsOrder<ept id="p1">](#cbasetabbedpane__getdefaulttabsorder)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the default order of tabs in the pane.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetFirstVisibleTab<ept id="p1">](#cbasetabbedpane__getfirstvisibletab)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the first displayed tab.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetMinSize<ept id="p1">](#cbasetabbedpane__getminsize)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum allowed size for the pane.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::GetMinSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__getminsize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetPaneIcon<ept id="p1">](#cbasetabbedpane__getpaneicon)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a handle to the pane icon.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CBasePane::GetPaneIcon<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__getpaneicon)</ept>.)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetPaneList<ept id="p1">](#cbasetabbedpane__getpanelist)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns a list of panes that are contained in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetTabArea<ept id="p1">](#cbasetabbedpane__gettabarea)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns the bounding rectangles for the top and bottom tab areas.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetTabsNum<ept id="p1">](#cbasetabbedpane__gettabsnum)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns the count of tabs in a tab window.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetUnderlyingWindow<ept id="p1">](#cbasetabbedpane__getunderlyingwindow)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets the underlying (wrapped) tab window.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::GetVisibleTabsNum<ept id="p1">](#cbasetabbedpane__getvisibletabsnum)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the count of displayed tabs.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::HasAutoHideMode<ept id="p1">](#cbasetabbedpane__hasautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed pane can be switched to auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::IsHideSingleTab<ept id="p1">](#cbasetabbedpane__ishidesingletab)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed pane is hidden if only one tab is displayed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Used internally during serialization.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::RecalcLayout<ept id="p1">](#cbasetabbedpane__recalclayout)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Recalculates layout information for the pane.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::RecalcLayout<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__recalclayout)</ept>.)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::RemovePane<ept id="p1">](#cbasetabbedpane__removepane)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Removes a pane from the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Used internally during serialization.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CDockablePane::Serialize<ept id="p1">](http://msdn.microsoft.com/en-us/09787e59-e446-4e76-894b-206d303dcfd6)</ept>.)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Used internally during serialization.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::SetAutoDestroy<ept id="p1">](#cbasetabbedpane__setautodestroy)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed control bar will be destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::SetAutoHideMode<ept id="p1">](#cbasetabbedpane__setautohidemode)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Toggles the docking pane between displayed and auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CDockablePane::SetAutoHideMode<ept id="p1">](../../mfc/reference/cdockablepane-class.md#cdockablepane__setautohidemode)</ept>.)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane::ShowTab<ept id="p1">](#cbasetabbedpane__showtab)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Shows or hides a tab.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This class is an abstract class and cannot be instantiated.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It implements the services that are common to all kinds of tabbed panes.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Currently, the library includes two derived tabbed pane classes: <bpt id="p1">[</bpt>CTabbedPane Class<ept id="p1">](../../mfc/reference/ctabbedpane-class.md)</ept> and <bpt id="p2">[</bpt>CMFCOutlookBar Class<ept id="p2">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CBaseTabbedPane`</ph> object wraps a pointer to a <bpt id="p1">[</bpt>CMFCBaseTabCtrl Class<ept id="p1">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMFCBaseTabCtrl Class<ept id="p1">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> then becomes a child window of the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information about how to create tabbed panes, see <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept>, <bpt id="p2">[</bpt>CTabbedPane Class<ept id="p2">](../../mfc/reference/ctabbedpane-class.md)</ept>, and <bpt id="p3">[</bpt>CMFCOutlookBar Class<ept id="p3">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBasePane<ept id="p1">](../../mfc/reference/cbasepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPane<ept id="p1">](../../mfc/reference/cpane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDockablePane<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBaseTabbedPane<ept id="p1">](../../mfc/reference/cbasetabbedpane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxBaseTabbedPane.h</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__addtab"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::AddTab</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Adds a new tab to a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pNewBar`</ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to add.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This pointer may become invalid after you call this method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bVisible`</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to make the tab visible; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bSetActive`</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to make the tab the active tab; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDetachable`</ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to make the tab detachable; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane was successfully added as a tab and was not destroyed in the process.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FALSE`</ph> if the pane being added is an object of type <ph id="ph2">`CBaseTabbedPane`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this method to add a pane as a new tab on a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pNewBar`</ph> points to an object of type <ph id="ph2">`CBaseTabbedPane`</ph>, all its tabs are copied onto the tabbed pane and then <ph id="ph3">`pNewBar`</ph> is destroyed.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`pNewBar`</ph> becomes an invalid pointer and should not be used.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__allowdestroyemptytabbedpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::AllowDestroyEmptyTabbedPane</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Specifies whether an empty tabbed pane can be destroyed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if an empty tabbed pane can be destroyed; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If an empty tabbed pane is not allowed to be destroyed, the framework hides the pane instead.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__applyrestoredtabinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::ApplyRestoredTabInfo</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Loads tab settings from the registry and applies them to a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUseTabIndexes`</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This parameter is used internally by the framework.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when it reloads docking state information from the registry.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The method obtains information about tab order and tab names for a tabbed pane.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__canfloat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::CanFloat</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Specifies whether the tabbed pane can float.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can float; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__cansetcaptiontexttotabname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::CanSetCaptionTextToTabName</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Determines whether the caption for the tabbed pane should display the same text as the active tab.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the caption text of the tabbed pane is set to the text of the active tab; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The method is used to determine whether the text displayed on the tabbed pane caption duplicates the label of the active tab.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You can enable or disable this functionality by calling <bpt id="p1">[</bpt>CBaseTabbedPane::EnableSetCaptionTextToTabName<ept id="p1">](#cbasetabbedpane__enablesetcaptiontexttotabname)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__converttotabbeddocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::ConvertToTabbedDocument</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Converts one or more dockable panes to MDI tabbed documents.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bActiveTabOnly`</ph></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When you convert a tabbed pane, specify <ph id="ph1">`TRUE`</ph> to convert only the active tab.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`FALSE`</ph> to convert all tabs in the pane.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__detachpane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::DetachPane</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Detaches a pane from the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Pointer to the pane to detach.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHide`</ph></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Boolean parameter that specifies whether the framework hides the pane after it is detached.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the framework successfully detaches the pane; <ph id="ph2">`FALSE`</ph> if <ph id="ph3">`pBar`</ph> is <ph id="ph4">`NULL`</ph> or refers to a pane that is not in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The framework floats the detached pane if possible.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CBasePane::CanFloat<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__canfloat)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__enablesetcaptiontexttotabname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::EnableSetCaptionTextToTabName</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Enables or disables the ability of the tabbed pane to synchronize caption text with the label text on the active tab.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bEnable`</ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to synchronize the tabbed pane caption with the active tab caption; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__filldefaulttabsorderarray"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::FillDefaultTabsOrderArray</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Restores the internal tab order to a default state.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This method is called when the framework restores an Outlook bar to an initial state.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__findpanebyid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::FindPaneByID</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Returns a pane identified by the pane ID.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`uBarID`</ph></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Specifies the ID of the pane to find.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A pointer to the pane if it was found; otherwise, <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This method compares all tabs in the pane and returns the one with the ID specified by the <ph id="ph1">`uBarID`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__findbarbytabnumber"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::FindBarByTabNumber</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Returns a pane that resides in a tab.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nTabNum`</ph></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the tab to retrieve.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bGetWrappedBar`</ph></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to return the underlying (wrapped) window of the pane instead of the pane itself; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This only applies to panes derived from <bpt id="p1">[</bpt>CDockablePaneAdapter<ept id="p1">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the pane is found, then a valid pointer to the pane being searched for is returned; otherwise, <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the pane residing in the tab specified by the <ph id="ph1">`nTabNum`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__floattab"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::FloatTab</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Floats a pane, but only if the pane currently resides in a detachable tab.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to float.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`nTabID`</ph></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the tab to float.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dockMethod`</ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Specifies the method to use to make the pane float.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For more information, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bHide`</ph></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to hide the pane before floating; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane floated; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Call this method to float a pane that currently resides in a detachable tab.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If you want to detach a pane programmatically, specify <ph id="ph1">`DM_SHOW`</ph> for the <ph id="ph2">`dockMethod`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>If you want to float the pane in the same position where it floated previously, specify <ph id="ph1">`DM_DBL_CLICK`</ph> as the <ph id="ph2">`dockMethod`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getdefaulttabsorder"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetDefaultTabsOrder</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Returns the default order of tabs in the pane.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArray`</ph> object that specifies the default order of tabs in the pane.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The framework calls this method when an Outlook bar is reset to an initial state.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getfirstvisibletab"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetFirstVisibleTab</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the first displayed tab.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`iTabNum`</ph></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A reference to an integer.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This method writes the zero-based index of the first displayed tab to this parameter, or -1 if no displayed tab is found.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If successful, a pointer to the first displayed tab; otherwise, <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getminsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetMinSize</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum allowed size for the pane.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`size`</ph></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that is filled with the minimum allowed size.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If consistent handling of minimum pane sizes is active ( <bpt id="p1">[</bpt>CPane::m_bHandleMinSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__m_bhandleminsize)</ept>), <ph id="ph1">`size`</ph> is filled with the minimum allowed size for the active tab.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`size`</ph> is filled with the return value of <bpt id="p1">[</bpt>CPane::GetMinSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__getminsize)</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getpaneicon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetPaneIcon</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum allowed size for the pane.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`size`</ph></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSize`</ph> object that is filled with the minimum allowed size.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If consistent handling of minimum pane sizes is active ( <bpt id="p1">[</bpt>CPane::m_bHandleMinSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__m_bhandleminsize)</ept>), <ph id="ph1">`size`</ph> is filled with the minimum allowed size for the active tab.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`size`</ph> is filled with the return value of <bpt id="p1">[</bpt>CPane::GetMinSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__getminsize)</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getpanelist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetPaneList</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Returns a list of panes that are contained in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`lst`</ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CObList`</ph> that is filled with the panes that are contained in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pRTCFilter`</ph></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If it is not <ph id="ph1">`NULL`</ph>, the returned list contains only panes that are of the specified runtime class.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__gettabarea"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetTabArea</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns the bounding rectangles for the top and bottom tab areas.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`rectTabAreaTop`</ph></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Receives the screen coordinates of the upper tab area.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>[out] <ph id="ph1">`rectTabAreaBottom`</ph></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Receives the screen coordinates of the lower tab area.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Call this method to determine the bounding rectangles, in screen coordinates, for the upper and lower tab areas.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__gettabsnum"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetTabsNum</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Returns the count of tabs in a tab window.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The number of tabs in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getunderlyingwindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetUnderlyingWindow</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Gets the underlying (wrapped) tab window.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A pointer to the underlying tab window.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__getvisibletabsnum"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::GetVisibleTabsNum</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Returns the count of visible tabs.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The number of visible tabs, which will be greater than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Call this method to determine the number of visible tabs in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__hasautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::HasAutoHideMode</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed pane can be switched to autohide mode.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane can be switched to autohide mode; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If autohide mode is disabled, no pin button is displayed on the tabbed pane caption.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__ishidesingletab"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::IsHideSingleTab</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed pane is hidden if only one tab is displayed.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the tab window is not shown when there is only one visible tab; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>If the pane is not displayed because only one tab is open, you can call this method to determine whether the tabbed pane is working correctly.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__removepane"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::RemovePane</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Removes a pane from the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to remove from the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the pane was successfully removed from the tabbed pane and if the tabbed pane is still valid.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FALSE`</ph> if the last pane has been removed from the tabbed pane and the tabbed pane is about to be destroyed.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If the return value is <ph id="ph1">`FALSE`</ph>, do not use the tabbed pane any more.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Call this method to remove the pane specified by the <ph id="ph1">`pBar`</ph> parameter from the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__setautodestroy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::SetAutoDestroy</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Determines whether the tabbed control bar will be destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bAutoDestroy`</ph></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> if the tabbed pane was created dynamically and you are not controlling its lifetime; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Set the auto-destroy mode to <ph id="ph1">`TRUE`</ph> if you create a tabbed pane dynamically and if you are not controlling its lifetime.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>If auto-destroy mode is <ph id="ph1">`TRUE`</ph>, the tabbed pane will be destroyed automatically by the framework.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__showtab"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::ShowTab</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Shows or hides a tab.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`pBar`</ph></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A pointer to the pane to show or hide.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bShow`</ph></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to show the pane; <ph id="ph2">`FALSE`</ph> to hide the pane.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bDelay`</ph></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to delay the adjustment of the tab layout; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bActivate`</ph></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to make the tab the active tab; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> if the tab was either shown or hidden successfully; otherwise, <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>When you call this method, a pane is either shown or hidden, depending on the value of the <ph id="ph1">`bShow`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>If you hide a tab and it is the last visible tab in the underlying tab window, the tabbed pane is hidden.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If you show a tab when there were previously no tabs visible, the tabbed pane is shown.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__recalclayout"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::RecalcLayout</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Recalculates layout information for the pane.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>If the pane is floating, this method notifies the framework to resize the pane to the current size of the mini-frame.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>If the pane is docked, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cbasetabbedpane__setautohidemode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CBaseTabbedPane::SetAutoHideMode</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Sets the auto-hide mode for detachable panes in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bMode`</ph></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `TRUE`</ph> to enable auto-hide mode; <ph id="ph2">`FALSE`</ph> to enable regular docking mode.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`dwAlignment`</ph></source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Specifies the alignment of the auto-hide pane that is to be created.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>CPane::MoveByAlignment<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__movebyalignment)</ept>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>[in] [out] <ph id="ph1">`pCurrAutoHideBar`</ph></source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A pointer to the current auto-hide toolbar.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`bUseTimer`</ph></source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Specifies whether to use the auto-hide effect when the user switches the pane to auto-hide mode, or to hide the pane immediately.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A pointer to the auto-hide toolbar that is created when switching to auto-hide mode, or <ph id="ph1">`NULL`</ph> if no toolbar is created.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a user chooses the pin button to switch the tabbed pane to auto-hide mode or to regular docking mode.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Auto-hide mode is set for each detachable pane in the tabbed pane.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Panes that are non-detachable are ignored.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CMFCBaseTabCtrl::EnableTabDetach<ept id="p1">](../../mfc/reference/cmfcbasetabctrl-class.md#cmfcbasetabctrl__enabletabdetach)</ept>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Call this method to switch a tabbed pane to auto-hide mode programmatically.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The pane must be docked to the main frame window ( <bpt id="p1">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id="p1">](../../mfc/reference/cdockablepane-class.md#cdockablepane__getdefaultpanedivider)</ept> must return a valid pointer to the <bpt id="p2">[</bpt>CPaneDivider<ept id="p2">](../../mfc/reference/cpanedivider-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classes<ept id="p1">](../../mfc/reference/mfc-classes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDockablePane Class<ept id="p1">](../../mfc/reference/cdockablepane-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>