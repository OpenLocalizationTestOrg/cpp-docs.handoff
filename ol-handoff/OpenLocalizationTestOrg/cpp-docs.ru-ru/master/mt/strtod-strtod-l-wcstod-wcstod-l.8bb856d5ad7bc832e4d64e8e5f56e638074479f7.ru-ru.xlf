<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31ea63911eff950dd5c27316038ecdcaf7b358e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\strtod-strtod-l-wcstod-wcstod-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a08235284d98a5be9a052424ee76c94c41e0989</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e43e511954c2baaf6ac26f1f3095f0fac021c73</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>strtod, _strtod_l, wcstod, _wcstod_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>strtod, _strtod_l, wcstod, _wcstod_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Convert strings to a double-precision value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Null-terminated string to convert.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointer to character that stops scan.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strtod`</ph> returns the value of the floating-point number, except when the representation would cause an overflow, in which case the function returns +/–<ph id="ph2">`HUGE_VAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The sign of <ph id="ph1">`HUGE_VAL`</ph> matches the sign of the value that cannot be represented.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strtod`</ph> returns 0 if no conversion can be performed or an underflow occurs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcstod`</ph> returns values analogously to <ph id="ph2">`strtod`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For both functions, <ph id="ph1">`errno`</ph> is set to <ph id="ph2">`ERANGE`</ph> if overflow or underflow occurs and the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on this and other return codes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each function converts the input string <ph id="ph1">`nptr`</ph> to a <ph id="ph2">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strtod`</ph> function converts <ph id="ph2">`nptr`</ph> to a double-precision value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strtod`</ph> stops reading the string <ph id="ph2">`nptr`</ph> at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This may be the terminating null character.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcstod`</ph> is a wide-character version of <ph id="ph2">`strtod`</ph>; its <ph id="ph3">`nptr`</ph> argument is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These functions behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LC_NUMERIC`</ph> category setting of the current locale determines recognition of the radix character in <ph id="ph2">`nptr`</ph><bpt id="p1">*</bpt>;<ept id="p1">*</ept> for more information, see <bpt id="p2">[</bpt>setlocale<ept id="p2">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The functions without the <ph id="ph1">`_l`</ph> suffix use the current locale; <ph id="ph2">`_strtod_l`</ph> is identical to <ph id="ph3">`_strtod_l`</ph> except that they use the locale passed in instead.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`endptr`</ph> is not <ph id="ph2">`NULL`</ph>, a pointer to the character that stopped the scan is stored at the location pointed to by <ph id="ph3">`endptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of <ph id="ph1">`nptr`</ph> is stored at the location pointed to by <ph id="ph2">`endptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strtod`</ph> expects <ph id="ph2">`nptr`</ph> to point to a string of the following form:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[<ph id="ph1">`whitespace`</ph>] [<ph id="ph2">`sign`</ph>] [<ph id="ph3">`digits`</ph>] [<ph id="ph4">`.digits`</ph>] [ {<ph id="ph5">`e`</ph> &amp;#124; <ph id="ph6">`E`</ph>}[<ph id="ph7">`sign`</ph>]<ph id="ph8">`digits`</ph>]</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`whitespace`</ph> may consist of space and tab characters, which are ignored; <ph id="ph2">`sign`</ph> is either plus (<ph id="ph3">`+`</ph>) or minus (<ph id="ph4">`–`</ph>); and <ph id="ph5">`digits`</ph> are one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If no digits appear before the radix character, at least one must appear after the radix character.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The decimal digits can be followed by an exponent, which consists of an introductory letter (<ph id="ph1">`e`</ph> or <ph id="ph2">`E`</ph>) and an optionally signed integer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If neither an exponent part nor a radix character appears, a radix character is assumed to follow the last digit in the string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first character that does not fit this form stops the scan.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The UCRT versions of these functions do not support conversion of Fortran-style (<ph id="ph1">`d`</ph> or <ph id="ph2">`D`</ph>) exponent letters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This non-standard extension was supported by earlier versions of the CRT, and may be a breaking change for your code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`strtod`</ph>, <ph id="ph2">`_strtod_l`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C: <ph id="ph1">\&lt;</ph>stdlib.h&gt; C++: <ph id="ph2">&amp;lt;</ph>cstdlib&gt; or <ph id="ph3">\&lt;</ph>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`wcstod`</ph>, <ph id="ph2">`_wcstod_l`</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>C: <ph id="ph1">\&lt;</ph>stdlib.h&gt; or <ph id="ph2">\&lt;</ph>wchar.h&gt; C++: <ph id="ph3">&amp;lt;</ph>cstdlib&gt;, <ph id="ph4">\&lt;</ph>stdlib.h&gt; or <ph id="ph5">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Conversion<ept id="p1">](../../c-runtime-library/data-conversion.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Floating-Point Support<ept id="p1">](../../c-runtime-library/floating-point-support.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interpretation of Multibyte-Character Sequences<ept id="p1">](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>String to Numeric Value Functions<ept id="p1">](../../c-runtime-library/string-to-numeric-value-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strtol, wcstol, _strtol_l, _wcstol_l<ept id="p1">](../../c-runtime-library/reference/strtol-wcstol-strtol-l-wcstol-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>strtoul, _strtoul_l, wcstoul, _wcstoul_l<ept id="p1">](../../c-runtime-library/reference/strtoul-strtoul-l-wcstoul-wcstoul-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>atof, _atof_l, _wtof, _wtof_l<ept id="p1">](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>localeconv<ept id="p1">](../../c-runtime-library/reference/localeconv.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_create_locale, _wcreate_locale<ept id="p1">](../../c-runtime-library/reference/create-locale-wcreate-locale.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>_free_locale<ept id="p1">](../../c-runtime-library/reference/free-locale.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>