<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dda8e5f6ae6799ac7b23f8b8637c4ba3ab9dc4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\tempnam-dbg-wtempnam-dbg.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c72e92564679711c036d9110497144a496d63aa5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abc5867ffdc1d167e801c1bf9059869a97a1ae22</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_tempnam_dbg, _wtempnam_dbg | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_tempnam_dbg, _wtempnam_dbg</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Function versions of <bpt id="p1">[</bpt>_tempnam, _wtempnam, tmpnam, _wtmpnam<ept id="p1">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept> that use the debug version of <ph id="ph1">`malloc, _malloc_dbg`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The string that will be pre-pended to names returned by <ph id="ph1">`_tempnam`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Requested type of memory block: <ph id="ph1">`_CLIENT_BLOCK`</ph>or <ph id="ph2">`_NORMAL_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pointer to name of source file that requested allocation operation or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Line number in source file where allocation operation was requested or <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each function returns a pointer to the name generated or <ph id="ph1">`NULL`</ph> if there is a failure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Failure can occur if there is an invalid directory name specified in the TMP environment variable and in the <ph id="ph1">`dir`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `free`</ph> (or <ph id="ph2">`free_dbg`</ph>) does need to be called for pointers allocated by <ph id="ph3">`_tempnam_dbg`</ph> and <ph id="ph4">`_wtempnam_dbg`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_tempnam_dbg`</ph>and <ph id="ph2">`_wtempnam_dbg`</ph>functions are identical to <ph id="ph3">`_tempnam`</ph>and <ph id="ph4">`_wtempnam`</ph>except that, when <ph id="ph5">`_DEBUG`</ph>is defined, these functions use the debug version of <ph id="ph6">`malloc`</ph> and <ph id="ph7">`_malloc_dbg`</ph>, to allocate memory if <ph id="ph8">`NULL`</ph> is passed as the first parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You do not need to call these functions explicitly in most cases.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead, you can define the flag <ph id="ph1">`_CRTDBG_MAP_ALLOC`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id="ph2">`_tempnam`</ph> and <ph id="ph3">`_wtempnam`</ph> are remapped to <ph id="ph4">`_tempnam_dbg`</ph> and <ph id="ph5">`_wtempnam_dbg`</ph>, respectively, with the <ph id="ph6">`blockType`</ph> set to <ph id="ph7">`_NORMAL_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id="ph1">`_CLIENT_BLOCK`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Types of blocks on the debug heap<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_tempnam_dbg`</ph>, <ph id="ph2">`_wtempnam_dbg`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_tempnam, _wtempnam, tmpnam, _wtmpnam<ept id="p1">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Stream I/O<ept id="p1">](../../c-runtime-library/stream-i-o.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Debug Versions of Heap Allocation Functions<ept id="p1">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>