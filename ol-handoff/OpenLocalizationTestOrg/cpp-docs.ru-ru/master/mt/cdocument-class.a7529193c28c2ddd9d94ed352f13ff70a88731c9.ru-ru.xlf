<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c5f6bc4393ac1dfa93c67edf8698d7aad037855</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdocument-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65565042edb6c9960d66bd83df1ee5abf37ffde7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9a0c1ee478c2a3436642e763fbf31826860bdf3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDocument Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDocument Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the basic functionality for user-defined document classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::CDocument<ept id="p1">](#cdocument__cdocument)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDocument`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::AddView<ept id="p1">](#cdocument__addview)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches a view to the document.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::BeginReadChunks<ept id="p1">](#cdocument__beginreadchunks)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes chunk reading.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::CanCloseFrame<ept id="p1">](#cdocument__cancloseframe)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Advanced overridable; called before closing a frame window viewing this document.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::ClearChunkList<ept id="p1">](#cdocument__clearchunklist)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Clears the chunk list.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::ClearPathName<ept id="p1">](#cdocument__clearpathname)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Clears the path of the document object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::DeleteContents<ept id="p1">](#cdocument__deletecontents)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Called to perform cleanup of the document.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::FindChunk<ept id="p1">](#cdocument__findchunk)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Looks for a chunk with specified GUID.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetAdapter<ept id="p1">](#cdocument__getadapter)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns a pointer to object implementing <ph id="ph1">`IDocument`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetDocTemplate<ept id="p1">](#cdocument__getdoctemplate)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the document template that describes the type of the document.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetFile<ept id="p1">](#cdocument__getfile)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the desired <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetFirstViewPosition<ept id="p1">](#cdocument__getfirstviewposition)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the position of the first in the list of views; used to begin iteration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetNextView<ept id="p1">](#cdocument__getnextview)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Iterates through the list of views associated with the document.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetPathName<ept id="p1">](#cdocument__getpathname)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the path of the document's data file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetThumbnail<ept id="p1">](#cdocument__getthumbnail)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Called to create a bitmap to be used by thumbnail provider to display thumbnail.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::GetTitle<ept id="p1">](#cdocument__gettitle)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the document's title.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::InitializeSearchContent<ept id="p1">](#cdocument__initializesearchcontent)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Called to initialize search content for Search Handler.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::IsModified<ept id="p1">](#cdocument__ismodified)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Indicates whether the document has been modified since it was last saved.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::IsSearchAndOrganizeHandler<ept id="p1">](#cdocument__issearchandorganizehandler)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Tells whether this instance of <ph id="ph1">`CDocument`</ph> object was created for Search &amp; Organize handler.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::LoadDocumentFromStream<ept id="p1">](#cdocument__loaddocumentfromstream)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Called to load document data from stream.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnBeforeRichPreviewFontChanged<ept id="p1">](#cdocument__onbeforerichpreviewfontchanged)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Called before Rich Preview font is changed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnChangedViewList<ept id="p1">](#cdocument__onchangedviewlist)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called after a view is added to or removed from the document.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnCloseDocument<ept id="p1">](#cdocument__onclosedocument)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Called to close the document.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnCreatePreviewFrame<ept id="p1">](#cdocument__oncreatepreviewframe)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to create a preview frame for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnDocumentEvent<ept id="p1">](#cdocument__ondocumentevent)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a document event.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnDrawThumbnail<ept id="p1">](#cdocument__ondrawthumbnail)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to draw content of thumbnail.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnLoadDocumentFromStream<ept id="p1">](#cdocument__onloaddocumentfromstream)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to load the document data from stream.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnNewDocument<ept id="p1">](#cdocument__onnewdocument)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Called to create a new document.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnOpenDocument<ept id="p1">](#cdocument__onopendocument)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Called to open an existing document.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnPreviewHandlerQueryFocus<ept id="p1">](#cdocument__onpreviewhandlerqueryfocus)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Directs the preview handler to return the HWND from calling the GetFocus Function.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnPreviewHandlerTranslateAccelerator<ept id="p1">](#cdocument__onpreviewhandlertranslateaccelerator)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Directs the preview handler to handle a keystroke passed up from the message pump of the process in which the preview handler is running.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnRichPreviewBackColorChanged<ept id="p1">](#cdocument__onrichpreviewbackcolorchanged)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Called when Rich Preview background color has changed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnRichPreviewFontChanged<ept id="p1">](#cdocument__onrichpreviewfontchanged)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Called when Rich Preview font has changed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnRichPreviewSiteChanged<ept id="p1">](#cdocument__onrichpreviewsitechanged)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Called when Rich Preview site has changed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnRichPreviewTextColorChanged<ept id="p1">](#cdocument__onrichpreviewtextcolorchanged)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Called when Rich Preview text color has changed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnSaveDocument<ept id="p1">](#cdocument__onsavedocument)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Called to save the document to disk.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnUnloadHandler<ept id="p1">](#cdocument__onunloadhandler)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Called by the framework when the preview handler is being unloaded.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::PreCloseFrame<ept id="p1">](#cdocument__precloseframe)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Called before the frame window is closed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::ReadNextChunkValue<ept id="p1">](#cdocument__readnextchunkvalue)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Reads next chunk value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::ReleaseFile<ept id="p1">](#cdocument__releasefile)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Releases a file to make it available for use by other applications.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::RemoveChunk<ept id="p1">](#cdocument__removechunk)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Removes a chunk with specified GUID.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::RemoveView<ept id="p1">](#cdocument__removeview)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Detaches a view from the document.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::ReportSaveLoadException<ept id="p1">](#cdocument__reportsaveloadexception)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Advanced overridable; called when an open or save operation cannot be completed because of an exception.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::SaveModified<ept id="p1">](#cdocument__savemodified)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Advanced overridable; called to ask the user whether the document should be saved.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::SetChunkValue<ept id="p1">](#cdocument__setchunkvalue)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Sets a chunk value.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::SetModifiedFlag<ept id="p1">](#cdocument__setmodifiedflag)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Sets a flag indicating that you have modified the document since it was last saved.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::SetPathName<ept id="p1">](#cdocument__setpathname)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Sets the path of the data file used by the document.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::SetTitle<ept id="p1">](#cdocument__settitle)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Sets the document's title.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::UpdateAllViews<ept id="p1">](#cdocument__updateallviews)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Notifies all views that document has been modified.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnFileSendMail<ept id="p1">](#cdocument__onfilesendmail)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Sends a mail message with the document attached.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::OnUpdateFileSendMail<ept id="p1">](#cdocument__onupdatefilesendmail)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Enables the Send Mail command if mail support is present.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_bGetThumbnailMode<ept id="p1">](#cdocument__m_bgetthumbnailmode)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies that <ph id="ph1">`CDocument`</ph> object was created by dllhost for thumbnails.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Should be checked in <ph id="ph1">`CView::OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_bPreviewHandlerMode<ept id="p1">](#cdocument__m_bpreviewhandlermode)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Specifies that <ph id="ph1">`CDocument`</ph> object was created by prevhost for <ph id="ph2">`Rich Preview`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Should be checked in <ph id="ph1">`CView::OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_bSearchMode<ept id="p1">](#cdocument__m_bsearchmode)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Specifies that <ph id="ph1">`CDocument`</ph> object was created by indexer or other search application.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_clrRichPreviewBackColor<ept id="p1">](#cdocument__m_clrrichpreviewbackcolor)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Specifies background color of Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This color is set by host.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_clrRichPreviewTextColor<ept id="p1">](#cdocument__m_clrrichpreviewtextcolor)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Specifies foreground color of Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This color is set by host.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDocument::m_lfRichPreviewFont<ept id="p1">](#cdocument__m_lfrichpreviewfont)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies text font for Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This font information is set by host.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A document represents the unit of data that the user typically opens with the File Open command and saves with the File Save command.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> supports standard operations such as creating a document, loading it, and saving it.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The framework manipulates documents using the interface defined by <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An application can support more than one type of document; for example, an application might support both spreadsheets and text documents.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Each type of document has an associated document template; the document template specifies what resources (for example, menu, icon, or accelerator table) are used for that type of document.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Each document contains a pointer to its associated <ph id="ph1">`CDocTemplate`</ph> object.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Users interact with a document through the <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept> object(s) associated with it.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A view renders an image of the document in a frame window and interprets user input as operations on the document.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A document can have multiple views associated with it.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>When the user opens a window on a document, the framework creates a view and attaches it to the document.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The document template specifies what type of view and frame window are used to display each type of document.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Documents are part of the framework's standard command routing and consequently receive commands from standard user-interface components (such as the File Save menu item).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A document receives commands forwarded by the active view.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the document doesn't handle a given command, it forwards the command to the document template that manages it.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When a document's data is modified, each of its views must reflect those modifications.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> provides the <bpt id="p2">[</bpt>UpdateAllViews<ept id="p2">](#cdocument__updateallviews)</ept> member function for you to notify the views of such changes, so the views can repaint themselves as necessary.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The framework also prompts the user to save a modified file before closing it.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>To implement documents in a typical application, you must do the following:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Derive a class from <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> for each type of document.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Add member variables to store each document's data.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Implement member functions for reading and modifying the document's data.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The document's views are the most important users of these member functions.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>CObject::Serialize<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept> member function in your document class to write and read the document's data to and from disk.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> supports sending your document via mail if mail support (MAPI) is present.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>See the articles <bpt id="p1">[</bpt>MAPI<ept id="p1">](../../mfc/mapi.md)</ept> and <bpt id="p2">[</bpt>MAPI Support in MFC<ept id="p2">](../../mfc/mapi-support-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information on <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Serialization<ept id="p2">](../../mfc/serialization-in-mfc.md)</ept>, <bpt id="p3">[</bpt>Document/View Architecture Topics<ept id="p3">](../../mfc/document-view-architecture.md)</ept>, and <bpt id="p4">[</bpt>Document/View Creation<ept id="p4">](../../mfc/document-view-creation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__addview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::AddView</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Call this function to attach a view to the document.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Points to the view being added.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This function adds the specified view to the list of views associated with the document; the function also sets the view's document pointer to this document.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The framework calls this function when attaching a newly created view object to a document; this occurs in response to a File New, File Open, or New Window command or when a splitter window is split.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Call this function only if you are manually creating and attaching a view.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Typically you will let the framework connect documents and views by defining a <bpt id="p1">[</bpt>CDocTemplate<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept> object to associate a document class, view class, and frame window class.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocViewSDI#12<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__beginreadchunks"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::BeginReadChunks</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Initializes chunk reading.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__cancloseframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::CanCloseFrame</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Called by the framework before a frame window displaying the document is closed.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Points to the frame window of a view attached to the document.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Nonzero if it is safe to close the frame window; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The default implementation checks if there are other frame windows displaying the document.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the specified frame window is the last one that displays the document, the function prompts the user to save the document if it has been modified.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Override this function if you want to perform special processing when a frame window is closed.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This is an advanced overridable.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__cdocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::CDocument</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The framework handles document creation for you.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>OnNewDocument<ept id="p1">](#cdocument__onnewdocument)</ept> member function to perform initialization on a per-document basis; this is particularly important in single document interface (SDI) applications.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__clearchunklist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::ClearChunkList</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Clears the chunk list.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__clearpathname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::ClearPathName</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Clears the path of the document object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Clearing the path from a <ph id="ph1">`CDocument`</ph> object causes the application to prompt the user when the document is next saved.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>This makes a <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> command behave like a <bpt id="p2">**</bpt>Save As<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__deletecontents"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::DeleteContents</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Called by the framework to delete the document's data without destroying the <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object itself.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>It is called just before the document is to be destroyed.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>It is also called to ensure that a document is empty before it is reused.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This is particularly important for an SDI application, which uses only one document; the document is reused whenever the user creates or opens another document.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Call this function to implement an "Edit Clear All" or similar command that deletes all of the document's data.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Override this function to delete the data in your document.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#57<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__findchunk"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::FindChunk</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Looks for a chunk with a specified GUID.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Specifies the GUID of a chunk to find.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Specifies a PID of a chunk to find.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Position in the internal chunk list if successful.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getadapter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetAdapter</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Returns a pointer to an object implementing the <ph id="ph1">`IDocument`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A pointer to an object implementing the <ph id="ph1">`IDocument`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getdoctemplate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetDocTemplate</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Call this function to get a pointer to the document template for this document type.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A pointer to the document template for this document type, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the document is not managed by a document template.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#58<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getfile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetFile</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Call this member function to get a pointer to a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The path may be relative or absolute.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A pointer to an existing file-exception object that indicates the completion status of the operation.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Sharing and access mode.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Specifies the action to take when opening the file.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>You can combine options listed in the CFile constructor <bpt id="p1">[</bpt>CFile::CFile<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__cfile)</ept> by using the bitwise OR (&amp;#124;) operator.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>One access permission and one share option are required; the <bpt id="p1">**</bpt>modeCreate<ept id="p1">**</ept> and <bpt id="p2">**</bpt>modeNoInherit<ept id="p2">**</ept> modes are optional.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getfirstviewposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetFirstViewPosition</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Call this function to get the position of the first view in the list of views associated with the document.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration with the <bpt id="p2">[</bpt>GetNextView<ept id="p2">](#cdocument__getnextview)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#59<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getnextview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetNextView</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Call this function to iterate through all of the document's views.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous call to the <ph id="ph1">`GetNextView`</ph> or <bpt id="p2">[</bpt>GetFirstViewPosition<ept id="p2">](#cdocument__getfirstviewposition)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>This value must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A pointer to the view identified by <ph id="ph1">`rPosition`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The function returns the view identified by <ph id="ph1">`rPosition`</ph> and then sets <ph id="ph2">`rPosition`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the next view in the list.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If the retrieved view is the last in the list, then <ph id="ph1">`rPosition`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#59<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getpathname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetPathName</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Call this function to get the fully qualified path of the document's disk file.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The document's fully qualified path.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This string is empty if the document has not been saved or does not have a disk file associated with it.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__getthumbnail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetThumbnail</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Creates a bitmap to be used by the thumbnail provider to display the thumbnail.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Specifies the width and height of the bitmap.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Contains a handle to a bitmap, when the function returns successfully.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Contains a DWORD specifying the alpha channel value, when the function returns successfully.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if a bitmap for the thumbnail was created successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__gettitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::GetTitle</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Call this function to get the document's title, which is usually derived from the document's filename.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The document's title.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__initializesearchcontent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::InitializeSearchContent</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Called to initialize search content for the Search Handler.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to initialize search content.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The content should be a string with parts delimited by ";".</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, "point; rectangle; ole item".</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__ismodified"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::IsModified</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the document has been modified since it was last saved.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Nonzero if the document has been modified since it was last saved; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__issearchandorganizehandler"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::IsSearchAndOrganizeHandler</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Tells whether this instance of <ph id="ph1">`CDocument`</ph> was created for the Search &amp; Organize handler.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if this instance of <ph id="ph2">`CDocument`</ph> was created for the Search &amp; Organize handler.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Currently this function returns <ph id="ph1">`TRUE`</ph> only for Rich Preview handlers implemented in an out of process server.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>You can set the appropriate flags (m_bPreviewHandlerMode, m_bSearchMode, m_bGetThumbnailMode) at your application level to make this function return <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__loaddocumentfromstream"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::LoadDocumentFromStream</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Called to load document data from a stream.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A pointer to a stream.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This stream is supplied by the Shell.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Access mode to the stream.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>S_OK if the load operation succeeds, otherwise HRESULT with an error code.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>You can override this method in a derived class to customize how to load data from the stream.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_bgetthumbnailmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_bGetThumbnailMode</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Specifies that the <ph id="ph1">`CDocument`</ph> object was created by dllhost for thumbnails.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Should be checked in <ph id="ph1">`CView::OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> indicates that the document was created by dllhost for thumbnails.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_bpreviewhandlermode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_bPreviewHandlerMode</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Specifies that the <ph id="ph1">`CDocument`</ph> object was created by prevhost for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Should be checked in <ph id="ph1">`CView::OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> indicates that the document was created by prevhost for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_bsearchmode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_bSearchMode</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Specifies that the <ph id="ph1">`CDocument`</ph> object was created by indexer or by another search application.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUE`</ph> indicates that the document was created by indexer or by another search application.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_clrrichpreviewbackcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_clrRichPreviewBackColor</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Specifies the background color of the Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>This color is set by host.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_clrrichpreviewtextcolor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_clrRichPreviewTextColor</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Specifies the foreground color of the Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This color is set by host.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__m_lfrichpreviewfont"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::m_lfRichPreviewFont</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Specifies the text font for the Rich Preview window.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>This font information is set by host.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onbeforerichpreviewfontchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnBeforeRichPreviewFontChanged</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Called before the Rich Preview font is changed.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onchangedviewlist"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnChangedViewList</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Called by the framework after a view is added to or removed from the document.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The default implementation of this function checks whether the last view is being removed and, if so, deletes the document.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Override this function if you want to perform special processing when the framework adds or removes a view.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>For example, if you want a document to remain open even when there are no views attached to it, override this function.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onclosedocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnCloseDocument</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Called by the framework when the document is closed, typically as part of the File Close command.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The default implementation of this function destroys all of the frames used for viewing the document, closes the view, cleans up the document's contents, and then calls the <bpt id="p1">[</bpt>DeleteContents<ept id="p1">](#cdocument__deletecontents)</ept> member function to delete the document's data.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Override this function if you want to perform special cleanup processing when the framework closes a document.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>For example, if the document represents a record in a database, you may want to override this function to close the database.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>You should call the base class version of this function from your override.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__oncreatepreviewframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnCreatePreviewFrame</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to create a preview frame for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if the frame is created successfully; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__ondocumentevent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnDocumentEvent</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Called by the framework in response to a document event.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`deEvent`</ph></source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>An enumerated data type that describes the type of event.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Document events may affect multiple classes.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This method is responsible for handling document events that affect classes other than the <bpt id="p1">[</bpt>CDocument Class<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Currently, the only class that must respond to document events is the <bpt id="p1">[</bpt>CDataRecoveryHandler Class<ept id="p1">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDocument`</ph> class has other overrideable methods responsible for handling the effect on the <ph id="ph2">`CDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The following table lists the possible values for <ph id="ph1">`deEvent`</ph> and the events that they correspond to.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Corresponding Event</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A new document was created.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>A new document was opened.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The document was saved.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The document was closed.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__ondrawthumbnail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnDrawThumbnail</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to draw the thumbnail.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A reference to a device context.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Specifies a bounding rectangle of the area where the thumbnail should be drawn.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onfilesendmail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnFileSendMail</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Sends a message via the resident mail host (if any) with the document as an attachment.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnFileSendMail`</ph> calls <bpt id="p1">[</bpt>OnSaveDocument<ept id="p1">](#cdocument__onsavedocument)</ept> to serialize (save) untitled and modified documents to a temporary file, which is then sent via electronic mail.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>If the document has not been modified, a temporary file is not needed; the original is sent.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OnFileSendMail`</ph> loads MAPI32.DLL if it has not already been loaded.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A special implementation of <ph id="ph1">`OnFileSendMail`</ph> for <bpt id="p1">[</bpt>COleDocument<ept id="p1">](../../mfc/reference/coledocument-class.md)</ept> handles compound files correctly.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> supports sending your document via mail if mail support (MAPI) is present.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>See the articles <bpt id="p1">[</bpt>MAPI Topics<ept id="p1">](../../mfc/mapi.md)</ept> and <bpt id="p2">[</bpt>MAPI Support in MFC<ept id="p2">](../../mfc/mapi-support-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onloaddocumentfromstream"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnLoadDocumentFromStream</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to load the document data from a stream.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>A pointer to an incoming stream.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Access mode to the stream.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>S_OK if the load is successful; otherwise an error code.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onnewdocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnNewDocument</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Called by the framework as part of the File New command.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Nonzero if the document was successfully initialized; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The default implementation of this function calls the <bpt id="p1">[</bpt>DeleteContents<ept id="p1">](#cdocument__deletecontents)</ept> member function to ensure that the document is empty and then marks the new document as clean.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Override this function to initialize the data structure for a new document.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>You should call the base class version of this function from your override.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If the user chooses the File New command in an SDI application, the framework uses this function to reinitialize the existing document, rather than creating a new one.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If the user chooses File New in a multiple document interface (MDI) application, the framework creates a new document each time and then calls this function to initialize it.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>You must place your initialization code in this function instead of in the constructor for the File New command to be effective in SDI applications.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Note that there are cases where <ph id="ph1">`OnNewDocument`</ph> is called twice.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>This occurs when the document is embedded as an ActiveX Document Server.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The function is first called by the <ph id="ph1">`CreateInstance`</ph> method (exposed by the <ph id="ph2">`COleObjectFactory`</ph>-derived class) and a second time by the <ph id="ph3">`InitNew`</ph> method (exposed by the <ph id="ph4">`COleServerDoc`</ph>-derived class).</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The following examples illustrate alternative methods of initializing a document object.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#60<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#61<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#62<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onopendocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnOpenDocument</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Called by the framework as part of the File Open command.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Points to the path of the document to be opened.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Nonzero if the document was successfully loaded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The default implementation of this function opens the specified file, calls the <bpt id="p1">[</bpt>DeleteContents<ept id="p1">](#cdocument__deletecontents)</ept> member function to ensure that the document is empty, calls <bpt id="p2">[</bpt>CObject::Serialize<ept id="p2">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept> to read the file's contents, and then marks the document as clean.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Override this function if you want to use something other than the archive mechanism or the file mechanism.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>For example, you might write an application where documents represent records in a database rather than separate files.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>If the user chooses the File Open command in an SDI application, the framework uses this function to reinitialize the existing <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object, rather than creating a new one.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>If the user chooses File Open in an MDI application, the framework constructs a new <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object each time and then calls this function to initialize it.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>You must place your initialization code in this function instead of in the constructor for the File Open command to be effective in SDI applications.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The following examples illustrate alternative methods of initializing a document object.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#60<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#61<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#62<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#63<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onpreviewhandlerqueryfocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnPreviewHandlerQueryFocus</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Directs the preview handler to return the HWND retrieved from calling the <ph id="ph1">`GetFocus`</ph> function.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>[out] When this method returns, contains a pointer to the HWND returned from calling the <ph id="ph1">`GetFocus`</ph> function from the preview handler's foreground thread.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Returns S_OK if successful; or an error value otherwise.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onpreviewhandlertranslateaccelerator"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnPreviewHandlerTranslateAccelerator</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Directs the preview handler to handle a keystroke passed up from the message pump of the process in which the preview handler is running.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>[in] A pointer to a window message.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>If the keystroke message can be processed by the preview handler, the handler processes it and returns S_OK.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>If the preview handler cannot process the keystroke message, it offers it to the host via <ph id="ph1">`IPreviewHandlerFrame::TranslateAccelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>If the host processes the message, this method returns S_OK.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>If the host does not process the message, this method returns S_FALSE.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onrichpreviewbackcolorchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnRichPreviewBackColorChanged</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Called when the Rich Preview background color has changed.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onrichpreviewfontchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnRichPreviewFontChanged</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Called when the Rich Preview font has changed.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onrichpreviewsitechanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnRichPreviewSiteChanged</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Called when the Rich Preview site has changed.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onrichpreviewtextcolorchanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnRichPreviewTextColorChanged</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Called when the Rich Preview text color has changed.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onsavedocument"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnSaveDocument</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Called by the framework as part of the File Save or File Save As command.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Points to the fully qualified path to which the file should be saved.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Nonzero if the document was successfully saved; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The default implementation of this function opens the specified file, calls <bpt id="p1">[</bpt>CObject::Serialize<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept> to write the document's data to the file, and then marks the document as clean.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Override this function if you want to perform special processing when the framework saves a document.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>For example, you might write an application where documents represent records in a database rather than separate files.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onunloadhandler"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnUnloadHandler</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Called by the framework when the preview handler is unloaded.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__onupdatefilesendmail"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::OnUpdateFileSendMail</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Enables the <bpt id="p1">**</bpt>ID_FILE_SEND_MAIL<ept id="p1">**</ept> command if mail support (MAPI) is present.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CCmdUI<ept id="p1">](../../mfc/reference/ccmdui-class.md)</ept> object associated with the <bpt id="p2">**</bpt>ID_FILE_SEND_MAIL<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Otherwise the function removes the <bpt id="p1">**</bpt>ID_FILE_SEND_MAIL<ept id="p1">**</ept> command from the menu, including separators above or below the menu item as appropriate.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>MAPI is enabled if MAPI32.DLL is present in the path and, in the [Mail] section of the WIN.INI file, MAPI=1.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Most applications put this command on the File menu.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> supports sending your document via mail if mail support (MAPI) is present.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>See the articles <bpt id="p1">[</bpt>MAPI Topics<ept id="p1">](../../mfc/mapi.md)</ept> and <bpt id="p2">[</bpt>MAPI Support in MFC<ept id="p2">](../../mfc/mapi-support-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__precloseframe"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::PreCloseFrame</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework before the frame window is destroyed.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept> that holds the associated <bpt id="p2">**</bpt>CDocument<ept id="p2">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>It can be overridden to provide custom cleanup, but be sure to call the base class as well.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The default of <ph id="ph1">`PreCloseFrame`</ph> does nothing in <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>-derived classes <bpt id="p2">[</bpt>COleDocument<ept id="p2">](../../mfc/reference/coledocument-class.md)</ept> and <bpt id="p3">[</bpt>CRichEditDoc<ept id="p3">](../../mfc/reference/cricheditdoc-class.md)</ept> use this member function.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__readnextchunkvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::ReadNextChunkValue</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Reads the next chunk value.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>[out] When the function returns, <ph id="ph1">`ppValue`</ph> contains the value that was read.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__releasefile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::ReleaseFile</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to release a file, making it available for use by other applications.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A pointer to the CFile object to be released.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Specifies whether the file is to be released by using either <ph id="ph1">`CFile::Close`</ph> or <ph id="ph2">`CFile::Abort`</ph>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if the file is to be released using <bpt id="p2">[</bpt>CFile::Close<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__close)</ept>; <bpt id="p3">**</bpt>TRUE<ept id="p3">**</ept> if the file is to be released using <bpt id="p4">[</bpt>CFile::Abort<ept id="p4">](../../mfc/reference/cfile-class.md#cfile__abort)</ept>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bAbort`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph2">`ReleaseFile`</ph> calls <ph id="ph3">`CFile::Abort`</ph>, and the file is released.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CFile::Abort`</ph> will not throw an exception.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bAbort`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph2">`ReleaseFile`</ph> calls <ph id="ph3">`CFile::Close`</ph> and the file is released.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Override this member function to require an action by the user before the file is released.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__removechunk"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::RemoveChunk</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Removes a chunk with the specified GUID.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Specifies the GUID of a chunk to be removed.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Specifies the PID of a chunk to be removed.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__removeview"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::RemoveView</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Call this function to detach a view from a document.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Points to the view being removed.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>This function removes the specified view from the list of views associated with the document; it also sets the view's document pointer to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>This function is called by the framework when a frame window is closed or a pane of a splitter window is closed.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Call this function only if you are manually detaching a view.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Typically you will let the framework detach documents and views by defining a <bpt id="p1">[</bpt>CDocTemplate<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept> object to associate a document class, view class, and frame window class.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>See the example at <bpt id="p1">[</bpt>AddView<ept id="p1">](#cdocument__addview)</ept> for a sample implementation.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__reportsaveloadexception"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::ReportSaveLoadException</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Called if an exception is thrown (typically a <bpt id="p1">[</bpt>CFileException<ept id="p1">](../../mfc/reference/cfileexception-class.md)</ept> or <bpt id="p2">[</bpt>CArchiveException<ept id="p2">](../../mfc/reference/carchiveexception-class.md)</ept>) while saving or loading the document.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Points to name of document that was being saved or loaded.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>e<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Points to the exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bSaving<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Flag indicating what operation was in progress; nonzero if the document was being saved, 0 if the document was being loaded.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Identifier of the error message to be displayed if the function does not specify a more specific one.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The default implementation examines the exception object and looks for an error message that specifically describes the cause.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>If a specific message is not found or if <bpt id="p1">*</bpt>e<ept id="p1">*</ept> is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, the general message specified by the <ph id="ph1">`nIDPDefault`</ph> parameter is used.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The function then displays a message box containing the error message.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Override this function if you want to provide additional, customized failure messages.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>This is an advanced overridable.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__savemodified"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::SaveModified</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Called by the framework before a modified document is to be closed.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Nonzero if it is safe to continue and close the document; 0 if the document should not be closed.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The default implementation of this function displays a message box asking the user whether to save the changes to the document, if any have been made.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Override this function if your program requires a different prompting procedure.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>This is an advanced overridable.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__setchunkvalue"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::SetChunkValue</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Sets a chunk value.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Specifies a chunk value to set.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__setmodifiedflag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::SetModifiedFlag</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Call this function after you have made any modifications to the document.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Flag indicating whether the document has been modified.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>By calling this function consistently, you ensure that the framework prompts the user to save changes before closing a document.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Typically you should use the default value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for the <ph id="ph1">`bModified`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>To mark a document as clean (unmodified), call this function with a value of <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__setpathname"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::SetPathName</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Call this function to specify the fully qualified path of the document's disk file.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Points to the string to be used as the path for the document.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Determines whether the filename is added to the most recently used (MRU) file list.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE,<ept id="p1">**</ept> the filename is added; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, it is not added.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Depending on the value of <ph id="ph1">`bAddToMRU`</ph> the path is added, or not added, to the MRU list maintained by the application.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Note that some documents are not associated with a disk file.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Call this function only if you are overriding the default implementation for opening and saving files used by the framework.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__settitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::SetTitle</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Call this function to specify the document's title (the string displayed in the title bar of a frame window).</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Points to the string to be used as the document's title.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Calling this function updates the titles of all frame windows that display the document.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdocument__updateallviews"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDocument::UpdateAllViews</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Call this function after the document has been modified.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Points to the view that modified the document, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if all views are to be updated.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Contains information about the modification.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Points to an object storing information about the modification.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>You should call this function after you call the <bpt id="p1">[</bpt>SetModifiedFlag<ept id="p1">](#cdocument__setmodifiedflag)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>This function informs each view attached to the document, except for the view specified by <ph id="ph1">`pSender`</ph>, that the document has been modified.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>You typically call this function from your view class after the user has changed the document through a view.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>This function calls the <bpt id="p1">[</bpt>CView::OnUpdate<ept id="p1">](../../mfc/reference/cview-class.md#cview__onupdate)</ept> member function for each of the document's views except the sending view, passing <ph id="ph1">`pHint`</ph> and <ph id="ph2">`lHint`</ph>.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Use these parameters to pass information to the views about the modifications made to the document.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>You can encode information using <ph id="ph1">`lHint`</ph> and/or you can define a <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept>-derived class to store information about the modifications and pass an object of that class using <ph id="ph2">`pHint`</ph>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`CView::OnUpdate`</ph> member function in your <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept>-derived class to optimize the updating of the view's display based on the information passed.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFCDocView#64<ept id="p2">](../../mfc/codesnippet/cpp/cdocument-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample MDIDOCVW<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample SNAPVW<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MFC Sample NPP<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CCmdTarget Class<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CView Class<ept id="p1">](../../mfc/reference/cview-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CDocTemplate Class<ept id="p1">](../../mfc/reference/cdoctemplate-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>