<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7980efd6709c5004c88b22916865d78511aa017</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-iostream-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">585ef3286a5477d075f9c88c2d789df70e02793f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dc6a603e05c3feeab0e2bdfeead6fb2072bdd34</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_iostream Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_iostream Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A stream class that can do both input and output.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The template class describes an object that controls insertions, through its base class <bpt id="p1">[</bpt>basic_ostream<ept id="p1">](../standard-library/basic-ostream-class.md)</ept><ph id="ph1">&lt; </ph><ph id="ph2">`Elem`</ph>, <ph id="ph3">`Tr`</ph>&gt;, and extractions, through its base class <bpt id="p2">[</bpt>basic_istream<ept id="p2">](../standard-library/basic-istream-class.md)</ept><ph id="ph4">&lt; </ph><ph id="ph5">`Elem`</ph>, <ph id="ph6">`Tr`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The two objects share a common virtual base class <bpt id="p1">[</bpt>basic_ios<ept id="p1">](../standard-library/basic-ios-class.md)</ept><ph id="ph1">&lt; </ph><ph id="ph2">`Elem`</ph>, <ph id="ph3">`Tr`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They also manage a common stream buffer, with elements of type <ph id="ph1">`Elem`</ph>, whose character traits are determined by the class <ph id="ph2">`Tr`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base classes through <ph id="ph1">`basic_istream`</ph>( <bpt id="p1">**</bpt>strbuf<ept id="p1">**</ept>) and <ph id="ph2">`basic_ostream`</ph>( <bpt id="p2">**</bpt>strbuf<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>basic_iostream<ept id="p1">](#basic_iostream__basic_iostream)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`basic_iostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](#basic_iostream__swap)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exchanges the contents of the provided <ph id="ph1">`basic_iostream`</ph> object for the contents of this object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>operator=<ept id="p1">](#basic_iostream__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assigns the value of a specified <ph id="ph1">`basic_iostream`</ph> object to this object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is a move assignment involving an <ph id="ph1">`rvalue`</ph> that does not leave a copy behind.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>istream&gt;</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_iostream__basic_iostream"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_iostream::basic_iostream</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`basic_iostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`basic_streambuf`</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`basic_iostream`</ph> object that is used to construct a new <ph id="ph2">`basic_iostream`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the base objects by way of <ph id="ph1">`basic_istream(`` strbuf``)`</ph> and <ph id="ph2">`basic_ostream(`` strbuf``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the base objects by calling move <ph id="ph1">`(`` right``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_iostream__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_iostream::operator=</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Assign the value of a specified <ph id="ph1">`basic_iostream`</ph> object to this object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is a move assignment involving an <ph id="ph1">`rvalue`</ph> that does not leave a copy behind.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`rvalue`</ph> reference to a <ph id="ph2">`basic_iostream`</ph> object to assign from.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member operator calls swap <ph id="ph1">`(`` right``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="basic_iostream__swap"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  basic_iostream::swap</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Exchanges the contents of the provided <ph id="ph1">`basic_iostream`</ph> object for the contents of this object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`basic_iostream`</ph> object to swap.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The member function calls swap <ph id="ph1">`(`` right``)`</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Safety in the C++ Standard Library<ept id="p1">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostream Programming<ept id="p1">](../standard-library/iostream-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostreams Conventions<ept id="p1">](../standard-library/iostreams-conventions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>