<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c355c76db22cd581bc0458d48c93563f4bbe7712</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\allocator-base-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eedc20fa21cd85db1002bd724d3dc338cd33a6ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">880eeceab857f532e97e9f82478803a9f70ef9d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>allocator_base Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>allocator_base Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines the base class and common functions needed to create a user-defined allocator from a synchronization filter.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type of elements allocated by the allocator.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The synchronization policy for the allocator, which is <bpt id="p1">[</bpt>sync_none Class<ept id="p1">](../standard-library/sync-none-class.md)</ept>, <bpt id="p2">[</bpt>sync_per_container Class<ept id="p2">](../standard-library/sync-per-container-class.md)</ept>, <bpt id="p3">[</bpt>sync_per_thread Class<ept id="p3">](../standard-library/sync-per-thread-class.md)</ept>, or <bpt id="p4">[</bpt>sync_shared Class<ept id="p4">](../standard-library/sync-shared-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>allocator_base<ept id="p1">](#allocator_base__allocator_base)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`allocator_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>TypeDefs</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_pointer<ept id="p1">](#allocator_base__const_pointer)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A type that provides a constant pointer to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const_reference<ept id="p1">](#allocator_base__const_reference)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A type that provides a constant reference to type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>difference_type<ept id="p1">](#allocator_base__difference_type)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pointer<ept id="p1">](#allocator_base__pointer)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>reference<ept id="p1">](#allocator_base__reference)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size_type<ept id="p1">](#allocator_base__size_type)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An unsigned integral type that can represent the length of any sequence that an object of template class <ph id="ph1">`allocator_base`</ph> can allocate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>value_type<ept id="p1">](#allocator_base__value_type)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A type that is managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_Charalloc<ept id="p1">](#allocator_base___charalloc)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Allocates storage for an array of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_Chardealloc<ept id="p1">](#allocator_base___chardealloc)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Frees storage for the array containing elements of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>address<ept id="p1">](#allocator_base__address)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Finds the address of an object whose value is specified.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>allocate<ept id="p1">](#allocator_base__allocate)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Allocates a block of memory large enough to store at least some specified number of elements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>construct<ept id="p1">](#allocator_base__construct)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Constructs a specific type of object at a specified address that is initialized with a specified value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>deallocate<ept id="p1">](#allocator_base__deallocate)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Frees a specified number of objects from storage beginning at a specified position.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>destroy<ept id="p1">](#allocator_base__destroy)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Calls an objects destructor without deallocating the memory where the object was stored.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>max_size<ept id="p1">](#allocator_base__max_size)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the number of elements of type <ph id="ph1">`Type`</ph> that could be allocated by an object of class allocator before the free memory is used up.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>allocators&gt;</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> stdext</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base___charalloc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::_Charalloc</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Allocates storage for an array of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The number of elements in the array to be allocated.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A pointer to the allocated object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This member function is used by containers when compiled with a compiler that cannot compile rebind.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It implements <ph id="ph1">`_Charalloc`</ph> for the user-defined allocator by returning the result of a call to the <ph id="ph2">`allocate`</ph> function of the synchronization filter.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base___chardealloc"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::_Chardealloc</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Frees storage for the array containing elements of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A pointer to the first object to be deallocated from storage.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The number of objects to be deallocated from storage.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This member function is used by containers when compiled with a compiler that cannot compile rebind.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It implements <ph id="ph1">`_Chardealloc`</ph> for the user-defined allocator by calling the <ph id="ph2">`deallocate`</ph> function of the synchronization filter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The pointer ptr must have been earlier returned by a call to <ph id="ph1">`_Charalloc`</ph> for an allocator object that compares equal to <ph id="ph2">`*this`</ph>, allocating an array object of the same size and type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_Chardealloc`</ph> never throws an exception.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__address"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::address</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Finds the address of an object whose value is specified.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The const or nonconst value of the object whose address is being searched for.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A const or nonconst pointer to the object found of, respectively, const or nonconst value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This member function is implemented for the user-defined allocator by returning <ph id="ph1">`&amp;val`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__allocate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::allocate</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Allocates a block of memory large enough to store at least some specified number of elements.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The number of elements in the array to be allocated.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A pointer to the allocated object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The member function implements memory allocation for the user-defined allocator by returning the result of a call to the <ph id="ph1">`allocate`</ph> function of the synchronization filter of type Type <ph id="ph2">`*`</ph> if <ph id="ph3">`_Nx == 1`</ph>, otherwise by returning the result of a call to <ph id="ph4">`operator new(_Nx * sizeof(Type))`</ph> cast to type Type <ph id="ph5">`*`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__allocator_base"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::allocator_base</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`allocator_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The allocator object to be copied.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The first constructor constructs an <bpt id="p1">[</bpt>allocator_base<ept id="p1">](../standard-library/allocator-base-class.md)</ept> instance.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The second constructor constructs an <ph id="ph1">`allocator_base`</ph> instance such that for any <ph id="ph2">`allocator_base&lt;Type, _Sync&gt;`</ph> instance <ph id="ph3">`a`</ph>, <ph id="ph4">`allocator_base&lt;Type, Sync&gt;(allocator_base&lt;Other, Sync&gt;(a)) == a`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__const_pointer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::const_pointer</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A type that provides a constant pointer to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__const_reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::const_reference</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A type that provides a constant reference to type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__construct"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::construct</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Constructs a specific type of object at a specified address that is initialized with a specified value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A pointer to the location where the object is to be constructed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The value with which the object being constructed is to be initialized.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This member function is implemented for the user-defined allocator by calling <ph id="ph1">`new((void*)ptr Type(val)`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__deallocate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::deallocate</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Frees a specified number of objects from storage beginning at a specified position.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A pointer to the first object to be deallocated from storage.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The number of objects to be deallocated from storage.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This member function is implemented for the user-defined allocator by calling <ph id="ph1">`deallocate(ptr)`</ph> on the synchronization filter <ph id="ph2">`Sync`</ph> if <ph id="ph3">`_Nx == 1`</ph>, otherwise by calling <ph id="ph4">`operator delete(_Nx * ptr)`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__destroy"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::destroy</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Calls an objects destructor without deallocating the memory where the object was stored.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A pointer designating the address of the object to be destroyed.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This member function is implemented for the user-defined allocator by calling <ph id="ph1">`ptr-&gt;~Type()`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__difference_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::difference_type</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A signed integral type that can represent the difference between values of pointers to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__max_size"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::max_size</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Returns the number of elements of type <ph id="ph1">`Type`</ph> that could be allocated by an object of class allocator before the free memory is used up.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The number of elements that could be allocated.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This member function is implemented for the user-defined allocator by returning <ph id="ph1">`(size_t)-1 / sizeof(Type)`</ph> if <ph id="ph2">`0 &lt; (size_t)-1 / sizeof(Type)`</ph>, otherwise <ph id="ph3">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__pointer"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::pointer</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__reference"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::reference</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to the type of object managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__size_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::size_type</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An unsigned integral type that can represent the length of any sequence that an object of template class <ph id="ph1">`allocator_base`</ph> can allocate.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="allocator_base__value_type"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  allocator_base::value_type</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A type that is managed by the allocator.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>allocators&gt;<ept id="p1">](../standard-library/allocators-header.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>