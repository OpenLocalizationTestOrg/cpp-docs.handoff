<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62194456fdf6acd01b623892cf743cf9d350a92e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\catltemporaryfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61516e1e06432871116e3680328ae0d6e6813866</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b34347df8a3b4839232fb58e717ff7268a28dca2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CAtlTemporaryFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CAtlTemporaryFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for the creation and use of a temporary file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id="p1">](#catltemporaryfile__catltemporaryfile)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::~CAtlTemporaryFile<ept id="p1">](#catltemporaryfile___dtorcatltemporaryfile)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Close<ept id="p1">](#catltemporaryfile__close)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call this method to close a temporary file and either delete its contents or store them under the specified file name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Create<ept id="p1">](#catltemporaryfile__create)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Call this method to create a temporary file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Flush<ept id="p1">](#catltemporaryfile__flush)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call this method to force any data remaining in the file buffer to be written to the temporary file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::GetPosition<ept id="p1">](#catltemporaryfile__getposition)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Call this method to get the current file pointer position.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::GetSize<ept id="p1">](#catltemporaryfile__getsize)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call this method to get the size in bytes of the temporary file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::HandsOff<ept id="p1">](#catltemporaryfile__handsoff)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Call this method to disassociate the file from the <ph id="ph1">`CAtlTemporaryFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::HandsOn<ept id="p1">](#catltemporaryfile__handson)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Call this method to open an existing temporary file and position the pointer at the end of the file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::LockRange<ept id="p1">](#catltemporaryfile__lockrange)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call this method to lock a region in the file to prevent other processes from accessing it.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Read<ept id="p1">](#catltemporaryfile__read)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Call this method to read data from the temporary file starting at the position indicated by the file pointer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Seek<ept id="p1">](#catltemporaryfile__seek)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Call this method to move the file pointer of the temporary file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::SetSize<ept id="p1">](#catltemporaryfile__setsize)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Call this method to set the size of the temporary file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::TempFileName<ept id="p1">](#catltemporaryfile__tempfilename)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call this method to return the name of the temporary file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::UnlockRange<ept id="p1">](#catltemporaryfile__unlockrange)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call this method to unlock a region of the temporary file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::Write<ept id="p1">](#catltemporaryfile__write)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Call this method to write data to the temporary file starting at the position indicated by the file pointer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::operator HANDLE<ept id="p1">](#catltemporaryfile__operator_handle)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns a handle to the temporary file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAtlTemporaryFile`</ph> makes it easy to create and use a temporary file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The file is automatically named, opened, closed, and deleted.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the file contents are required after the file is closed, they can be saved to a new file with a specified name.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlfile.h</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id="p1">](#catltemporaryfile__catltemporaryfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__catltemporaryfile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::CAtlTemporaryFile</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A file is not actually opened until a call is made to <bpt id="p1">[</bpt>CAtlTemporaryFile::Create<ept id="p1">](#catltemporaryfile__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#73<ept id="p2">](../../atl/codesnippet/cpp/catltemporaryfile-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile___dtorcatltemporaryfile"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::~CAtlTemporaryFile</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The destructor calls <bpt id="p1">[</bpt>CAtlTemporaryFile::Close<ept id="p1">](#catltemporaryfile__close)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__close"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::Close</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Call this method to close a temporary file and either delete its contents or store them under the specified file name.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>szNewName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The name for the new file to store the contents of the temporary file in.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If this argument is NULL, the contents of the temporary file are deleted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id="p1">](#catltemporaryfile__catltemporaryfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::Create</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Call this method to create a temporary file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The path for the temporary file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If this is NULL, <bpt id="p1">[</bpt>GetTempPath<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa364992)</ept> will be called to assign a path.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The desired access.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`dwDesiredAccess`</ph> in <bpt id="p1">[</bpt>CreateFile<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363858)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id="p1">](#catltemporaryfile__catltemporaryfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__flush"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::Flush</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this method to force any data remaining in the file buffer to be written to the temporary file.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>CAtlTemporaryFile::HandsOff<ept id="p1">](#catltemporaryfile__handsoff)</ept>, except that the file is not closed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id="p1">](#catltemporaryfile__catltemporaryfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__getposition"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::GetPosition</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Call this method to get the current file pointer position.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The position in bytes.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To change the file pointer position, use <bpt id="p1">[</bpt>CAtlTemporaryFile::Seek<ept id="p1">](#catltemporaryfile__seek)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__getsize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::GetSize</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Call this method to get the size in bytes of the temporary file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The number of bytes in the file.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__handsoff"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::HandsOff</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Call this method to disassociate the file from the <ph id="ph1">`CAtlTemporaryFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HandsOff`</ph> and <bpt id="p1">[</bpt>CAtlTemporaryFile::HandsOn<ept id="p1">](#catltemporaryfile__handson)</ept> are used to disassociate the file from the object, and reattach it if needed.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HandsOff`</ph> will force any data remaining in the file buffer to be written to the temporary file, and then close the file.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If you want to close and delete the file permanently, or if you want to close and retain the contents of the file with a given name, use <bpt id="p1">[</bpt>CAtlTemporaryFile::Close<ept id="p1">](#catltemporaryfile__close)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__handson"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::HandsOn</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Call this method to open an existing temporary file and position the pointer at the end of the file.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAtlTemporaryFile::HandsOff<ept id="p1">](#catltemporaryfile__handsoff)</ept> and <ph id="ph1">`HandsOn`</ph> are used to disassociate the file from the object, and reattach it if needed.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__lockrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::LockRange</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Call this method to lock a region in the temporary file to prevent other processes from accessing it.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The position in the file where the lock should begin.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The length of the byte range to be locked.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, or an error <ph id="ph2">`HRESULT`</ph> on failure.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Locking bytes in a file prevents access to those bytes by other processes.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can lock more than one region of a file, but no overlapping regions are allowed.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>To successfully unlock a region, use <bpt id="p1">[</bpt>CAtlTemporaryFile::UnlockRange<ept id="p1">](#catltemporaryfile__unlockrange)</ept>, ensuring the byte range corresponds exactly to the region that was previously locked.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LockRange`</ph> does not merge adjacent regions; if two locked regions are adjacent, you must unlock each separately.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="catltemporaryfile__operator_handle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAtlTemporaryFile::operator HANDLE</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Returns a handle to the temporary file.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>```operator HANDLE() throw();</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>HRESULT Read(LPVOID pBuffer, DWORD nBufSize, DWORD&amp; nBytesRead) throw();</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>HRESULT Seek(LONGLONG nOffset,  DWORD dwFrom = FILE_CURRENT) throw();</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>HRESULT SetSize(ULONGLONG nNewLen) throw();</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>LPCTSTR TempFileName() throw();</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>HRESULT UnlockRange(ULONGLONG nPos,  ULONGLONG nCount) throw();</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>HRESULT Write(LPCVOID pBuffer, DWORD nBufSize, DWORD* pnBytesWritten = NULL) throw();</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>