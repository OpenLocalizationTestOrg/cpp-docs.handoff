<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a41d7b15734ea2f907be35749cad235a25e9476</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\scanf-width-specification.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b723f6b0cbc208e655e34a4547a4f6d1376b4e04</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38f3e7c0aee5dcc3466deecaabb2cc77d0cd3737</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>scanf Width Specification | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>scanf Width Specification</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This information applies to the interpretation of format strings in the <ph id="ph1">`scanf`</ph> family of functions, including the secure versions such as <ph id="ph2">`scanf_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These functions normally assume the input stream is divided into a sequence of tokens.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Tokens are separated by whitespace (space, tab, or newline), or in the case of numerical types, by the natural end of a numerical data type as indicated by the first character that cannot be converted into numerical text.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, the width specification may be used to cause parsing of the input to stop before the natural end of a token.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>width<ept id="p1">*</ept> specification consists of characters between the <ph id="ph1">`%`</ph> and the type field specifier, which may include a positive integer called the <bpt id="p2">*</bpt>width<ept id="p2">*</ept> field and one or more characters indicating the size of the field, which may also be considered as modifiers of the type of the field, such as an indication of whether the integer type is <bpt id="p3">**</bpt>short<ept id="p3">**</ept> or <bpt id="p4">**</bpt>long<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Such characters are referred to as the size prefix.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Width Field</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>The width<ept id="p1">*</ept> field is a positive decimal integer controlling the maximum number of characters to be read for that field.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>No more than <bpt id="p1">*</bpt>width<ept id="p1">*</ept> characters are converted and stored at the corresponding <ph id="ph1">`argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Fewer than <bpt id="p1">*</bpt>width<ept id="p1">*</ept> characters may be read if a whitespace character (space, tab, or newline) or a character that cannot be converted according to the given format occurs before <bpt id="p2">*</bpt>width<ept id="p2">*</ept> is reached.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The width specification is separate and distinct from the buffer size argument required by the secure versions of these functions (i.e., <ph id="ph1">`scanf_s`</ph>, <ph id="ph2">`wscanf_s`</ph>, etc.).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the following example, the width specification is 20, indicating that up to 20 characters are to be read from the input stream.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The buffer length is 21, which includes room for the possible 20 characters plus the null terminator:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>width<ept id="p1">*</ept> field is not used, <ph id="ph1">`scanf_s`</ph> will attempt to read the entire token into the string.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the size specified is not large enough to hold the entire token, nothing will be written to the destination string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>width<ept id="p1">*</ept> field is specified, then the first <bpt id="p2">*</bpt>width<ept id="p2">*</ept> characters in the token will be written to the destination string along with the null terminator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Size Prefix</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The optional prefixes <bpt id="p1">**</bpt>h<ept id="p1">**</ept>, <bpt id="p2">**</bpt>l<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ll<ept id="p3">**</ept>, <bpt id="p4">**</bpt>I64<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>L<ept id="p5">**</ept> indicate the size of the <ph id="ph1">`argument`</ph> (long or short, single-byte character or wide character, depending upon the type character that they modify).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These format-specification characters are used with type characters in <ph id="ph1">`scanf`</ph> or <ph id="ph2">`wscanf`</ph> functions to specify interpretation of arguments as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type prefix <bpt id="p1">**</bpt>I64<ept id="p1">**</ept> is a Microsoft extension and is not ANSI compatible.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type characters and their meanings are described in the "Type Characters for scanf functions" table in <bpt id="p1">[</bpt>scanf Type Field Characters<ept id="p1">](../c-runtime-library/scanf-type-field-characters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>h<ept id="p1">**</ept>, <bpt id="p2">**</bpt>l<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>L<ept id="p3">**</ept> prefixes are Microsoft extensions when used with data of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Size Prefixes for scanf and wscanf Format-Type Specifiers</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To specify</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use prefix</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>With type specifier</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>e<ept id="p1">**</ept>, <bpt id="p2">**</bpt>E<ept id="p2">**</ept>, <bpt id="p3">**</bpt>f<ept id="p3">**</ept>, <bpt id="p4">**</bpt>g<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>G<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>long double<ept id="p1">**</ept> (same as double)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>L</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>e<ept id="p1">**</ept>, <bpt id="p2">**</bpt>E<ept id="p2">**</ept>, <bpt id="p3">**</bpt>f<ept id="p3">**</ept>, <bpt id="p4">**</bpt>g<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>G<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>long int</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d<ept id="p1">**</ept>, <bpt id="p2">**</bpt>i<ept id="p2">**</ept>, <bpt id="p3">**</bpt>o<ept id="p3">**</ept>, <bpt id="p4">**</bpt>x<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>X<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>long unsigned int</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>u</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>long long</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ll</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d<ept id="p1">**</ept>, <bpt id="p2">**</bpt>i<ept id="p2">**</ept>, <bpt id="p3">**</bpt>o<ept id="p3">**</ept>, <bpt id="p4">**</bpt>x<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>X<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d<ept id="p1">**</ept>, <bpt id="p2">**</bpt>i<ept id="p2">**</ept>, <bpt id="p3">**</bpt>o<ept id="p3">**</ept>, <bpt id="p4">**</bpt>x<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>X<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>short unsigned int</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>u</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>__<bpt id="p1">**</bpt>int64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>I64</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d<ept id="p1">**</ept>, <bpt id="p2">**</bpt>i<ept id="p2">**</ept>, <bpt id="p3">**</bpt>o<ept id="p3">**</ept>, <bpt id="p4">**</bpt>u<ept id="p4">**</ept>, <bpt id="p5">**</bpt>x<ept id="p5">**</ept>, or <bpt id="p6">**</bpt>X<ept id="p6">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Single-byte character with</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>c<ept id="p1">**</ept> or <bpt id="p2">**</bpt>C<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Single-byte character with</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>c<ept id="p1">**</ept> or <bpt id="p2">**</bpt>C<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Wide character with</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>c<ept id="p1">**</ept> or <bpt id="p2">**</bpt>C<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Wide character with</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>c<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>C<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Single-byte – character string with</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept> or <bpt id="p2">**</bpt>S<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Single-byte – character string with</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>h</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept> or <bpt id="p2">**</bpt>S<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Wide-character string with</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept> or <bpt id="p2">**</bpt>S<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Wide-character string with</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept> or <bpt id="p2">**</bpt>S<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following examples use <bpt id="p1">**</bpt>h<ept id="p1">**</ept> and <bpt id="p2">**</bpt>l<ept id="p2">**</ept> with <ph id="ph1">`scanf_s`</ph> functions and <ph id="ph2">`wscanf_s`</ph> functions:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If using an unsecure function in the <ph id="ph1">`scanf`</ph> family, omit the size parameter indicating the buffer length of the preceding argument.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Reading Undelimited strings</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To read strings not delimited by whitespace characters, a set of characters in brackets (<bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>) can be substituted for the <bpt id="p2">**</bpt>s<ept id="p2">**</ept> (string) type character.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The set of characters in brackets is referred to as a control string.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The corresponding input field is read up to the first character that does not appear in the control string.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the first character in the set is a caret (<bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept>), the effect is reversed: The input field is read up to the first character that does appear in the rest of the character set.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>%[a-z]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>%[z-a]<ept id="p2">**</ept> are interpreted as equivalent to <bpt id="p3">**</bpt>%[abcde...z]<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is a common <ph id="ph1">`scanf`</ph> function extension, but note that the ANSI standard does not require it.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Reading Unterminated strings</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To store a string without storing a terminating null character ('\0'), use the specification <ph id="ph1">`%`</ph><bpt id="p1">*</bpt>n<ept id="p1">*</ept><bpt id="p2">**</bpt>c<ept id="p2">**</ept> where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is a decimal integer.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">**</bpt>c<ept id="p1">**</ept> type character indicates that the argument is a pointer to a character array.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The next <bpt id="p1">*</bpt>n<ept id="p1">*</ept> characters are read from the input stream into the specified location, and no null character ('\0') is appended.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>n<ept id="p1">*</ept> is not specified, its default value is 1.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When scanf stops reading a field</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`scanf`</ph> function scans each input field, character by character.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It may stop reading a particular input field before it reaches a space character for a variety of reasons:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The specified width has been reached.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The next character cannot be converted as specified.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The next character conflicts with a character in the control string that it is supposed to match.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The next character fails to appear in a given character set.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For whatever reason, when the <ph id="ph1">`scanf`</ph> function stops reading an input field, the next input field is considered to begin at the first unread character.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The conflicting character, if there is one, is considered unread and is the first character of the next input field or the first character in subsequent read operations on the input stream.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>scanf, _scanf_l, wscanf, _wscanf_l</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Format Specification Fields: scanf and wscanf Functions</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>scanf Type Field Characters</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>