<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e33b3af58b4f1c40cad84adb449f27594dc1b432</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\cpp-type-system-modern-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e804bc65acdf5544d8e8e660a0a9e43717a120a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">febde1ed18ec6f008f5832b7b268a7b7151a33f0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C++ Type System (Modern C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C++ Type System (Modern C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The concept of <bpt id="p1">*</bpt>type<ept id="p1">*</ept> is very important in C++.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Every variable, function argument, and function return value must have a type in order to be compiled.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Also, every expression (including literal values) is implicitly given a type by the compiler before it is evaluated.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some examples of types include <ph id="ph1">`int`</ph> to store integral values, <ph id="ph2">`double`</ph> to store floating-point values (also known as <bpt id="p1">*</bpt>scalar<ept id="p1">*</ept> data types), or the Standard Library class <bpt id="p2">[</bpt>std::basic_string<ept id="p2">](../standard-library/basic-string-class.md)</ept> to store text.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can create your own type by defining a <ph id="ph1">`class`</ph> or <ph id="ph2">`struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type specifies the amount of memory that will be allocated for the variable (or expression result), the kinds of values that may be stored in that variable, how those values (as bit patterns) are interpreted, and the operations that can be performed on it.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article contains an informal overview of the major features of the C++ type system.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Terminology</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variable<ept id="p1">**</ept>: The symbolic name of a quantity of data so that the name can be used to access the data it refers to throughout the scope of the code where it is defined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In C++, “variable” is generally used to refer to instances of scalar data types, whereas instances of other types are usually called “objects”.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object<ept id="p1">**</ept>: For simplicity and consistency, this article uses the term “object” to refer to any instance of a class or structure, and when it is used in the general sense includes all types, even scalar variables.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>POD type<ept id="p1">**</ept> (plain old data): This informal category of data types in C++ refers to types that are scalar (see the Fundamental types section) or are <bpt id="p2">*</bpt>POD classes<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A POD class has no static data members that aren’t also PODs, and has no user-defined constructors, user-defined destructors, or user-defined assignment operators.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Also, a POD class has no virtual functions, no base class, and no private or protected non-static data members.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>POD types are often used for external data interchange, for example with a module written in the C language (which has POD types only).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specifying variable and function types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C++ is a <bpt id="p1">*</bpt>strongly typed<ept id="p1">*</ept> language and it is also <bpt id="p2">*</bpt>statically-typed<ept id="p2">*</ept>; every object has a type and that type never changes (not to be confused with static data objects).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>When you declare a variable<ept id="p1">**</ept> in your code, you must either specify its type explicitly, or use the <ph id="ph1">`auto`</ph> keyword to instruct the compiler to deduce the type from the initializer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>When you declare a function<ept id="p1">**</ept> in your code, you must specify the type of each argument and its return value, or <ph id="ph1">`void`</ph> if no value is returned by the function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The exception is when you are using function templates, which allow for arguments of arbitrary types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>After you first declare a variable, you cannot change its type at some later point.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, you can copy the variable’s value or a function’s return value into another variable of a different type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Such operations are called <bpt id="p1">*</bpt>type conversions<ept id="p1">*</ept>, which are sometimes necessary but are also potential sources of data loss or incorrectness.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you declare a variable of POD type, we strongly recommend you initialize it, which means to give it an initial value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Until you initialize a variable, it has a "garbage" value that consists of whatever bits happened to be in that memory location previously.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is an important aspect of C++ to remember, especially if you are coming from another language that handles initialization for you.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When declaring a variable of non-POD class type, the constructor handles initialization.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows some simple variable declarations with some descriptions for each.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The example also shows how the compiler uses type information to allow or disallow certain subsequent operations on the variable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Fundamental (built-in) types</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Unlike some languages, C++ has no universal base type from which all other types are derived.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> implementation of the language includes many <bpt id="p1">*</bpt>fundamental types<ept id="p1">*</ept>, also known as <bpt id="p2">*</bpt>built-in types<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This includes numeric types such as <ph id="ph1">`int`</ph>, <ph id="ph2">`double`</ph>, <ph id="ph3">`long`</ph>, <ph id="ph4">`bool`</ph>, plus the <ph id="ph5">`char`</ph> and <ph id="ph6">`wchar_t`</ph> types for ASCII and UNICODE characters, respectively.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Most fundamental types (except <ph id="ph1">`bool`</ph>, <ph id="ph2">`double`</ph>, <ph id="ph3">`wchar_t`</ph> and related types) all have unsigned versions, which modify the range of values that the variable can store.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`int`</ph>, which stores a 32-bit signed integer, can represent a value from -2,147,483,648 to 2,147,483,647.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`unsigned int`</ph>, which is also stored as 32-bits, can store a value from 0 to 4,294,967,295.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The total number of possible values in each case is the same; only the range is different.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The fundamental types are recognized by the compiler, which has built-in rules that govern what operations you can perform on them, and how they can be converted to other fundamental types.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For a complete list of built-in types and their size and numeric limits, see <bpt id="p1">[</bpt>Fundamental Types<ept id="p1">](../cpp/fundamental-types-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following illustration shows the relative sizes of the built-in types:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Size in bytes of built&amp;#45;in types</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following table lists the most frequently used fundamental types:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Size</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Comment</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>4 bytes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default choice for integral values.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default choice for floating point values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Represents values that can be either true or false.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use for ASCII characters in older C-style strings or std::string objects that will never have to be converted to UNICODE.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>wchar_t</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>2 bytes</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Represents "wide" character values that may be encoded in UNICODE format (UTF-16 on Windows, other operating systems may differ).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the character type that is used in strings of type <ph id="ph1">`std::wstring`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>unsigned char</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>C++ has no built-in <ph id="ph1">`byte`</ph> type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use unsigned char to represent a byte value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>unsigned int</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>4 bytes</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Default choice for bit flags.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>long long</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>8 bytes</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Represents very large integer values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The void type</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`void`</ph> type is a special type; you cannot declare a variable of type <ph id="ph2">`void`</ph>, but you can declare a variable of type <ph id="ph3">`void *`</ph> (pointer to <ph id="ph4">`void`</ph>), which is sometimes necessary when allocating raw (un-typed) memory.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, pointers to <ph id="ph1">`void`</ph> are not type-safe and generally their use is strongly discouraged in modern C++.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In a function declaration, a <ph id="ph1">`void`</ph> return value means that the function does not return a value; this is a common and acceptable use of <ph id="ph2">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>While the C language required functions that have zero parameters to declare <ph id="ph1">`void`</ph> in the parameter list, for example, <ph id="ph2">`fou(void)`</ph>, this practice is discouraged in modern C++ and should be declared <ph id="ph3">`fou()`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type Conversions and Type Safety<ept id="p1">](../cpp/type-conversions-and-type-safety-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>const type qualifier</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Any built-in or user-defined type may be qualified by the const keyword.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Additionally, member functions may be <ph id="ph1">`const`</ph>-qualified and even <ph id="ph2">`const`</ph>-overloaded.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value of a <ph id="ph1">`const`</ph> type cannot be modified after it is initialized.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`const`</ph> qualifier is used extensively in function and variable declarations and "const correctness" is an important concept in C++; essentially it means to use <ph id="ph2">`const`</ph> to guarantee, at compile time, that values are not modified unintentionally.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>const<ept id="p1">](../cpp/const-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> type is distinct from its non-const version; for example, <ph id="ph2">`const int`</ph> is a distinct type from <ph id="ph3">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can use the C++ <ph id="ph1">`const_cast`</ph> operator on those rare occasions when you must remove <bpt id="p1">*</bpt>const-ness<ept id="p1">*</ept> from a variable.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type Conversions and Type Safety<ept id="p1">](../cpp/type-conversions-and-type-safety-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>String types</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Strictly speaking, the C++ language has no built-in “string” type; <ph id="ph1">`char`</ph> and <ph id="ph2">`wchar_t`</ph> store single characters – you must declare an array of these types to approximate a string, adding a terminating null value (for example, ASCII <ph id="ph3">`‘\0’`</ph>) to the array element one past the last valid character (also called a “C-style string”).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>C-style strings required much more code to be written or the use of external string utility library functions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>But in modern C++, we have the Standard Library types <ph id="ph1">`std::string`</ph> (for 8-bit <ph id="ph2">`char`</ph>-type character strings) or <ph id="ph3">`std::wstring`</ph> (for 16-bit <ph id="ph4">`wchar_t`</ph>-type character strings).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>These STL containers can be thought of as native string types because they are part of the standard libraries that are included in any compliant C++ build environment.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Simply use the <ph id="ph1">`#include &lt;string&gt;`</ph> directive to make these types available in your program.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(If you are using MFC or ATL, the CString class is also available, but is not part of the C++ standard.) The use of null-terminated character arrays (the C-style strings previously mentioned) is strongly discouraged in modern C++.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>User-defined types</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you define a <ph id="ph1">`class`</ph>, <ph id="ph2">`struct`</ph>, <ph id="ph3">`union`</ph>, or <ph id="ph4">`enum`</ph>, that construct is used in the rest of your code as if it were a fundamental type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It has a known size in memory, and certain rules about how it can be used apply to it for compile-time checking and, at runtime, for the life of your program.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The primary differences between the fundamental built-in types and user-defined types are as follows:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The compiler has no built-in knowledge of a user-defined type.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It “learns” of the type when it first encounters the definition during the compilation process.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You specify what operations can be performed on your type, and how it can be converted to other types, by defining (through overloading) the appropriate operators, either as class members or non-member functions.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Overloading<ept id="p1">](function-overloading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>They do not have to be statically typed (the rule that an object's type never changes).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Through the mechanisms of <bpt id="p1">*</bpt>inheritance<ept id="p1">*</ept> and <bpt id="p2">*</bpt>polymorphism<ept id="p2">*</ept>, a variable declared as a user-defined type of class (referred to as an object instance of a class) might have a different type at run-time than at compile time.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Inheritance<ept id="p1">](../cpp/inheritance-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Pointer types</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Dating back to the earliest versions of the C language, C++ continues to let you declare a variable of a pointer type by using the special declarator <ph id="ph1">`*`</ph> (asterisk).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A pointer type stores the address of the location in memory where the actual data value is stored.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In modern C++, these are referred to as <bpt id="p1">*</bpt>raw pointers<ept id="p1">*</ept>, and are accessed in your code through special operators <ph id="ph1">`*`</ph> (asterisk) or <ph id="ph2">`-&gt;`</ph> (dash with greater-than).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>dereferencing<ept id="p1">*</ept>, and which one that you use depends on whether you are dereferencing a pointer to a scalar or a pointer to a member in an object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Working with pointer types has long been one of the most challenging and confusing aspects of C and C++ program development.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This section outlines some facts and practices to help use raw pointers if you want to, but in modern C++ it’s no longer required (or recommended) to use raw pointers for object ownership at all, due to the evolution of the <bpt id="p1">[</bpt>smart pointer<ept id="p1">](../cpp/smart-pointers-modern-cpp.md)</ept> (discussed more at the end of this section).</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is still useful and safe to use raw pointers for observing objects, but if you must use them for object ownership, you should do so with caution and very careful consideration of how the objects owned by them are created and destroyed.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The first thing that you should know is declaring a raw pointer variable will allocate only the memory that is required to store an address of the memory location that the pointer will be referring to when it is dereferenced.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Allocation of the memory for the data value itself (also called <bpt id="p1">*</bpt>backing store<ept id="p1">*</ept>) is not yet allocated.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In other words, by declaring a raw pointer variable, you are creating a memory address variable, not an actual data variable.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Dereferencing a pointer variable before making sure that it contains a valid address to a backing store will cause undefined behavior (usually a fatal error) in your program.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this kind of error:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The example dereferences a pointer type without having any memory allocated to store the actual integer data or a valid memory address assigned to it.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following code corrects these errors:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The corrected code example uses local stack memory to create the backing store that <ph id="ph1">`pNumber`</ph> points to.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>We use a fundamental type for simplicity.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In practice, the backing store for pointers are most often user-defined types that are dynamically-allocated in an area of memory called the <bpt id="p1">*</bpt>heap<ept id="p1">*</ept> (or “free store”) by using a <ph id="ph1">`new`</ph> keyword expression (in C-style programming, the older <ph id="ph2">`malloc()`</ph> C runtime library function was used).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Once allocated, these “variables” are usually referred to as “objects”, especially if they are based on a class definition.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Memory that is allocated with <ph id="ph1">`new`</ph> must be deleted by a corresponding <ph id="ph2">`delete`</ph> statement (or, if you used the <ph id="ph3">`malloc()`</ph> function to allocate it, the C runtime function <ph id="ph4">`free()`</ph>).</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>However, it is easy to forget to delete a dynamically-allocated object- especially in complex code, which causes a resource bug called a <bpt id="p1">*</bpt>memory leak<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For this reason, the use of raw pointers is strongly discouraged in modern C++.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It is almost always better to wrap a raw pointer in a <bpt id="p1">[</bpt>smart pointer<ept id="p1">](../cpp/smart-pointers-modern-cpp.md)</ept>, which will automatically release the memory when its destructor is invoked (when the code goes out of scope for the smart pointer); by using smart pointers you virtually eliminate a whole class of bugs in your C++ programs.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, assume <ph id="ph1">`MyClass`</ph> is a user-defined type that has a public method</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information about smart pointers, see <bpt id="p1">[</bpt>Smart Pointers<ept id="p1">](../cpp/smart-pointers-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information about pointer conversions, see <bpt id="p1">[</bpt>Type Conversions and Type Safety<ept id="p1">](../cpp/type-conversions-and-type-safety-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information about pointers in general, see <bpt id="p1">[</bpt>Pointers<ept id="p1">](../cpp/pointers-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Windows data types</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In classic Win32 programming for C and C++, most functions use Windows-specific typedefs and #define macros (defined in <ph id="ph1">`windef.h`</ph>) to specify the types of parameters and return values.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>These “Windows data types” are mostly just special names (aliases) given to C/C++ built-in types.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For a complete list of these typedefs and preprocessor definitions, see <bpt id="p1">[</bpt>Windows Data Types<ept id="p1">](http://msdn.microsoft.com/en-us/4553cafc-450e-4493-a4d4-cb6e2f274d46)</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Some of these typedefs, such as HRESULT and LCID, are useful and descriptive.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Others, such as INT, have no special meaning and are just aliases for fundamental C++ types.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Other Windows data types have names that are retained from the days of C programming and 16-bit processors, and have no purpose or meaning on modern hardware or operating systems.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>There are also special data types associated with the Windows Runtime Library, listed as <bpt id="p1">[</bpt>Windows Runtime base data types<ept id="p1">](http://msdn.microsoft.com/en-us/b5735851-ec07-48c1-92b4-ca9f768096f6)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In modern C++, the general guideline is to prefer the C++ fundamental types unless the Windows type communicates some additional meaning about how the value is to be interpreted.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>More Information</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information about the C++ type system, see the following topics.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Value Types</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Describes <bpt id="p1">*</bpt>value types<ept id="p1">*</ept> along with issues relating to their use.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Type Conversions and Type Safety</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Describes common type conversion issues and shows how to avoid them.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Welcome Back to C++</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>