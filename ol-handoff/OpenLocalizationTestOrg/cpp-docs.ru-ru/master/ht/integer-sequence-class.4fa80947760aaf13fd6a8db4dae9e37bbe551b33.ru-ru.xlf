<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">384e96cb5d2564d5459ade590c9224797f3468d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\integer-sequence-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2566186c86a22a618e1bafd95a8a1d199950cace</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b153ed80cf6bba5d28f376670372933d10f9be96</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>integer_sequence Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>integer_sequence Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents an integer sequence.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Can be used to deduce and expand parameter packs in variadic types such as std::tuple<ph id="ph1">\&lt;</ph>T...&gt; that are passed as arguments to a function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>T</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type of the values; must be an integral type: bool, char, char16_t, char32_t, wchar_t, or signed or unsigned integer types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Vals</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A non-type parameter pack that represents a sequence of values of integral type T.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The number of elements in the sequence.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>typedef T value_type</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of each element in the sequence.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Must be an integral type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A parameter pack that is passed directly to a function can be unpacked without any special library helpers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When a parameter pack is part of a type that is passed to a function, and you need indices to access the elements, then the easiest way to unpack it is to use <ph id="ph1">`integer_sequence`</ph> and its related type aliases <ph id="ph2">`make_integer_sequence`</ph>, <ph id="ph3">`index_sequence`</ph>, <ph id="ph4">`make_index_sequence`</ph>, and <ph id="ph5">`index_sequence_for`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example is based on the original proposal <bpt id="p1">[</bpt>N3658<ept id="p1">](http://open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3658.html)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It shows how to use an <ph id="ph1">`integer_sequence`</ph> to create a <ph id="ph2">`std::tuple`</ph> from a <ph id="ph3">`std::array&lt;T,N&gt;`</ph>, and how to use an <ph id="ph4">`integer_sequence`</ph> to get at the tuple members.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`a2t`</ph> function, an <ph id="ph2">`index_sequence`</ph> is an alias of <ph id="ph3">`integer_sequence`</ph> based on the <ph id="ph4">`size_t`</ph> integral type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>is an alias that at compile time creates a zero-based <ph id="ph1">`index_sequence`</ph> with the same number of elements as the array that is passed in by the caller.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>passes the <ph id="ph1">`index_sequence`</ph> by value to <ph id="ph2">`a2t_`</ph> , where the expression <ph id="ph3">`a[I]...`</ph> unpacks <ph id="ph4">`I`</ph>, and then the elements are being fed to <ph id="ph5">`make_tuple`</ph> which consumes them as individual arguments.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if the sequence contains three elements, then <ph id="ph1">`make_tuple`</ph> is called as make_tuple(a[0], a[1], a[2]).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The array elements themselves can of course be any type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The apply function accepts a <bpt id="p1">[</bpt>std::tuple<ept id="p1">](../standard-library/tuple-class.md)</ept>, and produces an integer_sequence by using the <ph id="ph1">`tuple_size`</ph> helper class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">[</bpt>std::decay_t<ept id="p1">](../standard-library/decay-class.md)</ept>_is necessary because <bpt id="p2">[</bpt>tuple_size<ept id="p2">](../standard-library/tuple-size-class-tuple.md)</ept> does not work with reference types.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`apply_`</ph> function unpacks the tuple members and forwards them as separate arguments to a function call.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this example the function is a simple lambda expression that prints out the values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To make an <ph id="ph1">`index_sequence`</ph> for a parameter pack, use <ph id="ph2">`index_sequence_for`\&lt;</ph>T...&gt; which is an alias for <ph id="ph3">`make_index_sequence`\&lt;</ph>sizeof...(T)&gt;</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Header: &lt;type_traits&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Namepace: std</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Ellipses and Variadic Templates</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>