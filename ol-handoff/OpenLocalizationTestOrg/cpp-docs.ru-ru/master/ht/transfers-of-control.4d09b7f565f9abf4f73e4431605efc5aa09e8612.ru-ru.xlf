<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcf79887bffd608560ad5fcb0d8a878ad614e379</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\transfers-of-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9b061175c40d12e2f7c2466ec6790ce1749c34d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cf42aa519666005c41ac5c1cfaddb8830bdc704</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transfers of Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transfers of Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`goto`</ph> statement or a <bpt id="p1">**</bpt>case<ept id="p1">**</ept> label in a <ph id="ph2">`switch`</ph> statement to specify a program that branches past an initializer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Such code is illegal unless the declaration that contains the initializer is in a block enclosed by the block in which the jump statement occurs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example shows a loop that declares and initializes the objects <ph id="ph1">`total`</ph>, <ph id="ph2">`ch`</ph>, and <ph id="ph3">`i`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There is also an erroneous <ph id="ph1">`goto`</ph> statement that transfers control past an initializer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">`goto`</ph> statement tries to transfer control past the initialization of <ph id="ph2">`i`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, if <ph id="ph1">`i`</ph> were declared but not initialized, the transfer would be legal.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The objects <ph id="ph1">`total`</ph> and <ph id="ph2">`ch`</ph>, declared in the block that serves as the <bpt id="p1">*</bpt>statement<ept id="p1">*</ept> of the <ph id="ph3">`while`</ph> statement, are destroyed when that block is exited using the <ph id="ph4">`break`</ph> statement.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>