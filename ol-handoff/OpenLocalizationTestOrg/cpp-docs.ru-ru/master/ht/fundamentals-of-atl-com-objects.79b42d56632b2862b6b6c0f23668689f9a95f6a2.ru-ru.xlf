<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ff7010f31ad602087341790935a8d22278cf1e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\fundamentals-of-atl-com-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97caf220ff3f33c17b98cbcd69ecc603de2f93f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ad83ca335760965407306e6bdfd4a5b723b9c5a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Fundamentals of ATL COM Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Fundamentals of ATL COM Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following illustration depicts the relationship among the classes and interfaces that are used to define an ATL COM object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ATL structure</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This diagram shows that <ph id="ph1">`CComObject`</ph> is derived from <ph id="ph2">`CYourClass`</ph> whereas <ph id="ph3">`CComAggObject`</ph> and <ph id="ph4">`CComPolyObject`</ph> include <ph id="ph5">`CYourClass`</ph> as a member variable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are three ways to define an ATL COM object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The standard option is to use the <ph id="ph1">`CComObject`</ph> class which is derived from <ph id="ph2">`CYourClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The second option is to create an aggregated object by using the <ph id="ph1">`CComAggObject`</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third option is to use the <ph id="ph1">`CComPolyObject`</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>acts as a hybrid: it can function as a <ph id="ph1">`CComObject`</ph> class or as a <ph id="ph2">`CComAggObject`</ph> class, depending on how it is first created.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`CComPolyObject`</ph> class, see <bpt id="p1">[</bpt>CComPolyObject Class<ept id="p1">](../atl/reference/ccompolyobject-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you use standard ATL COM, you use two objects: an outer object and an inner object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>External clients access the functionality of the inner object through the wrapper functions that are defined in the outer object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The outer object is of type <ph id="ph1">`CComObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you use an aggregated object, the outer object does not provide wrappers for the functionality of the inner object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, the outer object provides a pointer that is directly accessed by external clients.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this scenario, the outer object is of type <ph id="ph1">`CComAggObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The inner object is a member variable of the outer object, and it is of type <ph id="ph1">`CYourClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the client does not have to go through the outer object to interact with the inner object, aggregated objects are usually more efficient.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Also, the outer object does not have to know the functionality of the aggregated object, given that the interface of the aggregated object is directly available to the client.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, not all objects can be aggregated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For an object to be aggregated, it needs to be designed with aggregation in mind.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ATL implements <bpt id="p1">[</bpt>IUnknown<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680509)</ept> in two phases:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComObject<ept id="p1">](../atl/reference/ccomobject-class.md)</ept>, <bpt id="p2">[</bpt>CComAggObject<ept id="p2">](../atl/reference/ccomaggobject-class.md)</ept>, or <bpt id="p3">[</bpt>CComPolyObject<ept id="p3">](../atl/reference/ccompolyobject-class.md)</ept> implements the <bpt id="p4">**</bpt>IUnknown<ept id="p4">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComObjectRoot<ept id="p1">](../atl/reference/ccomobjectroot-class.md)</ept> or <bpt id="p2">[</bpt>CComObjectRootEx<ept id="p2">](../atl/reference/ccomobjectrootex-class.md)</ept> manages the reference count and outer pointers of <bpt id="p3">**</bpt>IUnknown<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other aspects of your ATL COM object are handled by other classes:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComCoClass<ept id="p1">](../atl/reference/ccomcoclass-class.md)</ept> defines the object's default class factory and aggregation model.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IDispatchImpl<ept id="p1">](../atl/reference/idispatchimpl-class.md)</ept> provides a default implementation of the <ph id="ph1">`IDispatch Interface`</ph> portion of any dual interfaces on the object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ISupportErrorInfoImpl<ept id="p1">](../atl/reference/isupporterrorinfoimpl-class.md)</ept> implements the <bpt id="p2">**</bpt>ISupportErrorInfo<ept id="p2">**</ept> interface that ensures error information can be propagated up the call chain correctly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implementing CComObjectRootEx</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Show example COM map entries for implementing <ph id="ph1">`CComObjectRootEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implementing CComObject, CComAggObject, and CComPolyObject</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Discusses how the <bpt id="p1">**</bpt>DECLARE_<ph id="ph1">\*</ph>_AGGREGATABLE<ept id="p1">**</ept> macros affect the use of <ph id="ph2">`CComObject`</ph>, <ph id="ph3">`CComAggObject`</ph>, and <ph id="ph4">`CComPolyObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Supporting IDispatch and IErrorInfo</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Lists the ATL implementation classes to use for supporting the <ph id="ph1">`IDispatch`</ph> and <bpt id="p1">**</bpt>IErrorInfo<ept id="p1">**</ept> interfaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Supporting IDispEventImpl</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Discusses the steps to implement a connection point for your class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Changing the Default Class Factory and Aggregation Model</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Show what macros to use to change the default class factory and aggregation model.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Creating an Aggregated Object</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Lists the steps for creating an aggregated object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creating an ATL Project</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Provides information about creating an ATL COM object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ATL</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Provides links to conceptual topics on how to program using the Active Template Library.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Concepts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>