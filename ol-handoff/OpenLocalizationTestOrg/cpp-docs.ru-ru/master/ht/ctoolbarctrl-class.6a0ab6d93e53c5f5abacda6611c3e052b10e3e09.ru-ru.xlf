<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97b9d77d207f3a5f671ac93a45c8e5e09e33e852</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ctoolbarctrl-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">995043d84fd1a69f5c7f064476598f6f66aae027</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31487d77becbbce24efc58d1124edca00ce9847a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of the Windows toolbar common control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CToolBarCtrl</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddBitmap</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds one or more bitmap button images to the list of button images available for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddButtons</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds one or more buttons to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddString</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddStrings</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Adds a new string or strings, passed as a pointer to a buffer of null-separated strings, to the toolbar's internal list of strings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AutoSize</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Resizes a toolbar control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::ChangeBitmap</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Changes the bitmap for a button in the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CheckButton</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Checks or clears a given button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CommandToIndex</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index for the button associated with the specified command identifier.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Create</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates a toolbar control and attaches it to a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CreateEx</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creates a toolbar control with the specified Windows extended styles and attaches it to a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Customize</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Displays the Customize Toolbar dialog box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::DeleteButton</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Deletes a button from the toolbar control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::EnableButton</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Enables or disables the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetAnchorHighlight</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves the anchor highlight setting for a toolbar.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetBitmap</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the bitmap associated with a button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetBitmapFlags</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets flags associated with the toolbar's bitmap.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButton</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonCount</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves a count of the buttons currently in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonInfo</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves the information for a button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonSize</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Retrieves the current width and height of toolbar buttons, in pixels.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetColorScheme</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retrieves the color scheme of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetDisabledImageList</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display disabled buttons.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetDropTarget</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the <bpt id="p1">[</bpt>IDropTarget<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves the extended styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetHotImageList</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display "hot" buttons.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A hot button appears highlighted when the mouse pointer is above it.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetHotItem</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the hot item in a toolbar.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetImageList</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display buttons in their default state.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetInsertMark</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Retrieves the current insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Retrieves the color used to draw the insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetItemRect</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of a button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMaxSize</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Retrieves the total size of all of the visible buttons and separators in the toolbar.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMaxTextRows</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Retrieves the maximum number of text rows displayed on a toolbar button.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMetrics</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics of a toolbar control.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetPadding</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Retrieves the horizontal and vertical padding of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetPressedImageList</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetRect</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for a specified toolbar button.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetRows</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Retrieves the number of rows of buttons currently displayed in the toolbar.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetState</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetString</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Retrieves a toolbar string.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetStyle</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Retrieves the styles currently in use for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetToolTips</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the tool tip control, if any, associated with the toolbar control.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::HideButton</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Hides or shows the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::HitTest</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Determines where a point lies in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Indeterminate</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Sets or clears the indeterminate (gray) state of the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::InsertButton</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Inserts a button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::InsertMarkHitTest</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Retrieves the insertion mark information for a point in a toolbar.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonChecked</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Tells whether the specified button in a toolbar control is checked.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonEnabled</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Tells whether the specified button in a toolbar control is enabled.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonHidden</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Tells whether the specified button in a toolbar control is hidden.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonHighlighted</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Checks the highlight state of the toolbar button.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonIndeterminate</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Tells whether the state of the specified button in a toolbar control is indeterminate (gray).</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonPressed</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Tells whether the specified button in a toolbar control is pressed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::LoadImages</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Loads bitmaps into a toolbar control's image list.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MapAccelerator</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Maps an accelerator character to a toolbar button.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MarkButton</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Sets the highlight state of a given button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MoveButton</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Moves a button from one index to another.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::PressButton</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Presses or releases the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::ReplaceBitmap</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Replaces the existing bitmap in the current toolbar control with a new bitmap.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::RestoreState</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Restores the state of the toolbar control.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SaveState</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Saves the state of the toolbar control.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetAnchorHighlight</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Sets the anchor highlight setting for a toolbar.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetBitmapSize</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Sets the size of the bitmapped images to be added to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonInfo</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Sets the information for an existing button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonSize</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Sets the size of the buttons to be added to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonStructSize</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies the size of the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonWidth</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Sets the minimum and maximum button widths in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetCmdID</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Sets the command identifier to be sent to the owner window when the specified button is pressed.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetColorScheme</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Sets the color scheme of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetDisabledImageList</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar control will use to display disabled buttons.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetDrawTextFlags</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Sets the flags in the Win32 function <bpt id="p1">[</bpt>DrawText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, which is used to draw the text in the specified rectangle, formatted according to how the flags are set.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Sets the extended styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetHotImageList</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar control will use to display "hot" buttons.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetHotItem</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Sets the hot item in a toolbar.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetImageList</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar will use to display buttons that are in their default state.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetIndent</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Sets the indentation for the first button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetInsertMark</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Sets the current insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Sets the color used to draw the insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetMaxTextRows</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of text rows displayed on a toolbar button.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetMetrics</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Sets the metrics of a toolbar control.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetOwner</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Sets the window to receive notification messages from the toolbar control.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetPadding</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Sets the horizontal and vertical padding of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetPressedImageList</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Sets the image list that the current toolbar control uses to represent buttons in the pressed state.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetRows</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Sets the number of rows of buttons displayed in the toolbar.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetState</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Sets the state for the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetStyle</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Sets the styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetToolTips</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Associates a tool tip control with the toolbar control.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetWindowTheme</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Sets the visual style of a toolbar control.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This control (and therefore the <ph id="ph1">`CToolBarCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A Windows toolbar common control is a rectangular child window that contains one or more buttons.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>These buttons can display a bitmap image, a string, or both.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>When the user chooses a button, it sends a command message to the toolbar's owner window.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Typically, the buttons in a toolbar correspond to items in the application's menu; they provide a more direct way for the user to access an application's commands.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>objects contain several important internal data structures: a list of button image bitmaps or an image list, a list of button label strings, and a list of <ph id="ph1">`TBBUTTON`</ph> structures which associate an image and/or string with the position, style, state, and command ID of the button.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Each of the elements of these data structures is referred to by a zero-based index.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Before you can use a <ph id="ph1">`CToolBarCtrl`</ph> object, you must set up these data structures.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The list of strings can only be used for button labels; you cannot retrieve strings from the toolbar.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CToolBarCtrl`</ph> object, you will typically follow these steps:</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Construct the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbarctrl__create)</ept> to create the Windows toolbar common control and attach it to the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Indicate the style of toolbar by using styles, such as <bpt id="p1">**</bpt>TBSTYLE_TRANSPARENT<ept id="p1">**</ept> for a transparent toolbar or <bpt id="p2">**</bpt>TBSTYLE_DROPDOWN<ept id="p2">**</ept> for a toolbar that supports drop-down style buttons.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Identify how you want the buttons on the toolbar displayed:</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To use bitmap images for buttons, add the button bitmaps to the toolbar by calling <bpt id="p1">[</bpt>AddBitmap<ept id="p1">](#ctoolbarctrl__addbitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To use images displayed from an image list for buttons, specify the image list by calling <bpt id="p1">[</bpt>SetImageList<ept id="p1">](#ctoolbarctrl__setimagelist)</ept>, <bpt id="p2">[</bpt>SetHotImageList<ept id="p2">](#ctoolbarctrl__sethotimagelist)</ept>, or <bpt id="p3">[</bpt>SetDisabledImageList<ept id="p3">](#ctoolbarctrl__setdisabledimagelist)</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>To use string labels for buttons, add the strings to the toolbar by calling <bpt id="p1">[</bpt>AddString<ept id="p1">](#ctoolbarctrl__addstring)</ept> and/or <bpt id="p2">[</bpt>AddStrings<ept id="p2">](#ctoolbarctrl__addstrings)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Add button structures to the toolbar by calling <bpt id="p1">[</bpt>AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If you want tool tips for a toolbar button in an owner window that is not a <ph id="ph1">`CFrameWnd`</ph>, you need to handle the <bpt id="p1">**</bpt>TTN_NEEDTEXT<ept id="p1">**</ept> messages in the toolbar's owner window as described in <bpt id="p2">[</bpt>Handling Tool Tip Notifications<ept id="p2">](../../mfc/handling-tool-tip-notifications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If the parent window of the toolbar is derived from <ph id="ph1">`CFrameWnd`</ph>, tool tips are displayed without any extra effort from you because <ph id="ph2">`CFrameWnd`</ph> provides a default handler.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If you want your user to be able to customize the toolbar, handle customization notification messages in the owner window as described in <bpt id="p1">[</bpt>Handling Customization Notifications<ept id="p1">](../../mfc/handling-customization-notifications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>SaveState<ept id="p1">](#ctoolbarctrl__savestate)</ept> to save the current state of a toolbar control in the registry and <bpt id="p2">[</bpt>RestoreState<ept id="p2">](#ctoolbarctrl__restorestate)</ept> to restore the state based on information previously stored in the registry.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In addition to saving the toolbar state between uses of the application, applications typically store the state before the user begins customizing the toolbar in case the user later wants to restore the toolbar to its original state.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Support for Internet Explorer Version 4.0 and Later</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To support functionality introduced in Internet Explorer, version 4.0 and later, MFC provides image list support and transparent and flat styles for toolbar controls.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A transparent toolbar allows the client under the toolbar to show through.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>To create a transparent toolbar, use both <bpt id="p1">**</bpt>TBSTYLE_FLAT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TBSTYLE_TRANSPARENT<ept id="p2">**</ept> styles.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Transparent toolbars feature hot tracking; that is, when the mouse pointer moves over a hot button on the toolbar, the button's appearance changes.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Toolbars created with just the <bpt id="p1">**</bpt>TBSTYLE_FLAT<ept id="p1">**</ept> style will contain buttons that are not transparent.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Image list support allows a control greater flexibility for default behavior, hot images, and disabled images.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>GetImageList<ept id="p1">](#ctoolbarctrl__getimagelist)</ept>, <bpt id="p2">[</bpt>GetHotImageList<ept id="p2">](#ctoolbarctrl__gethotimagelist)</ept>, and <bpt id="p3">[</bpt>GetDisabledImageList<ept id="p3">](#ctoolbarctrl__getdisabledimagelist)</ept> with the transparent toolbar to manipulate the image according to its state:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CToolBarCtrl`</ph>, see <bpt id="p1">[</bpt>Controls<ept id="p1">](../../mfc/controls-mfc.md)</ept> and <bpt id="p2">[</bpt>Using CToolBarCtrl<ept id="p2">](../../mfc/using-ctoolbarctrl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcmn.h</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddBitmap</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Adds one or more button images to the list of button images stored in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Number of button images in the bitmap.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Resource identifier of the bitmap that contains the button image or images to add.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Pointer to the <ph id="ph1">`CBitmap`</ph> object that contains the button image or images to add.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Zero-based index of the first new image if successful; otherwise – 1.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>You can use the Windows API <bpt id="p1">[</bpt>CreateMappedBitmap<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787467)</ept> to map colors before adding the bitmap to the toolbar.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If you pass a pointer to a <bpt id="p1">**</bpt>CBitMap<ept id="p1">**</ept> object, you must ensure that the bitmap is not destroyed until after the toolbar is destroyed.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddButtons</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Adds one or more buttons to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Number of buttons to add.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Address of an array of <ph id="ph1">`TBBUTTON`</ph> structures that contains information about the buttons to add.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>There must be the same number of elements in the array as buttons specified by <ph id="ph1">`nNumButtons`</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpButtons`</ph> pointer points to an array of <ph id="ph2">`TBBUTTON`</ph> structures.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`TBBUTTON`</ph> structure associates the button being added with the button's style, image and/or string, command ID, state, and user-defined data:</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The members are as follows:</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>iBitmap</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Zero-based index of button image, -1 if no image for this button.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>idCommand</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Command identifier associated with the button.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This identifier is sent in a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message when the button is chosen.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>fsStyle<ept id="p1">**</ept> member has the <ph id="ph1">`TBSTYLE_SEP`</ph> value, this member must be zero.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>fsState</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Button state flags.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>It can be a combination of the values listed below:</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The button has the <bpt id="p1">**</bpt>TBSTYLE_CHECKED<ept id="p1">**</ept> style and is being pressed.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The button accepts user input.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A button that does not have this state does not accept user input and is grayed.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The button is not visible and cannot receive user input.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The button is grayed.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The button is being pressed.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A line break follows the button.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The button must also have the <ph id="ph1">`TBSTATE_ENABLED`</ph> state.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>fsStyle</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Button style.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>It can be a combination of the values listed below:</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Creates a standard push button.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Creates a button that toggles between the pressed and unpressed states each time the user clicks it.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The button has a different background color when it is in the pressed state.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Creates a check button that stays pressed until another button in the group is pressed.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Creates a button that stays pressed until another button in the group is pressed.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Creates a separator, providing a small gap between button groups.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A button that has this style does not receive user input.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>User-defined data.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>iString</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Zero-based index of the string to use as the button's label, -1 if there is no string for this button.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The image and/or string whose index you provide must have previously been added to the toolbar control's list using <bpt id="p1">[</bpt>AddBitmap<ept id="p1">](#ctoolbarctrl__addbitmap)</ept>, <bpt id="p2">[</bpt>AddString<ept id="p2">](#ctoolbarctrl__addstring)</ept>, and/or <bpt id="p3">[</bpt>AddStrings<ept id="p3">](#ctoolbarctrl__addstrings)</ept>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddString</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>nStringID</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Resource identifier of the string resource to add to the toolbar control's string list.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first new string added if successful; otherwise –1.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AddStrings</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Adds a new string or strings to the list of strings available for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>lpszStrings</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Address of a buffer that contains one or more null-terminated strings to add to the toolbar's string list.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The last string must be terminated with two null characters.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first new string added if successful; otherwise –1.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Strings in the buffer must be separated by a null character.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>You must ensure that the last string has two null terminators.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>To properly format a constant string, you might write it as:</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>NVC_MFCControlLadenDialog#72</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>or:</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>NVC_MFCControlLadenDialog#73</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>You should not pass a <ph id="ph1">`CString`</ph> object to this function since it is not possible to have more than one null character in a <ph id="ph2">`CString`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::AutoSize</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Resizes the entire toolbar control.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>You should call this function when the size of the parent window changes or when the size of the toolbar changes (such as when you set the button or bitmap size, or add strings).</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::ChangeBitmap</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Changes the bitmap for a button in the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Command identifier of the button that is to receive a new bitmap.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Zero-based index of an image in the current toolbar control's image list.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If this method is successful, the system displays the specified image in the specified button.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_CHANGEBITMAP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787301)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The following code example changes the bitmap for the <bpt id="p1">**</bpt>File Save<ept id="p1">**</ept> button to the bitmap for the <bpt id="p2">**</bpt>About<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CToolBarCtrl_s1#1</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CheckButton</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Checks or clears a given button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Command identifier of the button to check or clear.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>bCheck</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> to check the button, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to clear it.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>When a button has been checked, it appears to have been pressed.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If you want to change more than one button state, consider calling <bpt id="p1">[</bpt>SetState<ept id="p1">](#ctoolbarctrl__setstate)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CommandToIndex</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index for the button associated with the specified command identifier.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Command ID whose button index you want to find.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The zero-based index for the button associated with the command ID.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Create</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Creates a toolbar control and attaches it to a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Specifies the toolbar control's style.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Toolbars must always have the <bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>In addition, you can specify any combination of toolbar styles and window styles as described under <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Optionally specifies the toolbar control's size and position.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>It can be either a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id="p2">[</bpt>RECT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Specifies the toolbar control's parent window.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Specifies the toolbar control's ID.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CToolBarCtrl`</ph> in two steps.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>First, call the constructor, and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the toolbar control and attaches it to the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Apply the following window styles to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> Always</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Usually</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Rarely</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of window styles.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Optionally, apply a combination of <bpt id="p1">[</bpt>common control styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Apply a combination of toolbar styles to either the control or the buttons themselves.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The styles are described in the topic <bpt id="p1">[</bpt>Toolbar Control and Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>To use extended toolbar styles, call <bpt id="p1">[</bpt>SetExtendedStyle<ept id="p1">](#ctoolbarctrl__setextendedstyle)</ept> after you call <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>To create a toolbar with extended window styles, call <bpt id="p1">[</bpt>CToolBarCtrl::CreateEx<ept id="p1">](#ctoolbarctrl__createex)</ept> instead of <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The toolbar control automatically sets the size and position of the toolbar window.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The height is based on the height of the buttons in the toolbar.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The width is the same as the width of the parent window's client area.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CCS_TOP`</ph> and <ph id="ph2">`CCS_BOTTOM`</ph> styles determine whether the toolbar is positioned along the top or bottom of the client area.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>By default, a toolbar has the <ph id="ph1">`CCS_TOP`</ph> style.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CreateEx</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Creates a control (a child window) and associates it with the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Specifies the extended style of the control being created.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>For a list of extended Windows styles, see the <ph id="ph1">`dwExStyle`</ph> parameter for <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Specifies the toolbar control's style.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Toolbars must always have the <bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>In addition, you can specify any combination of toolbar styles and window styles as described in the <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> section of <bpt id="p2">[</bpt>Create<ept id="p2">](#ctoolbarctrl__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id="ph1">`pParentWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>A pointer to the window that is the control's parent.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The control's child-window ID.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CreateEx`</ph> instead of <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbarctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id="p2">**</bpt>WS_EX_<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CreateEx<ept id="p1">**</ept> creates the control with the extended Windows styles specified by <ph id="ph1">`dwExStyle`</ph>.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Set extended styles specific to a control using <bpt id="p1">[</bpt>SetExtendedStyle<ept id="p1">](#ctoolbarctrl__setextendedstyle)</ept>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>For example, use <ph id="ph1">`CreateEx`</ph> to set such styles as <bpt id="p1">**</bpt>WS_EX_CONTEXTHELP<ept id="p1">**</ept>, but use <ph id="ph2">`SetExtendedStyle`</ph> to set such styles as <bpt id="p2">**</bpt>TBSTYLE_EX_DRAWDDARROWS<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>For more information, see the styles described in <bpt id="p1">[</bpt>Toolbar Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::CToolBarCtrl</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>Create<ept id="p1">](#ctoolbarctrl__create)</ept> to make the toolbar usable.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Customize</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Displays the Customize Toolbar dialog box.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>This dialog box allows the user to customize the toolbar by adding and deleting buttons.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>To support customization, your toolbar's parent window must handle the customization notification messages as described in <bpt id="p1">[</bpt>Handling Customization Notifications<ept id="p1">](../../mfc/handling-customization-notifications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Your toolbar must also have been created with the <ph id="ph1">`CCS_ADJUSTABLE`</ph> style, as described in <bpt id="p1">[</bpt>CToolBarCtrl::Create<ept id="p1">](#ctoolbarctrl__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q241850 : PRB: Call to CToolBarCtrl::Customize Does Not Keep the Customize Dialog Visible.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::DeleteButton</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Deletes a button from the toolbar control.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Zero-based index of the button to delete.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::EnableButton</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Enables or disables the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Command identifier of the button to enable or disable.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> to enable the button; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to disable the button.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>When a button has been enabled, it can be pressed and checked.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>If you want to change more than one button state, consider calling <bpt id="p1">[</bpt>SetState<ept id="p1">](#ctoolbarctrl__setstate)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetAnchorHighlight</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Retrieves the anchor highlight setting for a toolbar.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If nonzero, anchor highlighting is enabled.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If zero, anchor highlighting is disabled.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETANCHORHIGHLIGHT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787313)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetBitmap</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the bitmap associated with a button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Command identifier of the button whose bitmap index is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Returns the index of the bitmap if successful, or zero otherwise.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Implements the functionality of <bpt id="p1">[</bpt>TB_GETBITMAP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787315)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetBitmapFlags</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Retrieves the bitmap flags from the toolbar.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that has the <bpt id="p2">**</bpt>TBBF_LARGE<ept id="p2">**</ept> flag set if the display can support large toolbar bitmaps, clear otherwise.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>You should call it after creating the toolbar but before adding bitmaps to the toolbar.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The return value indicates whether the display supports large bitmaps or not.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>If the display supports large bitmaps and if you choose to use them, call <bpt id="p1">[</bpt>SetBitmapSize<ept id="p1">](#ctoolbarctrl__setbitmapsize)</ept> and <bpt id="p2">[</bpt>SetButtonSize<ept id="p2">](#ctoolbarctrl__setbuttonsize)</ept> before adding your large bitmap using <bpt id="p3">[</bpt>AddBitmap<ept id="p3">](#ctoolbarctrl__addbitmap)</ept>.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButton</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Zero-based index of the button for which to retrieve information.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Address of the <ph id="ph1">`TBBUTTON`</ph> structure that is to receive a copy of the button information.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CToolBarCtrl::AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept> for information about the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonCount</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Retrieves a count of the buttons currently in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The count of the buttons.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonInfo</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Retrieves the information for a button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The button identifier.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TBBUTTONINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760478)</ept> structure that receives the button information.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button, if successful; otherwise -1.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETBUTTONINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787321)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonSize</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Gets the size of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> value that contains the width and height values in the LOWORD and HIWORD, respectively.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetButtonText</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Retrieves the display text of a specified button on the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The identifier for the button whose display text is retrieved.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> that contains the display text of the specified button.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_GETBUTTONTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787325)</ept> message, which is described in the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetColorScheme</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Retrieves the color scheme of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>COLORSCHEME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775502)</ept> structure that receives the color scheme information.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>When this method returns, the structure describes the highlight color and shadow color of the toolbar control.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_GETCOLORSCHEME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787327)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetDisabledImageList</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display disabled buttons.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if no disabled image list is set.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETDISABLEDIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787329)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The MFC implementation of <ph id="ph1">`GetDisabledImageList`</ph> uses a <ph id="ph2">`CImageList`</ph> object containing the toolbar control's button images, rather than a handle to an image list.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetDropTarget</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Retrieves the <bpt id="p1">[</bpt>IDropTarget<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">[</bpt>IDropTarget<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>If an error occurs, a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> pointer is placed in this address.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`HRESULT`</ph> value indicating success or failure of the operation.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETOBJECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787343)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Retrieves the extended styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> that represents the extended styles currently in use for the toolbar control.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>For a list of styles, see <bpt id="p1">[</bpt>Toolbar Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept>, in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETEXTENDEDSTYLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787331)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetHotImageList</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display "hot" buttons.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>A hot button appears highlighted when the mouse pointer is above it.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if no disabled image list is set.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETHOTIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787334)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>A hot button appears highlighted when the mouse pointer is above it.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetHotItem</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the hot item in a toolbar.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The zero-based index of the hot item in a toolbar.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETHOTITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787336)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetImageList</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that a toolbar control uses to display buttons in their default state.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if no image list is set.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787337)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetInsertMark</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Retrieves the current insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TBINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that receives the insertion mark.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787338)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Retrieves the color used to draw the insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the current insertion mark color.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETINSERTMARKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787339)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetItemRect</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle of a button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Zero-based index of the button for which to retrieve information.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Address of a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that receives the coordinates of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>This function does not retrieve the bounding rectangle for buttons whose state is set to <ph id="ph1">`TBSTATE_HIDDEN`</ph>.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMaxSize</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Retrieves the total size of all of the visible buttons and separators in the toolbar.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the size of the items.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETMAXSIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787341)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMaxTextRows</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Retrieves the maximum number of text rows displayed on a toolbar button.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The maximum number of text rows displayed on a toolbar button.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetMetrics</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Retrieves the metrics of the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>TBMETRICS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760482)</ept> structure of the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>TB_GETMETRICS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787342)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetPadding</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Retrieves the horizontal and vertical padding of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>An integer that receives the horizontal padding of the toolbar control, in pixels.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>An integer that receives the vertical padding of the toolbar control, in pixels.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_GETPADDING<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787344)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetPressedImageList</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> that contains the image list for the current control, or <ph id="ph1">`NULL`</ph> if no such image list is set.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_GETPRESSEDIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787345)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetRect</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Retrieves the bounding rectangle for a specified toolbar button.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The button identifier.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure to receive the bounding rectangle information.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if successful; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETRECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787346)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetRows</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Retrieves the number of rows of buttons currently displayed by the toolbar control.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Number of rows of buttons currently displayed on the toolbar.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Note that the number of rows will always be one unless the toolbar was created with the <ph id="ph1">`TBSTYLE_WRAPABLE`</ph> style.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetState</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Command identifier of the button for which to retrieve information.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>The button state information if successful or – 1 otherwise.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The button state information can be a combination of the values listed in <bpt id="p1">[</bpt>CToolBarCtrl::AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept>.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>This function is especially handy if you want to retrieve more than one of the button states.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>To just retrieve one state, use one of the following member functions: <bpt id="p1">[</bpt>IsButtonEnabled<ept id="p1">](#ctoolbarctrl__isbuttonenabled)</ept>, <bpt id="p2">[</bpt>IsButtonChecked<ept id="p2">](#ctoolbarctrl__isbuttonchecked)</ept>, <bpt id="p3">[</bpt>IsButtonPressed<ept id="p3">](#ctoolbarctrl__isbuttonpressed)</ept>, <bpt id="p4">[</bpt>IsButtonHidden<ept id="p4">](#ctoolbarctrl__isbuttonhidden)</ept>, or <bpt id="p5">[</bpt>IsButtonIndeterminate<ept id="p5">](#ctoolbarctrl__isbuttonindeterminate)</ept>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`GetState`</ph> member function is the only way to detect the <ph id="ph2">`TBSTATE_WRAP`</ph> button state.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetString</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Retrieves a toolbar string.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>nString</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Index of the string.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>lpstrString</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer used to return the string.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>cchMaxLen</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Length of the buffer in bytes.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The string.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>The length of the string if successful, -1 if not.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_GETSTRING<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787349)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetStyle</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Gets the styles currently applied to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> containing a combination of <bpt id="p1">[</bpt>toolbar control styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, as described in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::GetToolTips</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the tool tip control, if any, associated with the toolbar control.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CToolTipCtrl<ept id="p1">](../../mfc/reference/ctooltipctrl-class.md)</ept> object associated with this toolbar or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the toolbar has no associated tool tip control.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Since the toolbar control normally creates and maintains its own tool tip control, most programs don't need to call this function.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::HitTest</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Determines where a point lies in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>POINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that contains the x-coordinate of the hit test in the <bpt id="p2">**</bpt>x<ept id="p2">**</ept> member and the y-coordinate of the hit test in the <bpt id="p3">**</bpt>y<ept id="p3">**</ept> member.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The coordinates are relative to the toolbar's client area.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>An integer value indicating the location of a point on a toolbar.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>If the value is zero or a positive value, this return value is the zero-based index of the nonseparator item in which the point lies.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>If the return value is negative, the point does not lie within a button.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The absolute value of the return value is the index of a separator item or the nearest nonseparator item.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_HITTEST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787360)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::HideButton</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Hides or shows the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Command identifier of the button to hide or show.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> to hide the button, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to show it.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>If you want to change more than one button state, consider calling <bpt id="p1">[</bpt>SetState<ept id="p1">](#ctoolbarctrl__setstate)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::Indeterminate</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Sets or clears the indeterminate state of the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Command identifier of the button whose indeterminate state is to be set or cleared.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>bIndeterminate</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> to set the indeterminate state for the specified button, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to clear it.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Indeterminate buttons are displayed grayed, such as the way the bold button on the toolbar of a word processor would look when the text selected contains both bold and regular characters.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>If you want to change more than one button state, consider calling <bpt id="p1">[</bpt>SetState<ept id="p1">](#ctoolbarctrl__setstate)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::InsertButton</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Inserts a button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Zero-based index of a button.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>This function inserts the new button to the left of this button.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`TBBUTTON`</ph> structure containing information about the button to insert.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CToolBarCtrl::AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept> for a description of the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The image and/or string whose index you provide must have previously been added to the toolbar control's list using <bpt id="p1">[</bpt>AddBitmap<ept id="p1">](#ctoolbarctrl__addbitmap)</ept>, <bpt id="p2">[</bpt>AddString<ept id="p2">](#ctoolbarctrl__addstring)</ept>, and/or <bpt id="p3">[</bpt>AddStrings<ept id="p3">](#ctoolbarctrl__addstrings)</ept>.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::InsertMarkHitTest</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Retrieves the insertion mark information for a point in a toolbar.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>POINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that contains the hit test coordinates, relative to the client area of the toolbar.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TBINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that receives the insertion mark information.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_INSERTMARKHITTEST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787367)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonChecked</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button in a toolbar control is checked.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Command identifier of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is checked; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Consider calling <bpt id="p1">[</bpt>GetState<ept id="p1">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonEnabled</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button in a toolbar control is enabled.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Command identifier of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is enabled; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Consider calling <bpt id="p1">[</bpt>GetState<ept id="p1">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonHidden</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button in a toolbar control is hidden.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Command identifier of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is hidden; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Consider calling <bpt id="p1">[</bpt>GetState<ept id="p1">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonHighlighted</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Checks the highlight state of a toolbar button.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The command ID for the toolbar button.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Positive integer if the button is highlighted, 0 if the button is not highlighted, or -1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonIndeterminate</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button in a toolbar control is indeterminate.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Command identifier of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Positive integer if the button is indeterminate, zero if the button is not indeterminate, or -1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Indeterminate buttons are displayed dimmed, such as the way the bold button on the toolbar of a word processor looks when the selected text contains both bold and regular characters.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Consider calling <bpt id="p1">[</bpt>GetState<ept id="p1">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::IsButtonPressed</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Determines whether the specified button in a toolbar control is pressed.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Command identifier of the button in the toolbar.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Nonzero if the button is pressed, otherwise zero.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Consider calling <bpt id="p1">[</bpt>GetState<ept id="p1">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::LoadImages</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Loads bitmaps into a toolbar control's image list.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>iBitmapID</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>ID of a bitmap that contains the images to be loaded.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>To specify your own bitmap resource, set this parameter to the ID of a bitmap resource and set <ph id="ph1">`hInst`</ph> to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Your bitmap resource will be added to the image list as a single image.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>You can add standard, system-defined bitmaps by setting <bpt id="p1">*</bpt>hinst<ept id="p1">*</ept> to <bpt id="p2">**</bpt>HINST_COMMCTRL<ept id="p2">**</ept> and setting this parameter to one of the following IDs:</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Bitmap ID</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>IDB_HIST_LARGE_COLOR</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Explorer bitmaps in large size</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>IDB_HIST_SMALL_COLOR</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Explorer bitmaps in small size</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>IDB_STD_LARGE_COLOR</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Standard bitmaps in large size</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>IDB_STD_SMALL_COLOR</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Standard bitmaps in small size</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>IDB_VIEW_LARGE_COLOR</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>View bitmaps in large size</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>IDB_VIEW_SMALL_COLOR</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>View bitmaps in small size</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>hinst</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Program instance handle to the calling application.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>HINST_COMMCTRL<ept id="p1">**</ept> to load a standard image list.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_LOADIMAGES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787381)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MapAccelerator</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Maps an accelerator character to a toolbar button.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Accelerator character to be mapped.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>This character is the same character that is underlined in the button's text.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>pIDBtn</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that receives the command identifier of the button that corresponds to the accelerator specified in <ph id="ph1">`chAccel`</ph>.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_MAPACCELERATOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787383)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MarkButton</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Sets the highlight state of a given button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>The button identifier.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Specifies the highlight state to be set.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>If set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the button is set to its default state.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_MARKBUTTON<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787385)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::MoveButton</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Moves a button from one index to another.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>nOldPos</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button to be moved.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>nNewPos</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button's destination.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_MOVEBUTTON<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787387)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::PressButton</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Presses or releases the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Command identifier of the button to press or release.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>to press the specified button; <ph id="ph1">`false`</ph> to release the specified button.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>if the method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>If you want to change more than one button state, consider calling <bpt id="p1">[</bpt>SetState<ept id="p1">](#ctoolbarctrl__setstate)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_PRESSBUTTON<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787389)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::ReplaceBitmap</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Replaces the existing bitmap in the current toolbar control with a new bitmap.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>TBREPLACEBITMAP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760484)</ept> structure that describes the bitmap to be replaced and the new bitmap.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_REPLACEBITMAP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787391)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The following code example replaces the bitmap for the standard toolbar with a different bitmap.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CToolBarCtrl_s1#2</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::RestoreState</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Restores the state of the toolbar control from the location in the registry specified by the parameters.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Identifies a currently open key in the registry or any of the following predefined reserved handle values:</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>HKEY_CLASSES_ROOT</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>HKEY_CURRENT_USER</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>HKEY_USERS</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string containing the name of the subkey with which a value is associated.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>This parameter can be null or a pointer to an empty string.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>If the parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the value will be added to the key identified by the <ph id="ph1">`hKeyRoot`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Points to a string containing the name of the value to retrieve.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>If a value with this name is not already present in the key, the function adds it to the key.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SaveState</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Saves the state of the toolbar control in the location in the registry specified by the parameters.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Identifies a currently open key in the registry or any of the following predefined reserved handle values:</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>HKEY_CLASSES_ROOT</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>HKEY_CURRENT_USER</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>HKEY_USERS</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string containing the name of the subkey with which a value is associated.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>This parameter can be null or a pointer to an empty string.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>If the parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the value will be added to the key identified by the <ph id="ph1">`hKeyRoot`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Points to a string containing the name of the value to set.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>If a value with this name is not already present in the key, the function adds it to the key.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetAnchorHighlight</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Sets the anchor highlight setting for a toolbar.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Specifies if anchor highlighting is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>If this value is nonzero, anchor highlighting will be enabled.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>If this value is zero, anchor highlighting will be disabled</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>The previous anchor setting.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>If highlighting was enabled, this value is nonzero.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>If highlighting was not enabled, this value is zero.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>This method implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETANCHORHIGHLIGHT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787396)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetBitmapSize</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Sets the size of the actual bitmapped images to be added to a toolbar control.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Width and height, in pixels, of the bitmapped images.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>This function must be called only before adding any bitmaps to the toolbar.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>If the application does not explicitly set the bitmap size, it defaults to 16 by 15 pixels.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonInfo</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Sets the information for an existing button in a toolbar.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The button identifier.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TBBUTTONINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760478)</ept> structure that receives the button information.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETBUTTONINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787413)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonSize</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Sets the size of the buttons in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Width and height, in pixels, of the buttons.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>The button size must always be at least as large as the bitmap size it encloses.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>This function must be called only before adding any bitmaps to the toolbar.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>If the application does not explicitly set the button size, it defaults to 24 by 22 pixels.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CToolBar::GetToolBarCtrl<ept id="p1">](../../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl)</ept>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonStructSize</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Specifies the size of the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Size, in bytes, of the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>If you wanted to store extra data in the <ph id="ph1">`TBBUTTON`</ph> structure, you could either derive a new structure from <ph id="ph2">`TBBUTTON`</ph>, adding the members you needed, or create a new structure that contains a <ph id="ph3">`TBBUTTON`</ph> structure as its first member.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>You would then call this function to tell the toolbar control the size of the new structure.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CToolBarCtrl::AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept> for more information on the <ph id="ph1">`TBBUTTON`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetButtonWidth</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Sets the minimum and maximum button widths in the toolbar control.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Minimum button width, in pixels.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Toolbar buttons will never be narrower than this value.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>cxMax</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Maximum button width, in pixels.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>If button text is too wide, the control displays it with ellipsis points.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETBUTTONWIDTH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787417)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetCmdID</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Sets the command identifier that will be sent to the owner window when the specified button is pressed.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The zero-based index of the button whose command ID is to be set.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The command ID to set the selected button to.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Returns nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetColorScheme</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Sets the color scheme of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>COLORSCHEME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775502)</ept> structure that describes the highlight color and shadow color of the toolbar control.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>This method has no effect if a <ph id="ph1">[!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)]</ph> visual theme is set.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_SETCOLORSCHEME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787421)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>The following code example sets the color scheme for the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>The code example makes the left and top edges of each tool button red and the right and bottom edges blue.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>When the user presses the button, the button's red edges turn blue and its blue edges turn red.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CToolBarCtrl_s1#3</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetDisabledImageList</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar control will use to display disabled buttons.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CImageList`</ph> object containing the images to be used by the toolbar control to display disabled button images.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display disabled button images.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETDISABLEDIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787423)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The MFC implementation of <ph id="ph1">`SetDisabledImageList`</ph> uses a <ph id="ph2">`CImageList`</ph> object containing the toolbar control's disabled button images, rather than a handle to an image list.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetDrawTextFlags</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Sets the flags in the Win32 function <bpt id="p1">[</bpt>DrawText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, which is used to draw the text in the specified rectangle, formatted according to how the flags are set.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>A combination of one or more of the DT_ flags, specified in the Win32 function <bpt id="p1">[</bpt>DrawText<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, that indicates which bits in <ph id="ph1">`dwDTFlags`</ph> will be used when drawing the text.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>A combination of one or more of the DT_ flags, specified in the Win32 function <ph id="ph1">`DrawText`</ph>, that indicate how the button text will be drawn.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>This value is passed to <ph id="ph1">`DrawText`</ph> when the button text is drawn.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> containing the previous text drawing flags.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETDRAWTEXTFLAGS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787425)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>This member function sets the flags in the Win32 function <ph id="ph1">`DrawText`</ph>, which draws text in the specified rectangle, formatted according to how the flags are set.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetExtendedStyle</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Sets the extended styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>A value specifying the new extended styles.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the toolbar extended styles.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> that represents the previous extended styles.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>For a list of styles, see <bpt id="p1">[</bpt>Toolbar Extended Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept>, in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETEXTENDEDSTYLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787427)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetHotImageList</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar control will use to display "hot" buttons.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CImageList`</ph> object containing the images to be used by the toolbar control to display hot button images.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display hot button images.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETHOTIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787429)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The MFC implementation of <ph id="ph1">`SetHotImageList`</ph> uses a <ph id="ph2">`CImageList`</ph> object containing the toolbar control's hot button images, rather than a handle to an image list.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>A hot button appears highlighted when the pointer is above it.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetHotItem</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Sets the hot item in a toolbar.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>nHot</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>The zero-based index number of the item that will be made hot.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>If this value is -1, none of the items will be hot.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>The index of the previous hot item, or -1 if there was no hot item.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETHOTITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787431)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetImageList</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Sets the image list that the toolbar will use to display buttons that are in their default state.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CImageList`</ph> object containing the images to be used by the toolbar control to display button images in their default state.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display button images in their default state.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787433)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The MFC implementation of <ph id="ph1">`SetImageList`</ph> uses a <ph id="ph2">`CImageList`</ph> object containing the toolbar control's button images, rather than a handle to an image list.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetIndent</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Sets the indentation for the first button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>iIndent</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The value specifying the indentation, in pixels.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetInsertMark</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Sets the current insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>TBINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that contains the insertion mark.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETINSERTMARK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787437)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetInsertMarkColor</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Sets the color used to draw the insertion mark for the toolbar.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the new insertion mark color.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that contains the previous insertion mark color.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>This member function implements the behavior of the Win32 message <bpt id="p1">[</bpt>TB_SETINSERTMARKCOLOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787439)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetMaxTextRows</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of text rows displayed on a toolbar button.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>iMaxRows</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Maximum number of rows to be set.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetMetrics</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Sets the metrics of the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>TBMETRICS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760482)</ept> structure of the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>TB_SETMETRICS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787446)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetOwner</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Sets the owner window for the toolbar control.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Pointer to the <ph id="ph1">`CWnd`</ph> or <ph id="ph2">`CWnd`</ph>-derived object that will be the new owner window for the toolbar control.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>The owner window is the window that receives notifications from the toolbar.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetPadding</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>Sets the horizontal and vertical padding of the current toolbar control.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Specifies the horizontal padding of the toolbar control, in pixels.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Specifies the vertical padding of the toolbar control, in pixels.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> whose low word contains the previous horizontal padding value, and whose high word contains the previous vertical padding value.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>The padding values are measured in pixels.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_SETPADDING<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787448)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>The following code example sets the horizontal and vertical padding of the current toolbar control to 20 pixels.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CToolBarCtrl_s1#4</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetPressedImageList</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>Sets the image list that the current toolbar control uses to represent buttons in the pressed state.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>The zero-based index of the image list.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>Set this parameter to zero if you use only one image list.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> that contains the new image list.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CImageList<ept id="p1">](../../mfc/reference/cimagelist-class.md)</ept> that contains the previous image list for the current control, or <ph id="ph1">`NULL`</ph> if no such image list was set.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>TB_SETPRESSEDIMAGELIST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787453)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>The following code example sets the pressed image list to be the same as the default image list.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CToolBarCtrl_s1#5</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetRows</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Asks the toolbar control to resize itself to the requested number of rows.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Requested number of rows.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Tells whether to use more rows or fewer rows if the toolbar cannot be resized to the requested number of rows.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id="p2">[</bpt>RECT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that will receive the new bounding rectangle of the toolbar.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>If the toolbar cannot resize itself to the requested number or rows, it will resize itself to either the next larger or next smaller valid size, depending on the value of <ph id="ph1">`bLarger`</ph>.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bLarger`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the new number of rows will be larger than the number requested.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bLarger`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the new number of rows will be smaller than the number requested.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>A given number of rows is valid for the toolbar if the buttons can be arranged such that all of the rows have the same number of buttons (except perhaps the last row).</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>For example, a toolbar that contains four buttons could not be sized to three rows because the last two rows would have to be shorter.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>If you attempted to size it to three rows, you would get four rows if <ph id="ph1">`bLarger`</ph> was <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> and two rows if <ph id="ph2">`bLarger`</ph> was <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>If there are separators in the toolbar, the rules for when a given number of rows is valid are more complicated.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The layout is computed such that button groups (buttons with a separator before the first and the last button in the group) are never broken up on several rows unless the group cannot fit on one row.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>If a group does not fit on one row, the next group will start on the next row even if it would fit on the row where the large group ended.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>The purpose of this rule is to make the separation between large groups more noticeable.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>The resulting vertical separators are counted as rows.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Note also that the <ph id="ph1">`SetRows`</ph> member function will always chose the layout that results in the smallest toolbar size.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Creating a toolbar with the <ph id="ph1">`TBSTYLE_WRAPABLE`</ph> style and then resizing the control will simply apply the method outlined above given the width of the control.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>This function can only be called for toolbars that were created with the <ph id="ph1">`TBSTYLE_WRAPABLE`</ph> style.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetState</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Sets the state for the specified button in a toolbar control.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Command identifier of the button.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>State flags.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>It can be a combination of the values listed for button states in <bpt id="p1">[</bpt>CToolBarCtrl::AddButtons<ept id="p1">](#ctoolbarctrl__addbuttons)</ept>.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise zero.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>This function is especially handy if you want to set more than one of the button states.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>To just set one state, use one of the following member functions: <bpt id="p1">[</bpt>EnableButton<ept id="p1">](#ctoolbarctrl__enablebutton)</ept>, <bpt id="p2">[</bpt>CheckButton<ept id="p2">](#ctoolbarctrl__checkbutton)</ept>, <bpt id="p3">[</bpt>HideButton<ept id="p3">](#ctoolbarctrl__hidebutton)</ept>, <bpt id="p4">[</bpt>Indeterminate<ept id="p4">](#ctoolbarctrl__indeterminate)</ept>, or <bpt id="p5">[</bpt>PressButton<ept id="p5">](#ctoolbarctrl__pressbutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetStyle</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Sets the styles for a toolbar control.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DWORD`</ph> containing a combination of <bpt id="p1">[</bpt>toolbar control styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, as described in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetToolTips</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>Associates a tool tip control with a toolbar control.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>pTip</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>CToolTipCtrl<ept id="p1">](../../mfc/reference/ctooltipctrl-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>CToolBarCtrl::SetWindowTheme</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>Sets the visual style of the <ph id="ph1">`CToolBarCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>A pointer to a Unicode string that contains the toolbar visual style to set.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>The return value is not used.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>TB_SETWINDOWTHEME<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787465)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>MFC Sample CMNCTRL1</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>MFC Sample MFCIE</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>CToolBar Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>