<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43a29afdb8d6899eeca11e41ee4321d6a09bdbae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\user-records.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1ad0adaedfa3f4302fdd09ebce24036707bb404</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84143359108fd8eefcf779be800668a2a73e83e9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User Records | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>User Records</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To use a static accessor (that is, an accessor derived from <bpt id="p1">**</bpt>CAccessor)<ept id="p1">**</ept>, your consumer must have a user record.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The user record is a C++ class that contains data elements to handle input or output.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The ATL OLE DB Consumer Wizard generates a user record for your consumer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can add methods to the user record for optional tasks like handling commands.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following code shows a sample record that handles commands.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the user record, <ph id="ph1">`BEGIN_COLUMN_MAP`</ph> represents a data rowset passed to the consumer from a provider.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>represents a set of command parameters.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses a <bpt id="p1">[</bpt>CCommand<ept id="p1">](../../data/oledb/ccommand-class.md)</ept> class to handle the command parameters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The data members in the map entries represent offsets into one contiguous block of memory for each instance of the class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COLUMN_ENTRY`</ph> macros correspond to the <ph id="ph2">`PROVIDER_COLUMN_ENTRY`</ph> macros on the provider side.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>COLUMN_MAP<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PARAM_MAP<ept id="p2">**</ept> macros, see <bpt id="p3">[</bpt>Macros for OLE DB Consumer Templates<ept id="p3">](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Wizard-Generated User Records</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you use the ATL OLE DB Consumer Wizard to generate a consumer, you have the choice of using OLE DB Templates or OLE DB Attributes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The generated code is different in each case.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about this code, see <bpt id="p1">[</bpt>Consumer Wizard-Generated Classes<ept id="p1">](../../data/oledb/consumer-wizard-generated-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>User Record Support for Multiple Accessors</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For a detailed discussion of the scenarios in which you need to use multiple accessors, see <bpt id="p1">[</bpt>Using Multiple Accessors on a Rowset<ept id="p1">](../../data/oledb/using-multiple-accessors-on-a-rowset.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows the user record modified to support multiple accessors on the rowset.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instead of <ph id="ph1">`BEGIN_COLUMN_MAP`</ph> and <ph id="ph2">`END_COLUMN_MAP`</ph>, it uses <bpt id="p1">[</bpt>BEGIN_ACCESSOR_MAP<ept id="p1">](../../data/oledb/begin-accessor-map.md)</ept> and <bpt id="p2">[</bpt>BEGIN_ACCESSOR<ept id="p2">](../../data/oledb/begin-accessor.md)</ept> for each accessor.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BEGIN_ACCESSOR`</ph> macro specifies the accessor number (offset from zero) and whether the accessor is an autoaccessor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Autoaccessors call <ph id="ph1">`GetData`</ph> to retrieve data automatically on a call to <bpt id="p1">[</bpt>MoveNext<ept id="p1">](../../data/oledb/crowset-movenext.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Nonautomatic accessors require you to explicitly retrieve the data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use a nonautomatic accessor if you are binding to a large data field (like a bitmap image) that you might not want to retrieve for every record.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>OLE DB Consumer Templates</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>