<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6fa296a00224199a11cb653a4ad0c521a242c2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomenumimpl-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">720d8863c493d31fc2291e3a5c395a4f3c2ff628</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e2a95fcf0f92d7c2386f8d6fdc4794da62a2866</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComEnumImpl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComEnumImpl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides the implementation for a COM enumerator interface where the items being enumerated are stored in an array.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A COM enumerator ( <bpt id="p1">[</bpt>IEnumXXXX<ept id="p1">](https://msdn.microsoft.com/library/ms680089.aspx)</ept>) interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A pointer to the interface ID of the enumerator interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type of item exposed by the enumerator interface.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A homogeneous <bpt id="p1">[</bpt>copy policy class<ept id="p1">](../../atl/atl-copy-policy-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::CComEnumImpl</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::~CComEnumImpl</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Clone</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">[</bpt>IEnumXXXX::Clone<ept id="p1">](https://msdn.microsoft.com/library/ms690336.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Init</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes the enumerator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Next</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">[</bpt>IEnumXXXX::Next<ept id="p1">](https://msdn.microsoft.com/library/ms695273.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Reset</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">[</bpt>IEnumXXXX::Reset<ept id="p1">](https://msdn.microsoft.com/library/ms693414.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Skip</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">[</bpt>IEnumXXXX::Skip<ept id="p1">](https://msdn.microsoft.com/library/ms690392.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_begin</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A pointer to the first item in the array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_dwFlags</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Copy flags passed through <ph id="ph1">`Init`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_end</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A pointer to the location just beyond the last item in the array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_iter</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A pointer to the current item in the array.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_spUnk</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer of the object supplying the collection being enumerated.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>provides the implementation for a COM enumerator interface where the items being enumerated are stored in an array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This class is analogous to the <ph id="ph1">`IEnumOnSTLImpl`</ph> class, which provides an implementation of an enumerator interface based on an STL container.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For details on further differences between <ph id="ph1">`CComEnumImpl`</ph> and <ph id="ph2">`IEnumOnSTLImpl`</ph>, see <bpt id="p1">[</bpt>CComEnumImpl::Init<ept id="p1">](#ccomenumimpl__init)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Typically, you will <bpt id="p1">*</bpt>not<ept id="p1">*</ept> need to create your own enumerator class by deriving from this interface implementation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you want to use an ATL-supplied enumerator based on an array, it is more common to create an instance of <bpt id="p1">[</bpt>CComEnum<ept id="p1">](../../atl/reference/ccomenum-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>However, if you do need to provide a custom enumerator (for example, one that exposes interfaces in addition to the enumerator interface), you can derive from this class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this situation, it is likely that you'll need to override the <bpt id="p1">[</bpt>CComEnumImpl::Clone<ept id="p1">](#ccomenumimpl__clone)</ept> method to provide your own implementation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ATL Collections and Enumerators<ept id="p1">](../../atl/atl-collections-and-enumerators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcom.h</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::CComEnumImpl</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::~CComEnumImpl</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Init</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You must call this method before passing a pointer to the enumerator interface back to any clients.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>begin</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A pointer to the first element of the array containing the items to be enumerated.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A pointer to the location just beyond the last element of the array containing the items to be enumerated.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>pUnk</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>[in] The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer of an object that must be kept alive during the lifetime of the enumerator.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no such object exists.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Flags specifying whether or not the enumerator should take ownership of the array or make a copy of it.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Possible values are described below.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Only call this method once — initialize the enumerator, use it, then throw it away.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you pass pointers to items in an array held in another object (and you don't ask the enumerator to copy the data), you can use the <bpt id="p1">*</bpt>pUnk<ept id="p1">*</ept> parameter to ensure that the object and the array it holds are available for as long as the enumerator needs them.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The enumerator simply holds a COM reference on the object to keep it alive.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The COM reference is automatically released when the enumerator is destroyed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`flags`</ph> parameter allows you to specify how the enumerator should treat the array elements passed to it.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>can take one of the values from the <bpt id="p1">**</bpt>CComEnumFlags<ept id="p1">**</ept> enumeration shown below:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AtlFlagNoCopy<ept id="p1">**</ept> means that the array's lifetime is not controlled by the enumerator.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this case, either the array will be static or the object identified by <bpt id="p1">*</bpt>pUnk<ept id="p1">*</ept> will be responsible for freeing the array when it's no longer needed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AtlFlagTakeOwnership<ept id="p1">**</ept> means that the destruction of the array is to be controlled by the enumerator.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In this case, the array must have been dynamically allocated using <bpt id="p1">**</bpt>new<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The enumerator will delete the array in its destructor.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Typically, you would pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <bpt id="p2">*</bpt>pUnk<ept id="p2">*</ept>, although you can still pass a valid pointer if you need to be notified of the destruction of the enumerator for some reason.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AtlFlagCopy<ept id="p1">**</ept> means that a new array is to be created by copying the array passed to <ph id="ph1">`Init`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The new array's lifetime is to be controlled by the enumerator.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The enumerator will delete the array in its destructor.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Typically, you would pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <bpt id="p2">*</bpt>pUnk<ept id="p2">*</ept>, although you can still pass a valid pointer if you need to be notified of the destruction of the enumerator for some reason.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The prototype of this method specifies the array elements as being of type <bpt id="p1">**</bpt>T<ept id="p1">**</ept>, where <bpt id="p2">**</bpt>T<ept id="p2">**</ept> was defined as a template parameter to the class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This is the same type that is exposed by means of the COM interface method <bpt id="p1">[</bpt>CComEnumImpl::Next<ept id="p1">](#ccomenumimpl__next)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The implication of this is that, unlike <bpt id="p1">[</bpt>IEnumOnSTLImpl<ept id="p1">](../../atl/reference/ienumonstlimpl-class.md)</ept>, this class does not support different storage and exposed data types.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The data type of elements in the array must be the same as the data type exposed by means of the COM interface.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Clone</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method provides the implementation of the <bpt id="p1">[</bpt>IEnumXXXX::Clone<ept id="p1">](https://msdn.microsoft.com/library/ms690336.aspx)</ept> method by creating an object of type <ph id="ph1">`CComEnum`</ph>, initializing it with the same array and iterator used by the current object, and returning the interface on the newly created object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[out] The enumerator interface on a newly created object cloned from the current enumerator.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Note that cloned enumerators never make their own copy (or take ownership) of the data used by the original enumerator.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If necessary, cloned enumerators will keep the original enumerator alive (using a COM reference) to ensure that the data is available for as long as they need it.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_spUnk</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This smart pointer maintains a reference on the object passed to <bpt id="p1">[</bpt>CComEnumImpl::Init<ept id="p1">](#ccomenumimpl__init)</ept>, ensuring that it remains alive during the lifetime of the enumerator.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_begin</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A pointer to the location just beyond the last element of the array containing the items to be enumerated.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_end</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A pointer to the first element of the array containing the items to be enumerated.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_iter</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A pointer to the current element of the array containing the items to be enumerated.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::m_dwFlags</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The flags passed to <bpt id="p1">[</bpt>CComEnumImpl::Init<ept id="p1">](#ccomenumimpl__init)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Next</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This method provides the implementation of the <bpt id="p1">[</bpt>IEnumXXXX::Next<ept id="p1">](https://msdn.microsoft.com/library/ms695273.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>[in] The number of elements requested.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>[out] The array to be filled with the elements.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>[out] The number of elements actually returned in <ph id="ph1">`rgelt`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This can be less than <ph id="ph1">`celt`</ph> if fewer than <ph id="ph2">`celt`</ph> elements remained in the list.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Reset</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This method provides the implementation of the <bpt id="p1">[</bpt>IEnumXXXX::Reset<ept id="p1">](https://msdn.microsoft.com/library/ms693414.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CComEnumImpl::Skip</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This method provides the implementation of the <bpt id="p1">[</bpt>IEnumXXXX::Skip<ept id="p1">](https://msdn.microsoft.com/library/ms690392.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>[in] The number of elements to skip.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Returns E_INVALIDARG if <ph id="ph1">`celt`</ph> is zero, returns S_FALSE if less than <ph id="ph2">`celt`</ph> elements are returned, returns S_OK otherwise.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>IEnumOnSTLImpl Class</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CComEnum Class</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>