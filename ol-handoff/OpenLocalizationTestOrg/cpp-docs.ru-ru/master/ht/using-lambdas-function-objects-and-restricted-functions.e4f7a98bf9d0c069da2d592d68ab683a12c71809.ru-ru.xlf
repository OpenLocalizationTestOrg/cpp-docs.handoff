<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27594f13a3f502c2c0ed7f49abc241c388418da8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\using-lambdas-function-objects-and-restricted-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ab06ff919066ef4fd074f2a030a8de9a3072253</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3d4126cca4776c844575bfc19b2a0cb06a09b5a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Lambdas, Function Objects, and Restricted Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Lambdas, Function Objects, and Restricted Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The C++ AMP code that you want to run on the accelerator is specified as an argument in a call to the <bpt id="p1">[</bpt>parallel_for_each<ept id="p1">](reference/concurrency-namespace-functions-amp.md#parallel_for_each)</ept> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can provide either a lambda expression or a function object (functor) as that argument.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Additionally, the lambda expression or function object can call a C++ AMP-restricted function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic uses an array addition algorithm to demonstrate lambdas, function objects, and restricted functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example shows the algorithm without C++ AMP code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Two 1-dimensional arrays of equal length are created.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The corresponding integer elements are added and stored in a third 1-dimensional array.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>C++ AMP is not used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Lambda Expression</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Using a lambda expression is the most direct way to use C++ AMP to rewrite the code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The lambda expression must include one indexing parameter and must include <ph id="ph1">`restrict(amp)`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the example, the <bpt id="p1">[</bpt>array_view<ept id="p1">](../../parallel/amp/reference/array-view-class.md)</ept><ph id="ph1">`sum`</ph> object has a rank of 1.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, the parameter to the lambda statement is an <bpt id="p1">[</bpt>index<ept id="p1">](../../parallel/amp/reference/index-class.md)</ept> object that has rank 1.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At runtime, the lambda expression is executed once for each element in the <bpt id="p1">[</bpt>array_view<ept id="p1">](../../parallel/amp/reference/array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expression Syntax<ept id="p1">](../../cpp/lambda-expression-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Function Object</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can factor the accelerator code into a function object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The function object must include a constructor and must include an overload of the function call operator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The function call operator must include one indexing parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An instance of the function object is passed as the second argument to the <bpt id="p1">[</bpt>parallel_for_each<ept id="p1">](reference/concurrency-namespace-functions-amp.md#parallel_for_each)</ept> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this example, three <bpt id="p1">[</bpt>array_view<ept id="p1">](../../parallel/amp/reference/array-view-class.md)</ept> objects are passed to the function object constructor.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>array_view<ept id="p1">](../../parallel/amp/reference/array-view-class.md)</ept> object <ph id="ph1">`sum`</ph> has a rank of 1.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, the parameter to the function call operator is an <bpt id="p1">[</bpt>index<ept id="p1">](../../parallel/amp/reference/index-class.md)</ept> object that has rank 1.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>At runtime, the function is executed once for each element in the <bpt id="p1">[</bpt>array_view<ept id="p1">](../../parallel/amp/reference/array-view-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Call<ept id="p1">](../../cpp/function-call-cpp.md)</ept> and <bpt id="p2">[</bpt>Function Objects in the STL<ept id="p2">](../../standard-library/function-objects-in-the-stl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>C++ AMP-Restricted Function</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can further factor the accelerator code by creating a restricted function and calling it from a lambda expression or a function object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to call a restricted function from a lambda expression.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The restricted function must include <ph id="ph1">`restrict(amp)`</ph> and conform to the restrictions that are described in <bpt id="p1">[</bpt>restrict (C++ AMP)<ept id="p1">](../../cpp/restrict-cpp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>C++ AMP (C++ Accelerated Massive Parallelism)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Function Call</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Function Objects in the STL</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>restrict (C++ AMP)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>