<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bc6457fe6b8df0403d6231daf177fcc18a147f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\creating-an-updatable-provider.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f7e4f2ca3ab56031f5784e2d778cab3659697c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b46664392ad26c86d20c5c753de8cd9473fe7dbf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating an Updatable Provider | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating an Updatable Provider</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C++ 6.0 supported only read-only providers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual C++ .NET supports updatable providers or providers that can update (write to) the data store.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic discusses how to create updatable providers using OLE DB templates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic assumes that you are starting with a workable provider.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are two steps to creating an updatable provider.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must first decide how the provider will make changes to the data store; specifically, whether changes are to be done immediately or deferred until an update command is issued.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The section "<bpt id="p1">[</bpt>Making Providers Updatable<ept id="p1">](#vchowmakingprovidersupdatable)</ept>" describes the changes and settings you need to do in the provider code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Next, you must make sure your provider contains all the functionality to support anything the consumer might request of it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the consumer wants to update the data store, the provider has to contain code that persists data to the data store.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, you might use the C Run-Time Library or MFC to perform such operations on your data source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The section "<bpt id="p1">[</bpt>Writing to the Data Source<ept id="p1">](#vchowwritingtothedatasource)</ept>" describes how to write to the data source, deal with <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> and default values, and set column flags.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>UpdatePV is an example of an updatable provider.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>UpdatePV is the same as MyProv but with updatable support.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Making Providers Updatable</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The key to making a provider updatable is understanding what operations you want your provider to perform on the data store and how you want the provider to carry out those operations.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specifically, the major issue is whether updates to the data store are to be done immediately or deferred (batched) until an update command is issued.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must first decide whether to inherit from <ph id="ph1">`IRowsetChangeImpl`</ph> or <ph id="ph2">`IRowsetUpdateImpl`</ph> in your rowset class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Depending on which of these you choose to implement, the functionality of three methods will be affected: <ph id="ph1">`SetData`</ph>, <bpt id="p1">**</bpt>InsertRows<ept id="p1">**</ept>, and <ph id="ph2">`DeleteRows`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you inherit from <bpt id="p1">[</bpt>IRowsetChangeImpl<ept id="p1">](../../data/oledb/irowsetchangeimpl-class.md)</ept>, calling these three methods immediately changes the data store.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you inherit from <bpt id="p1">[</bpt>IRowsetUpdateImpl<ept id="p1">](../../data/oledb/irowsetupdateimpl-class.md)</ept>, the methods defer changes to the data store until you call <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, <ph id="ph1">`GetOriginalData`</ph>, or <bpt id="p3">**</bpt>Undo<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the update involves several changes, they are performed in batch mode (note that batching changes can add considerable memory overhead).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`IRowsetUpdateImpl`</ph> derives from <ph id="ph2">`IRowsetChangeImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`IRowsetUpdateImpl`</ph> gives you change capability plus batch capability.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To support updatability in your provider</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In your rowset class, inherit from <ph id="ph1">`IRowsetChangeImpl`</ph> or <ph id="ph2">`IRowsetUpdateImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These classes provide appropriate interfaces for changing the data store:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Adding IRowsetChange</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`IRowsetChangeImpl`</ph> to your inheritance chain using this form:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Also add <ph id="ph1">`COM_INTERFACE_ENTRY(IRowsetChange)`</ph> to the <ph id="ph2">`BEGIN_COM_MAP`</ph> section in your rowset class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Adding IRowsetUpdate</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`IRowsetUpdate`</ph> to your inheritance chain using this form:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You should remove the <ph id="ph1">`IRowsetChangeImpl`</ph> line from your inheritance chain.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This one exception to the directive previously mentioned must include the code for <ph id="ph1">`IRowsetChangeImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add the following to your COM map (<bpt id="p1">**</bpt>BEGIN_COM_MAP ... END_COM_MAP<ept id="p1">**</ept>):</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you implement</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add to COM map</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In your command, add the following to your property set map (<bpt id="p1">**</bpt>BEGIN_PROPSET_MAP ... END_PROPSET_MAP<ept id="p1">**</ept>):</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you implement</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add to property set map</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In your property set map, you should also include all of the following settings as they appear below:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can find the values used in these macro calls by looking in Atldb.h for the property IDs and values (if Atldb.h differs from the online documentation, Atldb.h supersedes the documentation).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Many of the <bpt id="p1">**</bpt>VARIANT_FALSE<ept id="p1">**</ept> and <ph id="ph1">`VARIANT_TRUE`</ph> settings are required by the OLE DB templates; the OLE DB specification says they can be read/write, but the OLE DB templates can only support one value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you implement IRowsetChangeImpl</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you implement <ph id="ph1">`IRowsetChangeImpl`</ph>, you must set the following properties on your provider.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These properties are primarily used to request interfaces through <bpt id="p1">**</bpt>ICommandProperties::SetProperties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>: Setting this automatically sets <bpt id="p1">**</bpt>DBPROP_IRowsetChange<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>: A bitmask specifying the supported methods on <ph id="ph1">`IRowsetChange`</ph>: <ph id="ph2">`SetData`</ph>, <ph id="ph3">`DeleteRows`</ph>, or <ph id="ph4">`InsertRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>: Consumer can call <bpt id="p1">**</bpt>IRowsetChange::DeleteRows<ept id="p1">**</ept> or <ph id="ph1">`SetData`</ph> for newly inserted rows.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>: Rowset will not reorder inserted or updated rows.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you implement IRowsetUpdateImpl</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you implement <ph id="ph1">`IRowsetUpdateImpl`</ph>, you must set the following properties on your provider, in addition to setting all the properties for <ph id="ph2">`IRowsetChangeImpl`</ph> previously listed:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>: Must be READ_ONLY AND VARIANT_TRUE.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>: Must be READ_ONLY AND VARIANT_TRUE.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>: Must be READ_ONLY AND VARIANT_TRUE.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>: Must be READ_ONLY AND VARIANT_TRUE.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>: Must be READ_ONLY AND VARIANT_TRUE.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you support notifications, you might also have some other properties as well; see the section on <ph id="ph1">`IRowsetNotifyCP`</ph> for this list.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example of how the properties are set, see the property set map in <bpt id="p1">**</bpt>CUpdateCommand<ept id="p1">**</ept> (in Rowset.h) in <bpt id="p2">[</bpt>UpdatePV<ept id="p2">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Writing to the Data Source</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To read from the data source, call the <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To write to the data source, call the <ph id="ph1">`FlushData`</ph> function.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(In a general sense, flush means to save modifications you make to a table or index to disk.)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The row handle (<bpt id="p1">*</bpt>HROW<ept id="p1">*</ept>) and accessor handle (<bpt id="p2">*</bpt>HACCESSOR<ept id="p2">*</ept>) arguments allow you to specify the region to write.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Typically, you write a single data field at a time.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FlushData`</ph> method writes data in the format in which it was originally stored.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you do not override this function, your provider will function correctly but changes will not be flushed to the data store.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When to Flush</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The provider templates call <ph id="ph1">`FlushData`</ph> whenever data needs to be written to the data store; this usually (but not always) occurs as a result of calls to the following functions:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>IRowsetChange::DeleteRows</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>IRowsetChange::SetData</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IRowsetChange::InsertRows<ept id="p1">**</ept> (if there is new data to insert in the row)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>IRowsetUpdate::Update</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>How It Works</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The consumer makes a call that requires a flush (such as <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>) and this call is passed to the provider, which always does the following:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`SetDBStatus`</ph> whenever you have a status value bound (see <bpt id="p1">*</bpt>OLE DB Programmers Reference<ept id="p1">*</ept>, Chapter 6, <bpt id="p2">*</bpt>Data Parts: Status<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Checks column flags.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`IsUpdateAllowed`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>These three steps help provide security.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Then the provider calls <ph id="ph1">`FlushData`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>How to Implement FlushData</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To implement <ph id="ph1">`FlushData`</ph>, you need to take into account several issues:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Making sure that the data store can handle changes.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Handling <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Handling default values.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To implement your own <ph id="ph1">`FlushData`</ph> method, you need to:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Go to your rowset class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the rowset class put the declaration of:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Provide an implementation of <ph id="ph1">`FlushData`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A good implementation of <ph id="ph1">`FlushData`</ph> stores only the rows and columns that are actually updated.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">*</bpt>HROW<ept id="p1">*</ept> and <bpt id="p2">*</bpt>HACCESSOR<ept id="p2">*</ept> parameters to determine the current row and column being stored for optimization.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Typically, the biggest challenge is working with your own native data store.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If possible, try to:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Keep the method of writing to your data store as simple as possible.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Handle <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> values (optional but advised).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Handle default values (optional but advised).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The best thing to do is to have actual specified values in your data store for <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> and default values.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It is best if you can extrapolate this data.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If not, you are advised not to allow <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> and default values.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following example shows how <ph id="ph1">`FlushData`</ph> is implemented in the <ph id="ph2">`RUpdateRowset`</ph> class in the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample (see Rowset.h in the sample code):</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Handling Changes</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For your provider to handle changes, you first need to make sure your data store (such as a text file or video file) has facilities that enable you to make changes on it.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If it does not, you should create that code separately from the provider project.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Handling NULL Data</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It is possible that an end user will send <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> data.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When you write <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> values to fields in the data source, there can be potential problems.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Imagine an order-taking application that accepts values for city and postal code; it could accept either or both values, but not neither, because in that case delivery would be impossible.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You therefore have to restrict certain combinations of <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> values in fields that make sense for your application.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>As the provider developer, you have to consider how you will store that data, how you will read that data from the data store, and how you specify that to the user.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifically, you must consider how to change the data status of rowset data in the data source (for example, DataStatus = <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You decide what value to return when a consumer accesses a field containing a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Look at the code in the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample; it illustrates how a provider can handle <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> data.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In UpdatePV, the provider stores <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> data by writing the string "NULL" in the data store.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>When it reads <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> data from the data store, it sees that string and then empties the buffer, creating a <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> string.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It also has an override of <ph id="ph1">`IRowsetImpl::GetDBStatus`</ph> in which it returns <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept> if that data value is empty.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Marking Nullable Columns</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you also implement schema rowsets (see <ph id="ph1">`IDBSchemaRowsetImpl`</ph>), your implementation should specify in the <bpt id="p1">**</bpt>DBSCHEMA_COLUMNS<ept id="p1">**</ept> rowset (usually marked in your provider by <bpt id="p2">**</bpt>C<ept id="p2">**</ept><bpt id="p3">*</bpt>xxx<ept id="p3">*</ept><bpt id="p4">**</bpt>SchemaColSchemaRowset<ept id="p4">**</ept>) that the column is nullable.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You also need to specify that all nullable columns contain the <bpt id="p1">**</bpt>DBCOLUMNFLAGS_ISNULLABLE<ept id="p1">**</ept> value in your version of the <ph id="ph1">`GetColumnInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the OLE DB templates implementation, if you fail to mark columns as nullable, the provider assumes that they must contain a value and will not allow the consumer to send it null values.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>CommonGetColInfo<ept id="p1">**</ept> function is implemented in <bpt id="p2">**</bpt>CUpdateCommand<ept id="p2">**</ept> (see UpProvRS.cpp) in UpdatePV.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Note how the columns have this <bpt id="p1">**</bpt>DBCOLUMNFLAGS_ISNULLABLE<ept id="p1">**</ept> for nullable columns.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Default Values</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>As with <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> data, you have the responsibility to deal with changing default values.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default of <ph id="ph1">`FlushData`</ph> and <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> is to return <ph id="ph2">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Therefore, if you do not override this function, the changes appear to succeed (<ph id="ph1">`S_OK`</ph> will be returned), but they will not be transmitted to the data store.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample (in Rowset.h), the <ph id="ph1">`SetDBStatus`</ph> method handles default values as follows:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Column Flags</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you support default values on your columns, you need to set it using metadata in the <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph><ept id="p1">**</ept><bpt id="p2">*</bpt>provider class<ept id="p2">*</ept><bpt id="p3">**</bpt>&gt;SchemaRowset<ept id="p3">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Set <bpt id="p1">*</bpt>m_bColumnHasDefault<ept id="p1">*</ept><ph id="ph1"> = `VARIANT_TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You also have the responsibility to set the column flags, which are specified using the <bpt id="p1">**</bpt>DBCOLUMNFLAGS<ept id="p1">**</ept> enumerated type.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The column flags describe column characteristics.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For example, in the <ph id="ph1">`CUpdateSessionColSchemaRowset`</ph> class in <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> (in Session.h), the first column is set up this way:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This code specifies, among other things, that the column supports a default value of 0, that it be writeable, and that all data in the column have the same length.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you want the data in a column to have variable length, you would not set this flag.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Creating an OLE DB Provider</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>