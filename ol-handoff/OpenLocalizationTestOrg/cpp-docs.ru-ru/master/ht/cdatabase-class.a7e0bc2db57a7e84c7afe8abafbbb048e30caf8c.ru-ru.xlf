<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83b2637c7ed84d5e5382addbea8c350195dba602</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdatabase-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">779a0b363e699614d87183cb51bdf514bf1f0194</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7a04a0f3d283fd93be777f6feaf01c8f96395f2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDatabase Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDatabase Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a connection to a data source, through which you can operate on the data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDatabase::CDatabase</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You must initialize the object by calling <ph id="ph1">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CDatabase::BeginTrans</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starts a "transaction" â€” a series of reversible calls to the <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> member functions of class <ph id="ph2">`CRecordset`</ph> â€” on the connected data source.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The data source must support transactions for <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> to have any effect.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CDatabase::BindParameters</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Allows you to bind parameters before calling <ph id="ph1">`CDatabase::ExecuteSQL`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CDatabase::Cancel</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Cancels an asynchronous operation or a process from a second thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CDatabase::CanTransact</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the data source supports transactions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CDatabase::CanUpdate</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the <ph id="ph1">`CDatabase`</ph> object is updatable (not read-only).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CDatabase::Close</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Closes the data source connection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CDatabase::CommitTrans</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Completes a transaction begun by <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Commands in the transaction that alter the data source are carried out.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CDatabase::ExecuteSQL</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Executes a SQL statement.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No data records are returned.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CDatabase::GetBookmarkPersistence</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Identifies the operations through which bookmarks persist on recordset objects.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CDatabase::GetConnect</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the ODBC connection string used to connect the <ph id="ph1">`CDatabase`</ph> object to a data source.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CDatabase::GetCursorCommitBehavior</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Identifies the effect of committing a transaction on an open recordset object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CDatabase::GetCursorRollbackBehavior</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Identifies the effect of rolling back a transaction on an open recordset object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CDatabase::GetDatabaseName</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the name of the database currently in use.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CDatabase::IsOpen</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the <ph id="ph1">`CDatabase`</ph> object is currently connected to a data source.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CDatabase::OnSetOptions</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Called by the framework to set standard connection options.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default implementation sets the query timeout value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can establish these options ahead of time by calling <ph id="ph1">`SetQueryTimeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CDatabase::Open</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Establishes a connection to a data source (through an ODBC driver).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CDatabase::OpenEx</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Establishes a connection to a data source (through an ODBC driver).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CDatabase::Rollback</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Reverses changes made during the current transaction.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The data source returns to its previous state, as defined at the <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> call, unaltered.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CDatabase::SetLoginTimeout</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets the number of seconds after which a data source connection attempt will time out.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CDatabase::SetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Sets the number of seconds after which database query operations will time out.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Affects all subsequent recordset <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, <ph id="ph1">`AddNew`</ph>, <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> calls.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CDatabase::m_hdbc</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Open Database Connectivity (ODBC) connection handle to a data source.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>HDBC<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A data source is a specific instance of data hosted by some database management system (DBMS).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Examples include Microsoft SQL Server, Microsoft Access, Borland dBASE, and xBASE.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can have one or more <ph id="ph1">`CDatabase`</ph> objects active at a time in your application.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you are working with the Data Access Objects (DAO) classes rather than the Open Database Connectivity (ODBC) classes, use class <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Overview: Database Programming<ept id="p1">](../../data/data-access-programming-mfc-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`CDatabase`</ph>, construct a <ph id="ph2">`CDatabase`</ph> object and call its <ph id="ph3">`OpenEx`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This opens a connection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you then construct <ph id="ph1">`CRecordset`</ph> objects for operating on the connected data source, pass the recordset constructor a pointer to your <ph id="ph2">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When you finish using the connection, call the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> member function and destroy the <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> closes any recordsets you have not closed previously.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`CDatabase`</ph>, see the articles <bpt id="p1">[</bpt>Data Source (ODBC)<ept id="p1">](../../data/odbc/data-source-odbc.md)</ept> and <bpt id="p2">[</bpt>Overview: Database Programming<ept id="p2">](../../data/data-access-programming-mfc-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdb.h</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CDatabase::BeginTrans</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Call this member function to begin a transaction with the connected data source.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Nonzero if the call was successful and changes are committed only manually; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A transaction consists of one or more calls to the <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> member functions of a <ph id="ph2">`CRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Before beginning a transaction, the <ph id="ph1">`CDatabase`</ph> object must already have been connected to the data source by calling its <ph id="ph2">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To end the transaction, call <bpt id="p1">[</bpt>CommitTrans<ept id="p1">](#cdatabase__committrans)</ept> to accept all changes to the data source (and carry them out) or call <bpt id="p2">[</bpt>Rollback<ept id="p2">](#cdatabase__rollback)</ept> to abort the entire transaction.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> after you open any recordsets involved in the transaction and as close to the actual update operations as possible.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Depending on your ODBC driver, opening a recordset before calling <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> may cause problems when calling <bpt id="p2">**</bpt>Rollback<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You should check the specific driver you are using.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, when using the Microsoft Access driver included in the Microsoft ODBC Desktop Driver Pack 3.0, you must account for the Jet database engine's requirement that you should not begin a transaction on any database that has an open cursor.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In the MFC database classes, an open cursor means an open <ph id="ph1">`CRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Technical Note 68<ept id="p1">](../../mfc/tn068-performing-transactions-with-the-microsoft-access-7-odbc-driver.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> may also lock data records on the server, depending on the requested concurrency and the capabilities of the data source.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For information about locking data, see the article <bpt id="p1">[</bpt>Recordset: Locking Records (ODBC)<ept id="p1">](../../data/odbc/recordset-locking-records-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>User-defined transactions are explained in the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> establishes the state to which the sequence of transactions can be rolled back (reversed).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To establish a new state for rollbacks, commit any current transaction, then call <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> again.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> again without calling <bpt id="p2">**</bpt>CommitTrans<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Rollback<ept id="p3">**</ept> is an error.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CanTransact<ept id="p1">](#cdatabase__cantransact)</ept> member function to determine whether your driver supports transactions for a given database.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You should also call <bpt id="p1">[</bpt>GetCursorCommitBehavior<ept id="p1">](#cdatabase__getcursorcommitbehavior)</ept> and <bpt id="p2">[</bpt>GetCursorRollbackBehavior<ept id="p2">](#cdatabase__getcursorrollbackbehavior)</ept> to determine the support for cursor preservation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Transaction: Performing a Transaction in a Recordset (ODBC)<ept id="p1">](../../data/odbc/transaction-performing-a-transaction-in-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CDatabase::BindParameters</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`BindParameters`</ph> when you need to bind parameters before calling <bpt id="p1">[</bpt>CDatabase::ExecuteSQL<ept id="p1">](#cdatabase__executesql)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The ODBC statement handle for which you want to bind parameters.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This approach is useful when you do not need the result set from a stored procedure.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In your override, call <bpt id="p1">**</bpt>SQLBindParameters<ept id="p1">**</ept> and related ODBC functions to bind the parameters.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>MFC calls your override before your call to <ph id="ph1">`ExecuteSQL`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You do not need to call <bpt id="p1">**</bpt>SQLPrepare<ept id="p1">**</ept>; <ph id="ph1">`ExecuteSQL`</ph> calls <bpt id="p2">**</bpt>SQLExecDirect<ept id="p2">**</ept> and destroys the <bpt id="p3">**</bpt>hstmt<ept id="p3">**</ept>, which is used only once.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CDatabase::Cancel</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Call this member function to request that the data source cancel either an asynchronous operation in progress or a process from a second thread.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Note that the MFC ODBC classes no longer use asynchronous processing; to perform an asychronous operation, you must directly call the ODBC API function <bpt id="p1">[</bpt>SQLSetConnectOption<ept id="p1">](https://msdn.microsoft.com/library/ms713564.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Execution<ept id="p1">](https://msdn.microsoft.com/library/ms713563.aspx)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CDatabase::CanTransact</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the database allows transactions.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Nonzero if recordsets using this <ph id="ph1">`CDatabase`</ph> object allow transactions; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For information about transactions, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CDatabase::CanUpdate</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDatabase`</ph> object allows updates.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDatabase`</ph> object allows updates; otherwise 0, indicating either that you passed <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> in <ph id="ph2">`bReadOnly`</ph> when you opened the <ph id="ph3">`CDatabase`</ph> object or that the data source itself is read-only.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The data source is read-only if a call to the ODBC API function <bpt id="p1">**</bpt>SQLGetInfo<ept id="p1">**</ept> for <bpt id="p2">**</bpt>SQL_DATASOURCE_READ_ONLY<ept id="p2">**</ept> returns "y".</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Not all drivers support updates.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CDatabase::CDatabase</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>After constructing the object, you must call its <ph id="ph1">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function to establish a connection to a specified data source.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You may find it convenient to embed the <ph id="ph1">`CDatabase`</ph> object in your document class.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This example illustrates using <ph id="ph1">`CDatabase`</ph> in a <ph id="ph2">`CDocument`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#9</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#10</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CDatabase::Close</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Call this member function if you want to disconnect from a data source.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You must close any recordsets associated with the <ph id="ph1">`CDatabase`</ph> object before you call this member function.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> does not destroy the <ph id="ph1">`CDatabase`</ph> object, you can reuse the object by opening a new connection to the same data source or a different data source.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>All pending <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> statements of recordsets using the database are canceled, and all pending transactions are rolled back.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Any recordsets dependent on the <ph id="ph1">`CDatabase`</ph> object are left in an undefined state.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#12</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CDatabase::CommitTrans</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Call this member function upon completing transactions.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Nonzero if the updates were successfully committed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>CommitTrans<ept id="p1">**</ept> fails, the state of the data source is undefined.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>You must check the data to determine its state.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A transaction consists of a series of calls to the <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> member functions of a <ph id="ph2">`CRecordset`</ph> object that began with a call to the <bpt id="p4">[</bpt>BeginTrans<ept id="p4">](#cdatabase__begintrans)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CommitTrans<ept id="p1">**</ept> commits the transaction.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>By default, updates are committed immediately; calling <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> causes commitment of updates to be delayed until <bpt id="p2">**</bpt>CommitTrans<ept id="p2">**</ept> is called.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Until you call <bpt id="p1">**</bpt>CommitTrans<ept id="p1">**</ept> to end a transaction, you can call the <bpt id="p2">[</bpt>Rollback<ept id="p2">](#cdatabase__rollback)</ept> member function to abort the transaction and leave the data source in its original state.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>To begin a new transaction, call <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> again.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Transaction: Performing a Transaction in a Recordset (ODBC)<ept id="p1">](../../data/odbc/transaction-performing-a-transaction-in-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CDatabase::ExecuteSQL</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Call this member function when you need to execute a SQL command directly.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string containing a valid SQL command to execute.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You can pass a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Create the command as a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>does not return data records.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If you want to operate on records, use a recordset object instead.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Most of your commands for a data source are issued through recordset objects, which support commands for selecting data, inserting new records, deleting records, and editing records.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>However, not all ODBC functionality is directly supported by the database classes, so you may at times need to make a direct SQL call with <ph id="ph1">`ExecuteSQL`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#13</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CDatabase::GetBookmarkPersistence</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Call this member function to determine the persistence of bookmarks on a recordset object after certain operations.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A bitmask that identifies the operations through which bookmarks persist on a recordset object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For details, see Remarks.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For example, if you call <ph id="ph1">`CRecordset::GetBookmark`</ph> and then call <ph id="ph2">`CRecordset::Requery`</ph>, the bookmark obtained from <ph id="ph3">`GetBookmark`</ph> may no longer be valid.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You should call <ph id="ph1">`GetBookmarkPersistence`</ph> before calling <ph id="ph2">`CRecordset::SetBookmark`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The following table lists the bitmask values that can be combined for the return value of <ph id="ph1">`GetBookmarkPersistence`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Bitmask value</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Bookmark persistence</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Bookmarks are valid after a <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The bookmark for a row is valid after a <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> operation on that row.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Bookmarks are valid after a <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Bookmarks are valid after any <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This simply identifies if bookmarks are supported on the recordset, as returned by <ph id="ph1">`CRecordset::CanBookmark`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Bookmarks are valid after a transaction is committed or rolled back.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The bookmark for a row is valid after an <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> operation on that row.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Bookmarks associated with one recordset object are valid on a second recordset.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For more information about this return value, see the ODBC API function <bpt id="p1">**</bpt>SQLGetInfo<ept id="p1">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For more information about bookmarks, see the article <bpt id="p1">[</bpt>Recordset: Bookmarks and Absolute Positions (ODBC)<ept id="p1">](../../data/odbc/recordset-bookmarks-and-absolute-positions-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CDatabase::GetConnect</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the connection string used during the call to <ph id="ph1">`OpenEx`</ph> or <ph id="ph2">`Open`</ph> that connected the <ph id="ph3">`CDatabase`</ph> object to a data source.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph><bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> containing the connection string if <ph id="ph2">`OpenEx`</ph> or <ph id="ph3">`Open`</ph> has been called; otherwise, an empty string.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CDatabase::Open<ept id="p1">](#cdatabase__open)</ept> for a description of how the connection string is created.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CDatabase::GetCursorCommitBehavior</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Call this member function to determine how a <bpt id="p1">[</bpt>CommitTrans<ept id="p1">](#cdatabase__committrans)</ept> operation affects cursors on open recordset objects.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A value indicating the effect of transactions on open recordset objects.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For details, see Remarks.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The following table lists the possible return values for <ph id="ph1">`GetCursorCommitBehavior`</ph> and the corresponding effect on the open recordset.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Effect on CRecordset objects</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CRecordset::Requery`</ph> immediately following the transaction commit.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CRecordset::Close`</ph> immediately following the transaction commit.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Proceed normally with <ph id="ph1">`CRecordset`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For more information about this return value, see the ODBC API function <bpt id="p1">**</bpt>SQLGetInfo<ept id="p1">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CDatabase::GetCursorRollbackBehavior</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Call this member function to determine how a <bpt id="p1">[</bpt>Rollback<ept id="p1">](#cdatabase__rollback)</ept> operation affects cursors on open recordset objects.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A value indicating the effect of transactions on open recordset objects.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For details, see Remarks.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following table lists the possible return values for <ph id="ph1">`GetCursorRollbackBehavior`</ph> and the corresponding effect on the open recordset.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Effect on CRecordset objects</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CRecordset::Requery`</ph> immediately following the transaction rollback.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CRecordset::Close`</ph> immediately following the transaction rollback.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Proceed normally with <ph id="ph1">`CRecordset`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more information about this return value, see the ODBC API function <bpt id="p1">**</bpt>SQLGetInfo<ept id="p1">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For more information about transactions, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CDatabase::GetDatabaseName</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of the currently connected database (provided that the data source defines a named object called "database").</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> containing the database name if successful; otherwise, an empty <ph id="ph1">`CString`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This is not the same as the data source name (DSN) specified in the <ph id="ph1">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>What <ph id="ph1">`GetDatabaseName`</ph> returns depends on ODBC.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>In general, a database is a collection of tables.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>If this entity has a name, <ph id="ph1">`GetDatabaseName`</ph> returns it.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>You might, for example, want to display this name in a heading.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If an error occurs while retrieving the name from ODBC, <ph id="ph1">`GetDatabaseName`</ph> returns an empty <bpt id="p1">**</bpt>Cstring<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>CDatabase::IsOpen</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDatabase`</ph> object is currently connected to a data source.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDatabase`</ph> object is currently connected; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>CDatabase::m_hdbc</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Contains a public handle to an ODBC data source connection â€” a "connection handle."</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Normally, you will have no need to access this member variable directly.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Instead, the framework allocates the handle when you call <ph id="ph1">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The framework deallocates the handle when you call the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator on the <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> member function does not deallocate the handle.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Under some circumstances, however, you may need to use the handle directly.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For example, if you need to call ODBC API functions directly rather than through class <ph id="ph1">`CDatabase`</ph>, you may need a connection handle to pass as a parameter.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>See the code example below.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#15</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>CDatabase::OnSetOptions</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when directly executing a SQL statement with the <ph id="ph1">`ExecuteSQL`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The ODBC statement handle for which options are being set.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>also calls this member function.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>sets the login timeout value.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>If there have been previous calls to the <ph id="ph1">`SetQueryTimeout`</ph> and member function, <ph id="ph2">`OnSetOptions`</ph> reflects the current values; otherwise, it sets default values.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Prior to MFC 4.2, <ph id="ph1">`OnSetOptions`</ph> also set the processing mode to either snychronous or asynchronous.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Beginning with MFC 4.2, all operations are synchronous.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>To perform an asynchronous operation, you must make a direct call to the ODBC API function <bpt id="p1">**</bpt>SQLSetPos<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>You do not need to override <ph id="ph1">`OnSetOptions`</ph> to change the timeout value.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Instead, to customize the query timeout value, call <ph id="ph1">`SetQueryTimeout`</ph> before creating a recordset; <ph id="ph2">`OnSetOptions`</ph> will use the new value.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The values set apply to subsequent operations on all recordsets or direct SQL calls.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnSetOptions`</ph> if you want to set additional options.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Your override should call the base class <ph id="ph1">`OnSetOptions`</ph> either before or after you call the ODBC API function <bpt id="p1">**</bpt>SQLSetStmtOption<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Follow the method illustrated in the framework's default implementation of <ph id="ph1">`OnSetOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CDatabase::Open</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Call this member function to initialize a newly constructed <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Specifies a data source name â€” a name registered with ODBC through the ODBC Administrator program.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If a DSN value is specified in <ph id="ph1">`lpszConnect`</ph> (in the form "DSN=<ph id="ph2">\&lt;</ph>data-source&gt;"), it must not be specified again in <ph id="ph3">`lpszDSN`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`lpszDSN`</ph> should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Otherwise, you can pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if you want to present the user with a Data Source dialog box in which the user can select a data source.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For further information, see Remarks.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Not supported in this version of the class library.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Currently, an assertion fails if this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The data source is always opened as shared (not exclusive).</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if you intend the connection to be read-only and to prohibit updates to the data source.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>All dependent recordsets inherit this attribute.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Specifies a connection string.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The connection string concatenates information, possibly including a data source name, a user ID valid on the data source, a user authentication string (password, if the data source requires one), and other information.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The whole connection string must be prefixed by the string "ODBC;" (uppercase or lowercase).</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The "ODBC;" string is used to indicate that the connection is to an ODBC data source; this is for upward compatibility when future versions of the class library might support non-ODBC data sources.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if you want the ODBC Cursor Library DLL to be loaded.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The cursor library masks some functionality of the underlying ODBC driver, effectively preventing the use of dynasets (if the driver supports them).</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The only cursors supported if the cursor library is loaded are static snapshots and forward-only cursors.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If you plan to create a recordset object directly from <ph id="ph1">`CRecordset`</ph> without deriving from it, you should not load the cursor library.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Nonzero if the connection is successfully made; otherwise 0 if the user chooses Cancel when presented a dialog box asking for more connection information.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>In all other cases, the framework throws an exception.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Your database object must be initialized before you can use it to construct a recordset object.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Calling the <bpt id="p1">[</bpt>OpenEx<ept id="p1">](#cdatabase__openex)</ept> member function is the preferred way to connect to a data source and initialize your database object.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>If the parameters in your <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> call do not contain enough information to make the connection, the ODBC driver opens a dialog box to obtain the necessary information from the user.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, your connection string, <ph id="ph1">`lpszConnect`</ph>, is stored privately in the <ph id="ph2">`CDatabase`</ph> object and is available by calling the <bpt id="p2">[</bpt>GetConnect<ept id="p2">](#cdatabase__getconnect)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>If you wish, you can open your own dialog box before you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> to get information from the user, such as a password, then add that information to the connection string you pass to <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Or you might want to save the connection string you pass so you can reuse it the next time your application calls <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> on a <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>You can also use the connection string for multiple levels of login authorization (each for a different <ph id="ph1">`CDatabase`</ph> object) or to convey other data source-specific information.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For more information about connection strings, see Chapter 5 in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>It is possible for a connection attempt to time out if, for example, the DBMS host is unavailable.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>If the connection attempt fails, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> throws a <ph id="ph1">`CDBException`</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#14</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>CDatabase::OpenEx</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Call this member function to initialize a newly constructed <ph id="ph1">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Specifies an ODBC connection string.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This includes the data source name as well as other optional information, such as a user ID and password.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>For example, "DSN=SQLServer_Source;UID=SA;PWD=abc123" is a possible connection string.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Note that if you pass <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for <ph id="ph1">`lpszConnectString`</ph>, a Data Source dialog box will prompt the user to select a data source.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>A bitmask which specifies a combination of the following values.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The default value is 0, meaning that the database will be opened as shared with write access, the ODBC Cursor Library DLL will not be loaded, and the ODBC connection dialog box will display only if there is not enough information to make the connection.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDatabase::openExclusive<ept id="p1">**</ept> Not supported in this version of the class library.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A data source is always opened as shared (not exclusive).</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Currently, an assertion fails if you specify this option.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDatabase::openReadOnly<ept id="p1">**</ept> Open the data source as read-only.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDatabase::useCursorLib<ept id="p1">**</ept> Load the ODBC Cursor Library DLL.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The cursor library masks some functionality of the underlying ODBC driver, effectively preventing the use of dynasets (if the driver supports them).</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The only cursors supported if the cursor library is loaded are static snapshots and forward-only cursors.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If you plan to create a recordset object directly from <ph id="ph1">`CRecordset`</ph> without deriving from it, you should not load the cursor library.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDatabase::noOdbcDialog<ept id="p1">**</ept> Do not display the ODBC connection dialog box, regardless of whether enough connection information is supplied.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDatabase::forceOdbcDialog<ept id="p1">**</ept> Always display the ODBC connection dialog box.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Nonzero if the connection is successfully made; otherwise 0 if the user chooses Cancel when presented a dialog box asking for more connection information.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>In all other cases, the framework throws an exception.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Your database object must be initialized before you can use it to construct a recordset object.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`lpszConnectString`</ph> parameter in your <ph id="ph2">`OpenEx`</ph> call does not contain enough information to make the connection, the ODBC driver opens a dialog box to obtain the necessary information from the user, provided you have not set <bpt id="p1">**</bpt>CDatabase::noOdbcDialog<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CDatabase::forceOdbcDialog<ept id="p2">**</ept> in the <ph id="ph3">`dwOptions`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`OpenEx`</ph>, your connection string, <ph id="ph2">`lpszConnectString`</ph>, is stored privately in the <ph id="ph3">`CDatabase`</ph> object and is available by calling the <bpt id="p1">[</bpt>GetConnect<ept id="p1">](#cdatabase__getconnect)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If you wish, you can open your own dialog box before you call <ph id="ph1">`OpenEx`</ph> to get information from the user, such as a password, and then add that information to the connection string you pass to <ph id="ph2">`OpenEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Or you might want to save the connection string you pass so you can reuse it the next time your application calls <ph id="ph1">`OpenEx`</ph> on a <ph id="ph2">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>You can also use the connection string for multiple levels of login authorization (each for a different <ph id="ph1">`CDatabase`</ph> object) or to convey other data source-specific information.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>For more information about connection strings, see Chapter 6 in the <bpt id="p1">*</bpt>ODBC Programmer's Reference<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>It is possible for a connection attempt to time out if, for example, the DBMS host is unavailable.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>If the connection attempt fails, <ph id="ph1">`OpenEx`</ph> throws a <ph id="ph2">`CDBException`</ph>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#11</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>CDatabase::Rollback</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Call this member function to reverse the changes made during a transaction.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Nonzero if the transaction was successfully reversed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">**</bpt>Rollback<ept id="p1">**</ept> call fails, the data source and transaction states are undefined.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Rollback<ept id="p1">**</ept> returns 0, you must check the data source to determine its state.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`CRecordset``AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> calls executed since the last <bpt id="p4">[</bpt>BeginTrans<ept id="p4">](#cdatabase__begintrans)</ept> are rolled back to the state that existed at the time of that call.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>After a call to <bpt id="p1">**</bpt>Rollback<ept id="p1">**</ept>, the transaction is over, and you must call <bpt id="p2">**</bpt>BeginTrans<ept id="p2">**</ept> again for another transaction.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The record that was current before you called <bpt id="p1">**</bpt>BeginTrans<ept id="p1">**</ept> becomes the current record again after <bpt id="p2">**</bpt>Rollback<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>After a rollback, the record that was current before the rollback remains current.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>For details about the state of the recordset and the data source after a rollback, see the article <bpt id="p1">[</bpt>Transaction (ODBC)<ept id="p1">](../../data/odbc/transaction-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>See the article <bpt id="p1">[</bpt>Transaction: Performing a Transaction in a Recordset (ODBC)<ept id="p1">](../../data/odbc/transaction-performing-a-transaction-in-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>CDatabase::SetLoginTimeout</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Call this member function â€” before you call <ph id="ph1">`OpenEx`</ph> or <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> â€” to override the default number of seconds allowed before an attempted data source connection times out.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The number of seconds to allow before a connection attempt times out.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A connection attempt might time out if, for example, the DBMS is not available.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>SetLoginTimeout<ept id="p1">**</ept> after you construct the uninitialized <ph id="ph1">`CDatabase`</ph> object but before you call <ph id="ph2">`OpenEx`</ph> or <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The default value for login timeouts is 15 seconds.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Not all data sources support the ability to specify a login timeout value.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>If the data source does not support timeout, you get trace output but not an exception.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A value of 0 means "infinite."</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>CDatabase::SetQueryTimeout</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Call this member function to override the default number of seconds to allow before subsequent operations on the connected data source time out.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The number of seconds to allow before a query attempt times out.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>An operation might time out due to network access problems, excessive query processing time, and so on.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetQueryTimeout`</ph> prior to opening your recordset or prior to calling the recordset's <ph id="ph2">`AddNew`</ph>, <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> member functions if you want to change the query timeout value.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The setting affects all subsequent <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, <ph id="ph1">`AddNew`</ph>, <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> calls to any recordsets associated with this <ph id="ph2">`CDatabase`</ph> object.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Changing the query timeout value for a recordset after opening does not change the value for the recordset.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>For example, subsequent <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> operations do not use the new value.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The default value for query timeouts is 15 seconds.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Not all data sources support the ability to set a query timeout value.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If you set a query timeout value of 0, no timeout occurs; the communication with the data source may stop responding.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>This behavior may be useful during development.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>If the data source does not support timeout, you get trace output but not an exception.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>CRecordset Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>