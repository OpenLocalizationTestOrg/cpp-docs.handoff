<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2498e953d4efce6e0030ad532368640fc9f3645</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\calloc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ca5b372a35e23086a5e8b9ab77c9949f94c4796</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">138223ec5017eca0a7820df19431bf97d13a347a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>calloc | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>calloc</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates an array in memory with elements initialized to 0.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Number of elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Length in bytes of each element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`calloc`</ph> returns a pointer to the allocated space.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To get a pointer to a type other than <ph id="ph1">`void`</ph>, use a type cast on the return value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`calloc`</ph> function allocates storage space for an array of <ph id="ph2">`num`</ph> elements, each of length <ph id="ph3">`size`</ph> bytes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each element is initialized to 0.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`calloc`</ph> sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`ENOMEM`</ph> if a memory allocation fails or if the amount of memory requested exceeds <ph id="ph4">`_HEAP_MAXREQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For information on this and other error codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`calloc`</ph> calls <ph id="ph2">`malloc`</ph> to use the C++ <bpt id="p1">[</bpt>_set_new_mode<ept id="p1">](../../c-runtime-library/reference/set-new-mode.md)</ept> function to set the new handler mode.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The new handler mode indicates whether, on failure, <ph id="ph1">`malloc`</ph> is to call the new handler routine as set by <bpt id="p1">[</bpt>_set_new_handler<ept id="p1">](../../c-runtime-library/reference/set-new-handler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`malloc`</ph> does not call the new handler routine on failure to allocate memory.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can override this default behavior so that, when <ph id="ph1">`calloc`</ph> fails to allocate memory, <ph id="ph2">`malloc`</ph> calls the new handler routine in the same way that the <ph id="ph3">`new`</ph> operator does when it fails for the same reason.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To override the default, call</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>early in your program, or link with NEWMODE.OBJ (see <bpt id="p1">[</bpt>Link Options<ept id="p1">](../../c-runtime-library/link-options.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the application is linked with a debug version of the C run-time libraries, <ph id="ph1">`calloc`</ph> resolves to <bpt id="p1">[</bpt>_calloc_dbg<ept id="p1">](../../c-runtime-library/reference/calloc-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about how the heap is managed during the debugging process, see <bpt id="p1">[</bpt>The CRT Debug Heap<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`calloc`</ph> is marked <ph id="ph2">`__declspec(noalias)`</ph> and <ph id="ph3">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>noalias<ept id="p1">](../../cpp/noalias.md)</ept> and <bpt id="p2">[</bpt>restrict<ept id="p2">](../../cpp/restrict.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>stdlib.h&gt; and <ph id="ph2">\&lt;</ph>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Memory Allocation<ept id="p1">](../../c-runtime-library/memory-allocation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>free<ept id="p1">](../../c-runtime-library/reference/free.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>realloc<ept id="p1">](../../c-runtime-library/reference/realloc.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>