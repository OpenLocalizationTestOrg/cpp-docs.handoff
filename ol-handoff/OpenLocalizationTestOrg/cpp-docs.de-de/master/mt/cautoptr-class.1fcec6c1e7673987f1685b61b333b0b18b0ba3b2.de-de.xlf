<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75f747d5acb9735d5b52f0b7114792d5a92a3291</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cautoptr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab4f6728c9ec9e4e514f77ec6d7622cae3653561</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3dbd6ab8d98746910ecb46afeab18c0811ea667a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CAutoPtr Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CAutoPtr Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class represents a smart pointer object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The pointer type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::CAutoPtr<ept id="p1">](#cautoptr__cautoptr)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::~CAutoPtr<ept id="p1">](#cautoptr___dtorcautoptr)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::Attach<ept id="p1">](#cautoptr__attach)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Call this method to take ownership of an existing pointer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::Detach<ept id="p1">](#cautoptr__detach)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call this method to release ownership of a pointer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::Free<ept id="p1">](#cautoptr__free)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Call this method to delete an object pointed to by a <ph id="ph1">`CAutoPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::operator T*<ept id="p1">](#cautoptr__operator_t_star)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The cast operator.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::operator =<ept id="p1">](#cautoptr__operator_eq)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The assignment operator.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::operator -&gt;<ept id="p1">](#cautoptr__operator_ptr)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The pointer-to-member operator.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoPtr::m_p<ept id="p1">](#cautoptr__m_p)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The pointer data member variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This class provides methods for creating and managing a smart pointer, which will help protect against memory leaks by automatically freeing resources when it falls out of scope.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Further, <ph id="ph1">`CAutoPtr`</ph>'s copy constructor and assignment operator transfer ownership of the pointer, copying the source pointer to the destination pointer and setting the source pointer to NULL.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is therefore impossible to have two <ph id="ph1">`CAutoPtr`</ph> objects each storing the same pointer, and this reduces the possibility of deleting the same pointer twice.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CAutoPtr`</ph> also simplifies the creation of collections of pointers.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Instead of deriving a collection class and overriding the destructor, it's simpler to make a collection of <ph id="ph1">`CAutoPtr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the collection is deleted, the <ph id="ph1">`CAutoPtr`</ph> objects will go out of scope and automatically delete themselves.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CHeapPtr<ept id="p1">](../../atl/reference/cheapptr-class.md)</ept> and variants work in the same way as <ph id="ph1">`CAutoPtr`</ph>, except that they allocate and free memory using different heap functions instead of the C++ <bpt id="p2">**</bpt>new<ept id="p2">**</ept> and <bpt id="p3">**</bpt>delete<ept id="p3">**</ept> operators.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAutoVectorPtr<ept id="p1">](../../atl/reference/cautovectorptr-class.md)</ept> is similar to <ph id="ph1">`CAutoPtr`</ph>, the only difference being that it uses <bpt id="p2">**</bpt>vector new[]<ept id="p2">**</ept> and <bpt id="p3">**</bpt>vector delete[]<ept id="p3">**</ept> to allocate and free memory.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See also <bpt id="p1">[</bpt>CAutoPtrArray<ept id="p1">](../../atl/reference/cautoptrarray-class.md)</ept> and <bpt id="p2">[</bpt>CAutoPtrList<ept id="p2">](../../atl/reference/cautoptrlist-class.md)</ept> when arrays or lists of smart pointers are required.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlbase.h</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_ATL_Utilities#74<ept id="p2">](../../atl/codesnippet/cpp/cautoptr-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__attach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::Attach</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Call this method to take ownership of an existing pointer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CAutoPtr`</ph> object will take ownership of this pointer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CAutoPtr`</ph> object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>CAutoPtr::Detach<ept id="p1">](#cautoptr__detach)</ept> is called, the programmer is again given responsibility for freeing any allocated resources.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In debug builds, an assertion failure will occur if the <bpt id="p1">[</bpt>CAutoPtr::m_p<ept id="p1">](#cautoptr__m_p)</ept> data member currently points to an existing value; that is, it is not equal to NULL.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>CAutoPtr Overview<ept id="p1">](../../atl/reference/cautoptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__cautoptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::CAutoPtr</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An existing pointer.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type being managed by another <ph id="ph1">`CAutoPtr`</ph>, used to initialize the current object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CAutoPtr`</ph> object can be created using an existing pointer, in which case it transfers ownership of the pointer.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>CAutoPtr Overview<ept id="p1">](../../atl/reference/cautoptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr___dtorcautoptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::~CAutoPtr</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Frees any allocated resources.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>CAutoPtr::Free<ept id="p1">](#cautoptr__free)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__detach"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::Detach</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Call this method to release ownership of a pointer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns a copy of the pointer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Releases ownership of a pointer, sets the <bpt id="p1">[</bpt>CAutoPtr::m_p<ept id="p1">](#cautoptr__m_p)</ept> data member variable to NULL, and returns a copy of the pointer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Detach<ept id="p1">**</ept>, it is up to the programmer to free any allocated resources over which the <ph id="ph1">`CAutoPtr`</ph> object may have previously assumed reponsibility.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>CAutoPtr Overview<ept id="p1">](../../atl/reference/cautoptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__free"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::Free</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Call this method to delete an object pointed to by a <ph id="ph1">`CAutoPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The object pointed to by the <ph id="ph1">`CAutoPtr`</ph> is freed, and the <bpt id="p1">[</bpt>CAutoPtr::m_p<ept id="p1">](#cautoptr__m_p)</ept> data member variable is set to NULL.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__m_p"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::m_p</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The pointer data member variable.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This member variable holds the pointer information.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__operator_eq"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::operator =</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The assignment operator.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A pointer.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A class type.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Returns a reference to a <bpt id="p1">**</bpt>CAutoPtr<ph id="ph1">\&lt;</ph> T &gt;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The assignment operator detaches the <ph id="ph1">`CAutoPtr`</ph> object from any current pointer and attaches the new pointer, <ph id="ph2">`p`</ph>, in its place.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>CAutoPtr Overview<ept id="p1">](../../atl/reference/cautoptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__operator_ptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::operator -<ph id="ph1">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The pointer-to-member operator.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns the value of the <bpt id="p1">[</bpt>CAutoPtr::m_p<ept id="p1">](#cautoptr__m_p)</ept> data member variable.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use this operator to call a method in a class pointed to by the <ph id="ph1">`CAutoPtr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In debug builds, an assertion failure will occur if the <ph id="ph1">`CAutoPtr`</ph> points to NULL.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See the example in the <bpt id="p1">[</bpt>CAutoPtr Overview<ept id="p1">](../../atl/reference/cautoptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cautoptr__operator_t_star"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CAutoPtr::operator T*</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The cast operator.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>```operator T* () const throw();</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>