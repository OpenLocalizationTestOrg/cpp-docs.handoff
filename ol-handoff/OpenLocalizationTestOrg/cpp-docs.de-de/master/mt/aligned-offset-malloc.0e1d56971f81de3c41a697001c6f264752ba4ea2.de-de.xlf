<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8ffb1e96937f0817b1a878b1df34fcd4504301c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\aligned-offset-malloc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aaebe00e4f9a4eb414b3e8487c3c280e7e040deb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2be3632c371ba460811557d1a8b1ac6166fe0f64</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_aligned_offset_malloc | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_aligned_offset_malloc</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates memory on a specified alignment boundary.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`size`</ph></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The size of the requested memory allocation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`alignment`</ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The alignment value, which must be an integer power of 2.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`offset`</ph></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The offset into the memory allocation to force the alignment.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to the memory block that was allocated or <ph id="ph1">`NULL`</ph> if the operation failed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_aligned_offset_malloc`</ph> is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_aligned_offset_malloc`</ph> is based on <ph id="ph2">`malloc`</ph>; for more information, see <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`_aligned_offset_malloc`</ph> is marked <ph id="ph2">`__declspec(noalias)`</ph> and <ph id="ph3">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>noalias<ept id="p1">](../../cpp/noalias.md)</ept> and <bpt id="p2">[</bpt>restrict<ept id="p2">](../../cpp/restrict.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This function sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`ENOMEM`</ph> if the memory allocation failed or if the requested size was greater than <ph id="ph3">`_HEAP_MAXREQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`errno`</ph>, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, <ph id="ph1">`_aligned_offset_malloc`</ph> validates its parameters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`alignment`</ph> is not a power of 2 or if <ph id="ph2">`offset`</ph> is greater than or equal to <ph id="ph3">`size`</ph> and nonzero, this function invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, this function returns <ph id="ph1">`NULL`</ph> and sets <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_aligned_malloc<ept id="p1">](../../c-runtime-library/reference/aligned-malloc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Alignment<ept id="p1">](../../c-runtime-library/data-alignment.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>