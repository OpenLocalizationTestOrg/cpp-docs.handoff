<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ecea3338adaa7bb2076704b3951d222d73c3e79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\abs-labs-llabs-abs64.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">953ddfc593d2608b18ac29383885b17f923f9417</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">450cda1cd842a5be9aa581b5070ce15b3a357935</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>abs, labs, llabs, _abs64 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>abs, labs, llabs, _abs64</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Calculates the absolute value of the argument.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Numeric value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`abs`</ph>, <ph id="ph2">`labs`</ph>, <ph id="ph3">`llabs`</ph> and <ph id="ph4">`_abs64`</ph> functions return the absolute value of the parameter <ph id="ph5">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There is no error return.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because C++ allows overloading, you can call overloads of <ph id="ph1">`abs`</ph> that take and return <ph id="ph2">`long`</ph>, <ph id="ph3">`long long`</ph>, <ph id="ph4">`float`</ph>, <ph id="ph5">`double`</ph>, and <ph id="ph6">`long double`</ph> values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These overloads are defined in the <ph id="ph1">\&lt;</ph>cmath&gt; header.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In a C program, <ph id="ph1">`abs`</ph> always takes and returns an int.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because the range of negative integers that can be represented by using any integral type is larger than the range of positive integers that can be represented by using that type, it's possible to supply an argument to these functions that canâ€™t be converted.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the absolute value of the argument cannot be represented by the return type, the <ph id="ph1">`abs`</ph> functions return the argument value unchanged.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifically, <ph id="ph1">`abs(INT_MIN)`</ph> returns <ph id="ph2">`INT_MIN`</ph>, <ph id="ph3">`labs(LONG_MIN)`</ph> returns <ph id="ph4">`LONG_MIN`</ph>, <ph id="ph5">`llabs(LLONG_MIN)`</ph> returns <ph id="ph6">`LLONG_MIN`</ph>, and <ph id="ph7">`_abs64(_I64_MIN)`</ph> returns <ph id="ph8">`_I64_MIN`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This means that the <ph id="ph1">`abs`</ph> functions cannot be used to guarantee a positive value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>End Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Required C header</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required C++ header</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`labs`</ph>,</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>math.h&gt; or <ph id="ph1">\&lt;</ph>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>cmath&gt;, <ph id="ph1">\&lt;</ph>cstdlib&gt;, <ph id="ph2">\&lt;</ph>stdlib.h&gt; or <ph id="ph3">\&lt;</ph>math.h&gt;</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>cstdlib&gt; or <ph id="ph1">\&lt;</ph>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To use the overloaded versions of <ph id="ph1">`abs`</ph> in C++, you must include the <ph id="ph2">\&lt;</ph>cmath&gt; header.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This program computes and displays the absolute values of several numbers.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>System::Math::Abs</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Floating-Point Support</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_cabs</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>fabs, fabsf, fabsl</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>imaxabs</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>