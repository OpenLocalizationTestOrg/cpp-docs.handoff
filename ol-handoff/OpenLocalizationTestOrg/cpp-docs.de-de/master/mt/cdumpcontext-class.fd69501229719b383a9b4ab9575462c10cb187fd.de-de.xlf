<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1aa93beea9b29e5052ea89052a98bbc1471cfb29</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdumpcontext-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b716c4e0a4cf90e0ce8845d69cc578c86f02a82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7407a8283aaa92fda6584d355f7f8f5a5c3e112</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDumpContext Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDumpContext Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports stream-oriented diagnostic output in the form of human-readable text.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::CDumpContext<ept id="p1">](#cdumpcontext__cdumpcontext)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CDumpContext`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::DumpAsHex<ept id="p1">](#cdumpcontext__dumpashex)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Dumps the indicated item in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::Flush<ept id="p1">](#cdumpcontext__flush)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Flushes any data in the dump context buffer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::GetDepth<ept id="p1">](#cdumpcontext__getdepth)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets an integer corresponding to the depth of the dump.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::HexDump<ept id="p1">](#cdumpcontext__hexdump)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Dumps bytes contained in an array in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::SetDepth<ept id="p1">](#cdumpcontext__setdepth)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sets the depth of the dump.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CDumpContext::operator <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph><ept id="p1">](#cdumpcontext__operator__lt__lt_)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Inserts variables and objects into the dump context.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDumpContext`</ph> does not have a base class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>afxDump<ept id="p1">](http://msdn.microsoft.com/library/4b3cfa3f-fb75-456a-9d99-a5601acbcb11)</ept>, a predeclared <ph id="ph1">`CDumpContext`</ph> object, for most of your dumping.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`afxDump`</ph> object is available only in the Debug version of the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Several of the memory <bpt id="p1">[</bpt>diagnostic services<ept id="p1">](../../mfc/reference/diagnostic-services.md)</ept> use <ph id="ph1">`afxDump`</ph> for their output.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Under the Windows environment, the output from the predefined <ph id="ph1">`afxDump`</ph> object, conceptually similar to the <ph id="ph2">`cerr`</ph> stream, is routed to the debugger via the Windows function <bpt id="p1">**</bpt>OutputDebugString<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDumpContext`</ph> class has an overloaded insertion ( <bpt id="p1">**</bpt><ph id="ph2">&lt;&lt;</ph><ept id="p1">**</ept>) operator for <ph id="ph3">`CObject`</ph> pointers that dumps the object's data.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you need a custom dump format for a derived object, override <bpt id="p1">[</bpt>CObject::Dump<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__dump)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Most Microsoft Foundation classes implement an overridden <ph id="ph1">`Dump`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Classes that are not derived from <ph id="ph1">`CObject`</ph>, such as <ph id="ph2">`CString`</ph>, <ph id="ph3">`CTime`</ph>, and <ph id="ph4">`CTimeSpan`</ph>, have their own overloaded <ph id="ph5">`CDumpContext`</ph> insertion operators, as do often-used structures such as <bpt id="p1">**</bpt>CFileStatus<ept id="p1">**</ept>, <ph id="ph6">`CPoint`</ph>, and <ph id="ph7">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">[</bpt>IMPLEMENT_DYNAMIC<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#implement_dynamic)</ept> or <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macro in the implementation of your class, then <ph id="ph1">`CObject::Dump`</ph> will print the name of your <ph id="ph2">`CObject`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Otherwise, it will print <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDumpContext`</ph> class is available with both the Debug and Release versions of the library, but the <ph id="ph2">`Dump`</ph> member function is defined only in the Debug version.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>#ifdef _DEBUG<ept id="p1">**</ept><ph id="ph1"> / </ph><ph id="ph2">`#endif`</ph> statements to bracket your diagnostic code, including your custom <ph id="ph3">`Dump`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Before you create your own <ph id="ph1">`CDumpContext`</ph> object, you must create a <ph id="ph2">`CFile`</ph> object that serves as the dump destination.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CDumpContext`</ph>, see <bpt id="p1">[</bpt>Debugging MFC Applications<ept id="p1">](/visualstudio/debugger/mfc-debugging-techniques)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#define _DEBUG<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__cdumpcontext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::CDumpContext</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Constructs an object of class <ph id="ph1">`CDumpContext`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CFile`</ph> object that is the dump destination.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`afxDump`</ph> object is constructed automatically.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Do not write to the underlying <ph id="ph1">`CFile`</ph> while the dump context is active; otherwise, you will interfere with the dump.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Under the Windows environment, the output is routed to the debugger via the Windows function <bpt id="p1">**</bpt>OutputDebugString<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#12<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__dumpashex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::DumpAsHex</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Dumps the specified type formatted as hexadecimal numbers.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CDumpContext`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Call this member function to dump the item of the specified type as a hexadecimal number.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To dump an array, call <bpt id="p1">[</bpt>CDumpContext::HexDump<ept id="p1">](#cdumpcontext__hexdump)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#13<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__flush"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::Flush</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Forces any data remaining in buffers to be written to the file attached to the dump context.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#14<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__getdepth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::GetDepth</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Determines whether a deep or shallow dump is in process.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The depth of the dump as set by <ph id="ph1">`SetDepth`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>SetDepth<ept id="p1">](#cdumpcontext__setdepth)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__hexdump"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::HexDump</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Dumps an array of bytes formatted as hexadecimal numbers.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpszLine<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A string to output at the start of a new line.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pby<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A pointer to a buffer containing the bytes to dump.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The number of bytes to dump.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Maximum number of bytes dumped per line (not the width of the output line).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To dump a single, specific item type as a hexadecimal number, call <bpt id="p1">[</bpt>CDumpContext::DumpAsHex<ept id="p1">](#cdumpcontext__dumpashex)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#15<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__operator__lt__lt_"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::operator <ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;lt;</ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Outputs the specified data to the dump context.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDumpContext`</ph> reference.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Using the return value, you can write multiple insertions on a single line of source code.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The insertion operator is overloaded for <ph id="ph1">`CObject`</ph> pointers as well as for most primitive types.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A pointer to character results in a dump of string contents; a pointer to <ph id="ph1">`void`</ph> results in a hexadecimal dump of the address only.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>LONGLONG<ept id="p1">**</ept> results in a dump of a 64-bit signed integer; A <bpt id="p2">**</bpt>ULONGLONG<ept id="p2">**</ept> results in a dump of a 64-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph> or <ph id="ph2">`IMPLEMENT_SERIAL`</ph> macro in the implementation of your class, then the insertion operator, through <ph id="ph3">`CObject::Dump`</ph>, will print the name of your <ph id="ph4">`CObject`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Otherwise, it will print <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you override the <ph id="ph1">`Dump`</ph> function of the class, then you can provide a more meaningful output of the object's contents instead of a hexadecimal dump.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#17<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="cdumpcontext__setdepth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CDumpContext::SetDepth</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Sets the depth for the dump.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>nNewDepth<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The new depth value.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you are dumping a primitive type or simple <ph id="ph1">`CObject`</ph> that contains no pointers to other objects, then a value of 0 is sufficient.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A value greater than 0 specifies a deep dump where all objects are dumped recursively.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, a deep dump of a collection will dump all elements of the collection.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You may use other specific depth values in your derived classes.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Circular references are not detected in deep dumps and can result in infinite loops.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_Utilities#16<ept id="p2">](../../mfc/codesnippet/cpp/cdumpcontext-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CFile Class<ept id="p1">](../../mfc/reference/cfile-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CObject Class<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>