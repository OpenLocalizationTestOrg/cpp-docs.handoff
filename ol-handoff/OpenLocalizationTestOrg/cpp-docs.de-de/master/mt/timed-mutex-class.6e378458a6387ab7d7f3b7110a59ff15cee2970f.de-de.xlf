<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e40840b76d169b66e5711b3b5cc01abc80ef852b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\timed-mutex-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b787a0115ae9ebc6415182b37af60b6a9de98555</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7c923f415c9441c4e7469b598693dba4599ef21</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>timed_mutex Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a <bpt id="p1">*</bpt>timed mutex type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Objects of this type are used to enforce mutual exclusion through time-limited blocking within a program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::timed_mutex Constructor<ept id="p1">](#timed_mutex__timed_mutex_constructor)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`timed_mutex`</ph> object that's not locked.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::~timed_mutex Destructor<ept id="p1">](#timed_mutex___dtortimed_mutex_destructor)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Releases any resources that are used by the <ph id="ph1">`timed_mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::lock Method<ept id="p1">](#timed_mutex__lock_method)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::try_lock Method<ept id="p1">](#timed_mutex__try_lock_method)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::try_lock_for Method<ept id="p1">](#timed_mutex__try_lock_for_method)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> for a specified time interval.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::try_lock_until Method<ept id="p1">](#timed_mutex__try_lock_until_method)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> until a specified time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>timed_mutex::unlock Method<ept id="p1">](#timed_mutex__unlock_method)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Releases ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> mutex</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__lock_method"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::lock Method</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__timed_mutex_constructor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::timed_mutex Constructor</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`timed_mutex`</ph> object that is not locked.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex___dtortimed_mutex_destructor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::~timed_mutex Destructor</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Releases any resources that are used by the <ph id="ph1">`mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the object is locked when the destructor runs, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__try_lock_method"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::try_lock Method</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method successfully obtains ownership of the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__try_lock_for_method"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::try_lock_for Method</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>chrono::duration<ept id="p1">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method successfully obtains ownership of the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__try_lock_until_method"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::try_lock_until Method</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the method successfully obtains ownership of the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="timed_mutex__unlock_method"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  timed_mutex::unlock Method</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Releases ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If the calling thread does not own the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Header Files Reference<ept id="p1">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt><ph id="ph1">\&lt;</ph>mutex&gt;<ept id="p1">](../standard-library/mutex.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>