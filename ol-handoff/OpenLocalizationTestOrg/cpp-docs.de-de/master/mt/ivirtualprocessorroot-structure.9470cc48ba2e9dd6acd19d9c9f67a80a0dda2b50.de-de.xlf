<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca095a249ee0eb9e1393e232ab7957a7060a2002</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\ivirtualprocessorroot-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1225a22ea4094bfa3ca85d806e82626eab67c0fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd82fde4c970cb2eaa7326b14ca8c87d9a551580</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IVirtualProcessorRoot Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IVirtualProcessorRoot Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An abstraction for a hardware thread on which a thread proxy can execute.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IVirtualProcessorRoot::Activate Method<ept id="p1">](#activate)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Causes the thread proxy associated with the execution context interface <ph id="ph1">`pContext`</ph> to start executing on this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IVirtualProcessorRoot::Deactivate Method<ept id="p1">](#deactivate)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Causes the thread proxy currently executing on this virtual processor root to stop dispatching the execution context.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The thread proxy will resume executing on a call to the <ph id="ph1">`Activate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IVirtualProcessorRoot::EnsureAllTasksVisible Method<ept id="p1">](#ensurealltasksvisible)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Causes data stored in the memory hierarchy of individual processors to become visible to all processors on the system.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It ensures that a full memory fence has been executed on all processors before the method returns.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IVirtualProcessorRoot::GetId Method<ept id="p1">](#getid)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the virtual processor root.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Every virtual processor root has an associated execution resource.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IVirtualProcessorRoot`</ph> interface inherits from the <bpt id="p1">[</bpt>IExecutionResource<ept id="p1">](iexecutionresource-structure.md)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Multiple virtual processor roots may correspond to the same underlying hardware thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The Resource Manager grants virtual processor roots to schedulers in response to requests for resources.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A scheduler can use a virtual processor root to perform work by activating it with an execution context.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IExecutionResource<ept id="p1">](iexecutionresource-structure.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> concrtrm.h</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="activate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IVirtualProcessorRoot::Activate Method</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Causes the thread proxy associated with the execution context interface <ph id="ph1">`pContext`</ph> to start executing on this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An interface to the execution context that will be dispatched on this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Resource Manager will supply a thread proxy if one is not associated with the execution context interface <ph id="ph1">`pContext`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Activate`</ph> method can be used to start executing work on a new virtual processor root returned by the Resource Manager, or to resume the thread proxy on a virtual processor root that has deactivated or is about to deactivate.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>IVirtualProcessorRoot::Deactivate<ept id="p1">](#deactivate)</ept> for more information on deactivation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you are resuming a deactivated virtual processor root, the parameter <ph id="ph1">`pContext`</ph> must be the same as the parameter used to deactivate the virtual processor root.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Once a virtual processor root has been activated for the first time, subsequent pairs of calls to <ph id="ph1">`Deactivate`</ph> and <ph id="ph2">`Activate`</ph> may race with each other.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This means it is acceptable for the Resource Manager to receive a call to <ph id="ph1">`Activate`</ph> before it receives the <ph id="ph2">`Deactivate`</ph> call it was meant for.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you activate a virtual processor root, you signal to the Resource Manager that this virtual processor root is currently busy with work.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If your scheduler cannot find any work to execute on this root, it is expected to invoke the <ph id="ph1">`Deactivate`</ph> method informing the Resource Manager that the virtual processor root is idle.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Resource Manager uses this data to load balance the system.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_argument`</ph> is thrown if the argument <ph id="ph2">`pContext`</ph> has the value <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_operation`</ph> is thrown if the argument <ph id="ph2">`pContext`</ph> does not represent the execution context that was most recently dispatched by this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The act of activating a virtual processor root increases the subscription level of the underlying hardware thread by one.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information on subscription levels, see <bpt id="p1">[</bpt>IExecutionResource::CurrentSubscriptionLevel<ept id="p1">](iexecutionresource-structure.md#currentsubscriptionlevel)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="deactivate"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IVirtualProcessorRoot::Deactivate Method</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Causes the thread proxy currently executing on this virtual processor root to stop dispatching the execution context.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The thread proxy will resume executing on a call to the <ph id="ph1">`Activate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The context which is currently being dispatched by this root.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A boolean value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`true`</ph> indicates that the thread proxy returned from the <ph id="ph2">`Deactivate`</ph> method in response to a call to the <ph id="ph3">`Activate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`false`</ph> indicates that the thread proxy returned from the method in response to a notification event in the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>On a user-mode schedulable (UMS) thread scheduler, this indicates that items have appeared on the scheduler's completion list, and the scheduler is required to handle them.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use this method to temporarily stop executing a virtual processor root when you cannot find any work in your scheduler.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A call to the <ph id="ph1">`Deactivate`</ph> method must originate from within the <ph id="ph2">`Dispatch`</ph> method of the execution context that the virtual processor root was last activated with.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In other words, the thread proxy invoking the <ph id="ph1">`Deactivate`</ph> method must be the one that is currently executing on the virtual processor root.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling the method on a virtual processor root you are not executing on could result in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A deactivated virtual processor root may be woken up with a call to the <ph id="ph1">`Activate`</ph> method, with the same argument that was passed in to the <ph id="ph2">`Deactivate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The scheduler is responsible for ensuring that calls to the <ph id="ph1">`Activate`</ph> and <ph id="ph2">`Deactivate`</ph> methods are paired, but they are not required to be received in a specific order.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The Resource Manager can handle receiving a call to the <ph id="ph1">`Activate`</ph> method before it receives a call to the <ph id="ph2">`Deactivate`</ph> method it was meant for.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a virtual processor root awakens and the return value from the <ph id="ph1">`Deactivate`</ph> method is the value <ph id="ph2">`false`</ph>, the scheduler should query the UMS completion list via the <ph id="ph3">`IUMSCompletionList::GetUnblockNotifications`</ph> method, act on that information, and then subsequently call the <ph id="ph4">`Deactivate`</ph> method again.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This should be repeated until such time as the <ph id="ph1">`Deactivate`</ph> method returns the value <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_argument`</ph> is thrown if the argument <ph id="ph2">`pContext`</ph> has the value <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_operation`</ph> is thrown if the virtual processor root has never been activated, or the argument <ph id="ph2">`pContext`</ph> does not represent the execution context that was most recently dispatched by this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The act of deactivating a virtual processor root decreases the subscription level of the underlying hardware thread by one.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information on subscription levels, see <bpt id="p1">[</bpt>IExecutionResource::CurrentSubscriptionLevel<ept id="p1">](iexecutionresource-structure.md#currentsubscriptionlevel)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ensurealltasksvisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IVirtualProcessorRoot::EnsureAllTasksVisible Method</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Causes data stored in the memory hierarchy of individual processors to become visible to all processors on the system.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It ensures that a full memory fence has been executed on all processors before the method returns.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The context which is currently being dispatched by this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You may find this method useful when you want to synchronize deactivation of a virtual processor root with the addition of new work into the scheduler.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For performance reasons, you may decide to add work items to your scheduler without executing a memory barrier, which means work items added by a thread executing on one processor are not immediately visible to all other processors.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By using this method in conjunction with the <ph id="ph1">`Deactivate`</ph> method you can ensure that your scheduler does not deactivate all its virtual processor roots while work items exist in your scheduler's collections.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A call to the <ph id="ph1">`EnsureAllTasksVisibleThe`</ph> method must originate from within the <ph id="ph2">`Dispatch`</ph> method of the execution context that the virtual processor root was last activated with.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In other words, the thread proxy invoking the <ph id="ph1">`EnsureAllTasksVisible`</ph> method must be the one that is currently executing on the virtual processor root.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Calling the method on a virtual processor root you are not executing on could result in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_argument`</ph> is thrown if the argument <ph id="ph2">`pContext`</ph> has the value <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`invalid_operation`</ph> is thrown if the virtual processor root has never been activated, or the argument <ph id="ph2">`pContext`</ph> does not represent the execution context that was most recently dispatched by this virtual processor root.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="getid"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  IVirtualProcessorRoot::GetId Method</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the virtual processor root.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An integer identifier.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>concurrency Namespace<ept id="p1">](concurrency-namespace.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>