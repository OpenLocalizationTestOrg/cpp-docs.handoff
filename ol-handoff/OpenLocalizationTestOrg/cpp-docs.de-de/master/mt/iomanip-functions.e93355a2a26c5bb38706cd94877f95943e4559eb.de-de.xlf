<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a96c453b4697cdc7d0d75827c6c300501303a56c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\iomanip-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59e1fce910e6964edb09f4e100cc0eda98a8a604</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08bc002ee8492ad5e698179c4a5171c3845583a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>iomanip<ph id="ph2">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>iomanip<ph id="ph2">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_money<ept id="p1">](#iomanip_get_money)</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_time<ept id="p1">](#iomanip_get_time)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>put_money<ept id="p1">](#iomanip_put_money)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>put_time<ept id="p1">](#iomanip_put_time)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>quoted<ept id="p1">](#quoted)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>resetiosflags<ept id="p1">](#resetiosflags)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setbase<ept id="p1">](#setbase)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setfill<ept id="p1">](#setfill)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setiosflags<ept id="p1">](#setiosflags)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setprecision<ept id="p1">](#setprecision)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setw<ept id="p1">](#setw)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iomanip_get_money"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  get_money</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Extracts a monetary value from a stream using the desired format, and returns the value in a parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>_Amount</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The extracted monetary value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>_Intl</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, use international format.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from the stream <ph id="ph1">`str`</ph>, behaves as a <ph id="ph2">`formatted input function`</ph> that calls the member function <ph id="ph3">`get`</ph> for the locale facet <ph id="ph4">`money_get`</ph> associated with <ph id="ph5">`str`</ph>, using <ph id="ph6">`_Intl`</ph> to indicate international format.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If successful, the call stores in <ph id="ph1">`_Amount`</ph> the extracted monetary value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The manipulator then returns <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Money`</ph> must be of type <ph id="ph2">`long double`</ph> or an instantiation of <ph id="ph3">`basic_string`</ph> with the same element and traits parameters as <ph id="ph4">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iomanip_get_time"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  get_time</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Extracts a time value from a stream using a desired format.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the value in a parameter as a time structure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The time in the form of a time structure.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The desired format to use to obtain the time value.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from the stream <ph id="ph1">`str`</ph>, behaves as a <ph id="ph2">`formatted input function`</ph> that calls the member function <ph id="ph3">`get`</ph> for the locale facet <ph id="ph4">`time_get`</ph> associated with <ph id="ph5">`str`</ph>, using <ph id="ph6">`tptr`</ph> to indicate the time structure and <ph id="ph7">`fmt`</ph> to indicate the beginning of a null-terminated format string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If successful, the call stores in the time structure the values associated with any extracted time fields.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The manipulator then returns <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iomanip_put_money"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  put_money</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Inserts a monetary amount using the desired format into a stream.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The monetary amount to insert into the stream.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Set to <ph id="ph1">`true`</ph> if manipulator should use international format, <ph id="ph2">`false`</ph> if it should not.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when inserted into the stream <ph id="ph1">`str`</ph>, behaves as a formatted output function that calls the member function <ph id="ph2">`put`</ph> for the locale facet <ph id="ph3">`money_put`</ph> associated with <ph id="ph4">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If successful, the call inserts <ph id="ph1">`amount`</ph> suitably formatted, using <ph id="ph2">`_Intl`</ph> to indicate international format and <ph id="ph3">`str.fill()`</ph>, as the fill element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The manipulator then returns <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Money`</ph> must be of type <ph id="ph2">`long double`</ph> or an instantiation of <ph id="ph3">`basic_string`</ph> with the same element and traits parameters as <ph id="ph4">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="iomanip_put_time"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  put_time</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Writes a time value from a time structure to a stream by using a specified format.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The time value to write to the stream, provided in a time structure.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The desired format to write the time value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when inserted into the stream <ph id="ph1">`str`</ph>, behaves as a <ph id="ph2">`formatted output function`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The output function calls the member function <ph id="ph1">`put`</ph> for the locale facet <ph id="ph2">`time_put`</ph> associated with <ph id="ph3">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The output function uses <ph id="ph1">`_Tptr`</ph> to indicate the time structure and <ph id="ph2">`_Fmt`</ph> to indicate the beginning of a NUL-terminated format string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If successful, the call inserts literal text from the format string and converted values from the time structure.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The manipulator then returns <ph id="ph1">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="quoted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  quoted</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(New in C++14)<ept id="p1">**</ept> An iostream manipulator that enables convenient round-tripping of strings into and out of streams using the &gt;&gt; and &lt;&lt; operators.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A std::string, char*, string literal or raw string literal, or a wide version of any of these (e.g. std::wstring, wchar_t<ph id="ph1">\*</ph>).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A user-specified character, or wide character, to use as the delimiter for the beginning and end of the string.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A user-specified character, or wide character, to use as the escape character for escape sequences within the string.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using Insertion Operators and Controlling Format<ept id="p1">](../standard-library/using-insertion-operators-and-controlling-format.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This example shows how to use <ph id="ph1">`quoted`</ph> with the default delimiter and escape character using narrow strings.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Wide strings are equally supported.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example shows how to provide custom a delimiter and/or escape character:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="resetiosflags"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  resetiosflags</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Clears the specified flags.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The flags to clear.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph1">`ios_base::`</ph><bpt id="p2">[</bpt>fmtflags<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>, _ <bpt id="p3">*</bpt>Mask<ept id="p3">*</ept>), and then returns <bpt id="p4">**</bpt>str<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id="ph1">`resetiosflags`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setbase"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  setbase</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Set base for integers.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The number base.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`setf`</ph>( <bpt id="p1">**</bpt>mask<ept id="p1">**</ept>, <bpt id="p2">[</bpt>ios_base::basefield<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <bpt id="p3">**</bpt>str<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Here, <bpt id="p1">**</bpt>mask<ept id="p1">**</ept> is determined as follows:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Base<ept id="p1">*</ept> is 8, then <bpt id="p2">**</bpt>mask<ept id="p2">**</ept> is <ph id="ph1">`ios_base::`</ph><bpt id="p3">[</bpt>oct<ept id="p3">](../standard-library/ios-functions.md#oct)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Base<ept id="p1">*</ept> is 10, then mask is <ph id="ph1">`ios_base::`</ph><bpt id="p2">[</bpt>dec<ept id="p2">](../standard-library/ios-functions.md#dec)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Base<ept id="p1">*</ept> is 16, then <bpt id="p2">**</bpt>mask<ept id="p2">**</ept> is <ph id="ph1">`ios_base::`</ph><bpt id="p3">[</bpt>hex<ept id="p3">](../standard-library/ios-functions.md#hex)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Base<ept id="p1">*</ept> is any other value, then mask is <ph id="ph1">`ios_base::`</ph><bpt id="p2">[</bpt>fmtflags<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>(0).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id="ph1">`setbase`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setfill"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  setfill</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Sets the character that will be used to fill spaces in a right-justified display.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The character that will be used to fill spaces in a right-justified display.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The template manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fill<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__fill)</ept>( <ph id="ph1">`Ch`</ph>), and then returns <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The type <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept> must be the same as the element type for the stream <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id="ph1">`setfill`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setiosflags"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  setiosflags</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Sets the specified flags.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The flags to set.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>(_ <bpt id="p2">*</bpt>Mask<ept id="p2">*</ept>), and then returns <bpt id="p3">**</bpt>str<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id="ph1">`setiosflags`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setprecision"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  setprecision</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Sets the precision for floating-point values.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The precision for floating-point values.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>precision<ept id="p1">](../standard-library/ios-base-class.md#ios_base__precision)</ept>( <ph id="ph1">`Prec`</ph>), and then returns <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id="ph1">`setprecision`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="setw"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  setw</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specifies the width of the display field for the next element in the stream.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The width of the display field.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The manipulator returns an object that, when extracted from or inserted into the stream <bpt id="p1">**</bpt>str<ept id="p1">**</ept>, calls <bpt id="p2">**</bpt>str<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept>(_ <bpt id="p2">*</bpt>Wide<ept id="p2">*</ept>), then returns <bpt id="p3">**</bpt>str<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>setw sets the width only for the next element in the stream and must be inserted before each element whose width you want to specify.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>iomanip&gt;<ept id="p1">](../standard-library/iomanip.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>