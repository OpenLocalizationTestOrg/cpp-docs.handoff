<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32b44577c86dcfb2fa251c2328b982bb3cb27995</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\clistbox-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63e657a65fdc8ce13b5f4099d9cea07c9a403bdf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bde0c09b69a58575951eaca4fe137659c1e46ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CListBox Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CListBox Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows list box.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::CListBox<ept id="p1">](#clistbox__clistbox)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::AddString<ept id="p1">](#clistbox__addstring)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a string to a list box.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::CharToItem<ept id="p1">](#clistbox__chartoitem)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Override to provide custom <ph id="ph1">`WM_CHAR`</ph> handling for owner-draw list boxes which don't have strings.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::CompareItem<ept id="p1">](#clistbox__compareitem)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine the position of a new item in a sorted owner-draw list box.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::Create<ept id="p1">](#clistbox__create)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates the Windows list box and attaches it to the <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::DeleteItem<ept id="p1">](#clistbox__deleteitem)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user deletes an item from an owner-draw list box.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::DeleteString<ept id="p1">](#clistbox__deletestring)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Deletes a string from a list box.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::Dir<ept id="p1">](#clistbox__dir)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adds filenames, drives, or both from the current directory to a list box.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::DrawItem<ept id="p1">](#clistbox__drawitem)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-draw list box changes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::FindString<ept id="p1">](#clistbox__findstring)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Searches for a string in a list box.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::FindStringExact<ept id="p1">](#clistbox__findstringexact)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Finds the first list-box string that matches a specified string.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetAnchorIndex<ept id="p1">](#clistbox__getanchorindex)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index of the current anchor item in a list box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetCaretIndex<ept id="p1">](#clistbox__getcaretindex)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Determines the index of the item that has the focus rectangle in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetCount<ept id="p1">](#clistbox__getcount)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the number of strings in a list box.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetCurSel<ept id="p1">](#clistbox__getcursel)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the zero-based index of the currently selected string in a list box.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetHorizontalExtent<ept id="p1">](#clistbox__gethorizontalextent)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the width in pixels that a list box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetItemData<ept id="p1">](#clistbox__getitemdata)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the 32-bit value associated with the list-box item.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetItemDataPtr<ept id="p1">](#clistbox__getitemdataptr)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a list-box item.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetItemHeight<ept id="p1">](#clistbox__getitemheight)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines the height of items in a list box.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetItemRect<ept id="p1">](#clistbox__getitemrect)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns the bounding rectangle of the list-box item as it is currently displayed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetListBoxInfo<ept id="p1">](#clistbox__getlistboxinfo)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items per column.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetLocale<ept id="p1">](#clistbox__getlocale)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retrieves the locale identifier for a list box.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetSel<ept id="p1">](#clistbox__getsel)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the selection state of a list-box item.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetSelCount<ept id="p1">](#clistbox__getselcount)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns the number of strings currently selected in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetSelItems<ept id="p1">](#clistbox__getselitems)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns the indices of the strings currently selected in a list box.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetText<ept id="p1">](#clistbox__gettext)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Copies a list-box item into a buffer.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetTextLen<ept id="p1">](#clistbox__gettextlen)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the length in bytes of a list-box item.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::GetTopIndex<ept id="p1">](#clistbox__gettopindex)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the index of the first visible string in a list box.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::InitStorage<ept id="p1">](#clistbox__initstorage)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Preallocates blocks of memory for list box items and strings.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::InsertString<ept id="p1">](#clistbox__insertstring)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Inserts a string at a specific location in a list box.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::ItemFromPoint<ept id="p1">](#clistbox__itemfrompoint)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the index of the list-box item nearest a point.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::MeasureItem<ept id="p1">](#clistbox__measureitem)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Called by the framework when an owner-draw list box is created to determine list-box dimensions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::ResetContent<ept id="p1">](#clistbox__resetcontent)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Clears all the entries from a list box.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SelectString<ept id="p1">](#clistbox__selectstring)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Searches for and selects a string in a single-selection list box.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SelItemRange<ept id="p1">](#clistbox__selitemrange)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Selects or deselects a range of strings in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetAnchorIndex<ept id="p1">](#clistbox__setanchorindex)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Sets the anchor in a multiple-selection list box to begin an extended selection.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetCaretIndex<ept id="p1">](#clistbox__setcaretindex)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Sets the focus rectangle to the item at the specified index in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetColumnWidth<ept id="p1">](#clistbox__setcolumnwidth)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Sets the column width of a multicolumn list box.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetCurSel<ept id="p1">](#clistbox__setcursel)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Selects a list-box string.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetHorizontalExtent<ept id="p1">](#clistbox__sethorizontalextent)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Sets the width in pixels that a list box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetItemData<ept id="p1">](#clistbox__setitemdata)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit value associated with the list-box item.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetItemDataPtr<ept id="p1">](#clistbox__setitemdataptr)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Sets a pointer to the list-box item.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetItemHeight<ept id="p1">](#clistbox__setitemheight)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Sets the height of items in a list box.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetLocale<ept id="p1">](#clistbox__setlocale)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Sets the locale identifier for a list box.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetSel<ept id="p1">](#clistbox__setsel)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Selects or deselects a list-box item in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetTabStops<ept id="p1">](#clistbox__settabstops)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Sets the tab-stop positions in a list box.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::SetTopIndex<ept id="p1">](#clistbox__settopindex)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Sets the zero-based index of the first visible string in a list box.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CListBox::VKeyToItem<ept id="p1">](#clistbox__vkeytoitem)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Override to provide custom <ph id="ph1">`WM_KEYDOWN`</ph> handling for list boxes with the <bpt id="p1">**</bpt>LBS_WANTKEYBOARDINPUT<ept id="p1">**</ept> style set.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A list box displays a list of items, such as filenames, that the user can view and select.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In a single-selection list box, the user can select only one item.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In a multiple-selection list box, a range of items can be selected.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the user selects an item, it is highlighted and the list box sends a notification message to the parent window.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can create a list box either from a dialog template or directly in your code.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To create it directly, construct the <ph id="ph1">`CListBox`</ph> object, then call the <bpt id="p1">[</bpt>Create<ept id="p1">](#clistbox__create)</ept> member function to create the Windows list-box control and attach it to the <ph id="ph2">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To use a list box in a dialog template, declare a list-box variable in your dialog box class, then use <ph id="ph1">`DDX_Control`</ph> in your dialog box class's <ph id="ph2">`DoDataExchange`</ph> function to connect the member variable to the control.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>(this is done for you automatically when you add a control variable to your dialog box class.)</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Construction can be a one-step process in a class derived from <ph id="ph1">`CListBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Write a constructor for the derived class and call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> from within the constructor.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from <bpt id="p1">[</bpt>CDialog<ept id="p1">](../../mfc/reference/cdialog-class.md)</ept>), add a message-map entry and message-handler member function to the parent class for each message.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Each message-map entry takes the following form:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`id`</ph> specifies the child window ID of the list-box control sending the notification and <ph id="ph2">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The parent's function prototype is as follows:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_DBLCLK<ept id="p1">**</ept> The user double-clicks a string in a list box.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Only a list box that has the <bpt id="p1">[</bpt>LBS_NOTIFY<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style will send this notification message.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_ERRSPACE<ept id="p1">**</ept> The list box cannot allocate enough memory to meet the request.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_KILLFOCUS<ept id="p1">**</ept> The list box is losing the input focus.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_SELCANCEL<ept id="p1">**</ept> The current list-box selection is canceled.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This message is only sent when a list box has the <bpt id="p1">**</bpt>LBS_NOTIFY<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_SELCHANGE<ept id="p1">**</ept> The selection in the list box has changed.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This notification is not sent if the selection is changed by the <bpt id="p1">[</bpt>CListBox::SetCurSel<ept id="p1">](#clistbox__setcursel)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This notification applies only to a list box that has the <bpt id="p1">**</bpt>LBS_NOTIFY<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LBN_SELCHANGE<ept id="p1">**</ept> notification message is sent for a multiple-selection list box whenever the user presses an arrow key, even if the selection does not change.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_LBN_SETFOCUS<ept id="p1">**</ept> The list box is receiving the input focus.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_WM_CHARTOITEM<ept id="p1">**</ept> An owner-draw list box that has no strings receives a <ph id="ph1">`WM_CHAR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_WM_VKEYTOITEM<ept id="p1">**</ept> A list box with the <bpt id="p2">**</bpt>LBS_WANTKEYBOARDINPUT<ept id="p2">**</ept> style receives a <ph id="ph1">`WM_KEYDOWN`</ph> message.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CListBox`</ph> object within a dialog box (through a dialog resource), the <ph id="ph2">`CListBox`</ph> object is automatically destroyed when the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CListBox`</ph> object within a window, you may need to destroy the <ph id="ph2">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CListBox`</ph> object on the stack, it is destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CListBox`</ph> object on the heap by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> function, you must call <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> on the object to destroy it when the user closes the parent window.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If you allocate any memory in the <ph id="ph1">`CListBox`</ph> object, override the <ph id="ph2">`CListBox`</ph> destructor to dispose of the allocation.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CCmdTarget<ept id="p1">](../../mfc/reference/ccmdtarget-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__addstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::AddString</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Adds a string to a list box.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that is to be added.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The zero-based index to the string in the list box.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs; the return value is <bpt id="p2">**</bpt>LB_ERRSPACE<ept id="p2">**</ept> if insufficient space is available to store the new string.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the list box was not created with the <bpt id="p1">[</bpt>LBS_SORT<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, the string is added to the end of the list.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Otherwise, the string is inserted into the list, and the list is sorted.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If the list box was created with the <bpt id="p1">**</bpt>LBS_SORT<ept id="p1">**</ept> style but not the <bpt id="p2">[</bpt>LBS_HASSTRINGS<ept id="p2">](../../mfc/reference/list-box-styles.md)</ept> style, the framework sorts the list by one or more calls to the <ph id="ph1">`CompareItem`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>InsertString<ept id="p1">](#clistbox__insertstring)</ept> to insert a string into a specific location within the list box.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#3<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_1.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__chartoitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::CharToItem</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Called by the framework when the list box's parent window receives a <ph id="ph1">`WM_CHARTOITEM`</ph> message from the list box.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The ANSI code of the character the user typed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The current position of the list-box caret.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Returns – 1 or – 2 for no further action or a nonnegative number to specify an index of a list-box item on which to perform the default action for the keystroke.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The default implementation returns – 1.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WM_CHARTOITEM`</ph> message is sent by the list box when it receives a <ph id="ph2">`WM_CHAR`</ph> message, but only if the list box meets all of these criteria:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Is an owner-draw list box.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Does not have the <bpt id="p1">[</bpt>LBS_HASSTRINGS<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style set.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Has at least one item.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You should never call this function yourself.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Override this function to provide your own custom handling of keyboard messages.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>In your override, you must return a value to tell the framework what action you performed.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A return value of – 1 or – 2 indicates that you handled all aspects of selecting the item and requires no further action by the list box.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Before returning – 1 or – 2, you could set the selection or move the caret or both.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To set the selection, use <bpt id="p1">[</bpt>SetCurSel<ept id="p1">](#clistbox__setcursel)</ept> or <bpt id="p2">[</bpt>SetSel<ept id="p2">](#clistbox__setsel)</ept>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To move the caret, use <bpt id="p1">[</bpt>SetCaretIndex<ept id="p1">](#clistbox__setcaretindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#4<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_2.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__clistbox"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::CListBox</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CListBox`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>First, call the constructor <bpt id="p1">**</bpt>ClistBox<ept id="p1">**</ept> and then call <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>, which initializes the Windows list box and attaches it to the <ph id="ph1">`CListBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#1<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_3.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__compareitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::CompareItem</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine the relative position of a new item in a sorted owner-draw list box.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A long pointer to a <ph id="ph1">`COMPAREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Indicates the relative position of the two items described in the <bpt id="p1">[</bpt>COMPAREITEMSTRUCT<ept id="p1">](../../mfc/reference/compareitemstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It may be any of the following values:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>–1</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Item 1 sorts before item 2.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Item 1 and item 2 sort the same.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Item 1 sorts after item 2.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnCompareItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem)</ept> for a description of the <ph id="ph1">`COMPAREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If you create an owner-draw list box with the <bpt id="p1">**</bpt>LBS_SORT<ept id="p1">**</ept> style, you must override this member function to assist the framework in sorting new items added to the list box.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#5<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_4.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__create"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::Create</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Creates the Windows list box and attaches it to the <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Specifies the style of the list box.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Apply any combination of <bpt id="p1">[</bpt>list-box styles<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> to the box.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Specifies the list-box size and position.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Can be either a <ph id="ph1">`CRect`</ph> object or a <ph id="ph2">`RECT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Specifies the list box's parent window (usually a <ph id="ph1">`CDialog`</ph> object).</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Specifies the list box's control ID.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CListBox`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>First, call the constructor and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which initializes the Windows list box and attaches it to the <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> executes, Windows sends the <bpt id="p2">[</bpt>WM_NCCREATE<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id="p3">[</bpt>WM_CREATE<ept id="p3">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id="p4">[</bpt>WM_NCCALCSIZE<ept id="p4">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id="p5">[</bpt>WM_GETMINMAXINFO<ept id="p5">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the list-box control.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>These messages are handled by default by the <bpt id="p1">[</bpt>OnNcCreate<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id="p2">[</bpt>OnCreate<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id="p3">[</bpt>OnNcCalcSize<ept id="p3">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id="p4">[</bpt>OnGetMinMaxInfo<ept id="p4">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id="ph1">`CWnd`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>To extend the default message handling, derive a class from <ph id="ph1">`CListBox`</ph>, add a message map to the new class, and override the preceding message-handler member functions.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnCreate`</ph>, for example, to perform needed initialization for a new class.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Apply the following <bpt id="p1">[</bpt>window styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept> to a list-box control.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> Always</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Usually</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Rarely</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VSCROLL<ept id="p1">**</ept> To add a vertical scroll bar</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_HSCROLL<ept id="p1">**</ept> To add a horizontal scroll bar</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> To group controls</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> To allow tabbing to this control</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#2<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_5.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__deleteitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::DeleteItem</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user deletes an item from an owner-draw <ph id="ph1">`CListBox`</ph> object or destroys the list box.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>A long pointer to a Windows <bpt id="p1">[</bpt>DELETEITEMSTRUCT<ept id="p1">](../../mfc/reference/deleteitemstruct-structure.md)</ept> structure that contains information about the deleted item.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Override this function to redraw an owner-draw list box as needed.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnDeleteItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem)</ept> for a description of the <ph id="ph1">`DELETEITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#6<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_6.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__deletestring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::DeleteString</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Deletes the item in position <ph id="ph1">`nIndex`</ph> from the list box.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the string to be deleted.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A count of the strings remaining in the list.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if <ph id="ph1">`nIndex`</ph> specifies an index greater than the number of items in the list.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>All items following <ph id="ph1">`nIndex`</ph> now move down one position.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For example, if a list box contains two items, deleting the first item will cause the remaining item to now be in the first position.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`nIndex`</ph>=0 for the item in the first position.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#7<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_7.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__dir"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::Dir</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Adds a list of filenames, drives, or both to a list box.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Can be any combination of the <ph id="ph1">`enum`</ph> values described in <bpt id="p1">**</bpt>CFile::GetStatu<ept id="p1">**</ept><bpt id="p2">[</bpt>s<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__getstatus)</ept>, or any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>0x0000</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>File can be read from or written to.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>0x0001</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>File can be read from but not written to.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>0x0002</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>File is hidden and does not appear in a directory listing.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>0x0004</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>File is a system file.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>0x0010</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The name specified by <ph id="ph1">`lpszWildCard`</ph> specifies a directory.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>0x0020</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>File has been archived.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>0x4000</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Include all drives that match the name specified by <ph id="ph1">`lpszWildCard`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>0x8000</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Exclusive flag.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If the exclusive flag is set, only files of the specified type are listed.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Otherwise, files of the specified type are listed in addition to "normal" files.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Points to a file-specification string.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The string can contain wildcards (for example, *.<ph id="ph1">\*</ph>).</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The zero-based index of the last filename added to the list.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs; the return value is <bpt id="p2">**</bpt>LB_ERRSPACE<ept id="p2">**</ept> if insufficient space is available to store the new strings.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#8<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_8.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__drawitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::DrawItem</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-draw list box changes.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>DRAWITEMSTRUCT<ept id="p1">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>itemAction<ept id="p1">**</ept> and <bpt id="p2">**</bpt>itemState<ept id="p2">**</ept> members of the <ph id="ph1">`DRAWITEMSTRUCT`</ph> structure define the drawing action that is to be performed.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Override this member function to implement drawing for an owner-draw <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id="ph1">`lpDrawItemStruct`</ph> before this member function terminates.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnDrawItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of the <ph id="ph1">`DRAWITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#9<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_9.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__findstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::FindString</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Finds the first string in a list box that contains the specified prefix without changing the list-box selection.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nStartAfter`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nStartAfter`</ph> is –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that contains the prefix to search for.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The search is case independent, so this string may contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The zero-based index of the matching item, or <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if the search was unsuccessful.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>SelectString<ept id="p1">](#clistbox__selectstring)</ept> member function to both find and select a string.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#10<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_10.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__findstringexact"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::FindStringExact</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Finds the first list-box string that matches the string specified in <ph id="ph1">`lpszFind`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nIndexStart`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndexStart`</ph> is –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string to search for.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>This string can contain a complete filename, including the extension.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The search is not case sensitive, so the string can contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The index of the matching item, or <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if the search was unsuccessful.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>If the list box was created with an owner-draw style but without the <bpt id="p1">[</bpt>LBS_HASSTRINGS<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, the <ph id="ph1">`FindStringExact`</ph> member function attempts to match the doubleword value against the value of <ph id="ph2">`lpszFind`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#11<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_11.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getanchorindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetAnchorIndex</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index of the current anchor item in the list box.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The index of the current anchor item, if successful; otherwise <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::SetAnchorIndex<ept id="p1">](#clistbox__setanchorindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getcaretindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetCaretIndex</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Determines the index of the item that has the focus rectangle in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The zero-based index of the item that has the focus rectangle in a list box.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>If the list box is a single-selection list box, the return value is the index of the item that is selected, if any.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The item may or may not be selected.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::SetCaretIndex<ept id="p1">](#clistbox__setcaretindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetCount</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items in a list box.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The number of items in the list box, or <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The returned count is one greater than the index value of the last item (the index is zero-based).</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#12<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_12.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getcursel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetCurSel</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index of the currently selected item, if any, in a single-selection list box.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The zero-based index of the currently selected item if it is a single-selection list box.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`LB_ERR`</ph> if no item is currently selected.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>In a multiple-selection list box, the index of the item that has the focus.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Do not call <ph id="ph1">`GetCurSel`</ph> for a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CListBox::GetSelItems<ept id="p1">](#clistbox__getselitems)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#13<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_13.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__gethorizontalextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Retrieves from the list box the width in pixels by which it can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The scrollable width of the list box, in pixels.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>This is applicable only if the list box has a horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#14<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_14.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getitemdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetItemData</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied doubleword value associated with the specified list-box item.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item in the list box.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The 32-bit value associated with the item, or <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The doubleword value was the <ph id="ph1">`dwItemData`</ph> parameter of a <bpt id="p1">[</bpt>SetItemData<ept id="p1">](#clistbox__setitemdata)</ept> call.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#15<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_15.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getitemdataptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied 32-bit value associated with the specified list-box item as a pointer ( <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item in the list box.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer, or –1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#16<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_16.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getitemheight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetItemHeight</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Determines the height of items in a list box.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item in the list box.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>This parameter is used only if the list box has the <bpt id="p1">**</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">**</ept> style; otherwise, it should be set to 0.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The height, in pixels, of the items in the list box.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If the list box has the <bpt id="p1">[</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, the return value is the height of the item specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If an error occurs, the return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#17<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_17.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getitemrect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetItemRect</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Retrieves the dimensions of the rectangle that bounds a list-box item as it is currently displayed in the list-box window.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Specifies a long pointer to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that receives the list-box client coordinates of the item.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#18<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_18.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getlistboxinfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetListBoxInfo</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items per column.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Number of items per column of the <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>LB_GETLISTBOXINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775208)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getlocale"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetLocale</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Retrieves the locale used by the list box.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The locale identifier (LCID) value for the strings in the list box.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The locale is used, for example, to determine the sort order of the strings in a sorted list box.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::SetLocale<ept id="p1">](#clistbox__setlocale)</ept>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getsel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetSel</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Retrieves the selection state of an item.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>A positive number if the specified item is selected; otherwise, it is 0.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The return value is <ph id="ph1">`LB_ERR`</ph> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>This member function works with both single- and multiple-selection list boxes.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>To retrieve the index of the currently-selected list box item, use <bpt id="p1">[</bpt>CListBox::GetCurSel<ept id="p1">](#clistbox__getcursel)</ept>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#19<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_19.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getselcount"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetSelCount</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Retrieves the total number of selected items in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The count of selected items in a list box.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If the list box is a single-selection list box, the return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::GetSelItems<ept id="p1">](#clistbox__getselitems)</ept>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__getselitems"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetSelItems</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Fills a buffer with an array of integers that specifies the item numbers of selected items in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of selected items whose item numbers are to be placed in the buffer.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a buffer large enough for the number of integers specified by <ph id="ph1">`nMaxItems`</ph>.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The actual number of items placed in the buffer.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If the list box is a single-selection list box, the return value is <ph id="ph1">`LB_ERR`</ph>.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#20<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_20.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__gettext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetText</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Gets a string from a list box.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the string to be retrieved.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Points to the buffer that receives the string.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The buffer must have sufficient space for the string and a terminating null character.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The size of the string can be determined ahead of time by calling the <ph id="ph1">`GetTextLen`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of the string, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> does not specify a valid index, the return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The second form of this member function fills a <ph id="ph1">`CString`</ph> object with the string text.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#21<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_21.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__gettextlen"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetTextLen</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Gets the length of a string in a list-box item.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the string.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The length of the string in characters, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> does not specify a valid index, the return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::GetText<ept id="p1">](#clistbox__gettext)</ept>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__gettopindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::GetTopIndex</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index of the first visible item in a list box.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first visible item in a list box if successful, <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#22<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_22.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__initstorage"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::InitStorage</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Allocates memory for storing list-box items.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Specifies the number of items to add.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Specifies the amount of memory, in bytes, to allocate for item strings.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If successful, the maximum number of items that the list box can store before a memory reallocation is needed, otherwise <bpt id="p1">**</bpt>LB_ERRSPACE<ept id="p1">**</ept>, meaning not enough memory is available.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Call this function before adding a large number of items to a <ph id="ph1">`CListBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>This function helps speed up the initialization of list boxes that have a large number of items (more than 100).</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>It preallocates the specified amount of memory so that subsequent <bpt id="p1">[</bpt>AddString<ept id="p1">](#clistbox__addstring)</ept>, <bpt id="p2">[</bpt>InsertString<ept id="p2">](#clistbox__insertstring)</ept>, and <bpt id="p3">[</bpt>Dir<ept id="p3">](#clistbox__dir)</ept> functions take the shortest possible time.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>You can use estimates for the parameters.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Windows 95/98 only: The <ph id="ph1">`nItems`</ph> parameter is limited to 16-bit values.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>This means list boxes cannot contain more than 32,767 items.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#23<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_23.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__insertstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::InsertString</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Inserts a string into the list box.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the position to insert the string.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>If this parameter is –1, the string is added to the end of the list.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that is to be inserted.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The zero-based index of the position at which the string was inserted.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs; the return value is <bpt id="p2">**</bpt>LB_ERRSPACE<ept id="p2">**</ept> if insufficient space is available to store the new string.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">[</bpt>AddString<ept id="p1">](#clistbox__addstring)</ept> member function, <ph id="ph1">`InsertString`</ph> does not cause a list with the <bpt id="p2">[</bpt>LBS_SORT<ept id="p2">](../../mfc/reference/list-box-styles.md)</ept> style to be sorted.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#24<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_24.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__itemfrompoint"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::ItemFromPoint</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Determines the list-box item nearest the point specified in <ph id="ph1">`pt`</ph>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Point for which to find the nearest item, specified relative to the upper-left corner of the client area of the list box.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Reference to a <ph id="ph1">`BOOL`</ph> variable which will be set to <ph id="ph2">`TRUE`</ph> if <ph id="ph3">`pt`</ph> is outside the client area of the nearest list box item, <ph id="ph4">`FALSE`</ph> if <ph id="ph5">`pt`</ph> is inside the client area of the nearest list box item.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The index of the nearest item to the point specified in <ph id="ph1">`pt`</ph>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>You could use this function to determine which list-box item the mouse cursor moves over.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListBox::SetAnchorIndex<ept id="p1">](#clistbox__setanchorindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__measureitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::MeasureItem</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Called by the framework when a list box with an owner-draw style is created.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>MEASUREITEMSTRUCT<ept id="p1">](../../mfc/reference/measureitemstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Override this member function and fill in the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the list-box dimensions.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>If the list box is created with the <bpt id="p1">[</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, the framework calls this member function for each item in the list box.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Otherwise, this member is called only once.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>For further information about using the <bpt id="p1">[</bpt>LBS_OWNERDRAWFIXED<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style in an owner-draw list box created with the <ph id="ph1">`SubclassDlgItem`</ph> member function of <ph id="ph2">`CWnd`</ph>, see the discussion in <bpt id="p2">[</bpt>Technical Note 14<ept id="p2">](../../mfc/tn014-custom-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnMeasureItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure <bpt id="p2">**</bpt>.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#25<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_25.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__resetcontent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::ResetContent</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Removes all items from a list box.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#26<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_26.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__selectstring"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SelectString</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Searches for a list-box item that matches the specified string, and if a matching item is found, it selects the item.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nStartAfter`</ph>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nStartAfter`</ph> is –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that contains the prefix to search for.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>The search is case independent, so this string may contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>The index of the selected item if the search was successful.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>If the search was unsuccessful, the return value is <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> and the current selection is not changed.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The list box is scrolled, if necessary, to bring the selected item into view.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>This member function cannot be used with a list box that has the <bpt id="p1">[</bpt>LBS_MULTIPLESEL<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>An item is selected only if its initial characters (from the starting point) match the characters in the string specified by <ph id="ph1">`lpszItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`FindString`</ph> member function to find a string without selecting the item.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#27<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_27.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__selitemrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SelItemRange</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Selects multiple consecutive items in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Specifies how to set the selection.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bSelect`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the string is selected and highlighted; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the highlight is removed and the string is no longer selected.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the first item to set.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the last item to set.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Use this member function only with multiple-selection list boxes.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>If you need to select only one item in a multiple-selection list box — that is, if <ph id="ph1">`nFirstItem`</ph> is equal to <ph id="ph2">`nLastItem`</ph> — call the <bpt id="p1">[</bpt>SetSel<ept id="p1">](#clistbox__setsel)</ept> member function instead.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#28<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_28.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setanchorindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetAnchorIndex</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Sets the anchor in a multiple-selection list box to begin an extended selection.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the list-box item that will be the anchor.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#29<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_29.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setcaretindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetCaretIndex</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Sets the focus rectangle to the item at the specified index in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item to receive the focus rectangle in the list box.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bScroll<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>If this value is 0, the item is scrolled until it is fully visible.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>If this value is not 0, the item is scrolled until it is at least partially visible.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If the item is not visible, it is scrolled into view.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#30<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_30.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setcolumnwidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetColumnWidth</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Sets the width in pixels of all columns in a multicolumn list box (created with the <bpt id="p1">[</bpt>LBS_MULTICOLUMN<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style).</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Specifies the width in pixels of all columns.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#31<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_31.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setcursel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetCurSel</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Selects a string and scrolls it into view, if necessary.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the string to be selected.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nSelect`</ph> is –1, the list box is set to have no selection.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LB_ERR`</ph> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>When the new string is selected, the list box removes the highlight from the previously selected string.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Use this member function only with single-selection list boxes.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>To set or remove a selection in a multiple-selection list box, use <bpt id="p1">[</bpt>CListBox::SetSel<ept id="p1">](#clistbox__setsel)</ept>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#32<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_32.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__sethorizontalextent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Sets the width, in pixels, by which a list box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>cxExtent<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Specifies the number of pixels by which the list box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>If the size of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>If the list box is as large or larger than this value, the horizontal scroll bar is hidden.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>To respond to a call to <ph id="ph1">`SetHorizontalExtent`</ph>, the list box must have been defined with the <bpt id="p1">[</bpt>WS_HSCROLL<ept id="p1">](../../mfc/reference/window-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>This member function is not useful for multicolumn list boxes.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>For multicolumn list boxes, call the <ph id="ph1">`SetColumnWidth`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#33<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_33.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setitemdata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetItemData</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Sets a 32-bit value associated with the specified item in a list box.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Specifies the value to be associated with the item.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#34<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_34.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setitemdataptr"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit value associated with the specified item in a list box to be the specified pointer ( <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Specifies the pointer to be associated with the item.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>This pointer remains valid for the life of the list box, even though the item's relative position within the list box might change as items are added or removed.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Hence, the item's index within the box can change, but the pointer remains reliable.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#35<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_35.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setitemheight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetItemHeight</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Sets the height of items in a list box.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item in the list box.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>This parameter is used only if the list box has the <bpt id="p1">**</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">**</ept> style; otherwise, it should be set to 0.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Specifies the height, in pixels, of the item.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if the index or height is invalid.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>If the list box has the <bpt id="p1">[</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, this function sets the height of the item specified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Otherwise, this function sets the height of all items in the list box.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#36<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_36.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setlocale"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetLocale</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Sets the locale identifier for this list box.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The new locale identifier (LCID) value to set for the list box.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The previous locale identifier (LCID) value for this list box.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>SetLocale<ept id="p1">**</ept> is not called, the default locale is obtained from the system.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>This system default locale can be modified by using Control Panel's Regional (or International) application.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#37<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_37.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__setsel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetSel</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Selects a string in a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the string to be set.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>If –1, the selection is added to or removed from all strings, depending on the value of <ph id="ph1">`bSelect`</ph>.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Specifies how to set the selection.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bSelect`</ph> is <ph id="ph2">`TRUE`</ph>, the string is selected and highlighted; if <ph id="ph3">`FALSE`</ph>, the highlight is removed and the string is no longer selected.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>The specified string is selected and highlighted by default.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LB_ERR`</ph> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Use this member function only with multiple-selection list boxes.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>To select an item from a single-selection list box, use <bpt id="p1">[</bpt>CListBox::SetCurSel<ept id="p1">](#clistbox__setcursel)</ept>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#38<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_38.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__settabstops"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetTabStops</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Sets the tab-stop positions in a list box.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Tab stops are set at every <ph id="ph1">`cxEachStop`</ph> dialog units.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">*</bpt>rgTabStops<ept id="p1">*</ept> for a description of a dialog unit.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Specifies the number of tab stops to have in the list box.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Points to the first member of an array of integers containing the tab-stop positions in dialog units.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>A dialog unit is a horizontal or vertical distance.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and one vertical dialog unit is equal to one-eighth of the current dialog base height unit.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The dialog base units are computed based on the height and width of the current system font.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetDialogBaseUnits<ept id="p1">**</ept> Windows function returns the current dialog base units in pixels.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The tab stops must be sorted in increasing order; back tabs are not allowed.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Nonzero if all the tabs were set; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>To set tab stops to the default size of 2 dialog units, call the parameterless version of this member function.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>To set tab stops to a size other than 2, call the version with the <ph id="ph1">`cxEachStop`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>To set tab stops to an array of sizes, use the version with the <ph id="ph1">`rgTabStops`</ph> and <ph id="ph2">`nTabStops`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>A tab stop will be set for each value in <ph id="ph1">`rgTabStops`</ph>, up to the number specified by <ph id="ph2">`nTabStops`</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>To respond to a call to the <ph id="ph1">`SetTabStops`</ph> member function, the list box must have been created with the <bpt id="p1">[</bpt>LBS_USETABSTOPS<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#39<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_39.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__settopindex"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::SetTopIndex</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Ensures that a particular list-box item is visible.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the list-box item.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Zero if successful, or <bpt id="p1">**</bpt>LB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The system scrolls the list box until either the item specified by <ph id="ph1">`nIndex`</ph> appears at the top of the list box or the maximum scroll range has been reached.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#40<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_40.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="clistbox__vkeytoitem"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>  CListBox::VKeyToItem</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Called by the framework when the list box's parent window receives a <ph id="ph1">`WM_VKEYTOITEM`</ph> message from the list box.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>The virtual key code of the key the user pressed.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The current position of the list-box caret.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Returns – 2 for no further action, – 1 for default action, or a nonnegative number to specify an index of a list box item on which to perform the default action for the keystroke.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WM_VKEYTOITEM`</ph> message is sent by the list box when it receives a <ph id="ph2">`WM_KEYDOWN`</ph> message, but only if the list box meets both of the following:</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Has the <bpt id="p1">[</bpt>LBS_WANTKEYBOARDINPUT<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style set.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Has at least one item.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>You should never call this function yourself.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Override this function to provide your own custom handling of keyboard messages.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>You must return a value to tell the framework what action your override performed.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>A return value of – 2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Before returning – 2, you could set the selection or move the caret or both.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>To set the selection, use <bpt id="p1">[</bpt>SetCurSel<ept id="p1">](#clistbox__setcursel)</ept> or <bpt id="p2">[</bpt>SetSel<ept id="p2">](#clistbox__setsel)</ept>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>To move the caret, use <bpt id="p1">[</bpt>SetCaretIndex<ept id="p1">](#clistbox__setcaretindex)</ept>.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>A return value of – 1 indicates that the list box should perform the default action in response to the keystroke.The default implementation returns – 1.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NVC_MFC_CListBox#41<ept id="p2">](../../mfc/codesnippet/cpp/clistbox-class_41.cpp)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MFC Sample CTRLTEST<ept id="p1">](../../visual-cpp-samples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Hierarchy Chart<ept id="p1">](../../mfc/hierarchy-chart.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CWnd Class<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CButton Class<ept id="p1">](../../mfc/reference/cbutton-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CComboBox Class<ept id="p1">](../../mfc/reference/ccombobox-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CEdit Class<ept id="p1">](../../mfc/reference/cedit-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CScrollBar Class<ept id="p1">](../../mfc/reference/cscrollbar-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>CStatic Class<ept id="p1">](../../mfc/reference/cstatic-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>