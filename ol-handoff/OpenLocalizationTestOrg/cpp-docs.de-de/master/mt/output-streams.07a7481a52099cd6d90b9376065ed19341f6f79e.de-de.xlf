<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34a37749690fc0e42ba855640d0936fd8a25842f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\output-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">718f718a20f44e785733efebfb8bb16bed4952a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d85d4ce804cb25958e6eafdbf47f6719ee7ccaa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Output Streams | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Output Streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An output stream object is a destination for bytes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The three most important output stream classes are <ph id="ph1">`ostream`</ph>, <ph id="ph2">`ofstream`</ph>, and <ph id="ph3">`ostringstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ostream`</ph> class, through the derived class <ph id="ph2">`basic_ostream`</ph>, supports the predefined stream objects:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cout`</ph> standard output</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cerr`</ph> standard error with limited buffering</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`clog`</ph> similar to <ph id="ph2">`cerr`</ph> but with full buffering</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Objects are rarely constructed from <ph id="ph1">`ostream`</ph>; predefined objects are generally used.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In some cases, you can reassign predefined objects after program startup.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ostream`</ph> class, which can be configured for buffered or unbuffered operation, is best suited to sequential text-mode output.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All functionality of the base class, <ph id="ph1">`ios`</ph>, is included in <ph id="ph2">`ostream`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you construct an object of class <ph id="ph1">`ostream`</ph>, you must specify a <ph id="ph2">`streambuf`</ph> object to the constructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ofstream`</ph> class supports disk file output.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you need an output-only disk, construct an object of class <ph id="ph1">`ofstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can specify whether <ph id="ph1">`ofstream`</ph> objects accept binary or text-mode data when constructing the <ph id="ph2">`ofstream`</ph> object or when calling the <ph id="ph3">`open`</ph> member function of the object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Many formatting options and member functions apply to <ph id="ph1">`ofstream`</ph> objects, and all functionality of the base classes <ph id="ph2">`ios`</ph> and <ph id="ph3">`ostream`</ph> is included.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you specify a filename in the constructor, that file is automatically opened when the object is constructed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, you can use the <ph id="ph1">`open`</ph> member function after invoking the default constructor.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Like the run-time function <ph id="ph1">`sprintf_s`</ph>, the <ph id="ph2">`ostringstream`</ph> class supports output to in-memory strings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To create a string in memory by using I/O stream formatting, construct an object of class <ph id="ph1">`ostringstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructing Output Stream Objects<ept id="p1">](../standard-library/constructing-output-stream-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Insertion Operators and Controlling Format<ept id="p1">](../standard-library/using-insertion-operators-and-controlling-format.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Output File Stream Member Functions<ept id="p1">](../standard-library/output-file-stream-member-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Effects of Buffering<ept id="p1">](../standard-library/effects-of-buffering.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Output Files<ept id="p1">](../standard-library/binary-output-files.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloading the &lt;&lt; Operator for Your Own Classes<ept id="p1">](../standard-library/overloading-the-output-operator-for-your-own-classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Your Own Manipulators Without Arguments<ept id="p1">](../standard-library/writing-your-own-manipulators-without-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ofstream<ept id="p1">](../standard-library/basic-ofstream-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ostringstream<ept id="p1">](../standard-library/basic-ostringstream-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>iostream Programming<ept id="p1">](../standard-library/iostream-programming.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>