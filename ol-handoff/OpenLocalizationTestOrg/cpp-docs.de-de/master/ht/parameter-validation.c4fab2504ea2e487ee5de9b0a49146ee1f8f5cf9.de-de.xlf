<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c68fec0c4fd2947717b5ed70fa6e69331d06bd5d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\parameter-validation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abffa997032e926dcf4f9d034e1796438ba9c3fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71dee95b1e28d7dae3673437bf8c29e42cd1ac69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parameter Validation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parameter Validation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Most of the security-enhanced CRT functions and many of the preexisting functions validate their parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This could include checking pointers for NULL, checking that integers fall into a valid range, or checking that enumeration values are valid.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When an invalid parameter is found, the invalid parameter handler is executed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Invalid Parameter Handler Routine</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a C Runtime Library function detects an invalid parameter, it captures some information about the error, and then calls a macro that wraps an invalid parameter handler dispatch function, one of <bpt id="p1">[</bpt>_invalid_parameter<ept id="p1">](../c-runtime-library/reference/invalid-parameter-functions.md)</ept>, <bpt id="p2">[</bpt>_invalid_parameter_noinfo<ept id="p2">](../c-runtime-library/reference/invalid-parameter-functions.md)</ept>, or <bpt id="p3">[</bpt>_invalid_parameter_noinfo_noreturn<ept id="p3">](../c-runtime-library/reference/invalid-parameter-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The dispatch function called depends on whether your code is, respectively, a debug build, a retail build, or the error is not considered recoverable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Debug builds, the invalid parameter macro usually raises a failed assertion and a debugger breakpoint before the dispatch function is called.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When the code is executed, the assertion may be reported to the user in a dialog box that has "Abort", "Retry", and "Continue" or similar choices, depending on the operating system and runtime library version.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These options allow the user to immediately terminate the program, to attach a debugger, or to let the existing code continue to run, which calls the dispatch function.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The invalid parameter handler dispatch function in turn calls the currently assigned invalid parameter handler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, the invalid parameter calls <ph id="ph1">`_invoke_watson`</ph> which causes the application to "crash," that is, terminate and generate a mini-dump.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If enabled by the operating system, a dialog box asks the user if they want to load the crash dump to Microsoft for analysis.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This behavior can be changed by using the functions <bpt id="p1">[</bpt>_set_invalid_parameter_handler<ept id="p1">](../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md)</ept> or <bpt id="p2">[</bpt>_set_thread_local_invalid_parameter_handler<ept id="p2">](../c-runtime-library/reference/set-invalid-parameter-handler-set-thread-local-invalid-parameter-handler.md)</ept> to set the invalid parameter handler to your own function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the function you specify does not terminate the application, control is returned to the function that received the invalid parameters.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the CRT, these functions will normally cease function execution, set <ph id="ph1">`errno`</ph> to an error code, and return an error code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In many cases, the <ph id="ph1">`errno`</ph> value and the return value are both <ph id="ph2">`EINVAL`</ph>, indicating an invalid parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In some cases, a more specific error code is returned, such as <ph id="ph1">`EBADF`</ph> for a bad file pointer passed in as a parameter.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`errno`</ph>, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Security Features in the CRT</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CRT Library Features</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>