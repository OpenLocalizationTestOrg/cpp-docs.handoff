<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09cf9e966b334d6766ce058eac7c8f1ed182f74d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\template-based-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d429c47bbfe4433a0fd6a326926cbf55b399c150</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ada6665471c4021bb113c7115338fc03822f36b5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Template-Based Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Template-Based Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains the type-safe template-based collection classes in MFC version 3.0 and later.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using these templates to create type-safe collections is more convenient and helps provide type safety more effectively than using the collection classes not based on templates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>MFC predefines two categories of template-based collections:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Simple array, list, and map classes</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`CList`</ph>,</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Arrays, lists, and maps of typed pointers</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`CTypedPtrList`</ph>,</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The simple collection classes are all derived from class <ph id="ph1">`CObject`</ph>, so they inherit the serialization, dynamic creation, and other properties of <ph id="ph2">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The typed pointer collection classes require you to specify the class you derive from â€” which must be one of the nontemplate pointer collections predefined by MFC, such as <ph id="ph1">`CPtrList`</ph> or <ph id="ph2">`CPtrArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Your new collection class inherits from the specified base class, and the new class's member functions use encapsulated calls to the base class members to enforce type safety.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about C++ templates, see <bpt id="p1">[</bpt>Templates<ept id="p1">](../cpp/templates-cpp.md)</ept> in the <bpt id="p2">*</bpt>C++ Language Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using Simple Array, List, and Map Templates</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To use the simple collection templates, you need to know what kind of data you can store in these collections and what parameters to use in your collection declarations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Simple Array and List Usage</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The simple array and list classes, <bpt id="p1">[</bpt>CArray<ept id="p1">](../mfc/reference/carray-class.md)</ept> and <bpt id="p2">[</bpt>CList<ept id="p2">](../mfc/reference/clist-class.md)</ept>, take two parameters: <bpt id="p3">*</bpt>TYPE<ept id="p3">*</ept> and <ph id="ph1">`ARG_TYPE`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These classes can store any data type, which you specify in the <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept> parameter:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fundamental C++ data types, such as <ph id="ph1">`int`</ph>, <ph id="ph2">`char`</ph>, and <bpt id="p1">**</bpt>float<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>C++ structures and classes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Other types that you define</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For convenience and efficiency, you can use the <ph id="ph1">`ARG_TYPE`</ph> parameter to specify the type of function arguments.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Typically, you specify <ph id="ph1">`ARG_TYPE`</ph> as a reference to the type you named in the <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#1</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first example declares an array collection, <ph id="ph1">`myArray`</ph>, that contains <ph id="ph2">`int`</ph>s.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second example declares a list collection, <ph id="ph1">`myList`</ph>, that stores <ph id="ph2">`CPerson`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Certain member functions of the collection classes take arguments whose type is specified by the <ph id="ph1">`ARG_TYPE`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> member function of class <ph id="ph1">`CArray`</ph> takes an <ph id="ph2">`ARG_TYPE`</ph> argument:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Simple Map Usage</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The simple map class, <bpt id="p1">[</bpt>CMap<ept id="p1">](../mfc/reference/cmap-class.md)</ept>, takes four parameters: <bpt id="p2">*</bpt>KEY<ept id="p2">*</ept>, <ph id="ph1">`ARG_KEY`</ph>, <bpt id="p3">*</bpt>VALUE<ept id="p3">*</ept>, and <ph id="ph2">`ARG_VALUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Like the array and list classes, the map classes can store any data type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Unlike arrays and lists, which index and order the data they store, maps associate keys and values: You access a value stored in a map by specifying the value's associated key.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>KEY<ept id="p1">*</ept> parameter specifies the data type of the keys used to access data stored in the map.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the type of <bpt id="p1">*</bpt>KEY<ept id="p1">*</ept> is a structure or class, the <ph id="ph1">`ARG_KEY`</ph> parameter is typically a reference to the type specified in <bpt id="p2">*</bpt>KEY<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>VALUE<ept id="p1">*</ept> parameter specifies the type of the items stored in the map.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the type of <ph id="ph1">`ARG_VALUE`</ph> is a structure or class, the <ph id="ph2">`ARG_VALUE`</ph> parameter is typically a reference to the type specified in <bpt id="p1">*</bpt>VALUE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#3</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The first example stores <ph id="ph1">`MY_STRUCT`</ph> values, accesses them by <ph id="ph2">`int`</ph> keys, and returns accessed <ph id="ph3">`MY_STRUCT`</ph> items by reference.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second example stores <ph id="ph1">`CPerson`</ph> values, accesses them by <ph id="ph2">`CString`</ph> keys, and returns references to accessed items.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This example might represent a simple address book, in which you look up persons by last name.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">*</bpt>KEY<ept id="p1">*</ept> parameter is of type <ph id="ph1">`CString`</ph> and the <bpt id="p2">*</bpt>KEY_TYPE<ept id="p2">*</ept> parameter is of type <ph id="ph2">`LPCSTR`</ph>, the keys are stored in the map as items of type <ph id="ph3">`CString`</ph> but are referenced in functions such as <ph id="ph4">`SetAt`</ph> through pointers of type <ph id="ph5">`LPCSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#4</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Using Typed-Pointer Collection Templates</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To use the typed-pointer collection templates, you need to know what kinds of data you can store in these collections and what parameters to use in your collection declarations.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Typed-Pointer Array and List Usage</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The typed-pointer array and list classes, <bpt id="p1">[</bpt>CTypedPtrArray<ept id="p1">](../mfc/reference/ctypedptrarray-class.md)</ept> and <bpt id="p2">[</bpt>CTypedPtrList<ept id="p2">](../mfc/reference/ctypedptrlist-class.md)</ept>, take two parameters: <ph id="ph1">`BASE_CLASS`</ph> and <bpt id="p3">*</bpt>TYPE<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These classes can store any data type, which you specify in the <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>They are derived from one of the nontemplate collection classes that stores pointers; you specify this base class in <ph id="ph1">`BASE_CLASS`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For arrays, use either <ph id="ph1">`CObArray`</ph> or <ph id="ph2">`CPtrArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For lists, use either <ph id="ph1">`CObList`</ph> or <ph id="ph2">`CPtrList`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In effect, when you declare a collection based on, say <ph id="ph1">`CObList`</ph>, the new class not only inherits the members of its base class, but it also declares a number of additional type-safe member functions and operators that help provide type safety by encapsulating calls to the base class members.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These encapsulations manage all necessary type conversion.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#5</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The first example declares a typed-pointer array, <ph id="ph1">`myArray`</ph>, derived from <ph id="ph2">`CObArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The array stores and returns pointers to <ph id="ph1">`CPerson`</ph> objects (where <ph id="ph2">`CPerson`</ph> is a class derived from <ph id="ph3">`CObject`</ph>).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can call any <ph id="ph1">`CObArray`</ph> member function, or you can call the new type-safe <ph id="ph2">`GetAt`</ph> and <ph id="ph3">`ElementAt`</ph> functions or use the type-safe <bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second example declares a typed-pointer list, <ph id="ph1">`myList`</ph>, derived from <ph id="ph2">`CPtrList`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The list stores and returns pointers to <ph id="ph1">`MY_STRUCT`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A class based on <ph id="ph1">`CPtrList`</ph> is used for storing pointers to objects not derived from <ph id="ph2">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>has a number of type-safe member functions: <ph id="ph1">`GetHead`</ph>, <ph id="ph2">`GetTail`</ph>, <ph id="ph3">`RemoveHead`</ph>, <ph id="ph4">`RemoveTail`</ph>, <ph id="ph5">`GetNext`</ph>, <ph id="ph6">`GetPrev`</ph>, and <ph id="ph7">`GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Typed-Pointer Map Usage</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The typed-pointer map class, <bpt id="p1">[</bpt>CTypedPtrMap<ept id="p1">](../mfc/reference/ctypedptrmap-class.md)</ept>, takes three parameters: <ph id="ph1">`BASE_CLASS`</ph>, <bpt id="p2">*</bpt>KEY<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>VALUE<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BASE_CLASS`</ph> parameter specifies the class from which to derive the new class: <ph id="ph2">`CMapPtrToWord`</ph>, <ph id="ph3">`CMapPtrToPtr`</ph>, <ph id="ph4">`CMapStringToPtr`</ph>, <ph id="ph5">`CMapWordToPtr`</ph>, <ph id="ph6">`CMapStringToOb`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>KEY<ept id="p1">*</ept> is analogous to <bpt id="p2">*</bpt>KEY<ept id="p2">*</ept> in <ph id="ph1">`CMap`</ph>: It specifies the type of the key used for lookups.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>VALUE<ept id="p1">*</ept> is analogous to <bpt id="p2">*</bpt>VALUE<ept id="p2">*</ept> in <ph id="ph1">`CMap`</ph>: It specifies the type of object stored in the map.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#6</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The first example is a map based on <bpt id="p1">**</bpt>CMapPtrToPt<ept id="p1">**</ept>r â€” it uses <ph id="ph1">`CString`</ph> keys mapped to pointers to <ph id="ph2">`MY_STRUCT`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can look up a stored pointer by calling a type-safe <ph id="ph1">`Lookup`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept> operator to look up a stored pointer and add it if not found.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>And you can iterate the map using the type-safe <ph id="ph1">`GetNextAssoc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can also call other member functions of class <ph id="ph1">`CMapPtrToPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The second example is a map based on <bpt id="p1">**</bpt>CMapStringToO<ept id="p1">**</ept>b â€” it uses string keys mapped to stored pointers to <ph id="ph1">`CMyObject`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can use the same type-safe members described in the previous paragraph, or you can call members of class <ph id="ph1">`CMapStringToOb`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you specify a <bpt id="p1">**</bpt>class<ept id="p1">**</ept> or <ph id="ph1">`struct`</ph> type for the <bpt id="p2">*</bpt>VALUE<ept id="p2">*</ept> parameter, rather than a pointer or reference to the type, the class or structure must have a copy constructor.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to Make a Type-Safe Collection<ept id="p1">](../mfc/how-to-make-a-type-safe-collection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Collections</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>