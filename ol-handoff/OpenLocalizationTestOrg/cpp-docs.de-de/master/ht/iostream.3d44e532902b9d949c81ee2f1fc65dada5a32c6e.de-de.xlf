<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0dfbf4aabab9e06ba1d04dbdd77eaba96e32635</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\iostream.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">050ace091b6dc3cf28db01e790e7e530c3f5933d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f34b0f9c3b0cfef4c3586decace6b49bb3327003</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>iostream<ph id="ph1">&amp;gt;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>iostream</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares objects that control reading from and writing to the standard streams.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is often the only header you need to include to perform input and output from a C++ program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The objects fall into two groups:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>cin<ept id="p1">](#cin)</ept>, <bpt id="p2">[</bpt>cout<ept id="p2">](#cout)</ept>, <bpt id="p3">[</bpt>cerr<ept id="p3">](#cerr)</ept>, and <bpt id="p4">[</bpt>clog<ept id="p4">](#clog)</ept> are byte oriented, performing conventional byte-at-a-time transfers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>wcin<ept id="p1">](#wcin)</ept>, <bpt id="p2">[</bpt>wcout<ept id="p2">](#wcout)</ept>, <bpt id="p3">[</bpt>wcerr<ept id="p3">](#wcerr)</ept>, and <bpt id="p4">[</bpt>wclog<ept id="p4">](#wclog)</ept> are wide oriented, translating to and from the wide characters that the program manipulates internally.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Once you perform certain operations on a stream, such as the standard input, you cannot perform operations of a different orientation on the same stream.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, a program cannot operate interchangeably on both <bpt id="p1">[</bpt>cin<ept id="p1">](#cin)</ept> and <bpt id="p2">[</bpt>wcin<ept id="p2">](#wcin)</ept>, for example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All the objects declared in this header share a peculiar property â€” you can assume they are constructed before any static objects you define, in a translation unit that includes <ph id="ph1">\&lt;</ph>iostream&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Equally, you can assume that these objects are not destroyed before the destructors for any such static objects you define.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(The output streams are, however, flushed during program termination.) Therefore, you can safely read from or write to the standard streams before program startup and after program termination.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This guarantee is not universal, however.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A static constructor may call a function in another translation unit.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The called function cannot assume that the objects declared in this header have been constructed, given the uncertain order in which translation units participate in static construction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To use these objects in such a context, you must first construct an object of class <bpt id="p1">[</bpt>ios_base::Init<ept id="p1">](../standard-library/ios-base-class.md#ios_base__init)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Global Stream Objects</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>cerr</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`cerr`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>cin</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`cin`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>clog</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`clog`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>cout</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`cout`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>wcerr</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcerr`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>wcin</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcin`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>wclog</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wclog`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>wcout</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcout`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>cerr</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">`cerr`</ph> controls output to a stream buffer associated with the object <ph id="ph2">`stderr`</ph>, declared in <ph id="ph3">\&lt;</ph>cstdio&gt;.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>ostream<ept id="p1">](../standard-library/ostream-typedefs.md#ostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The object controls unbuffered insertions to the standard error output as a byte stream.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Once the object is constructed, the expression <ph id="ph1">`cerr.`</ph><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept> <ph id="ph2">`&amp;`</ph> <bpt id="p2">[</bpt>unitbuf<ept id="p2">](../standard-library/ios-functions.md#unitbuf)</ept> is nonzero, and <ph id="ph3">`cerr.tie() == &amp;cout`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>cin</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`cin`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>istream<ept id="p1">](../standard-library/istream-typedefs.md#istream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The object controls extractions from the standard input as a byte stream.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once the object is constructed, the call <ph id="ph1">`cin.`</ph><bpt id="p1">[</bpt>tie<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept> returns <ph id="ph2">`&amp;`</ph><bpt id="p2">[</bpt>cout<ept id="p2">](#cout)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`cin`</ph> sets the fail bit on the stream when it encounters non-numeric characters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The program clears the fail bit and strips the invalid character from the stream to proceed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>clog</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`clog`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>ostream<ept id="p1">](../standard-library/ostream-typedefs.md#ostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The object controls buffered insertions to the standard error output as a byte stream.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`clog`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>cout</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`cout`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>ostream<ept id="p1">](../standard-library/ostream-typedefs.md#ostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The object controls insertions to the standard output as a byte stream.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`cout`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>wcerr</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcerr`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>wostream<ept id="p1">](../standard-library/ostream-typedefs.md#wostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The object controls unbuffered insertions to the standard error output as a wide stream.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Once the object is constructed, the expression <ph id="ph1">`wcerr.`</ph><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept> <ph id="ph2">`&amp;`</ph> <bpt id="p2">[</bpt>unitbuf<ept id="p2">](../standard-library/ios-functions.md#unitbuf)</ept> is nonzero.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`wcerr`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>wcin</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcin`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>wistream<ept id="p1">](../standard-library/istream-typedefs.md#wistream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object controls extractions from the standard input as a wide stream.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Once the object is constructed, the call <ph id="ph1">`wcin.`</ph><bpt id="p1">[</bpt>tie<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept> returns <ph id="ph2">`&amp;`</ph><bpt id="p2">[</bpt>wcout<ept id="p2">](#wcout)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`wcin`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>wclog</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wclog`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>wostream<ept id="p1">](../standard-library/ostream-typedefs.md#wostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The object controls buffered insertions to the standard error output as a wide stream.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`wclog`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>wcout</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">`wcout`</ph> global stream.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>wostream<ept id="p1">](../standard-library/ostream-typedefs.md#wostream)</ept> object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The object controls insertions to the standard output as a wide stream.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>cerr<ept id="p1">](#cerr)</ept> for an example of using <ph id="ph1">`wcout`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>instances in a <ph id="ph1">`wcout`</ph> statement must be cast to <ph id="ph2">`const wchar_t*`</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Basic CString Operations<ept id="p1">](../atl-mfc-shared/basic-cstring-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>