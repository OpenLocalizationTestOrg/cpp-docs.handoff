<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">306fe7fc928afc9fc39681e76dab842dae05b8d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\format-specification-syntax-printf-and-wprintf-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8531ad84873d228e45d8d563ee71b711035f3a38</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eaa874d691810c389bba2a4aafb0eb5a5d727ce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Format Specification Syntax: printf and wprintf Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Format Specification Syntax: printf and wprintf Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes the syntax for format string arguments to <ph id="ph1">`printf`</ph>, <ph id="ph2">`wprintf`</ph>, and related functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions are available; for more information, see <bpt id="p1">[</bpt>Security Features in the CRT<ept id="p1">](../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about the individual functions, see the documentation for those specific functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a listing of these functions, see <bpt id="p1">[</bpt>Stream I/O<ept id="p1">](../c-runtime-library/stream-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A format specification, which consists of optional and required fields, has the following form:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>flags<ept id="p1">](../c-runtime-library/flag-directives.md)</ept>] [<bpt id="p2">[</bpt>width<ept id="p2">](../c-runtime-library/printf-width-specification.md)</ept>] [<bpt id="p3">**</bpt>.<ept id="p3">**</ept><bpt id="p4">[</bpt>precision<ept id="p4">](../c-runtime-library/precision-specification.md)</ept>] [{<ph id="ph1">`h`</ph> &amp;#124; <ph id="ph2">`l`</ph> &amp;#124; <ph id="ph3">`ll`</ph> &amp;#124; <ph id="ph4">`w`</ph> &amp;#124; <ph id="ph5">`I`</ph> &amp;#124; <ph id="ph6">`I32`</ph> &amp;#124; <ph id="ph7">`I64`</ph>}] <bpt id="p5">[</bpt>type<ept id="p5">](../c-runtime-library/printf-type-field-characters.md)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each field of the format specification is a character or a number that signifies a particular format option or conversion specifier.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The required <ph id="ph1">`type`</ph> character specifies the kind of conversion to be applied to an argument.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The optional <ph id="ph1">`flags`</ph>, <ph id="ph2">`width`</ph>, and <ph id="ph3">`precision`</ph> fields control additional format aspects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A basic format specification contains only the percent sign and a <ph id="ph1">`type`</ph> characterâ€”for example, <ph id="ph2">`%s`</ph>, which specifies a string conversion.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the secure versions of the functions, if a percent sign is followed by a character that has no meaning as a format field, the invalid parameter handler is invoked.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the non-secure versions, the character is copied to the output unchanged.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To print a percent-sign character, use <ph id="ph1">`%%`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The fields of the format specification control the following aspects of argument conversion and formatting:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Required conversion specifier character that determines whether the associated <ph id="ph1">`argument`</ph> is interpreted as a character, a string, an integer, or a floating-point number.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>printf Type Field Characters<ept id="p1">](../c-runtime-library/printf-type-field-characters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Optional character or characters that control output justification and output of signs, blanks, leading zeros, decimal points, and octal and hexadecimal prefixes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Flag Directives<ept id="p1">](../c-runtime-library/flag-directives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>More than one flag can appear in a format specification, and flags can appear in any order.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Optional decimal number that specifies the minimum number of characters that are output.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>printf Width Specification<ept id="p1">](../c-runtime-library/printf-width-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional decimal number that specifies the maximum number of characters that are printed for strings, the number of significant digits or the number of digits after the decimal-point character for floating-point values, or the minimum number of digits that are printed for integer values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see "How Precision Values Affect Type" in <bpt id="p1">[</bpt>Precision Specification<ept id="p1">](../c-runtime-library/precision-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&amp;#124; <ph id="ph1">`l`</ph> &amp;#124; <ph id="ph2">`ll`</ph> &amp;#124; <ph id="ph3">`w`</ph> &amp;#124; <ph id="ph4">`I`</ph> &amp;#124; <ph id="ph5">`I32`</ph> &amp;#124;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optional prefixes to <ph id="ph1">`type`</ph> that specify the size of the corresponding argument.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see"Size Prefixes" in <bpt id="p1">[</bpt>Size Specification<ept id="p1">](../c-runtime-library/size-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Ensure that format specification strings are not user-defined.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named <ph id="ph1">`name`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To print <ph id="ph1">`name`</ph>, do not do this:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instead, do this:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>printf_s, _printf_s_l, wprintf_s, _wprintf_s_l</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>printf_p Positional Parameters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Flag Directives</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>printf Width Specification</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Precision Specification</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Size Specification</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>printf Type Field Characters</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>