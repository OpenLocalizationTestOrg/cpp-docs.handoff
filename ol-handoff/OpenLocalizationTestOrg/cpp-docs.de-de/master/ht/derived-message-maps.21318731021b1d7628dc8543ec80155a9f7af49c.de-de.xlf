<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e114b99c2cfd49c180b20cb25cd04d50b7f53e2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\derived-message-maps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3795f6a3c9e03481d07d14e4368d421c4606d4e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e08ed49ed283e0eda962fa404511ce67b6d9c15c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Derived Message Maps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Derived Message Maps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>During message handling, checking a class's own message map is not the end of the message-map story.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What happens if class <ph id="ph1">`CMyView`</ph> (derived from <ph id="ph2">`CView`</ph>) has no matching entry for a message</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Keep in mind that <ph id="ph1">`CView`</ph>, the base class of <ph id="ph2">`CMyView`</ph>, is derived in turn from <ph id="ph3">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Thus <ph id="ph1">`CMyView`</ph> <bpt id="p1">*</bpt>is<ept id="p1">*</ept> a <ph id="ph2">`CView`</ph> and <bpt id="p2">*</bpt>is<ept id="p2">*</ept> a <ph id="ph3">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each of those classes has its own message map.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The figure "A View Hierarchy" below shows the hierarchical relationship of the classes, but keep in mind that a <ph id="ph1">`CMyView`</ph> object is a single object that has the characteristics of all three classes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Hierarchy of a view</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A View Hierarchy</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>So if a message can't be matched in class <ph id="ph1">`CMyView`</ph>'s message map, the framework also searches the message map of its immediate base class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BEGIN_MESSAGE_MAP`</ph> macro at the start of the message map specifies two class names as its arguments:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>NVC_MFCMessageHandling#2</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first argument names the class to which the message map belongs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The second argument provides a connection with the immediate base class — <ph id="ph1">`CView`</ph> here — so the framework can search its message map, too.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The message handlers provided in a base class are thus inherited by the derived class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is very similar to normal virtual member functions without needing to make all handler member functions virtual.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If no handler is found in any of the base-class message maps, default processing of the message is performed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the message is a command, the framework routes it to the next command target.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If it is a standard Windows message, the message is passed to the appropriate default window procedure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To speed message-map matching, the framework caches recent matches on the likelihood that it will receive the same message again.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One consequence of this is that the framework processes unhandled messages quite efficiently.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Message maps are also more space-efficient than implementations that use virtual functions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How the Framework Searches Message Maps</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>