<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb114814c74682b176ec2482a5406ff78a7e6fa6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\window-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07f73c1af2e13d3a7b5508176165a2ab0c0c5a1f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2fa072de367603e89083115694f4306febf0838</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Window Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Window Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MFC supplies class <bpt id="p1">[</bpt>CWnd<ept id="p1">](../mfc/reference/cwnd-class.md)</ept> to encapsulate the <ph id="ph1">`HWND`</ph> handle of a window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object is a C++ window object, distinct from the <ph id="ph2">`HWND`</ph> that represents a Windows window but containing it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CWnd`</ph> to derive your own child window classes, or use one of the many MFC classes derived from <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CWnd`</ph> is the base class for all windows, including frame windows, dialog boxes, child windows, controls, and control bars such as toolbars.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A good understanding of <bpt id="p1">[</bpt>the relationship between a C++ window object and an HWND<ept id="p1">](../mfc/relationship-between-a-cpp-window-object-and-an-hwnd.md)</ept> is crucial for effective programming with MFC.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>MFC provides some default functionality and management of windows, but you can derive your own class from <ph id="ph1">`CWnd`</ph> and use its member functions to customize the provided functionality.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can create child windows by constructing a <ph id="ph1">`CWnd`</ph> object and calling its <bpt id="p1">[</bpt>Create<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__create)</ept> member function, then customize the child windows using <ph id="ph2">`CWnd`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can embed objects derived from <bpt id="p1">[</bpt>CView<ept id="p1">](../mfc/reference/cview-class.md)</ept>, such as form views or tree views, in a frame window.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>And you can support multiple views of your documents via splitter panes, supplied by class <bpt id="p1">[</bpt>CSplitterWnd<ept id="p1">](../mfc/reference/csplitterwnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each object derived from class <ph id="ph1">`CWnd`</ph> contains a message map, through which you can map Windows messages or command IDs to your own handlers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The general literature on programming for Windows is a good resource for learning how to use the <ph id="ph1">`CWnd`</ph> member functions, which encapsulate the <ph id="ph2">`HWND`</ph> APIs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Functions for Operating On a CWnd</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>and its <bpt id="p1">[</bpt>derived window classes<ept id="p1">](../mfc/derived-window-classes.md)</ept> provide constructors, destructors, and member functions to initialize the object, create the underlying Windows structures, and access the encapsulated <ph id="ph1">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>also provides member functions that encapsulate Windows APIs for sending messages, accessing the window's state, converting coordinates, updating, scrolling, accessing the Clipboard, and many other tasks.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Most Windows window-management APIs that take an <ph id="ph1">`HWND`</ph> argument are encapsulated as member functions of <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The names of the functions and their parameters are preserved in the <ph id="ph1">`CWnd`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For details about the Windows APIs encapsulated by <ph id="ph1">`CWnd`</ph>, see class <bpt id="p1">[</bpt>CWnd<ept id="p1">](../mfc/reference/cwnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CWnd and Windows Messages</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One of the primary purposes of <ph id="ph1">`CWnd`</ph> is to provide an interface for handling Windows messages, such as <ph id="ph2">`WM_PAINT`</ph> or <ph id="ph3">`WM_MOUSEMOVE`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Many of the member functions of <ph id="ph1">`CWnd`</ph> are handlers for standard messages â€” those beginning with the identifier <bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> and the prefix "On," such as <ph id="ph2">`OnPaint`</ph> and <bpt id="p2">**</bpt>OnMouseMove<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Message Handling and Mapping<ept id="p1">](../mfc/message-handling-and-mapping.md)</ept> covers messages and message handling in detail.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The information there applies equally to the framework's windows and those that you create yourself for special purposes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The relationship between a C++ window object and an HWND</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Derived window classes</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creating windows</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Destroying window objects</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Detaching a CWnd from Its HWND</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Working with window objects</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Device contexts<ept id="p1">](../mfc/device-contexts.md)</ept>: objects that make Windows drawing device independent</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Graphic objects<ept id="p1">](../mfc/graphic-objects.md)</ept>: pens, brushes, fonts, bitmaps, palettes, regions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Windows</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>