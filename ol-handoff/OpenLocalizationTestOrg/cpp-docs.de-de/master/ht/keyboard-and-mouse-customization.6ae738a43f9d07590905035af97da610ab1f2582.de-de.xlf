<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d06ca63c703def605d28876ab1a5c6dc923da207</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\keyboard-and-mouse-customization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03951819bbaa30478a3b7a09b4aa3b5753a9d588</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ed564935b600cf4326f60fbbc873d451292d33f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Keyboard and Mouse Customization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Keyboard and Mouse Customization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MFC allows the user of your application to customize how it handles keyboard and mouse input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The user can customize keyboard input by assigning keyboard shortcuts to commands.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The user can also customize the mouse input by selecting the command that should be executed when the user double-clicks inside specific windows of the application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains how to customize the input for your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box, the user can change the custom controls for the mouse and the keyboard.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To display this dialog box, the user points to <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu and then clicks <bpt id="p3">**</bpt>Toolbars and Docking<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the dialog box, the user clicks either the <bpt id="p1">**</bpt>Keyboard<ept id="p1">**</ept> tab or the <bpt id="p2">**</bpt>Mouse<ept id="p2">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Keyboard Customization</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following illustration shows the <bpt id="p1">**</bpt>Keyboard<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Customization<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Keyboard tab in the Customize dialog box</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Keyboard Customization Tab</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The user interacts with the keyboard tab to assign one or more keyboard shortcuts to a command.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The available commands are listed on the left side of the tab.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The user can select any available command from the menu.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Only menu commands can be associated with a keyboard shortcut.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After the user enters a new shortcut, the <bpt id="p1">**</bpt>Assign<ept id="p1">**</ept> button becomes enabled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the user clicks this button, the application associates the selected command with that shortcut.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All of the currently assigned keyboard shortcuts are listed in the list box in the right column.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The user can also select individual shortcuts and remove them, or reset all the mappings for the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want to support this customization in your application, you must create a <bpt id="p1">[</bpt>CKeyboardManager<ept id="p1">](../mfc/reference/ckeyboardmanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">`CKeyboardManager`</ph> object, call the function <bpt id="p1">[</bpt>CWinAppEx::InitKeyboardManager<ept id="p1">](../mfc/reference/cwinappex-class.md#cwinappex__initkeyboardmanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This method creates and initializes a keyboard manager.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you create a keyboard manager manually, you still must call <ph id="ph1">`CWinAppEx::InitKeyboardManager`</ph> to initialize it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you use the Wizard to create your application, the Wizard will initialize the keyboard manager.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After your application initializes the keyboard manager, the framework adds a <bpt id="p1">**</bpt>Keyboard<ept id="p1">**</ept> tab to the <bpt id="p2">**</bpt>Customization<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Mouse Customization</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following illustration shows the <bpt id="p1">**</bpt>Mouse<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Customization<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Mouse tab in the Customize dialog box</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Mouse Customization Tab</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The user interacts with this tab to assign a menu command to the mouse double-click action.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The user selects a view from the left side of the window and then uses the controls on the right side to associate a command with the double-click action.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After the user clicks <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>, the application executes the associated command whenever the user double-clicks anywhere in the view.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By default, mouse customization is not enabled when you create an application by using the Wizard.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To enable mouse customization</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initialize a <bpt id="p1">[</bpt>CMouseManager<ept id="p1">](../mfc/reference/cmousemanager-class.md)</ept> object by calling <bpt id="p2">[</bpt>CWinAppEx::InitMouseManager<ept id="p2">](../mfc/reference/cwinappex-class.md#cwinappex__initmousemanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Obtain a pointer to the mouse manager by using <bpt id="p1">[</bpt>CWinAppEx::GetMouseManager<ept id="p1">](../mfc/reference/cwinappex-class.md#cwinappex__getmousemanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add views to the mouse manager by using the <bpt id="p1">[</bpt>CMouseManager::AddView<ept id="p1">](../mfc/reference/cmousemanager-class.md#cmousemanager__addview)</ept> method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Do this for every view you want to add to the mouse manager.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After your application initializes the mouse manager, the framework adds the <bpt id="p1">**</bpt>Mouse<ept id="p1">**</ept> tab to the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you do not add any views, accessing the tab will cause an unhandled exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After you have created a list of views, the <bpt id="p1">**</bpt>Mouse<ept id="p1">**</ept> tab is available to the user.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When you add a new view to the mouse manager, you give it a unique ID.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to support mouse customization for a window, you must process the <ph id="ph1">`WM_LBUTTONDBLCLICK`</ph> message and call the <bpt id="p1">[</bpt>CWinAppEx::OnViewDoubleClick<ept id="p1">](../mfc/reference/cwinappex-class.md#cwinappex__onviewdoubleclick)</ept> function.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When you call this function, one of the parameters is the ID for that window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the programmer to keep track of the ID numbers and the objects associated with them.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Security Concerns</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As described in <bpt id="p1">[</bpt>User-defined Tools<ept id="p1">](../mfc/user-defined-tools.md)</ept>, the user can associate a user-defined tool ID with the double-click event.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the user double-clicks a view, the application looks for a user tool that matches the associated ID.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the application finds a matching tool, it executes the tool.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the application cannot find a matching tool, it sends a WM_COMMAND message with the ID to the view that was double-clicked.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The customized settings are stored in the registry.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By editing the registry, an attacker can replace a valid user tool ID with an arbitrary command.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the user double-clicks a view, the view processes the command that the attacker planted.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This could cause unexpected and potentially dangerous behavior.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In addition, this kind of attack can bypass user interface safeguards.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, suppose an application has printing disabled.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>That is, in its user interface, the <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> menu and button are unavailable.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Normally this prevents the application from printing.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>But if an attacker edited the registry, a user could now could send the print command directly by double-clicking the view, bypassing the user interface elements that are unavailable.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To guard against this kind of attack, add code to your application command handler to verify that a command is valid before it is executed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Do not depend on the user interface to prevent a command from being sent to the application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Customization for MFC</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CKeyboardManager Class</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMouseManager Class</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Security Implications of Customization</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>