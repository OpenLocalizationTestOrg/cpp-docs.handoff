<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cde54e382bb04b82739239bd0f07142c5b3321</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-ostream-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f7a66a33aa46ac964f22e8456d8ae03ca586c2e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">059ff5544c28a62547b7bf4ae6c7cbbbaed75af5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_ostream Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_ostream Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This template class describes an object that controls insertion of elements and encoded objects into a stream buffer with elements of type <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, also known as <bpt id="p2">[</bpt>char_type<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__char_type)</ept>, whose character traits are determined by the class <bpt id="p3">**</bpt>Tr<ept id="p3">**</ept>, also known as <bpt id="p4">[</bpt>traits_type<ept id="p4">](../standard-library/basic-ios-class.md#basic_ios__traits_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`char_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The character <ph id="ph1">`traits_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most of the member functions that overload <bpt id="p1">[</bpt>operator&lt;&lt;<ept id="p1">](#basic_ostream__operator_lt__lt_)</ept> are formatted output functions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They follow the pattern:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Two other member functions are unformatted output functions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They follow the pattern:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both groups of functions call <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept><bpt id="p2">**</bpt>(badbit)<ept id="p2">**</ept> if they encounter a failure while inserting elements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An object of class basic_istream<ph id="ph1">\&lt;</ph> <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Tr<ept id="p2">**</ept>&gt; stores only a virtual public base object of class <bpt id="p3">[</bpt>basic_ios<ept id="p3">](../standard-library/basic-ios-class.md)</ept><bpt id="p4">**</bpt><ph id="ph2">\&lt;</ph>Elem<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Tr&gt;<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>basic_ofstream Class<ept id="p1">](../standard-library/basic-ofstream-class.md)</ept> to learn more about output streams.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>basic_ostream</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>flush</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Flushes the buffer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>put</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Puts a character in a stream.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>seekp</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Resets position in output stream.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>sentry</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The nested class describes an object whose declaration structures the formatted output functions and the unformatted output functions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Exchanges the values of this <ph id="ph1">`basic_ostream`</ph> object for those of the provided <ph id="ph2">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>tellp</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Reports position in output stream.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>write</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Puts characters in a stream.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Assigns the value of the provided <ph id="ph1">`basic_ostream`</ph> object parameter to this object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>operator&lt;&lt;</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Writes to the stream.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>ostream&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>basic_ostream::basic_ostream</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An object of type <bpt id="p1">[</bpt>basic_streambuf<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>if this is a standard stream; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An rvalue reference to an object of type <ph id="ph1">`basic_ostream`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the base class by calling <bpt id="p1">[</bpt>init<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__init)</ept>(<ph id="ph1">` strbuf`</ph>).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the base class by calling <bpt id="p1">[</bpt>basic_ios::move<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__move)</ept><ph id="ph1">`(`` right``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>basic_ofstream::basic_ofstream<ept id="p1">](../standard-library/basic-ofstream-class.md#basic_ofstream__basic_ofstream)</ept> to learn more about output streams.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>basic_ostream::flush</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Flushes the buffer.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A reference to the basic_ostream object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>rdbuf<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept> is not a null pointer, the function calls <bpt id="p2">**</bpt>rdbuf-&gt;<ept id="p2">**</ept><bpt id="p3">[</bpt>pubsync<ept id="p3">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubsync)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If that returns -1, the function calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>(<bpt id="p2">**</bpt>badbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>basic_ostream::operator</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Writes to the stream.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A function pointer.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>stream_buf<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An element to write to the stream.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A reference to the basic_ostream object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;ostream&gt;`</ph> header also defines several global insertion operators.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>operator&lt;&lt; (<ph id="ph1">\&lt;</ph>ostream&gt;)<ept id="p1">](../standard-library/ostream-operators.md#operator_lt__lt_)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first member function ensures that an expression of the form <bpt id="p1">**</bpt>ostr &lt;&lt; endl<ept id="p1">**</ept> calls <bpt id="p2">[</bpt>endl<ept id="p2">](../standard-library/ostream-functions.md#endl)</ept><bpt id="p3">**</bpt>(ostr)<ept id="p3">**</ept>, and then returns <bpt id="p4">**</bpt><ph id="ph1">\*</ph>this<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The second and third functions ensure that other manipulators, such as <bpt id="p1">[</bpt>hex<ept id="p1">](../standard-library/ios-functions.md#hex)</ept>, behave similarly.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The remaining functions are all formatted output functions.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>extracts elements from <ph id="ph1">` strbuf`</ph>, if <ph id="ph2">` strbuf`</ph> is not a null pointer, and inserts them.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Extraction stops on end of file, or if an extraction throws an exception (which is rethrown).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It also stops, without extracting the element in question, if an insertion fails.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the function inserts no elements, or if an extraction throws an exception, the function calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>(<bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In any case, the function returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The function</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>converts _<ph id="ph1">`Val`</ph> to a Boolean field and inserts it by calling <bpt id="p1">[</bpt>use_facet<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><bpt id="p2">**</bpt>&lt;num_put<ph id="ph2">\&lt;</ph>Elem, OutIt&gt;<ept id="p2">**</ept><ph id="ph3">`(`</ph><bpt id="p3">[</bpt>getloc<ept id="p3">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>put<ept id="p1">](#basic_ostream__put)</ept>(<bpt id="p2">**</bpt>OutIt<ept id="p2">**</ept>(<bpt id="p3">[</bpt>rdbuf<ept id="p3">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept>), <bpt id="p4">**</bpt><ph id="ph1">\*</ph>this<ept id="p4">**</ept>, <ph id="ph2">`getloc`</ph>, <bpt id="p5">**</bpt>val<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Here, <bpt id="p1">**</bpt>OutIt<ept id="p1">**</ept> is defined as <bpt id="p2">[</bpt>ostreambuf_iterator<ept id="p2">](../standard-library/ostreambuf-iterator-class.md)</ept><bpt id="p3">**</bpt><ph id="ph1">\&lt;</ph>Elem, Tr&gt;<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The function returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The functions</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>each convert <ph id="ph1">` val`</ph> to a numeric field and insert it by calling <bpt id="p1">**</bpt>use_facet&lt;num_put<ph id="ph2">\&lt;</ph>Elem, OutIt&gt;<ept id="p1">**</ept>(<ph id="ph3">`getloc`</ph>).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>put<ept id="p1">**</ept>(<bpt id="p2">**</bpt>OutIt<ept id="p2">**</ept>(<ph id="ph1">`rdbuf`</ph>), <bpt id="p3">**</bpt><ph id="ph2">\*</ph>this<ept id="p3">**</ept>, <ph id="ph3">`getloc`</ph>, <bpt id="p4">**</bpt>val<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Here, <bpt id="p1">**</bpt>OutIt<ept id="p1">**</ept> is defined as <bpt id="p2">**</bpt>ostreambuf_iterator<ph id="ph1">\&lt;</ph>Elem, Tr&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The function returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The functions</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>each convert <ph id="ph1">`val`</ph> to a numeric field and insert it by calling <bpt id="p1">**</bpt>use_facet&lt;num_put<ph id="ph2">\&lt;</ph>Elem, OutIt&gt;<ept id="p1">**</ept>(<ph id="ph3">`getloc`</ph>)<bpt id="p2">**</bpt>. put<ept id="p2">**</ept>(<bpt id="p3">**</bpt>OutIt<ept id="p3">**</ept>(<ph id="ph4">`rdbuf`</ph>), <bpt id="p4">**</bpt><ph id="ph5">\*</ph>this<ept id="p4">**</ept>, <ph id="ph6">`getloc`</ph>, <bpt id="p5">**</bpt>val<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Here, <bpt id="p1">**</bpt>OutIt<ept id="p1">**</ept> is defined as <bpt id="p2">**</bpt>ostreambuf_iterator<ph id="ph1">\&lt;</ph>Elem, Tr&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The function returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>basic_ostream::operator=</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Assigns values for the provided <ph id="ph1">`basic_ostream`</ph> object parameter to this object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`rvalue`</ph> reference to a <ph id="ph2">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The member operator calls swap <ph id="ph1">`(`` right``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>basic_ostream::put</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Puts a character in a stream.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A character.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A reference to the basic_ostream object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The unformatted output function inserts the element <ph id="ph1">`_Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>basic_ostream::seekp</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Reset position in output stream.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The position in the stream.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The offset relative to <ph id="ph1">`_Way`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">[</bpt>ios_base::seekdir<ept id="p1">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> enumerations.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A reference to the basic_ostream object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>fail<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__fail)</ept> is <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, the first member function calls <bpt id="p3">**</bpt>newpos =<ept id="p3">**</ept> <bpt id="p4">[</bpt>rdbuf<ept id="p4">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept><bpt id="p5">**</bpt><ph id="ph1">-&gt;</ph><ept id="p5">**</ept> <bpt id="p6">[</bpt>pubseekpos<ept id="p6">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekpos)</ept>(_<bpt id="p7">*</bpt>Pos<ept id="p7">*</ept>), for some <ph id="ph2">`pos_type`</ph> temporary object <bpt id="p8">**</bpt>newpos<ept id="p8">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>fail<ept id="p1">**</ept> is false, the second function calls <bpt id="p2">**</bpt>newpos = rdbuf-&gt;<ept id="p2">**</ept> <bpt id="p3">[</bpt>pubseekoff<ept id="p3">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)</ept>(<bpt id="p4">*</bpt>_Off, _Way<ept id="p4">*</ept>).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In either case, if (<ph id="ph1">`off_type`</ph>)<bpt id="p1">**</bpt>newpos ==<ept id="p1">**</ept> (<ph id="ph2">`off_type`</ph>)(-1) (the positioning operation fails), then the function calls <bpt id="p2">**</bpt>istr.<ept id="p2">**</ept><bpt id="p3">[</bpt>setstate<ept id="p3">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>(<bpt id="p4">**</bpt>failbit<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Both functions return <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>basic_ostream::sentry</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The nested class describes an object whose declaration structures the formatted output functions and the unformatted output functions.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>class sentry {</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>public:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>explicit sentry(basic_ostream<ph id="ph1">\&lt;</ph>Elem, Tr&gt;&amp; _Ostr); operator bool() const; ~sentry(); };</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The nested class describes an object whose declaration structures the formatted output functions and the unformatted output functions.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>ostr.<ept id="p1">**</ept><bpt id="p2">[</bpt>good<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__good)</ept> is <bpt id="p3">**</bpt>true<ept id="p3">**</ept> and <bpt id="p4">**</bpt>ostr.<ept id="p4">**</ept><bpt id="p5">[</bpt>tie<ept id="p5">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept> is not a null pointer, the constructor calls <bpt id="p6">**</bpt>ostr.tie-&gt;<ept id="p6">**</ept><bpt id="p7">[</bpt>flush<ept id="p7">](#basic_ostream__flush)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The constructor then stores the value returned by <bpt id="p1">**</bpt>ostr.good<ept id="p1">**</ept> in <bpt id="p2">**</bpt>status<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A later call to <bpt id="p1">**</bpt>operator bool<ept id="p1">**</ept> delivers this stored value.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`uncaught_exception`</ph> returns <bpt id="p1">**</bpt>false<ept id="p1">**</ept> and <bpt id="p2">[</bpt>flags<ept id="p2">](../standard-library/ios-base-class.md#ios_base__flags)</ept> <bpt id="p3">**</bpt><ph id="ph2">&amp;</ph><ept id="p3">**</ept> <bpt id="p4">[</bpt>unitbuf<ept id="p4">](../standard-library/ios-functions.md#unitbuf)</ept> is nonzero, the destructor calls <bpt id="p5">[</bpt>flush<ept id="p5">](#basic_ostream__flush)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>basic_ostream::swap</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Exchanges the values of this <ph id="ph1">`basic_ostream`</ph> object for the values of the provided <ph id="ph2">`basic_ostream`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The member function calls <bpt id="p1">[</bpt>basic_ios::swap<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__swap)</ept><ph id="ph1">`(`` right``)`</ph> to exchange the contents of this object for the contents of <ph id="ph2">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>basic_ostream::tellp</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Report position in output stream.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Position in output stream.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>fail<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__fail)</ept> is <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, the member function returns <bpt id="p3">[</bpt>rdbuf<ept id="p3">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept><bpt id="p4">**</bpt><ph id="ph1">-&gt;</ph><ept id="p4">**</ept> <bpt id="p5">[</bpt>pubseekoff<ept id="p5">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)</ept>(0, <ph id="ph2">`cur`</ph>, <bpt id="p6">**</bpt>in<ept id="p6">**</ept>).</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <ph id="ph1">`pos_type`</ph>(-1).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>seekp<ept id="p1">](#basic_ostream__seekp)</ept> for an example using <ph id="ph1">`tellp`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>basic_ostream::write</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Put characters in a stream.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Count of characters to put into the stream.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Characters to put into the stream.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A reference to the basic_ostream object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>unformatted output function<ept id="p1">](../standard-library/basic-ostream-class.md)</ept> inserts the sequence of <ph id="ph1">` count`</ph> elements beginning at <ph id="ph2">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>streamsize<ept id="p1">](../standard-library/ios-typedefs.md#streamsize)</ept> for an example using <ph id="ph1">`write`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>