<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ece483b3d8fde6a8f0b4a1a15178954822d84a74</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\nullptr.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e00a77838dd84ad6d9ae79b931fd9ba266f244f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5589d44c068f806d9e2101c8c9bc8205c69d908f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ullptr | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Designates a null pointer constant of type <ph id="ph1">`std::nullptr_t`</ph>, which is convertible to any raw pointer type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although you can use the keyword <ph id="ph1">`nullptr`</ph> without including any headers, if your code uses the type <ph id="ph2">`std::nullptr_t`</ph>, then you must define it by including the header <ph id="ph3">`&lt;cstddef&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nullptr`</ph> keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your code might be compiled by using the <bpt id="p1">[</bpt>/clr<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option, which targets managed code, then use <ph id="ph1">`__nullptr`</ph> in any line of code where you must guarantee that the compiler uses the native C++ interpretation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>nullptr<ept id="p1">](../windows/nullptr-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Avoid using <ph id="ph1">`NULL`</ph> or zero (<ph id="ph2">`0`</ph>) as a null pointer constant; <ph id="ph3">`nullptr`</ph> is less vulnerable to misuse and works better in most situations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, given <ph id="ph1">`func(std::pair&lt;const char *, double&gt;)`</ph>, then calling <ph id="ph2">`func(std::make_pair(NULL, 3.14))`</ph> causes a compiler error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The macro NULL expands to <ph id="ph1">`0`</ph>, so that the call <ph id="ph2">`std::make_pair(0, 3.14)`</ph> returns <ph id="ph3">`std::pair&lt;int, double&gt;`</ph>, which is not convertible to func()'s <ph id="ph4">`std::pair&lt;const char *, double&gt;`</ph> parameter type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`func(std::make_pair(nullptr, 3.14))`</ph> successfully compiles because <ph id="ph2">`std::make_pair(nullptr, 3.14)`</ph> returns <ph id="ph3">`std::pair&lt;std::nullptr_t, double&gt;`</ph>, which is convertible to <ph id="ph4">`std::pair&lt;const char *, double&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>