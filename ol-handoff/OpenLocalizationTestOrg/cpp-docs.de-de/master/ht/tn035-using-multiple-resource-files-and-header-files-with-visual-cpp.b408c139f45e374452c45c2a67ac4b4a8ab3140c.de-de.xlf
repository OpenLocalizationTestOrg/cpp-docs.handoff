<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d34c8686ddbd21c0780b56965f3c34d674fb3cd8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn035-using-multiple-resource-files-and-header-files-with-visual-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47656f4eab5e0877232e8b77101317a8c02afd9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0505691649a51aa2ffbd88c6253b859499e7319</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN035: Using Multiple Resource Files and Header Files with Visual C++ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN035: Using Multiple Resource Files and Header Files with Visual C++</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes how the Visual C++ resource editor supports multiple resource files and header files shared in a single project or shared across multiple projects and how you can take advantage of that support.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This note answers these questions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When might you want to split a project into multiple resource files and/or header files, and how you do it</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How do you share a common header .H file between two .RC files</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How do you divide project resources into multiple .RC files</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>How do you (and the tools) manage build dependencies between .RC, .CPP, and .H files</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You should be aware that if you add an additional resource file to your project, ClassWizard will not recognize the resources in the added file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This note is structured to answer the above questions as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Overview of How Visual C++ Manages Resource Files and Header Files<ept id="p1">**</ept> provides an overview of how the Resource Set Includes command in Visual C++ lets you use multiple resource files and header files in the same project.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Analysis of AppWizard-created .RC and .H Files<ept id="p1">**</ept> looks at the multiple resource and header files that are used by an AppWizard-created application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These files serve as a good model for additional resource files and header files you might want to add to your project.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Including Additional Header Files<ept id="p1">**</ept> describes where you might want to include multiple header files, and provides details how to do so.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sharing a Header File Between Two .RC Files<ept id="p1">**</ept> shows how you can share one header file between multiple .RC files in different projects, or perhaps in the same project.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using Multiple Resource Files in the Same Project<ept id="p1">**</ept> describes where you might want to break up your project into multiple .RC files, and provides details how to do so.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Enforcement of Non-Editable Visual C++ Files<ept id="p1">**</ept> describes how you can make sure Visual C++ does not edit and unintentionally reformat a custom resource.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managing Symbols Shared by Multiple Visual C++-Edited .RC Files<ept id="p1">**</ept> describes how to share the same symbols across multiple .RC files and how to avoid assigning duplicate ID numeric values.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managing Dependencies Between .RC, .CPP, and .H Files<ept id="p1">**</ept> describes how Visual C++ avoids unnecessary recompiling .CPP files that are dependent on resource symbol files.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>How Visual C++ Manages Set Includes Information<ept id="p1">**</ept> provides technical details about how Visual C++ keeps track of multiple (nested) .RC files and multiple header files that are #include'd by an .RC file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Overview of How Visual C++ Manages Resource Files and Header Files</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Visual C++ manages a single .RC resource file and a corresponding .H header file as a tightly coupled pair of files.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you edit and save resources in an .RC file, you indirectly edit and save symbols in the corresponding .H file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Although you can open and edit multiple .RC files at a time (using Visual C++'s MDI user interface) for any given .RC file you indirectly edit exactly one corresponding header file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Symbol Header File</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, Visual C++ always names the corresponding header file RESOURCE.H, regardless of the name of the resource file (e.g., MYAPP.RC).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Resource Includes<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu in Visual C++, you can change the name of this header file by updating the Symbol Header File file in the <bpt id="p3">**</bpt>Set Includes<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Read-Only Symbol Directives</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Although Visual C++ only edits one header file for any given .RC file, Visual C++ supports references to symbols defined in additional read-only header files.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Resource Includes<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu in Visual C++, you can specify any number of additional read-only header files as Read-Only Symbol Directives.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The "read-only" restriction means that when you add a new resource in the .RC file, you can use a symbol defined in the read-only header file; but if you delete the resource, the symbol still remains defined in the read-only header file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You cannot change the numeric value assigned to a read-only symbol.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compile-Time Directives</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Visual C++ also supports nesting of resource files, where one .RC file is #include'd within another.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you edit a given .RC file using Visual C++, any resources in the #include'd files are not visible.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>But when you compile the .RC file, the #include'd files are also compiled.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Resource Includes<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu in Visual C++, you can specify any number of #include'd .RC files as Compile-Time Directives.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note what happens if you read into Visual C++ an .RC file that #include's another .RC file that is <bpt id="p1">*</bpt>not<ept id="p1">*</ept> specified as a Compile-Time Directive.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This situation might arise when you bring to Visual C++ an .RC file that you had been previously maintaining manually with a text editor.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When Visual C++ reads the #include'd .RC file, it merges the #include'd resources into the parent .RC file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When you save the parent .RC file, the #include statement, in effect, will be replaced by the #include'd resources.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you do not want this merge to happen, you should remove the #include statement from the parent .RC file <bpt id="p1">*</bpt>prior<ept id="p1">*</ept> to reading it into Visual C++; then using Visual C++, add back the same #include statement as a Compile-Time Directive.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Visual C++ saves in an .RC file the three kinds of above Set Includes information (Symbol Header File, Read-Only Symbol Directives, and Compile-Time Directives) in #include directives <bpt id="p1">*</bpt>and<ept id="p1">*</ept> in TEXTINCLUDE resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The TEXTINCLUDE resources, an implementation detail that you do not normally need to deal with, are explained in <bpt id="p1">[</bpt>How Visual C++ Manages Set Includes Information<ept id="p1">](#_mfcnotes_tn035_set_includes)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Analysis of AppWizard-Created .RC and .H Files</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Examining the application code produced by AppWizard provides insight into how Visual C++ manages multiple resource files and header files.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The code excerpts examined below are from a MYAPP application produced by AppWizard using the default options.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An AppWizard-created application uses multiple resource files and multiple header files, as summarized in the diagram below:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can view these multiple file relationships using the Visual C++ File/Set Includes command.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>MYAPP.RC</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The application resource file that you edit using Visual C++.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>RESOURCE.H is the application-specific header file.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is always named RESOURCE.H by AppWizard, consistent with Visual C++'s default naming of the header file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The #include for this header file is the first statement in the resource file (MYAPP.RC):</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>RES\MYAPP.RC2</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Contains resources that will not be edited by Visual C++ but will be included in the final compiled .EXE file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>AppWizard creates no such resources by default, since Visual C++ can edit all of the standard resources, including the version resource (a new feature in this release).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An empty file is generated by AppWizard in case you wish to add your own custom formatted resources to this file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you use custom formatted resources, you can add them to RES\MYAPP.RC2 and edit them using the Visual C++ text editor.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>AFXRES.RC and AFXPRINT.RC contain standard resources required by certain features of the framework.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Like RES\MYAPP.RC2, these two framework-provided resource files are #include'd at the end of MYAPP.RC, and they are specified in the Compile-Time Directives of the Set Includes dialog box.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Thus, you do not directly view or edit these framework resources while you edit MYAPP.RC in Visual C++, but they are compiled into the application's binary .RES file and final .EXE file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information on the standard framework resources, including procedures for modifying them, see <bpt id="p1">[</bpt>Technical Note 23<ept id="p1">](../mfc/tn023-standard-mfc-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>AFXRES.H defines standard symbols, such as <ph id="ph1">`ID_FILE_NEW`</ph>, used by the framework and specifically used in AFXRES.RC.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>AFXRES.H also #include's WINRES.H, which contains a subset of WINDOWS.H that are needed by Visual C++ generated .RC files as well as AFXRES.RC.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The symbols defined in AFXRES.H are available as you edit the application resource file (MYAPP.RC).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`ID_FILE_NEW`</ph> is used for the File New menu item in MYAPP.RC's menu resource.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You cannot change or delete these framework-defined symbols.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Including Additional Header Files</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The AppWizard-created application includes only two header files: RESOURCE.H and AFXRES.H.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Only RESOURCE.H is application-specific.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You may need to include additional read-only header files in the following cases:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The header file is provided by an external source, or you want to share the header file among multiple projects or multiple parts of the same project.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The header file has formatting and comments that you do not want Visual C++ to change or filter out when it saves the file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, maybe you want to preserve #define's that use symbolic arithmetic such as:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can include additional read-only header files by using the <bpt id="p1">**</bpt>Resource Includes<ept id="p1">**</ept> command to specify the #include statement as a second Read-Only Symbol Directive, as in:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The new file relationship diagram now looks like this:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sharing a Header File Between Two .RC Files</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You may want to share a header file between two .RC files that are in different projects, or possibly the same project.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To do so, simply apply the Read-Only Directives technique described above to both .RC files.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the case where the two .RC files are for different applications (different projects), the result is illustrated in the following diagram:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The case where the second header file is shared by two .RC files in the same application (project) is discussed below.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using Multiple Resource Files in the Same Project</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Visual C++ and the Resource Compiler support multiple .RC files in the same project through #include's of one .RC file within another.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Multiple nesting is allowed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There are various reasons to split your project's resources into multiple .RC files:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It is easier to manage a large number of resources among multiple project team members if you split the resources into multiple .RC files.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you use a source control management package for checking out files and checking in changes, splitting the resources into multiple .RC files will give you finer control over managing changes to resources.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you want to use preprocessor directives, such as #ifdef, #endif, and #define, for portions of your resources, you must isolate them in read-only resources that will be compiled by the Resource Compiler.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Component .RC files will load and save faster in Visual C++ than one composite .RC file.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you want to maintain a resource with a text editor in a human-readable form, you should keep it in a .RC file separate from the one Visual C++ edits.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you need to keep a user-defined resource in a binary or text form that is interpretable by another specialized data editor, then you should keep it in a separate .RC file so Visual C++ does not change the format to hexadecimal data.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The .WAV (sound) file resources in the MFC Advanced Concepts sample <bpt id="p1">[</bpt>SPEAKN<ept id="p1">](../visual-cpp-samples.md)</ept> are a good example.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can #include a SECOND.RC in the Compile-Time Directives in the Set Includes dialog box:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The result is illustrated in the following diagram:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Using Compile-Time Directives, you can organize your Visual C++-editable and non-editable resources into multiple .RC files, where the "master" MYAPP.RC does nothing but #include the other .RC files.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you are using a Visual C++ project .MAK file, then you should include the "master" .RC file in the project so that all the #include'd resources are compiled with your application.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Enforcement of Noneditable Visual C++ Files</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The AppWizard-created RES\MYAPP.RC2 file is an example of a file that contains resources that you do <bpt id="p1">*</bpt>not<ept id="p1">*</ept> want to accidentally read into Visual C++ and then write it back out with loss of formatting information.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To protect against this, place the following lines in the beginning of the RES\MYAPP.RC2 file:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When Visual C++ compiles the .RC file, it defines <bpt id="p1">**</bpt>APSTUDIO_INVOKED<ept id="p1">**</ept> as well as <bpt id="p2">**</bpt>RC_INVOKED<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the AppWizard-created file structure is corrupted and Visual C++ reads the #error line above, it reports a fatal error and abort the reading of the .RC file.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Managing Symbols Shared by Multiple Visual C++-Edited .RC Files</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Two issues arise when you split up your resources into multiple .RC files that you want to edit separately in Visual C++:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You might want to share the same symbols across multiple .RC files.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You need to help Visual C++ avoid assigning the same ID numeric values to distinct resources (symbols).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following diagram illustrates an organization of .RC and .H files that deals with the first issue:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In this example, string resources are kept in one resource file, MYSTRS.RC, and menus are kept in another, MYMENUS.RC.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Some symbols, such as for commands, may need to be shared between the two files.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, a ID_TOOLS_SPELL may be the menu command ID for the Spell item in a Tools menu; and it may also be the string ID of the command prompt displayed by the framework in the application's main window status bar.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The ID_TOOLS_SPELL symbol is kept in the shared header file, MYSHARED.H.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You maintain this shared header file manually with a text editor; Visual C++ does not directly edit it.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In the two resource files MYSTRS.RC and MYMENUS.RC, you specify #include MYSHARED.H in the Read-Only Directives for MYAPP.RC, using the <bpt id="p1">**</bpt>Resource Includes<ept id="p1">**</ept> command, as described earlier.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It is most convenient to anticipate a symbol you will share before you attempt use it to identify any resource.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Add the symbol to the shared header file and, if you have not already #include'd the shared header file in the Read-Only Directives for the .RC file, do so before using the symbol.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you did not anticipate sharing the symbol in this way, then you will have to manually (using a text editor) move the #define statement for the symbol from, say, MYMENUS.H to MYSHARED.H before using it in MYSTRS.RC.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When you manage symbols in multiple .RC files, you also must help Visual C++ avoid assigning the same ID numeric values to distinct resources (symbols).</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For any given .RC file, Visual C++ incrementally assigns IDs in each of four ID domains.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Between editing sessions, Visual C++ keeps track of the last ID it assigned in each of the domains in the symbol header file for the .RC file.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Here is what the APS_NEXT values are for an empty (new) .RC file:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_APS_NEXT_RESOURCE_VALUE<ept id="p1">**</ept> is the next symbol value that will be used for a dialog resource, menu resource, and so on.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The valid range for resource symbol values is 1 to 0x6FFF.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_APS_NEXT_COMMAND_VALUE<ept id="p1">**</ept> is the next symbol value that will be used for a command identification.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The valid range for command symbol values is 0x8000 to 0xDFFF.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_APS_NEXT_CONTROL_VALUE<ept id="p1">**</ept> is the next symbol value that will be used for a dialog control.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The valid range for dialog control symbol values is 8 to 0xDFFF.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_APS_NEXT_SYMED_VALUE<ept id="p1">**</ept> is the next symbol value that will be issued when you manually assign a symbol value using the New command in the Symbol Browser.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Visual C++ starts with slightly higher values that the lowest legal value when creating a new .RC file.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>AppWizard will also initialize these values to something more appropriate for MFC applications.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information about ID value ranges, see <bpt id="p1">[</bpt>Technical Note 20<ept id="p1">](../mfc/tn020-id-naming-and-numbering-conventions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Now every time you create a new resource file, even in the same project, Visual C++ defines the same <bpt id="p1">**</bpt>_APS_NEXT<ph id="ph1">\_</ph><ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This means that if you add, say, multiple dialogs in two different .RC files, it is highly likely that the same #define value will be assigned to different dialogs.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For example, IDD_MY_DLG1 in the first .RC file might be assigned the same number, 101, as IDD_MY_DLG2 in a second .RC file.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To avoid this, you should reserve a separate numeric range for each of the four domains of IDs in the respective .RC files.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Do this by manually updating the <bpt id="p1">**</bpt>_APS_NEXT<ept id="p1">**</ept> values in each of the .RC files <ph id="ph1">`before`</ph> you start adding resources.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, if the first .RC file uses the default <bpt id="p1">**</bpt>_APS_NEXT<ept id="p1">**</ept> values, then you might want to assign the following <bpt id="p2">**</bpt>_APS_NEXT<ept id="p2">**</ept> values to the second .RC file:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Of course, it is still possible that Visual C++ will assign so many IDs in the first .RC file that the numeric values start to overlap those reserved for the second .RC file.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You should reserve sufficiently large ranges so that this does not happen.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Managing Dependencies Between .RC, .CPP, and .H Files</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>When Visual C++ saves an .RC file, it also saves symbol changes to the corresponding RESOURCE.H file.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Any of your .CPP files that refer to resources in the .RC file must #include the RESOURCE.H file, usually from within your project's master header file.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This leads to an undesirable side-effect because of the development environment's internal project management which scans source files for header dependencies.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Every time you add a new symbol in Visual C++, all the .CPP file that #include RESOURCE.H would need to be recompiled.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Visual C++, circumvents the dependency on RESOURCE.H by including the following comment as the first line of the RESOURCE.H file:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The development environment interprets this comment by ignoring the changes to RESOURCE.H so that dependent .CPP files will not need to be recompiled.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Visual C++ always adds the //{{NO_DEPENDENCIES}} comment line to a .RC file when it saves the file.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In some cases, circumventing of the build dependency on RESOURCE.H may lead to run-time errors undetected at link time.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For example, if you use the Symbol Browser to change the numeric value assigned to a symbol for a resource, the resource will not be correctly found and loaded at application run-time if the .CPP file referring to the resource is not recompiled.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In such cases, you should explicitly recompile any .CPP files that you know are affected by the symbol changes in RESOURCE.H or select <bpt id="p1">**</bpt>Rebuild All<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you have the need to frequently change symbol values for a certain group of resources, you will probably find it more convenient and safer to break out these symbols into a separate read-only header file, as described in the above section <bpt id="p1">[</bpt>Including Additional Header Files<ept id="p1">](#_mfcnotes_tn035_including)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>How Visual C++ Manages Set Includes Information**</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>As discussed above, the File menu Set Includes command lets you specify three types of information:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Symbol Header File</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Read-Only Symbol Directives</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Compile-Time Directives</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following describes how Visual C++ maintains this information in a .RC file.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You do not need this information to use Visual C++, but it may enhance your understanding so that you can more confidently use the Set Includes feature.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Each of the above three types of Set Includes information is stored in the .RC file in two forms: (1) as #include or other directives interpretable by the Resource Compiler, and (2) as special TEXTINCLUDE resources interpretable only by Visual C++.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The purpose of the TEXTINCLUDE resource is to safely store Set Include information in a form that is readily presentable in Visual C++'s <bpt id="p1">**</bpt>Set Includes<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>TEXTINCLUDE is a <bpt id="p1">*</bpt>resource type<ept id="p1">*</ept> defined by Visual C++.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Visual C++ recognizes three specific TEXTINCLUDE resources that have the resource identification numbers 1, 2 and 3:</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>TEXTINCLUDE resource ID</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Type of Set Includes information</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Symbol Header File</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Read-Only Symbol Directives</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Compile-Time Directives</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Each of the three types of Set Includes information is illustrated by the default MYAPP.RC and RESOURCE.H files created by AppWizard, as described below.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The extra \0 and "" tokens between BEGIN and END blocks are required by the RC syntax to specify zero terminated strings and the double quote character respectively.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Symbol Header File</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The form of the Symbol Header File information interpreted by the Resource Compiler is simply a #include statement:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The corresponding TEXTINCLUDE resource is:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Read-Only Symbol Directives</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Read-Only Symbol Directives are included at the top of MYAPP.RC in the following form interpretable by the Resource Compiler:</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The corresponding TEXTINCLUDE resource is:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Compile-Time Directives</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Compile-Time Directives are included at the end of MYAPP.RC in the following form interpretable by the Resource Compiler:</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The #ifndef APSTUDIO_INVOKED directive instructs Visual C++ to skip over Compile-Time Directives.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The corresponding TEXTINCLUDE resource is:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>