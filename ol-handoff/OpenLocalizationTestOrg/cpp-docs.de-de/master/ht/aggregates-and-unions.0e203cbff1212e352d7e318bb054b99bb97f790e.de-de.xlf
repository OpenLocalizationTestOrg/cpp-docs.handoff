<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdf5902281769d2602f0b749089d6d1a847a5a9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\aggregates-and-unions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aac568dfaf73c5ae07374d29947e85806f6683c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc370ce93e91c29738cccfa35e6136c7256c15ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Aggregates and Unions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Aggregates and Unions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Other types such as arrays, structs, and unions have stricter alignment requirements that ensure consistent aggregate and union storage and data retrieval.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here are the definitions for array, structure, and union:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contains an ordered group of adjacent data objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each object is called an element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All elements within an array have the same size and data type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Structure</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Contains an ordered group of data objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unlike the elements of an array, the data objects within a structure can have different data types and sizes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each data object in a structure is called a member.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Union</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An object that holds any one of a set of named members.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The members of the named set can be of any type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The storage allocated for a union is equal to the storage required for the largest member of that union, plus any padding required for alignment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table shows the strongly suggested alignment for the scalar members of unions and structures.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Scalar Type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C Data Type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Required Alignment</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>INT8</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>UINT8</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>INT16</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Word</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>UINT16</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>unsigned short</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Word</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>INT32</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>int, long</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Doubleword</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>UINT32</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>unsigned int, unsigned long</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Doubleword</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>INT64</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Quadword</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>UINT64</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>unsigned __int64</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Quadword</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>FP32 (single precision)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Doubleword</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>FP64 (double precision)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Quadword</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>POINTER</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Quadword</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>struct __m64</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Quadword</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>struct __m128</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Octaword</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following aggregate alignment rules apply:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The alignment of an array is the same as the alignment of one of the elements of the array.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The alignment of the beginning of a structure or a union is the maximum alignment of any individual member.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Each member within the structure or union must be placed at its proper alignment as defined in the previous table, which may require implicit internal padding, depending on the previous member.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Structure size must be an integral multiple of its alignment, which may require padding after the last member.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Since structures and unions can be grouped in arrays, each array element of a structure or union must begin and end at the proper alignment previously determined.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is possible to align data in such a way as to be greater than the alignment requirements as long as the previous rules are maintained.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An individual compiler may adjust the packing of a structure for size reasons.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example <bpt id="p1">[</bpt>/Zp (Struct Member Alignment)<ept id="p1">](../build/reference/zp-struct-member-alignment.md)</ept> allows for adjusting the packing of structures.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Types and Storage</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>