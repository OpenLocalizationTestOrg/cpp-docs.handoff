<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b75b80f72c8e12bd34ea0e273b48528fe302b9bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\primary-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9abb3bf764a33c68e733ecf410bc638b35859b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de9005cce04c09f043e9b5ca22f951bd5c0dac07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Primary Expressions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Primary Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Primary expressions are the building blocks of more complex expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They are literals, names, and names qualified by the scope-resolution operator (<ph id="ph1">`::`</ph>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A primary expression may have any of the following forms:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>literal<ept id="p1">*</ept> is a constant primary expression.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Its type depends on the form of its specification.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Literals<ept id="p1">](../cpp/numeric-boolean-and-pointer-literals-cpp.md)</ept> for complete information about specifying literals.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> keyword is a pointer to a class object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is available within nonstatic member functions and points to the instance of the class for which the function was invoked.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> keyword cannot be used outside the body of a class-member function.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> pointer is <ph id="ph1">`type`</ph> <bpt id="p2">**</bpt><ph id="ph2">\*</ph>const<ept id="p2">**</ept> (where <ph id="ph3">`type`</ph> is the class name) within functions not specifically modifying the <bpt id="p3">**</bpt>this<ept id="p3">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows member function declarations and the types of <bpt id="p1">**</bpt>this<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>this Pointer<ept id="p1">](this-pointer.md)</ept> for more information about modifying the type of the <bpt id="p2">**</bpt>this<ept id="p2">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The scope-resolution operator (<ph id="ph1">`::`</ph>) followed by a name constitutes a primary expression.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Such names must be names at global scope, not member names.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of this expression is determined by the declaration of the name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is an l-value (that is, it can appear on the left hand side of an assignment operator expression) if the declaring name is an l-value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The scope-resolution operator allows a global name to be referred to, even if that name is hidden in the current scope.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Scope<ept id="p1">](../cpp/scope-visual-cpp.md)</ept> for an example of how to use the scope-resolution operator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An expression enclosed in parentheses is a primary expression whose type and value are identical to those of the unparenthesized expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is an l-value if the unparenthesized expression is an l-value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the context of the primary expression syntax given above, <bpt id="p1">*</bpt>name<ept id="p1">*</ept> means anything in the syntax described for <bpt id="p2">[</bpt>Names<ept id="p2">](http://msdn.microsoft.com/en-us/1c49cc24-08d5-4884-b170-ba8ed42d80db)</ept>, although when using the scope-resolution operator before the name, types of names that can only occur in a class are not allowed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This includes user-defined conversion function names, and destructor names.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Examples of primary expressions include:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The examples below are all considered <bpt id="p1">*</bpt>names<ept id="p1">*</ept>, and hence primary expressions, in various forms:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Types of Expressions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>