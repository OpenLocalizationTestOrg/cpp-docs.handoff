<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f62cb412dbc8d78755b706c0b76921704df73cac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\discrete-distribution-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a61ce971042597beba3c4ef2cb18214ba24465b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99bc66413ddac8d3d36fed34f15a68e22cbef018</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>discrete_distribution Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>discrete_distribution Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Generates a discrete integer distribution that has uniform-width intervals with uniform probability in each interval.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The integer result type, defaults to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For possible types, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>random&gt;<ept id="p1">](../standard-library/random.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This sampling distribution has uniform-width intervals with uniform probability in each interval.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about other sampling distributions, see <bpt id="p1">[</bpt>piecewise_linear_distribution Class<ept id="p1">](../standard-library/piecewise-linear-distribution-class.md)</ept> and <bpt id="p2">[</bpt>piecewise_constant_distribution Class<ept id="p2">](../standard-library/piecewise-constant-distribution-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table links to articles about individual members:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>discrete_distribution::discrete_distribution</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>discrete_distribution::param_type</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The property function <ph id="ph1">`vector&lt;double&gt; probabilities()`</ph> returns the individual probabilities for each integer generated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about distribution classes and their members, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>random&gt;<ept id="p1">](../standard-library/random.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>random&gt;</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>discrete_distribution::discrete_distribution</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Constructs the distribution.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first iterator in the list from which to construct the distribution.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The last iterator in the list from which to construct the distribution (non-inclusive because iterators use an empty element for the end).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>initializer_list<ept id="p1">](../cpp/initializers.md)</ept> from which to construct the distribution.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The number of elements in the distribution range.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count==0`</ph>, equivalent to the default constructor (always generates zero).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The lowest value in the distribution range.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The highest value in the distribution range.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The object representing the probability function for the distribution.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Both the parameter and the return value must be convertible to <ph id="ph1">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The parameter structure used to construct the distribution.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default constructor constructs an object whose stored probability value has one element with value 1.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This will result in a distribution that always generates a zero.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The iterator range constructor,</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>constructs a distribution object with weights from iterators over the interval sequence [ <ph id="ph1">`firstI`</ph>, <ph id="ph2">`lastI`</ph>).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The initializer list constructor</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>constructs a distribution object with weights from the intializer list <ph id="ph1">`weightlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The constructor defined as</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>constructs a distribution object whose stored probability value is initialized based on the following rules.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count &lt; 1`</ph>, <ph id="ph2">`n` = `1`</ph>, and as such is equivalent to the default constructor, always generating zero.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count &gt; 0`</ph>, <ph id="ph2">`n` = `count`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Provided <ph id="ph1">`0` &lt; `d`</ph> = ( <ph id="ph2">`maxw - minw`</ph>)/ <ph id="ph3">`n`</ph>, using <ph id="ph4">`d`</ph> uniform subranges each weight is assigned as follows: <ph id="ph5">`weight`</ph>k = <ph id="ph6">`weightfunc(x)`</ph>, where <ph id="ph7">`x` = `xmin` + `k` * `d` + `d`/ `2`</ph>, for <ph id="ph8">`k` = `0`</ph>, ..., <ph id="ph9">`n - 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The constructor defined as</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>constructs a distribution object using <ph id="ph1">`parm`</ph> as the stored parameter structure.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>discrete_distribution::param_type</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Stores all the parameters of the distribution.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See parent topic <bpt id="p1">[</bpt>discrete_distribution Class<ept id="p1">](../standard-library/discrete-distribution-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This parameter package can be passed to <ph id="ph1">`operator()`</ph> to generate the return value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>random&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>