<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60f591b5a763bda1ed916bbf16a122892a68beb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\utility-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">898458fca41e70d88a18b4ffeab6b138309f15b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdf46a050d3c3dc3b40474226dda4d5ebf131d0b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>utility<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>utility<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>exchange</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>forward</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>get Function <ph id="ph1">&amp;lt;</ph>utility</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>make_pair</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>move</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>exchange</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(C++14)<ept id="p1">**</ept> Assigns a new value to an object and returns its old value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The object that will receive the value of new_val.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The object whose value is copied or moved into val.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For complex types, <ph id="ph1">`exchange`</ph> avoids copying the old value when a move constructor is available, avoids copying the new value if it’s a temporary object or is moved, and accepts any type as the new value, using any available converting assignment operator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The exchange function is different from <bpt id="p1">[</bpt>std::swap<ept id="p1">](../standard-library/algorithm-functions.md#swap)</ept> in that the left argument is not moved or copied to the right argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">`exchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the real world, <ph id="ph1">`exchange`</ph> is most useful with large objects that are expensive to copy:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>forward</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Conditionally casts its argument to an rvalue reference if the argument is an rvalue or rvalue reference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This restores the rvalue-ness of an argument to the forwarding function in support of perfect forwarding.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type of the value passed in <ph id="ph1">`Arg`</ph>, which might be different than the type of <ph id="ph2">`Arg`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Typically determined by a template argument of the forwarding function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The argument to cast.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an rvalue reference to <ph id="ph1">`Arg`</ph> if the value passed in <ph id="ph2">`Arg`</ph> was originally an rvalue or a reference to an rvalue; otherwise, returns <ph id="ph3">`Arg`</ph> without modifying its type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must specify an explicit template argument to call <ph id="ph1">`forward`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>does not forward its argument.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Instead, by conditionally casting its argument to an rvalue reference if it was originally an rvalue or rvalue reference, <ph id="ph1">`forward`</ph> enables the compiler to perform overload resolution with knowledge of the forwarded argument's original type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The apparent type of an argument to a forwarding function might be different than its original type—for example, when an rvalue is used as an argument to a function and is bound to a parameter name; having a name makes it an lvalue, regardless of whether the value actually exists as an rvalue— <ph id="ph1">`forward`</ph> restores the rvalue-ness of the argument.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Restoring the rvalue-ness of an argument's original value in order to perform overload resolution is known as <bpt id="p1">*</bpt>perfect forwarding<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Perfect forwarding enables a template function to accept an argument of either reference type and to restore its rvalue-ness when it's necessary for correct overload resolution.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By using perfect forwarding, you can preserve move semantics for rvalues and avoid having to provide overloads for functions that vary only by the reference type of their arguments.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>get</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets an element from a <ph id="ph1">`pair`</ph> object by index position, or by type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The 0-based index of the designated element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type of the first pair element.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type of the second pair element.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The pair to select from.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The template functions each return a reference to an element of its <ph id="ph1">`pair`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For the indexed overloads, if the value of <ph id="ph1">`Index`</ph> is 0 the functions return <ph id="ph2">`pr.first`</ph> and if the value of <ph id="ph3">`Index`</ph> is 1 the functions return <ph id="ph4">`pr.second`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`RI`</ph> is the type of the returned element.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For the overloads that do not have an Index parameter, the element to return is deduced by the type argument.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`get&lt;T&gt;(Tuple)`</ph> will produce a compiler error if <ph id="ph2">`pr`</ph> contains more or less than one element of type T.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>make_pair</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A template function that you can use to construct objects of type <ph id="ph1">`pair`</ph>, where the component types are automatically chosen based on the data types that are passed as parameters.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Value that initializes the first element of <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Value that initializes the second element of <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The pair object that's constructed: <ph id="ph1">`pair`&lt; `T`</ph>, <ph id="ph2">`U`</ph>&gt;( <ph id="ph3">`Val1`</ph>, <ph id="ph4">`Val2`</ph>).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>converts object of type <bpt id="p1">[</bpt>reference_wrapper Class<ept id="p1">](../standard-library/reference-wrapper-class.md)</ept> to reference types and converts decaying arrays and functions to pointers.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the returned <ph id="ph1">`pair`</ph> object, <ph id="ph2">`T`</ph> is determined as follows:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the input type <ph id="ph1">`T`</ph> is <ph id="ph2">`reference_wrapper&lt;X&gt;`</ph>, the returned type <ph id="ph3">`T`</ph> is <ph id="ph4">`X&amp;`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, the returned type <ph id="ph1">`T`</ph> is <ph id="ph2">`decay&lt;T&gt;::type`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>decay Class<ept id="p1">](../standard-library/decay-class.md)</ept> is not supported, the returned type <ph id="ph1">`T`</ph> is the same as the input type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The returned type <ph id="ph1">`U`</ph> is similarly determined from the input type <ph id="ph2">`U`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One advantage of <ph id="ph1">`make_pair`</ph> is that the types of objects that are being stored are determined automatically by the compiler and do not have to be explicitly specified.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Don't use explicit template arguments such as <ph id="ph1">`make_pair&lt;int, int&gt;(1, 2)`</ph> when you use <ph id="ph2">`make_pair`</ph> because it is unnecessarily verbose and adds complex rvalue reference problems that might cause compilation failure.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For this example, the correct syntax would be</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`make_pair`</ph> helper function also makes it possible to pass two values to a function that requires a pair as an input parameter.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For an example about how to use the helper function <ph id="ph1">`make_pair`</ph> to declare and initialize a pair, see <bpt id="p1">[</bpt>pair Structure<ept id="p1">](../standard-library/pair-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>move</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Unconditionally casts its argument to an rvalue reference, and thereby signals that it can be moved if its type is move-enabled.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A type deduced from the type of the argument passed in <ph id="ph1">`Arg`</ph>, together with the reference collapsing rules.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The argument to cast.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Although the type of <ph id="ph1">`Arg`</ph> appears to be specified as an rvalue reference, <ph id="ph2">`move`</ph> also accepts lvalue arguments because lvalue references can bind to rvalue references.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>as an rvalue reference, whether or not its type is a reference type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The template argument <ph id="ph1">`Type`</ph> is not intended to be specified explicitly, but to be deduced from the type of the value passed in <ph id="ph2">`Arg`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`Type`</ph> is further adjusted according to the reference collapsing rules.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>does not move its argument.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Instead, by unconditionally casting its argument—which might be an lvalue—to an rvalue reference, it enables the compiler to subsequently move, rather than copy, the value passed in <ph id="ph1">`Arg`</ph> if its type is move-enabled.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If its type is not move-enabled, it is copied instead.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the value passed in <ph id="ph1">`Arg`</ph> is an lvalue—that is, it has a name or its address can be taken—it's invalidated when the move occurs.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Do not refer to the value passed in <ph id="ph1">`Arg`</ph> by its name or address after it's been moved.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two <bpt id="p1">[</bpt>pair Structure<ept id="p1">](../standard-library/pair-structure.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>One advantage of <ph id="ph1">`swap`</ph> is that the types of objects that are being stored are determined automatically by the compiler and do not have to be explicitly specified.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Don't use explicit template arguments such as <ph id="ph1">`swap&lt;int, int&gt;(1, 2)`</ph> when you use <ph id="ph2">`swap`</ph> because it is unnecessarily verbose and adds complex rvalue reference problems that might cause compilation failure.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>utility&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>