<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dfaf57037f235e148364b7fef3638c0c4b586d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\unicode-and-multibyte-character-set-mbcs-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5774de61b8e4416cc0fd0e3f8c4c12741b647471</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a3dfbdf3c283c43c1813a61cda5d69b65935384</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unicode and Multibyte Character Set (MBCS) Support | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unicode and Multibyte Character Set (MBCS) Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Some languages, for example, Japanese and Chinese, have large character sets.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To support programming for these markets, the Microsoft Foundation Class Library (MFC) is enabled for two different approaches to handling large character sets:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Unicode</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Multibyte Character Sets (MBCS)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You should use Unicode for all new development.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>MFC Support for Unicode Strings</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The entire class library is conditionally enabled for Unicode characters and strings.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In particular, class <bpt id="p1">[</bpt>CString<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> is Unicode-enabled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>UAFXCW.LIB</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>UAFXCW.PDB</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>UAFXCWD.LIB</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>UAFXCWD.PDB</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.LIB</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.PDB</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.DLL</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.LIB</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.PDB</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MFC<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.DLL</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>MFCS<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.LIB</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>MFCS<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.PDB</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>MFCS<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.LIB</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>MFCS<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.PDB</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.LIB</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.PDB</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>U.DLL</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.LIB</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.PDB</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>MFCM<bpt id="p1">*</bpt>xx<ept id="p1">*</ept>UD.DLL</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">*</bpt>xx<ept id="p1">*</ept> represents the version number of the file; for example, '80' means version 8.0.)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is based on the <ph id="ph1">`TCHAR`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the symbol <ph id="ph1">`_UNICODE`</ph> is defined for a build of your program, <ph id="ph2">`TCHAR`</ph> is defined as type <ph id="ph3">`wchar_t`</ph>, a 16-bit character encoding type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`TCHAR`</ph> is defined as <ph id="ph2">`char`</ph>, the normal 8-bit character encoding.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, under Unicode, a <ph id="ph1">`CString`</ph> is composed of 16-bit characters.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Without Unicode, it is composed of characters of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To complete Unicode programming of your application, you must also:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`_T`</ph> macro to conditionally code literal strings to be portable to Unicode.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you pass strings, pay attention to whether function arguments require a length in characters or a length in bytes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The difference is important if you are using Unicode strings.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use portable versions of the C run-time string-handling functions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the following data types for characters and character pointers:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Where you would use <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Where you would use <ph id="ph1">`char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Where you would use <ph id="ph1">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>provides the operator <ph id="ph1">`LPCTSTR`</ph> to convert between <ph id="ph2">`CString`</ph> and <ph id="ph3">`LPCTSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>also supplies Unicode-aware constructors, assignment operators, and comparison operators.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For related information on Unicode programming, see <bpt id="p1">[</bpt>Unicode Topics<ept id="p1">](../mfc/unicode-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Run-Time Library Reference<ept id="p1">](../c-runtime-library/c-run-time-library-reference.md)</ept> defines portable versions of all its string-handling functions.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See the category <bpt id="p1">[</bpt>Internationalization<ept id="p1">](../c-runtime-library/internationalization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>MFC Support for MBCS Strings</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>MBCS strings are legacy technology and should not be used in new projects.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following information is provided for scenarios in which you need to maintain existing code that uses MBCS and it is not feasible to upgrade the code to use Unicode.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The class library is also enabled for multibyte character sets, but only for double-byte character sets (DBCS).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev12](../atl-mfc-shared/includes/vs_dev12_md.md)]</ph> and later, the MBCS versions of the MFC DLLs are available as a free add-in to Visual Studio from the MSDN download site.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MFC MBCS DLL Add-in<ept id="p1">](../mfc/mfc-mbcs-dll-add-on.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In a multibyte character set, a character can be one or two bytes wide.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If it is two bytes wide, its first byte is a special "lead byte" that is chosen from a particular range, depending on which code page is in use.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Taken together, the lead and "trail bytes" specify a unique character encoding.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the symbol <ph id="ph1">`_MBCS`</ph> is defined for a build of your program, type <ph id="ph2">`TCHAR`</ph>, on which <ph id="ph3">`CString`</ph> is based, maps to <ph id="ph4">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It is up to you to determine which bytes in a <ph id="ph1">`CString`</ph> are lead bytes and which are trail bytes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The C run-time library supplies functions to help you determine this.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Under DBCS, a given string can contain all single-byte ANSI characters, all double-byte characters, or a combination of the two.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These possibilities require special care in parsing strings.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This includes <ph id="ph1">`CString`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Unicode string serialization in MFC can read both Unicode and MBCS strings regardless of which version of the application that you are running.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Your data files are portable between Unicode and MBCS versions of your program.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>member functions use special "generic text" versions of the C run-time functions they call, or they use Unicode-aware functions.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Therefore, for example, if a <ph id="ph1">`CString`</ph> function would typically call <ph id="ph2">`strcmp`</ph>, it calls the corresponding generic-text function <ph id="ph3">`_tcscmp`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Depending on how the symbols <ph id="ph1">`_MBCS`</ph> and <ph id="ph2">`_UNICODE`</ph> are defined, <ph id="ph3">`_tcscmp`</ph> maps as follows:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>defined</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>defined</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Neither symbol defined</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The symbols <ph id="ph1">`_MBCS`</ph> and <ph id="ph2">`_UNICODE`</ph> are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Generic-text function mappings for all of the run-time string-handling routines are discussed in <bpt id="p1">[</bpt>C Run-Time Library Reference<ept id="p1">](../c-runtime-library/c-run-time-library-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In particular, see <bpt id="p1">[</bpt>Internationalization<ept id="p1">](../c-runtime-library/internationalization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Similarly, <ph id="ph1">`CString`</ph> methods are implemented by using "generic" data type mappings.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To enable both MBCS and Unicode, MFC uses <ph id="ph1">`TCHAR`</ph> for <ph id="ph2">`char`</ph>, <ph id="ph3">`LPTSTR`</ph> for <ph id="ph4">`char*`</ph>, and <ph id="ph5">`LPCTSTR`</ph> for <ph id="ph6">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>These ensure the correct mappings for either MBCS or Unicode.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Strings (ATL/MFC)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>