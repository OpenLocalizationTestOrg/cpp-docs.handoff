<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7daa6273b2d6a97c8cd6227f8a8dce05e99908b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-localizing-an-activex-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">546d588b87933e2a1c60a175b6488d56535bd2ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34319a770bd8274f02a4763f1cfe9fd4b635c4d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Localizing an ActiveX Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Localizing an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article discusses procedures for localizing ActiveX control interfaces.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you want to adapt an ActiveX control to an international market, you may want to localize the control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows supports many languages in addition to the default English, including German, French, and Swedish.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This can present problems for the control if its interface is in English only.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, ActiveX controls should always base their locale on the ambient LocaleID property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are three ways to do this:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Load resources, always on demand, based on the current value of the ambient LocaleID property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The MFC ActiveX controls sample <bpt id="p1">[</bpt>LOCALIZE<ept id="p1">](../visual-cpp-samples.md)</ept> uses this strategy.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Load resources when the first control is instanced, based on the ambient LocaleID property, and use these resources for all other instances.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article demonstrates this strategy.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This will not work correctly in some cases, if future instances have different locales.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>OnAmbientChanged<ept id="p1">**</ept> notification function to dynamically load the proper resources for the container's locale.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This will work for the control, but the run-time DLL will not dynamically update its own resources when the ambient LocaleID property changes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition, run-time DLLs for ActiveX controls use the thread locale to determine the locale for its resources.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The rest of this article describes two localizing strategies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first strategy <bpt id="p1">[</bpt>localizes the control's programmability interface<ept id="p1">](#_core_localizing_your_control.92.s_programmability_interface)</ept> (names of properties, methods, and events).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The second strategy <bpt id="p1">[</bpt>localizes the control's user interface<ept id="p1">](#_core_localizing_the_control.92.s_user_interface)</ept>, using the container's ambient LocaleID property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a demonstration of control localization, see the MFC ActiveX controls sample <bpt id="p1">[</bpt>LOCALIZE<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Localizing the Control's Programmability Interface</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When localizing the control's programmability interface (the interface used by programmers writing applications that use your control), you must create a modified version of the control .IDL file (a script for building the control type library) for each language you intend to support.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is the only place you need to localize the control property names.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you develop a localized control, include the locale ID as an attribute at the type library level.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if you want to provide a type library with French localized property names, make a copy of your SAMPLE.IDL file, and call it SAMPLEFR.IDL.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add a locale ID attribute to the file (the locale ID for French is 0x040c), similar to the following:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxLoc#1</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Change the property names in SAMPLEFR.IDL to their French equivalents, and then use MKTYPLIB.EXE to produce the French type library, SAMPLEFR.TLB.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To create multiple localized type libraries you can add any localized .IDL files to the project and they will be built automatically.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To add an .IDL file to your ActiveX control project</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>With your control project open, on the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Add Existing Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Existing Item<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If necessary, select the drive and directory to view.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Files of Type<ept id="p1">**</ept> box, select <bpt id="p2">**</bpt>All Files (<ph id="ph1">\*</ph>.<ph id="ph2">\*</ph>)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the file list box, double-click the .IDL file you want to insert into the project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> when you have added all necessary .IDL files.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because the files have been added to the project, they will be built when the rest of the project is built.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The localized type libraries are located in the current ActiveX control project directory.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Within your code, the internal property names (usually in English) are always used and are never localized.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This includes the control dispatch map, the property exchange functions, and your property page data exchange code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Only one type library (.TLB) file may be bound into the resources of the control implementation (.OCX) file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is usually the version with the standardized (typically, English) names.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To ship a localized version of your control you need to ship the .OCX (which has already been bound to the default .TLB version) and the .TLB for the appropriate locale.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This means that only the .OCX is needed for English versions, since the correct .TLB has already been bound to it.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For other locales, the localized type library also must be shipped with the .OCX.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To ensure that clients of your control can find the localized type library, register your locale-specific .TLB file(s) under the TypeLib section of the Windows system registry.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The third parameter (normally optional) of the <bpt id="p1">[</bpt>AfxOleRegisterTypeLib<ept id="p1">](../mfc/reference/registering-ole-controls.md#afxoleregistertypelib)</ept> function is provided for this purpose.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example registers a French type library for an ActiveX control:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxLoc#2</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When your control is registered, the <ph id="ph1">`AfxOleRegisterTypeLib`</ph> function automatically looks for the specified .TLB file in the same directory as the control and registers it in the Windows registration database.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the .TLB file is not found, the function has no effect.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Localizing the Control's User Interface</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To localize a control's user interface, place all of the control's user-visible resources (such as property pages and error messages) into language-specific resource DLLs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You then can use the container's ambient LocaleID property to select the appropriate DLL for the user's locale.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates one approach to locate and load the resource DLL for a specific locale.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This member function, called <ph id="ph1">`GetLocalizedResourceHandle`</ph> for this example, can be a member function of your ActiveX control class:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxLoc#3</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that the sublanguage ID could be checked in each case of the switch statement, to provide more specialized localization.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For a demonstration of this function, see the <ph id="ph1">`GetResourceHandle`</ph> function in the MFC ActiveX controls sample <bpt id="p1">[</bpt>LOCALIZE<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the control first loads itself into a container, it can call <bpt id="p1">[</bpt>COleControl::AmbientLocaleID<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__ambientlocaleid)</ept> to retrieve the locale ID.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The control can then pass the returned locale ID value to the <ph id="ph1">`GetLocalizedResourceHandle`</ph> function, which loads the proper resource library.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The control should pass the resulting handle, if any, to <bpt id="p1">[</bpt>AfxSetResourceHandle<ept id="p1">](../mfc/reference/application-information-and-management.md#afxsetresourcehandle)</ept>:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxLoc#4</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Place the code sample above into a member function of the control, such as an override of <bpt id="p1">[</bpt>COleControl::OnSetClientSite<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__onsetclientsite)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">`m_hResDLL`</ph> should be a member variable of the control class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use similar logic for localizing a control's property page.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To localize the property page, add code similar to the following sample to your property page's implementation file (in an override of <bpt id="p1">[</bpt>COlePropertyPage::OnSetPageSite<ept id="p1">](../mfc/reference/colepropertypage-class.md#colepropertypage__onsetpagesite)</ept>):</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxLoc#5</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>