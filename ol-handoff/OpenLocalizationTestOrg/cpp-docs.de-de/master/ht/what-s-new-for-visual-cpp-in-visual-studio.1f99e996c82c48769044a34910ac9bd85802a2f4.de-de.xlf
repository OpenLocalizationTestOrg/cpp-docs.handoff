<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab683b721467ec79ed5c6f077475fdae71a3764c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\what-s-new-for-visual-cpp-in-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9ff7a12f36a543ab393cae7ac001f9f35dfa7b4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86c65617fb0c27209f1ba6b9b311a0e8a307ca3f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>What's New for Visual C++ in Visual Studio | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What's New for Visual C++ in</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>brings many updates and fixes to the Visual C++ environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We've fixed over 250 bugs and reported issues in the compiler and tools, many submitted by customers through <bpt id="p1">[</bpt>Microsoft Connect<ept id="p1">]</ept><bpt id="p2">(https://connect.microsoft.com/VisualStudio "</bpt>Microsoft Connect<ept id="p2">")</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Thank you for reporting bugs!</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information on what's new in all of Visual Studio, please visit [What's new in <ph id="ph1">[!INCLUDE[vs_dev15_md](misc/includes/vs_dev15_md.md)]</ph>](https://go.microsoft.com/fwlink/?linkid=834481).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compiler and tools version number in <ph id="ph1">[!INCLUDE[vs_dev15_md](misc/includes/vs_dev15_md.md)]</ph> is 14.10.24629.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C++ Compiler</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>C++ conformance improvements</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this release, we've updated the C++ compiler and standard library with enhanced support for C++11 and C++14 features, as well as preliminary support for certain features expected to be in the C++17 standard.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For detailed information, see <bpt id="p1">[</bpt>C++ Conformance Improvements in Visual Studio 2017<ept id="p1">](cpp-conformance-improvements-2017.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>New compiler switches</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/std:c++14<ept id="p1">**</ept> and <bpt id="p2">**</bpt>/std:c++latest<ept id="p2">**</ept>: These compiler switches enable you to opt-in to specific versions of the ISO C++ programming language in a project.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standards version switches in the compiler<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Most of the new draft standard features are guarded by the /std:c++latest switch.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/permissive-<ept id="p1">](build/reference/permissive-standards-conformance.md)</ept>: Enable all strict standards conformance compiler options and disable most Microsoft-specific compiler extensions (but not __declspec(dllimport), for example).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Off by default but will be on by default at some point in the future.)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/diagnostics<ept id="p1">](build/reference/diagnostics-compiler-diagnostic-options.md)</ept>: Enable display of the line number, the line number and column, or the line number and column and a caret under the line of code where the diagnostic error or warning was found.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/debug:fastlink<ept id="p1">](build/reference/debug-generate-debug-info.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Enable up to 30% faster incremental link times (vs. Visual Studio 2015) by not copying all debug information into the PDB file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The PDB file instead points to the debug information for the object and library files used to create the executable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Faster C++ build cycle in VS “15” with /Debug:fastlink<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/faster-c-build-cycle-in-vs-15-with-debugfastlink/)</ept> and <bpt id="p2">[</bpt>Recommendations to speed C++ builds in Visual Studio<ept id="p2">](https://blogs.msdn.microsoft.com/vcblog/2016/10/26/recommendations-to-speed-c-builds-in-visual-studio/)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>allows using /sdl with /await.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We removed the /RTC limitation with Coroutines.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Codegen, security, diagnostics and versioning</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This release brings several improvements in optimization, code generation, toolset versioning and diagnostics.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Some notable improvements include:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Improved code generation of loops: Support for automatic vectorization of division of constant integers, better identification of memset patterns.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Improved code security: Improved emission of buffer overrun compiler diagnostics, and /guard:cf now guards switch statements that generate jump tables.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Versioning: The value of the built-in preprocessor macro _MSC_VER is now being monotonically updated at every Visual C++ toolset update.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Visual C++ Compiler Version<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/visual-c-compiler-version/)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>New toolset layout: The compiler and related build tools have a new location and directory structure on your development machine.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new layout enables side-by-side installations of multiple versions of the compiler.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiler Tools Layout in Visual Studio “15”<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/07/compiler-tools-layout-in-visual-studio-15/)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Improved diagnostics: The output window now shows the column where an error occurs.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>C++ compiler diagnostics improvements in VS “15” Preview 5<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/c-compiler-diagnostics-improvements-in-vs-15-rc/)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C++ Libraries</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Standard Library improvements:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Minor basic_string _ITERATOR_DEBUG_LEVEL != 0 diagnostics improvements.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tripping an IDL check in string machinery will now report the specific behavior that caused the trip.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, instead of "string iterator not dereferencable" you'll get "cannot dereference string iterator because it is out of range (e.g. an end iterator)".</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Performance improvement: made basic_string::find(char) overloads only call traits::find once.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Previously this was implemented as a general string search for a string of length 1.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Performance improvement: basic_string::operator== now checks the string's size before comparing the strings' contents.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Performance improvement: removed control coupling in basic_string which was difficult for the compiler optimizer to analyze.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Resolves VSO# 262848 "<ph id="ph1">&lt;string&gt;</ph>: reserve() does too much work".</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that for all short strings, calling reserve still has nonzero cost to do nothing.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>We added <ph id="ph1">\&lt;</ph>any<ph id="ph2">\&gt;</ph>, <ph id="ph3">\&lt;</ph>string_view<ph id="ph4">\&gt;</ph>, apply(), make_from_tuple().</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>std::vector has been overhauled for correctness and performance: aliasing during insertion/emplacement is now correctly handled as required by the Standard, the strong exception guarantee is now provided when required by the Standard via move_if_noexcept() and other logic, and insertion/emplacement perform fewer element operations.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The STL now avoids dereferencing null fancy pointers.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Added <ph id="ph1">\&lt;</ph>optional<ph id="ph2">\&gt;</ph>, <ph id="ph3">\&lt;</ph>variant<ph id="ph4">\&gt;</ph>, shared_ptr::weak_type, and <ph id="ph5">\&lt;</ph>cstdalign<ph id="ph6">\&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Enabled C++14 constexpr in min/max/minmax(initializer_list) and min_element/max_element/minmax_element().</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Improved weak_ptr::lock() performance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Fixed std::promise's move assignment operator, which previously could cause code to block forever.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Fixed compiler errors with atomic<ph id="ph1">\&lt;</ph>T <ph id="ph2">\*\&gt;</ph>'s implicit conversion to T <ph id="ph3">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>pointer_traits<ph id="ph1">\&lt;</ph>Ptr<ph id="ph2">\&gt;</ph> now correctly detects Ptr::rebind<ph id="ph3">\&lt;</ph>U<ph id="ph4">\&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Fixed a missing const qualifier in move_iterator's subtraction operator.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Fixed silent bad codegen for stateful user-defined allocators requesting propagate_on_container_copy_assignment and propagate_on_container_move_assignment.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>atomic<ph id="ph1">\&lt;</ph>T<ph id="ph2">\&gt;</ph> now tolerates overloaded operator&amp;().</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To increase compiler throughput, STL headers now avoid including declarations for unnecessary compiler intrinsics.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Slightly improved compiler diagnostics for incorrect bind() calls.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Open source library support</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Vcpkg is an open-source command line tool that greatly simplifies the process of acquiring and building open source C++ static libs and DLLS in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Vcpkg updates: Static linking is now available<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/11/01/vcpkg-updates-static-linking-is-now-available/)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CPPRest SDK 2.9.0</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The CPPRestSDK, a cross-platform web API for C++, has been updated to version 2.9.0.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CppRestSDK 2.9.0 is available on GitHub<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/21/cpprestsdk-2-9-0-is-available-on-github/)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>C++ IDE</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Intellisense</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The new SQLite-based database engine is now being used by default.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This will speed up database operations like Go To Definition and Find All References, and will significantly improve initial solution parse time.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The setting has been moved to Tools &gt; Options &gt; Text Editor &gt; C/C++ &gt; Advanced (it was formerly under ...C/C++ &gt; Experimental).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We've improved IntelliSense performance on projects and files not using precompiled headers – an Automatic Precompiled Header will be created for headers in the current file.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>We've added error filtering and help for IntelliSense errors in the error list.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Clicking on the error column now allows for filtering.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Also, clicking on the specific errors or pressing F1 will launch an online search for the error message.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Error List</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Error List Filtered</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Added the ability to filter Member List items by kind.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Member List Filtering</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Added a new experimental Predictive IntelliSense feature that provides contextually-aware filtering of what appears in the Member List.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>C++ IntelliSense Improvements – Predictive IntelliSense &amp; Filtering<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/c-intellisense-improvements-predictive-intellisense-filtering/)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Find All References (Shift+F12) now helps you get around easily, even in complex codebases.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It provides advanced grouping, filtering, sorting, searching within results, and (for some languages) colorization, so you can get a clear understanding of your references.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For C++, the new UI includes information about whether we are reading from or writing to a variable.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> The Dot-to-Arrow IntelliSense feature has been moved from experimental to advanced, and is now enabled by default.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The editor features Expand Scopes and Expand Precedence have also been moved from experimental to advanced.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> The experimental refactoring features Change Signature and Extract Function are now available by default.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> We've enabled the new experimental feature for C++ projects ‘Faster project load’.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The next time you open a C++ project it will load faster, and the time after that it will load really fast!</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Some of these features are common to other languages, and some are specific to C++.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about these new features, see <bpt id="p1">[</bpt>Announcing Visual Studio “15”<ept id="p1">](https://blogs.msdn.microsoft.com/visualstudio/2016/10/05/announcing-visual-studio-15-preview-5/)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Support for non-MSBuild projects with Open Folder</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 introduces the “Open Folder” feature, which enables you to code, build and debug in a folder containing source code without the need to create any solutions or projects.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This makes it a lot simpler to get started with Visual Studio even if your project is not an MSBuild-based project.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>With “Open Folder” you get access to the powerful code understanding, editing, building and debugging capabilities that Visual Studio already provides for MSBuild projects.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Bring your C++ codebase to Visual Studio with “Open Folder”<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/bring-your-c-codebase-to-visual-studio-with-open-folder/)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> Improvements to the Open Folder experience.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can customize the experience through these json files:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CppProperties.json to customize the IntelliSense and browsing experience.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Tasks.json to customize the build steps.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Launch.json to customize the debugging experience.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CMake support via Open Folder</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 introduces support for using CMake projects without converting to MSBuild project files (.vcxproj).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CMake support in Visual Studio<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/10/05/cmake-support-in-visual-studio/)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Opening CMake projects with “Open Folder” will automatically configure the environment for C++ editing, building and debugging.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> C++ IntelliSense will work without the need to create a CppProperties.json file in the root folder.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Along with this, we've added a new dropdown to allow users to easily switch between configurations provided by CMake and CppProperties.json files.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt><bpt id="p2">**</bpt>New in RC<ept id="p2">**</ept><ept id="p1">_</ept> Further configuration is supported via a CMakeSettings.json file that sits in the same folder as the CMakeLists.txt file.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Cmake Open Folder</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C++ Installation Workloads</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Windows Desktop Development with C++:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>We now provide a more granular installation experience for installing the original C++ workload.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>We have added selectable components that enable you to install just the tools that you need.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Please note that the indicated installation sizes for the components listed in the installer UI are not accurate and underestimate the total size.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Linux Development with C++:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The popular extension <bpt id="p1">[</bpt>Visual C++ for Linux Development<ept id="p1">](https://visualstudiogallery.msdn.microsoft.com/725025cf-7067-45c2-8d01-1e0fd359ae6e)</ept> is now part of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This installation provides everything you need to develop and debug C++ applications running on a Linux environment.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Game Development with C++:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Use the full power of C++ to build professional games powered by DirectX or Cocos2d.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Mobile Development with C++ (Android and iOS):</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can now create and debug mobile apps using Visual Studio that can target Android and iOS.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Universal Windows Apps:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>C++ comes as an optional component for the Universal Windows App workload.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>New options for C++ on Universal Windows Platform</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You now have new options for writing and packaging C++ applications for the Universal Windows Platform and the Windows Store: You can use the Desktop App Converter to package your existing desktop application for deployment through the Windows Store.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Visual C++ Runtime in Centennial project<ept id="p1">](https://blogs.msdn.microsoft.com/vcblog/2016/07/07/using-visual-c-runtime-in-centennial-project/)</ept> and <bpt id="p2">[</bpt>Bring your desktop app to the Universal Windows Platform (UWP) with the Desktop Bridge<ept id="p2">](https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-root)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When writing new code, you can now use C++/WinRT, a standard C++ language projection for the Windows Runtime implemented solely in header files.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It allows you to both author and consume Windows Runtime APIs using any standards-compliant C++ compiler.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>C++/WinRT is designed to provide C++ developers with first-class access to the modern Windows API.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>C++/WinRT Available on GitHub<ept id="p1">](https://moderncpp.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Clang/C2 Platform Toolset</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The Clang/C2 toolset that ships with <ph id="ph1">[!INCLUDE[vs_dev15_md](misc/includes/vs_dev15_md.md)]</ph> now supports the /bigobj switch, which is crucial for building large projects.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It also includes several important bug fixes, both in the front-end and the back-end of the compiler.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>C++ Code Analysis</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The C++ Core Checkers for enforcing the <bpt id="p1">[</bpt>C++ Core Guidelines<ept id="p1">](https://github.com/isocpp/CppCoreGuidelines)</ept> are now distributed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Simply enable the checkers in the Code Analysis Extensions dialog in the project's property pages and the extensions will be included when you run code analysis.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CppCoreCheck</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Visual Studio Graphics Diagnostics</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Visual Studio Graphics Diagnostics is a set of tools for recording and analyzing rendering and performance problems in Direct3D apps.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Graphics Diagnostics features can be used with apps that are running locally on your Windows PC, in a Windows device emulator, or on a remote PC or device.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Input &amp; Output for Vertex and Geometry shaders:<ept id="p1">**</ept> The ability to view input and output of vertex shaders and geometry shaders has been one of the most requested features, and it is now supported in the tools.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Simply select the VS or GS stage in the Pipeline Stages view to start inspecting its input and output in the table below.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Input/Output for shaders</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Search and filter in the object table:<ept id="p1">**</ept> Provides a quick and easy way to find the resources you're looking for.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Search</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resource History:<ept id="p1">**</ept> This new view provides a streamlined way of seeing the entire modification history of a resource as it was used during the rendering of a captured frame.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To invoke the history for any resource, simply click the clock icon next to any resource hyperlink.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Resource history</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This will display the new Resource History tool window, populated with the change history of the resource.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Resource history change</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Note that if your frame was captured with full call stack capturing enabled (<bpt id="p1">**</bpt>Visual Studio &gt; Tools &gt; Options &gt; Graphics Diagnostics<ept id="p1">**</ept>), then the context of each change event can be quickly deduced and inspected within your Visual Studio project.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>API Statistics:<ept id="p1">**</ept> View a high-level summary of API usage in your frame.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This can be handy in discovering calls you may not realize you’re making at all or calls you are making too much.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This window is available via <bpt id="p1">**</bpt>View &gt; API Statistics<ept id="p1">**</ept> in Visual Studio Graphics Analyzer.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>API stats</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Statistics:<ept id="p1">**</ept> View how much memory the driver is allocating for the resources you create in the frame.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This window is available via View-&gt;Memory Statistics in Visual Studio Graphics Analyzer.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Data can be copied to a CSV file for viewing in a spreadsheet by right clicking and choosing Copy All.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Memory stats</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Frame Validation:<ept id="p1">**</ept> The new errors and warnings list provides an easy way to navigate your event list based on potential issues detected by the Direct3D debug layer.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Click View-&gt;Frame Validation in Visual Studio Graphics Analyzer to open the window.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Then click Run Validation to start the analysis.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>It can take several minutes to complete, depending on the frame's complexity.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Frame validation</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Frame Analysis for D3D12:<ept id="p1">**</ept> Use Frame Analysis to analyze draw call performance with directed “what-if” experiments.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Switch to the Frame Analysis tab and run analysis to view the report.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For more details, watch the <bpt id="p1">[</bpt>GoingNative 25: Visual Studio Graphics Frame Analysis<ept id="p1">](https://channel9.msdn.com/Shows/C9-GoingNative/GoingNative-25-Offline-Analysis-Graphics-Tool)</ept> video.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Frame analysis</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GPU Usage Improvements:<ept id="p1">**</ept> Open traces taken via the Visual Studio GPU Usage profiler with either GPU View or the Windows Performance Analyzer (WPA) tool for more detailed analysis.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If you have the Windows Performance Toolkit installed there will be two hyperlinks, one for WPA and other for GPU View, at the bottom right of the session overview.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>GPU usage</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Traces opened in GPU View via this link support synchronized zooming and panning in the timeline between VS and GPU View.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A checkbox in VS is used to control whether synchronization is enabled or not.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>GPU View</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>