<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">988b50bc5874dd0e3e2e048b15c5972cdec989cd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\argument-description.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">198e40fe52ca4cb6ec9a78c5ffdc46294e9d478a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">396abcedd7af89e569b5cbd91bb64c49d47e938e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Argument Description | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Argument Description</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`argc`</ph> parameter in the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> and <bpt id="p2">**</bpt>wmain<ept id="p2">**</ept> functions is an integer specifying how many arguments are passed to the program from the command line.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Since the program name is considered an argument, the value of <ph id="ph1">`argc`</ph> is at least one.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`argv`</ph> parameter is an array of pointers to null-terminated strings representing the program arguments.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each element of the array points to a string representation of an argument passed to <bpt id="p1">**</bpt>main<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>wmain<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(For information about arrays, see <bpt id="p1">[</bpt>Array Declarations<ept id="p1">](../c-language/array-declarations.md)</ept>.) The <ph id="ph1">`argv`</ph> parameter can be declared either as an array of pointers to type <ph id="ph2">`char`</ph> (<ph id="ph3">`char *argv[]`</ph>) or as a pointer to pointers to type <ph id="ph4">`char`</ph> (<ph id="ph5">`char **argv`</ph>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>wmain<ept id="p1">**</ept>, the <ph id="ph1">`argv`</ph> parameter can be declared either as an array of pointers to type <ph id="ph2">`wchar_t`</ph> (<ph id="ph3">`wchar_t *argv[]`</ph>) or as a pointer to pointers to type <ph id="ph4">`wchar_t`</ph> (<ph id="ph5">`wchar_t **argv`</ph>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By convention, <ph id="ph1">`argv`</ph><bpt id="p1">**</bpt>[0]<ept id="p1">**</ept> is the command with which the program is invoked.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, it is possible to spawn a process using <bpt id="p1">[</bpt>CreateProcess<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682425)</ept> and if you use both the first and second arguments (<ph id="ph1">`lpApplicationName`</ph> and <ph id="ph2">`lpCommandLine`</ph>), <ph id="ph3">`argv`</ph><bpt id="p2">**</bpt>[0]<ept id="p2">**</ept> may not be the executable name; use <bpt id="p3">[</bpt>GetModuleFileName<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> to retrieve the executable name.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The last pointer (<ph id="ph1">`argv[argc]`</ph>) is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>getenv<ept id="p1">](../c-runtime-library/reference/getenv-wgetenv.md)</ept> in the <bpt id="p2">*</bpt>Run-Time Library Reference<ept id="p2">*</ept> for an alternative method for getting environment variable information.)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`envp`</ph> parameter is a pointer to an array of null-terminated strings that represent the values set in the user's environment variables.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`envp`</ph> parameter can be declared as an array of pointers to <ph id="ph2">`char`</ph> (<ph id="ph3">`char *envp[]`</ph>) or as a pointer to pointers to <ph id="ph4">`char`</ph> (<ph id="ph5">`char **envp`</ph>).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">**</bpt>wmain<ept id="p1">**</ept> function, the <ph id="ph1">`envp`</ph> parameter can be declared as an array of pointers to <ph id="ph2">`wchar_t`</ph> (<ph id="ph3">`wchar_t *envp[]`</ph>) or as a pointer to pointers to <ph id="ph4">`wchar_t`</ph> (<ph id="ph5">`wchar_t **envp`</ph>).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The end of the array is indicated by a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> <ph id="ph1">\*</ph>pointer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that the environment block passed to <bpt id="p1">**</bpt>main<ept id="p1">**</ept> or <bpt id="p2">**</bpt>wmain<ept id="p2">**</ept> is a "frozen" copy of the current environment.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you subsequently change the environment via a call to _<bpt id="p1">**</bpt>putenv<ept id="p1">**</ept> or <ph id="ph1">`_wputenv`</ph>, the current environment (as returned by <ph id="ph2">`getenv`/`_wgetenv`</ph> and the <ph id="ph3">`_environ`</ph> or <ph id="ph4">`_wenviron`</ph> variables) will change, but the block pointed to by <ph id="ph5">`envp`</ph> will not change.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`envp`</ph> parameter is ANSI compatible in C, but not in C++.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>main Function and Program Execution</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>