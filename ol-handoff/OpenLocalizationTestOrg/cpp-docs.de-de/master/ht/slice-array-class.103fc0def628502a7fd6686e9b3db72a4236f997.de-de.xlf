<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a56db37d5684438bac79bbc2d0273fcfbc53a2c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\slice-array-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e3573e272b641728c60f5ab2a0f2789624c90b1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12f03c46844e862dcbb28e1d20ace5ba2d48fbbe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>slice_array Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>slice_array Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An internal, auxiliary template class that supports slice objects by providing operations between subset arrays defined by the slice of a valarray.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The class describes an object that stores a reference to an object of class <bpt id="p1">[</bpt>valarray<ept id="p1">](../standard-library/valarray-class.md)</ept><bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p2">**</ept>, along with an object of class <bpt id="p3">[</bpt>slice<ept id="p3">](../standard-library/slice-class.md)</ept>, which describes the sequence of elements to select from the <bpt id="p4">**</bpt>valarray<ph id="ph2">\&lt;</ph>Type&gt;<ept id="p4">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The template class is created indirectly by certain valarray operations and cannot be used directly in the program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An internal, auxiliary template class that is used by the slice subscript operator:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type<ept id="p1">**</ept><ph id="ph1">&gt; `valarray`&lt; </ph><bpt id="p2">**</bpt>Type<ept id="p2">**</ept>:: <ph id="ph2">`operator[]`</ph> ( <ph id="ph3">`slice`</ph>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You construct a <bpt id="p1">**</bpt>slice_array<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept> object only by writing an expression of the form <bpt id="p2">[</bpt>va&amp;#91;sl&amp;#93;<ept id="p2">](../standard-library/valarray-class.md#valarray__operator_at)</ept>, for a slice <bpt id="p3">**</bpt>sl<ept id="p3">**</ept> of valarray <bpt id="p4">**</bpt>va<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The member functions of class slice_array then behave like the corresponding function signatures defined for <bpt id="p1">**</bpt>valarray<ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">**</ept>, except that only the sequence of selected elements is affected.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The sequence controlled by the slice_array is defined by the three parameters of the slice constructor, the index of the first element in the slice, the number of elements, and the distance between the elements.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A slice_array cut from valarray <bpt id="p1">**</bpt>va<ept id="p1">**</ept> declared by <bpt id="p2">**</bpt>va<ept id="p2">**</ept>[ <ph id="ph1">`slice`</ph>(2, 5, 3)] selects elements with indices 2, 5, 8, 11, and 14 from <bpt id="p3">**</bpt>va<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The indices must be valid for the procedure to be valid.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>slice::slice<ept id="p1">](../standard-library/slice-class.md#slice__slice)</ept> for an example of how to declare and use a slice_array.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>valarray&gt;</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>