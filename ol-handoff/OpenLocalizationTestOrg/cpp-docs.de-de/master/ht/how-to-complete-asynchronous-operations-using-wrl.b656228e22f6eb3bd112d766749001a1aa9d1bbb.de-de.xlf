<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9c666a8762ce39c526e2358540b06b718f6e2cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\how-to-complete-asynchronous-operations-using-wrl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">791ec19ddb432f2465295da7f6ee08d1eeac42b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea66cd450a80ed12484387f984da72d9aea1ef83</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Complete Asynchronous Operations Using WRL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Complete Asynchronous Operations Using WRL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document shows how to use the <ph id="ph1">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id="ph2">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) to start asynchronous operations and perform work when the operations complete.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document shows two examples.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first example starts an asynchronous timer and waits for the timer to expire.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, you specify the asynchronous action when you create the timer object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The second example runs a background worker thread.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example shows how to work with a <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> method that returns an <ph id="ph2">`IAsyncInfo`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Callback<ept id="p1">](../windows/callback-function-windows-runtime-cpp-template-library.md)</ept> function is an important part of both examples because it enables them to specify an event handler to process the results of the asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a more basic example that creates an instance of that component and retrieves a property value, see <bpt id="p1">[</bpt>How to: Activate and Use a Windows Runtime Component<ept id="p1">](../windows/how-to-activate-and-use-a-windows-runtime-component-using-wrl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These examples use lambda expressions to define the callbacks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also use function objects (functors), function pointers, or <bpt id="p1">[</bpt>std::function<ept id="p1">](../standard-library/function-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about C++ lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../cpp/lambda-expressions-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example: Working with a Timer</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following steps start an asynchronous timer and wait for the timer to expire.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The complete example follows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although you typically use the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> in a <ph id="ph2">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, this example uses a console app for illustration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Functions such as <ph id="ph1">`wprintf_s`</ph> are not available from a <ph id="ph2">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about the types and functions that you can use in a <ph id="ph1">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id="p1">[</bpt>CRT functions not supported by /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept> and <bpt id="p2">[</bpt>Win32 and COM for Windows Store apps<ept id="p2">](http://msdn.microsoft.com/library/windows/apps/br205757.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Include (<ph id="ph1">`#include`</ph>) any required <ph id="ph2">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>, <ph id="ph3">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>, or standard C++ library headers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#2</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Windows.System.Threading.h declares the types that are required to use an asynchronous timer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>We recommend that you utilize the <ph id="ph1">`using namespace`</ph> directive in your .cpp file to make the code more readable.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initialize the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#3</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create an activation factory for the <ph id="ph1">`ABI::Windows::System::Threading::IThreadPoolTimer`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#4</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> uses fully-qualified names to identify types.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RuntimeClass_Windows_System_Threading_ThreadPoolTimer`</ph> parameter is a string that's provided by the <ph id="ph2">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and contains the required runtime class name.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create an <bpt id="p1">[</bpt>Event<ept id="p1">](../windows/event-class-windows-runtime-cpp-template-library.md)</ept> object that synchronizes the timer callback to the main app.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#5</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This event is for demonstration only as part of a console app.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This example uses the event to ensure that an async operation completes before the app exits.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most apps, you typically donâ€™t wait for async operations to complete.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create an <ph id="ph1">`IThreadPoolTimer`</ph> object that expires after two seconds.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Callback`</ph> function to create the event handler (an <ph id="ph2">`ABI::Windows::System::Threading::ITimerElapsedHandler`</ph> object).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#6</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Print a message to the console and wait for the timer callback to complete.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`ComPtr`</ph> and RAII objects leave scope and are released automatically.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#7</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Here is the complete example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>wrl-consume-async#1</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`wrl-consume-async.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>cl.exe wrl-consume-async.cpp runtimeobject.lib</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example: Working with a Background Thread</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following steps start a worker thread and define the action that's performed by that thread.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The complete example follows.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to work with the <ph id="ph1">`ABI::Windows::Foundation::IAsyncAction`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can apply this pattern to any interface that implements <ph id="ph1">`IAsyncInfo`</ph>: <ph id="ph2">`IAsyncAction`</ph>, <ph id="ph3">`IAsyncActionWithProgress`</ph>, <ph id="ph4">`IAsyncOperation`</ph>, and<ph id="ph5">`IAsyncOperationWithProgress`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Include (<ph id="ph1">`#include`</ph>) any required <ph id="ph2">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>, <ph id="ph3">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>, or standard C++ library headers.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#2</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows.System.Threading.h declares the types that are required to use a worker thread.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>We recommend that you use the <ph id="ph1">`using namespace`</ph> directive in your .cpp file to make the code more readable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Initialize the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#3</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Create an activation factory for the <ph id="ph1">`ABI::Windows::System::Threading::IThreadPoolStatics`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#4</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Create an <bpt id="p1">[</bpt>Event<ept id="p1">](../windows/event-class-windows-runtime-cpp-template-library.md)</ept> object that synchronizes completion of the worker thread to the main app.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#5</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This event is for demonstration only as part of a console app.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This example uses the event to ensure that an async operation completes before the app exits.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In most apps, you typically donâ€™t wait for async operations to complete.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`IThreadPoolStatics::RunAsync`</ph> method to create a worker thread.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Callback`</ph> function to define the action.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#6</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsPrime`</ph> function is defined in the complete example that follows.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Print a message to the console and wait for the thread to complete.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`ComPtr`</ph> and RAII objects leave scope and are released automatically.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#7</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Here is the complete example:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>wrl-consume-asyncOp#1</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`wrl-consume-asyncOp.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>cl.exe wrl-consume-asyncOp.cpp runtimeobject.lib</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Windows Runtime C++ Template Library (WRL)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>