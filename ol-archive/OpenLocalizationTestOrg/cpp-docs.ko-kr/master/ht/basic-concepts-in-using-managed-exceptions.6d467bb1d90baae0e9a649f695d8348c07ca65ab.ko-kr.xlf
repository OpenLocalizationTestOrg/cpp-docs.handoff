<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb18ba712f4799aa2cab2b1e593a835b7c33f2ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\basic-concepts-in-using-managed-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d73b1084d92676b8b4785eeca40ad3a95d6572d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c592611caec4ff6e38f68794f630da10225689c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Basic Concepts in Using Managed Exceptions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Basic Concepts in Using Managed Exceptions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses exception handling in managed applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>That is, an application that is compiled with the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this topic</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Throwing Exceptions Under /clr</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Try/Catch Blocks for CLR Extensions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you compile with the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> option, you can handle CLR exceptions as well as standard <bpt id="p2">[</bpt>C++ exception handling<ept id="p2">](../cpp/cpp-exception-handling.md)</ept> and <bpt id="p3">[</bpt>structured exception handling<ept id="p3">](../cpp/structured-exception-handling-c-cpp.md)</ept> (SEH).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A CLR exception is any exception thrown by a managed type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System::Exception<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.exception.aspx)</ept> class provides many useful methods for processing CLR exceptions and is recommended as a base class for user-defined exception classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Catching exception types derived from an interface is not supported under <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Also, the common language runtime does not permit you to catch stack overflow exceptions; a stack overflow exception will terminate the process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about differences in exception handling in managed and unmanaged applications, see <bpt id="p1">[</bpt>Differences in Exception Handling Behavior Under Managed Extensions for C++<ept id="p1">](../dotnet/differences-in-exception-handling-behavior-under-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Throwing Exceptions Under /clr</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The C++ throw expression is extended to throw a handle to a CLR type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example creates a custom exception type and then throws an instance of that type:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A value type must be boxed before being thrown:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Try/Catch Blocks for CLR Extensions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The same <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block structure can be used for catching both CLR and native exceptions:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Order of Unwinding for C++ Objects</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unwinding occurs for any C++ objects with destructors that may be on the run-time stack between the throwing function and the handling function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because CLR types are allocated on the heap, unwinding does not apply to them.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The order of events for a thrown exception is as follows:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The runtime walks the stack looking for the appropriate catch clause, or in the case of SEH, an except filter for SEH, to catch the exception.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Catch clauses are searched first in lexical order, and then dynamically down the call stack.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once the correct handler is found, the stack is unwound to that point.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For each function call on the stack, its local objects are destructed and __finally blocks are executed, from most nested outward.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Once the stack is unwound, the catch clause is executed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Catching Unmanaged Types</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When an unmanaged object type is thrown, it is wrapped with an exception of type <bpt id="p1">[</bpt>System::Runtime.InteropServices::SEHException<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.sehexception.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When searching for the appropriate <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> clause, there are two possibilities.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If a native C++ type is encountered, the exception is unwrapped and compared to the type encountered.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This comparison allows a native C++ type to be caught in the normal way.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, if a <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> clause of type <bpt id="p2">**</bpt>SEHException<ept id="p2">**</ept> or any of its base classes is examined first, the clause will intercept the exception.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, you should place all catch clauses that catch native C++ types first before any catch clauses of CLR types.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Note that</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>will both catch any thrown type including SEH exceptions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If an unmanaged type is caught by catch(Object^), it will not destroy the thrown object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When throwing or catching unmanaged exceptions, we recommend that you use the <bpt id="p1">[</bpt>/EHsc<ept id="p1">](../build/reference/eh-exception-handling-model.md)</ept> compiler option instead of <bpt id="p2">**</bpt>/EHs<ept id="p2">**</ept> or <bpt id="p3">**</bpt>/EHa<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>safe_cast</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>