<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3172b1b85784b59969bbec0b021c891685160f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\enumerations-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">208fb8a019f01bbc1b781b0544a84b97b4ac48c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c8204acff8efe2e5012141e5d7c7150347af97a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enumerations (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enumerations (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An enumeration is a user-defined type that consists of a set of named integral constants that are known as enumerators.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article covers the ISO Standard C++ Language <ph id="ph1">`enum`</ph> type and the scoped (or strongly-typed) <ph id="ph2">`enum class`</ph> type which is introduced in C++11.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about the <ph id="ph1">`public enum class`</ph> or <ph id="ph2">`private enum class`</ph> types in C++/CLI and C++/CX, see <bpt id="p1">[</bpt>enum class<ept id="p1">](../windows/enum-class-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type name given to the enumeration.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The underlying type of the enumerators; all enumerators have the same underlying type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>May be any integral type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Comma-separated list of the enumerators in the enumeration.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Every enumerator or variable name in the scope must be unique.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the values can be duplicated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In a unscoped enum, the scope is the surrounding scope; in a scoped enum, the scope is the <ph id="ph1">`enum-list`</ph> itself.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By using this keyword in the declaration, you specify the enum is scoped, and an <ph id="ph1">`identifier`</ph> must be provided.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`struct`</ph> keyword in place of <ph id="ph2">`class`</ph>, as they are semantically equivalent in this context.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An enumeration provides context to describe a range of values which are represented as named constants and are also called enumerators.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the original C and C++ enum types, the unqualified enumerators are visible throughout the scope in which the enum is declared.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In scoped enums, the enumerator name must be qualified by the enum type name.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this basic difference between the two kinds of enums:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Every name in an enumeration is assigned an integral value that corresponds to its place in the order of the values in the enumeration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, the first value is assigned 0, the next one is assigned 1, and so on, but you can explicitly set the value of an enumerator, as shown here:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The enumerator <ph id="ph1">`Diamonds`</ph> is assigned the value <ph id="ph2">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Subsequent enumerators, if they are not given an explicit value, receive the value of the previous enumerator plus one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`Hearts`</ph> would have the value 2, <ph id="ph2">`Clubs`</ph> would have 3, and so on.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Every enumerator is treated as a constant and must have a unique name within the scope where the <ph id="ph1">`enum`</ph> is defined (for unscoped enums) or within the enum itself (for scoped enums).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The values given to the names do not have to be unique.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if the declaration of a unscoped enum <ph id="ph1">`Suit`</ph> is this:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Then the values of <ph id="ph1">`Diamonds`</ph>, <ph id="ph2">`Hearts`</ph>, <ph id="ph3">`Clubs`</ph>, and <ph id="ph4">`Spades`</ph> are 5, 6, 4, and 5, respectively.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Notice that 5 is used more than once; this is allowed even though it may not be intended.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These rules are the same for scoped enums.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Casting rules</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Unscoped enum constants can be implicitly converted to <ph id="ph1">`int`</ph>, but an <ph id="ph2">`int`</ph> is never implicitly convertible to an enum value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows what happens if you try to assign <ph id="ph1">`hand`</ph> a value that is not a <ph id="ph2">`Suit`</ph>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A cast is required to convert an <ph id="ph1">`int`</ph> to a scoped or unscoped enumerator.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, you can promote a unscoped enumerator to an integer value without a cast.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using implicit conversions in this way can lead to unintended side-effects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To help eliminate programming errors associated with unscoped enums, scoped enum values are strongly typed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Scoped enumerators must be qualified by the enum type name (identifier) and cannot be implicitly converted, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Notice that the line <ph id="ph1">`hand = account_num;`</ph> still causes the error that occurs with unscoped enums, as shown earlier.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is allowed with an explicit cast.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, with scoped enums, the attempted conversion in the next statement, <ph id="ph1">`account_num = Suit::Hearts;`</ph>, is no longer allowed without an explicit cast.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>C Enumeration Declarations</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>