<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e79eef1de69240c4c9cea75f707abb094a8798e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\porting\porting-guide-mfc-scribble.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0e3ab31570f33396a43720b7c628893abba8d8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be76936b40596069ace9c15be329e346c56d1d71</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Porting Guide: MFC Scribble | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting Guide: MFC Scribble</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic is the first of several topics that introduce you to the upgrade procedure for Visual C++ projects that were created in older versions of Visual Studio to <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These topics introduce the upgrade process by example, starting with a very simple project and moving to slightly more complex ones.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this topic, we work through the upgrade process for a specific project, MFC Scribble.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is suitable as a basic introduction to the upgrade process for C++ projects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each version of Visual Studio introduces possible incompatibilities that can complicate moving code from an older version of Visual Studio to a newer one.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Sometimes the required changes are in your code, so you must recompile and update your code, and sometimes the required changes are to the project files.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you open a project that was created with a previous version of Visual Studio, Visual Studio automatically asks you whether to update a project or solution to the latest version.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These tools usually upgrade only the project files; they do not modify your source code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>MFC Scribble</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>MFC Scribble is a well-known sample that has been included in many different releases of Visual C++.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It's a simple drawing application that illustrates some of the basic features of MFC.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are various versions of it available, including both managed and native code versions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For this example, we found an old version of Scribble in native code from Visual Studio 2005 and opened it in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Before attempting to upgrade, we back up our entire solution and all its contents.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Next, we needed to decide on the specific method of upgrade.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more complex solutions and projects that haven't been upgraded for a long time, you should consider upgrading one version of Visual Studio at a time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>That way, you can narrow down which version of Visual Studio introduced a problem.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a simple project, it's worth trying to open it in the latest version of Visual Studio and allowing the wizard to convert the project.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If that doesn't work, you can try upgrading one version at a time, if you have access to the appropriate versions of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that you can also run devenv at the command line, using the <ph id="ph1">`/Upgrade`</ph> option, instead of using the wizard to upgrade your projects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>/Upgrade (devenv.exe)<ept id="p1">](/visualstudio/ide/reference/upgrade-devenv-exe)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>That could be helpful in automating the upgrade process for a large number of projects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Step 1.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Converting the Project File</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you open an old project file in Visual Studio 2015, Visual Studio offers to convert the project file to the most recent version, which we accepted.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following dialog box appeared:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Review Project and Solution Changes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An error occurred notifying us that the Itanium target is not available and won't be converted.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>At the time the previous Scribble project was created, Itanium was an important target platform.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Windows platform no longer supports Itanium, so we chose to continue without supporting the Itanium platform.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Visual Studio then displayed a migration report listing all of the issues with the old project file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Upgrade Report</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this case, the issues were all warnings, and Visual Studio made the appropriate changes in the project file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The big difference as far as the project is concerned is that the build tool changed from vcbuild to msbuild.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This change was first introduced in Visual Studio 2010.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Other changes include some rearrangement of the sequence of elements in the project file itself.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>None of the issues required further attention for this simple project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Step 2.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Getting it to build</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Before building, we check the platform toolset so we know what compiler version the project system is using.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the project properties dialog, under <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, in the <bpt id="p2">**</bpt>General<ept id="p2">**</ept> category, look at the <bpt id="p3">**</bpt>Platform Toolset<ept id="p3">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It contains the version of Visual Studio and the platform tool version number, which in this case is v140 for the <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph> version of the tools.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you convert a project that was originally compiled with Visual C++ 2010, 2012, or 2013, the toolset is not automatically updated to the <ph id="ph1">[!INCLUDE[cpp_dev14_long](../porting/includes/cpp_dev14_long_md.md)]</ph> toolset.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the case of Scribble, the version we converted was created for Visual Studio 2005, so it is converted to use the latest toolset.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When building, the first issue that appears is about MBCS code.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The link in the error message takes us to a topic about the deprecation of MBCS in Visual Studio 2013.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>By default, the MFC installation in Visual C++ 2013 doesn't include the MBCS version of MFC.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The MBCS version of MFC is required to build this project in its current form.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>We can either migrate the code to use Unicode, or we can download and install the MBCS version of MFC.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If we go with downloading the MBCS version of MFC, we can add a definition for the macro NO_WARN_MBCS_MFC_DEPRECATION to suppress this warning.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To download the MBCS version of MFC, first read about the deprecation of the MBCS version of MFC in the article <bpt id="p1">[</bpt>MFC MBCS DLL Add-on<ept id="p1">](../mfc/mfc-mbcs-dll-add-on.md)</ept>, and at the VC blog, and download the MBCS version of MFC <bpt id="p2">[</bpt>here<ept id="p2">](http://www.microsoft.com/download/details.aspx?id=44930)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the project properties dialog box, under the <bpt id="p1">**</bpt>C/C++<ept id="p1">**</ept> category, under <bpt id="p2">**</bpt>Preprocessor<ept id="p2">**</ept>, add the NO_WARN_MBCS_MFC_DEPRECATION to the list of predefined macros.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To make the switch to Unicode, open the project's properties, under <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, choose the <bpt id="p2">**</bpt>General<ept id="p2">**</ept> section, and locate the <bpt id="p3">**</bpt>Character Set<ept id="p3">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Change this from <bpt id="p1">**</bpt>Use Multi-Byte Character Set<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Use Unicode Character Set<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The effect of this change is that now the _UNICODE and UNICODE macros are defined and _MBCS is not, which you can verify in the properties dialog under the <bpt id="p1">**</bpt>C/C++<ept id="p1">**</ept> category at the <bpt id="p2">**</bpt>Command Line<ept id="p2">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Although Scribble project wasn't set up to compile with Unicode characters, it was already written with TCHAR instead of char, so nothing actually needs to be changed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The project builds successfully with the Unicode character set.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, there's another problem.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The compiler tells us that _WINNT32_WINNT is not defined:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is a warning, not an error, and is very common when upgrading a Visual C++ project.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the macro that defines what the lowest version of Windows that our application will run on.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If we ignore the warning, we accept the default value, _WIN32_WINNT_MAXVER, which means the current version of Windows.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For a table of possible values, see <bpt id="p1">[</bpt>Using the Windows Headers<ept id="p1">](https://msdn.microsoft.com/en-us/library/aa383745.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, we can set it to run on any version from Vista onwards.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the code uses parts of the Windows API that aren't available on the version of Windows that you specify with this macro, you should see that as a compiler error.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the case of the Scribble code, there is no error.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Step 3.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Testing and debugging</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>There is no test suite, so we just started the app, tested its features manually through the UI.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>No issues were observed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Step 4.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Improve the code</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Now that you've migrated to Visual Studio 2015, you might want to make some changes to take advantage of new C++ features.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The current version of Visual C++ compiler is much more conformant to the C++ standard then previous versions, so if you have a mind to make some code changes to make your code more secure, and more portable to other compilers and operating systems, you should consider some improvements.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Scribble was a small and simple Windows desktop application, and it wasn't hard to convert.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Many small, simple apps convert just as easily to the new version.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more complex applications, with many more lines of code, older legacy code that might not be up to modern engineering standards, multiple projects and libraries, custom build steps, or for complex scripted automated builds, it will take more time to upgrade.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Continue with the <bpt id="p1">[</bpt>next example<ept id="p1">](../porting/porting-guide-com-spy.md)</ept>, an ATL/COM application called COM Spy.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Porting and Upgrading: Examples and Case Studies</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Next Example: COM Spy</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>