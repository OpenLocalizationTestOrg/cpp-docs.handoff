<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4831a2ca669480083238a6b0be26181e574e1b3c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\extension-dlls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63305eae5d0cf1cd692ea7a46572730a3fbc42c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d53622f627db778bb23ec88a43726206ed99810</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extension DLLs | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extension DLLs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An MFC extension DLL is a DLL that typically implements reusable classes derived from the existing Microsoft Foundation Class Library classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An MFC extension DLL has the following features and requirements:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The client executable must be an MFC application compiled with <bpt id="p1">**</bpt>_AFXDLL<ept id="p1">**</ept> defined.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An extension DLL can also be used by a regular DLL that is dynamically linked to MFC.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Extension DLLs should be compiled with <ph id="ph1">`_AFXEXT`</ph> defined.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This forces <bpt id="p1">**</bpt>_AFXDLL<ept id="p1">**</ept> to be also defined and ensures that the proper declarations is pulled in from the MFC header files.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It also ensures that <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> is defined as <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept> while building the DLL, which is necessary if you are using this macro to declare the classes in your extension DLL.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Extension DLLs should not instantiate a class derived from <ph id="ph1">`CWinApp`</ph>, but should rely on the client application (or DLL) to provide this object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Extension DLLs should, however, provide a <ph id="ph1">`DllMain`</ph> function and do any necessary initialization there.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Extension DLLs are built using the dynamic-link library version of MFC (also known as the shared version of MFC).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only MFC executables (either applications or regular DLLs) that are built with the shared version of MFC can use an extension DLL.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Both the client application and the extension DLL must use the same version of MFCx0.dll.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With an extension DLL, you can derive new custom classes from MFC and then offer this extended version of MFC to applications that call your DLL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extension DLLs can also be used for passing MFC-derived objects between the application and the DLL.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The member functions associated with the passed object exist in the module where the object was created.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because these functions are properly exported when using the shared DLL version of MFC, you can freely pass MFC or MFC-derived object pointers between an application and the extension DLLs it loads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An MFC extension DLL uses a shared version of MFC in the same way an application uses the shared DLL version of MFC, with a few additional considerations:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It does not have a <ph id="ph1">`CWinApp`</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It must work with the <ph id="ph1">`CWinApp`</ph>-derived object of the client application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This means that the client application owns the main message pump, the idle loop, and so on.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It calls <ph id="ph1">`AfxInitExtensionModule`</ph> in its <ph id="ph2">`DllMain`</ph> function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The return value of this function should be checked.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If a zero value is returned from <ph id="ph1">`AfxInitExtensionModule`</ph>, return 0 from your <ph id="ph2">`DllMain`</ph> function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It creates a <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> object during initialization if the extension DLL wants to export <ph id="ph1">`CRuntimeClass`</ph> objects or resources to the application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Before version 4.0 of MFC, this type of DLL was called an AFXDLL.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>AFXDLL refers to the <bpt id="p1">**</bpt>_AFXDLL<ept id="p1">**</ept> preprocessor symbol that is defined when building the DLL.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The import libraries for the shared version of MFC are named according to the convention described in <bpt id="p1">[</bpt>Naming conventions for MFC DLLs<ept id="p1">](../build/naming-conventions-for-mfc-dlls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual C++ supplies prebuilt versions of the MFC DLLs, plus a number of non-MFC DLLs that you can use and distribute with your applications.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These are documented in Redist.txt, which is installed to the Program Files\Microsoft Visual Studio folder.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you are exporting using a .def file, place the following code at the beginning and end of your header file:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These four lines ensure that your code is compiled correctly for an extension DLL.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Leaving out these four lines might cause your DLL to either compile or link incorrectly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you need to pass an MFC or MFC-derived object pointer to or from an MFC DLL, the DLL should be an extension DLL.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The member functions associated with the passed object exist in the module where the object was created.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because these functions are properly exported when using the shared DLL version of MFC, you can freely pass MFC or MFC-derived object pointers between an application and the extension DLLs it loads.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Due to C++ name mangling and export issues, the export list from an extension DLL might be different between the debug and retail versions of the same DLL and DLLs for different platforms.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The retail MFCx0.dll has about 2,000 exported entry points; the debug MFCx0D.dll has about 3,000 exported entry points.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>MFCx0.dll and all extension DLLs loaded into a client application's address space use the same memory allocator, resource loading, and other MFC global states as if they were in the same application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is significant because the non-MFC DLL libraries and the regular DLLs do the exact opposite and have each DLL allocating out of its own memory pool.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If an extension DLL allocates memory, that memory can freely intermix with any other application-allocated object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Also, if an application that dynamically links to MFC fails, the protection of the operating system maintains the integrity of any other MFC application sharing the DLL.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Similarly other global MFC states, like the current executable file to load resources from, are also shared between the client application and all MFC extension DLLs as well as MFCx0.dll itself.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Sharing Resources and Classes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Exporting resources is done through a resource list.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each application contains a singly linked list of <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When looking for a resource, most of the standard MFC implementations that load resources look first at the current resource module (<ph id="ph1">`AfxGetResourceHandle`</ph>) and if the resource is not found walk the list of <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> objects attempting to load the requested resource.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Walking the list has the disadvantages that it is slightly slower and requires managing resource ID ranges.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It has the advantage that a client application that links to several extension DLLs can use any DLL-provided resource without having to specify the DLL instance handle.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>is an API used for walking the resource list to look for a given match.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It takes the name and type of a resource and returns the resource handle where it was first found (or NULL).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you do not want to walk the list and only load resources from a specific place, use the functions <ph id="ph1">`AfxGetResourceHandle`</ph> and <ph id="ph2">`AfxSetResourceHandle`</ph> to save the old handle and set the new handle.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Be sure to restore the old resource handle before you return to the client application.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For an example of using this approach to explicitly load a menu, see Testdll2 .cpp in the MFC sample <bpt id="p1">[</bpt>DLLHUSK<ept id="p1">](http://msdn.microsoft.com/en-us/dfcaa6ff-b8e2-4efd-8100-ee3650071f90)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Dynamic creation of MFC objects given an MFC name is similar.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The MFC object deserialization mechanism needs to have all of the <ph id="ph1">`CRuntimeClass`</ph> objects registered so that it can reconstruct by dynamically creating C++ objects of the required type based on what was stored earlier.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the case of the MFC sample <bpt id="p1">[</bpt>DLLHUSK<ept id="p1">](http://msdn.microsoft.com/en-us/dfcaa6ff-b8e2-4efd-8100-ee3650071f90)</ept>, the list looks something like:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>xx<ept id="p1">*</ept> is the version number; for example, 42 represents version 4.2.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The MFCxx.dll is usually last on the resource and class list.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>MFCxx.dll includes all of the standard MFC resources, including prompt strings for all of the standard command IDs.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Placing it at the end of the list allows DLLs and the client application itself not to have their own copy of the standard MFC resources, but to rely on the shared resources in the MFCxx.dll instead.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Merging the resources and class names of all DLLs into the client application's name space has the disadvantage of requiring you to be careful with what IDs or names you pick.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DLLHUSK<ept id="p1">](http://msdn.microsoft.com/en-us/dfcaa6ff-b8e2-4efd-8100-ee3650071f90)</ept> sample manages the shared resource name space by using multiple header files.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If your MFC extension DLL needs to maintain extra data for each application, you can derive a new class from <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> and create it in <ph id="ph1">`DllMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When running, the DLL can check the current application's list of <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> objects to find the one for that particular extension DLL.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initialize an extension DLL</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>What do you want to know more about?</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Tips on using shared resource files</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>DLL Version of MFC</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Regular DLLs statically linked to MFC</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Regular DLLs dynamically linked to MFC</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Using Database, OLE, and Sockets Extension DLLs in Regular DLLs</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>DLLs in Visual C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>