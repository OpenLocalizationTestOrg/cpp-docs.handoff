<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">faa26dd0c9bbe2e8dd49415947c91508c184a073</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\move-constructors-and-move-assignment-operators-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52f64c901e32911a83774bef8d2bb5bd353f9847</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67d687fd6b36b8d85268e75e45011f0890600140</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Move Constructors and Move Assignment Operators (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Move Constructors and Move Assignment Operators (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to write a <bpt id="p1">*</bpt>move constructor<ept id="p1">*</ept> and a move assignment operator for a C++ class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A move constructor enables you to implement move semantics, which can significantly improve the performance of your applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about move semantics, see <bpt id="p1">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic builds upon the following C++ class, <ph id="ph1">`MemoryBlock`</ph>, which manages a memory buffer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following procedures describe how to write a move constructor and a move assignment operator for the example C++ class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To create a move constructor for a C++ class</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Define an empty constructor method that takes an rvalue reference to the class type as its parameter, as demonstrated in the following example:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the move constructor, assign the class data members from the source object to the object that is being constructed:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Assign the data members of the source object to default values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This prevents the destructor from freeing resources (such as memory) multiple times:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To create a move assignment operator for a C++ class</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Define an empty assignment operator that takes an rvalue reference to the class type as its parameter and returns a reference to the class type, as demonstrated in the following example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the move assignment operator, add a conditional statement that performs no operation if you try to assign the object to itself.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the conditional statement, free any resources (such as memory) from the object that is being assigned to.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example frees the <ph id="ph1">`_data`</ph> member from the object that is being assigned to:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Follow steps 2 and 3 in the first procedure to transfer the data members from the source object to the object that is being constructed:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Return a reference to the current object, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example shows the complete move constructor and move assignment operator for the <ph id="ph1">`MemoryBlock`</ph> class:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example shows how move semantics can improve the performance of your applications.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The example adds two elements to a vector object and then inserts a new element between the two existing elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, the <ph id="ph2">`vector`</ph> class uses move semantics to perform the insertion operation efficiently by moving the elements of the vector instead of copying them.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Before <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, this example produces the following output:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The version of this example that uses move semantics is more efficient than the version that does not use move semantics because it performs fewer copy, memory allocation, and memory deallocation operations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To prevent resource leaks, always free resources (such as memory, file handles, and sockets) in the move assignment operator.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To prevent the unrecoverable destruction of resources, properly handle self-assignment in the move assignment operator.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you provide both a move constructor and a move assignment operator for your class, you can eliminate redundant code by writing the move constructor to call the move assignment operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows a revised version of the move constructor that calls the move assignment operator:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>std::move<ept id="p1">](../standard-library/utility-functions.md#move)</ept> function preserves the rvalue property of the <ph id="ph1">`other`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Rvalue Reference Declarator: &amp;&amp;</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>utility&gt; move</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>