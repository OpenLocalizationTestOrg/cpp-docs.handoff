<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6ec60b5d2f6b6d21399c51d9e1ddc47f370b1e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\property-declaration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa7274fb1d5750d6d68b6a2b82e2eafced1d81e4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9326c1ef6543d366b164cbc7542aa53cf54580bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Property Declaration | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Property Declaration</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The way to declare a property in a managed class has changed from Managed Extensions for C++ to <ph id="ph1">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the Managed Extensions design, each <ph id="ph1">`set`</ph> or <ph id="ph2">`get`</ph> property accessor is specified as an independent method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The declaration of each method is prefixed with the <ph id="ph1">`__property`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The method name begins with either <ph id="ph1">`set_`</ph> or <ph id="ph2">`get_`</ph> followed by the actual name of the property (as visible to the user).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Thus, a <ph id="ph1">`Vector`</ph> providing an <ph id="ph2">`x`</ph> coordinate <ph id="ph3">`get`</ph> property would name it <ph id="ph4">`get_x`</ph> and the user would invoke it as <ph id="ph5">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This naming convention and separate specification of methods actually reflects the underlying runtime implementation of the property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, here is our <ph id="ph1">`Vector`</ph> with a set of coordinate properties:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This spreads out the functionality associated with a property and requires the user to lexically unify the associated sets and gets.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Moreover, it is verbose.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the new syntax, which is more like that of C#, the <ph id="ph1">`property`</ph> keyword is followed by the type of the property and its unadorned name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`set`</ph> and <ph id="ph2">`get`</ph> access methods are placed within a block following the property name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that unlike C#, the signature of the access method is specified.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, here is the code example above translated into the new syntax.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the access methods of the property reflect distinct access levels â€“ such as a <ph id="ph1">`public``get`</ph> and a <ph id="ph2">`private`</ph> or <ph id="ph3">`protected``set`</ph>, an explicit access label can be specified.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, the access level of the property reflects that of the enclosing access level.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, in the above definition of <ph id="ph1">`Vector`</ph>, both the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> methods are <ph id="ph4">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To make the <ph id="ph1">`set`</ph> method <ph id="ph2">`protected`</ph> or <ph id="ph3">`private`</ph>, the definition would be revised as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The scope of an access keyword within a property extends until either the closing brace of the property or the specification of an additional access keyword.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It does not extend beyond the definition of the property to the enclosing access level within which the property is defined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the above declaration, for example, <ph id="ph1">`Vector::dot()`</ph> is a public method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Writing the set/get properties for the three <ph id="ph1">`Vector`</ph> coordinates involves three steps:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>declare a private state member of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>return it when the user wishes to get its value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>assign it the new value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the new syntax, a shorthand property syntax is available which automates this usage pattern:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The interesting side effect of the shorthand property syntax is that although the backstage state member is generated by the compiler, it is not accessible within the class except through the set/get accessors.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Member Declarations within a Class or Interface (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>property</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>