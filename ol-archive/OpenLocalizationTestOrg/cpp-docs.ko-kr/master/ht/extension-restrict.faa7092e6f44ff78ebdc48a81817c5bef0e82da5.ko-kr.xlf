<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5a836aaf632ae656be0a81cee54f0123c3755f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\extension-restrict.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83f01c57e8f9a075377d9fd447a736019a5c312a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f02ba9c84c74dfe19ab9bf9c51e72c40141e28b7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__restrict | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__restrict</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Like the <bpt id="p1">**</bpt>__declspec ( <bpt id="p2">[</bpt>restrict<ept id="p2">](../cpp/restrict.md)</ept> )<ept id="p1">**</ept> modifier, the <ph id="ph1">`__restrict`</ph> keyword indicates that a symbol is not aliased in the current scope.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__restrict`</ph> keyword differs from the <ph id="ph2">`__declspec ( restrict )`</ph> modifier in the following ways:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__restrict`</ph> keyword is valid only on variables, and <ph id="ph2">`__declspec ( restrict )`</ph> is only valid on function declarations and definitions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>is similar to <ph id="ph1">`restrict`</ph> from the C99 spec, but <ph id="ph2">`__restrict`</ph> can be used in C++ or C programs.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`__restrict`</ph> is used, the compiler will not propagate the no-alias property of a variable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That is, if you assign a <ph id="ph1">`__restrict`</ph> variable to a non-<ph id="ph2">`__restrict`</ph> variable, the compiler will still allow the non-__restrict variable to be aliased.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is different from the behavior of the <ph id="ph1">`restrict`</ph> keyword from the C99 specification.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Generally, if you affect the behavior of an entire function, it is better to use <ph id="ph1">`__declspec ( restrict )`</ph> than the keyword.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2015 and later, <ph id="ph1">`__restrict`</ph> can be used on C++ references.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When used on a variable that also has the <bpt id="p1">[</bpt>volatile<ept id="p1">](../cpp/volatile-cpp.md)</ept> keyword, <ph id="ph1">`volatile`</ph> will take precedence.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>