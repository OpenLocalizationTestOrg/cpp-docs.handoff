<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91e10200576389edcaff55860da3a8a701e75bab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ios-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff7a47fa5fccced8490077136f307404b04de5ed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3b4f91bab10ac4289f3b02059a9fc5b3a2f479c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ios<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ios<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>defaultfloat</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>boolalpha</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>dec</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>fixed</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>hex</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>internal</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>left</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>noboolalpha</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>noshowbase</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>noshowpoint</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>noshowpos</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>noskipws</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>nounitbuf</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>nouppercase</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>oct</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>right</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>scientific</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>showbase</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>showpoint</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>showpos</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>skipws</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>unitbuf</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>uppercase</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>boolalpha</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifies that variables of type <bpt id="p1">[</bpt>bool<ept id="p1">](../cpp/bool-cpp.md)</ept> appear as <bpt id="p2">**</bpt>true<ept id="p2">**</ept> or <bpt id="p3">**</bpt>false<ept id="p3">**</ept> in the stream.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By default, variables of type <ph id="ph1">`bool`</ph> are displayed as 1 or 0.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::boolalpha`</ph>), and then returns</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>noboolalpha<ept id="p1">](../standard-library/ios-functions.md#noboolalpha)</ept> reverses the effect of <ph id="ph1">`boolalpha`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>dec</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies that integer variables appear in base 10 notation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By default, integer variables are displayed in base 10.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dec<ept id="p1">**</ept> effectively calls <ph id="ph1">` str``.`</ph><bpt id="p2">[</bpt>setf<ept id="p2">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::dec`</ph><bpt id="p3">**</bpt>, ios_base::basefield<ept id="p3">**</ept>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ios<ph id="ph1">&amp;gt;</ph> defaultfloat</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Configures the flags of an <ph id="ph1">`ios_base`</ph> object to use a default display format for float values.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`ios_base`</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls _I <ph id="ph1">`osbase.`</ph><bpt id="p1">[</bpt>ios_base::unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept><ph id="ph2">`(ios_base::floatfield)`</ph>, then returns _I <ph id="ph3">`osbase`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>fixed</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specifies that a floating-point number is displayed in fixed-decimal notation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fixed<ept id="p1">**</ept> is the default display notation for floating-point numbers.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scientific<ept id="p1">](../standard-library/ios-functions.md#scientific)</ept> causes floating-point numbers to be displayed using scientific notation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <bpt id="p1">*</bpt> str.<ept id="p1">*</ept><bpt id="p2">[</bpt>setf<ept id="p2">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph1">`ios_base::fixed`</ph>, <bpt id="p3">**</bpt>ios_base::floatfield<ept id="p3">**</ept>), and then returns <ph id="ph2">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>hex</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Specifies that integer variables shall appear in base 16 notation.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By default, integer variables are displayed in base 10 notation.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dec<ept id="p1">](../standard-library/ios-functions.md#dec)</ept> and <bpt id="p2">[</bpt>oct<ept id="p2">](../standard-library/ios-functions.md#oct)</ept> also change the way integer variables appear.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str`</ph><bpt id="p1">**</bpt>.<ept id="p1">**</ept><bpt id="p2">[</bpt>setf<ept id="p2">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::hex`</ph>, <bpt id="p3">**</bpt>ios_base::basefield<ept id="p3">**</ept>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>dec<ept id="p1">](../standard-library/ios-functions.md#dec)</ept> for an example of how to use <bpt id="p2">**</bpt>hex<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>internal</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Causes a number's sign to be left justified and the number to be right justified.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A reference to the object from which <ph id="ph1">` str`</ph> is derived.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>showpos<ept id="p1">](../standard-library/ios-functions.md#showpos)</ept> causes the sign to display for positive numbers.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id="p2">[</bpt>ios_base::internal<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>, <bpt id="p3">[</bpt>ios_base::adjustfield<ept id="p3">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id="ph1">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>left</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Causes text that is not as wide as the output width to appear in the stream flush with the left margin.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::left`</ph>, <bpt id="p2">**</bpt>ios_base::adjustfield<ept id="p2">**</ept>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>noboolalpha</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies that variables of type <bpt id="p1">[</bpt>bool<ept id="p1">](../cpp/bool-cpp.md)</ept> appear as 1 or 0 in the stream.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`noboolalpha`</ph> is in effect.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::boolalpha`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>boolalpha<ept id="p1">](../standard-library/ios-functions.md#boolalpha)</ept> reverses the effect of <ph id="ph1">`noboolalpha`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>boolalpha<ept id="p1">](../standard-library/ios-functions.md#boolalpha)</ept> for an example of using <ph id="ph1">`noboolalpha`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>noshowbase</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Turns off indicating the notational base in which a number is displayed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>is on by default.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>showbase<ept id="p1">](../standard-library/ios-functions.md#showbase)</ept> to indicate the notational base of numbers.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::showbase`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>showbase<ept id="p1">](../standard-library/ios-functions.md#showbase)</ept> for an example of how to use <ph id="ph1">`noshowbase`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>noshowpoint</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Displays only the whole-number part of floating-point numbers whose fractional part is zero.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>is on by default; use <bpt id="p1">[</bpt>showpoint<ept id="p1">](../standard-library/ios-functions.md#showpoint)</ept> and <bpt id="p2">[</bpt>precision<ept id="p2">](../standard-library/ios-base-class.md#ios_base__precision)</ept> to display zeros after the decimal point.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::showpoint`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>noshowpos</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Causes positive numbers to not be explicitly signed.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>is on by default.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::showps`</ph>), then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>showpos<ept id="p1">](../standard-library/ios-functions.md#showpos)</ept> for an example of using <ph id="ph1">`noshowpos`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>noskipws</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Cause spaces to be read by the input stream.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>skipws<ept id="p1">](../standard-library/ios-functions.md#skipws)</ept> is in effect.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>When a space is read in the input stream, it signals the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::skipws`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>nounitbuf</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Causes output to be buffered and processed on when the buffer is full.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unitbuf<ept id="p1">](../standard-library/ios-functions.md#unitbuf)</ept> causes the buffer to be processed when it is not empty.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::unitbuf`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>nouppercase</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Specifies that hexadecimal digits and the exponent in scientific notation appear in lowercase.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>unsetf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id="ph2">`ios_base::uppercase`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>uppercase<ept id="p1">](../standard-library/ios-functions.md#uppercase)</ept> for an example of using <ph id="ph1">`nouppercase`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>oct</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies that integer variables appear in base 8 notation.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>By default, integer variables are displayed in base 10 notation.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dec<ept id="p1">](../standard-library/ios-functions.md#dec)</ept> and <bpt id="p2">[</bpt>hex<ept id="p2">](../standard-library/ios-functions.md#hex)</ept> also change the way integer variables appear.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::oct`</ph>, <ph id="ph3">`ios_base::basefield`</ph>), and then returns <ph id="ph4">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>dec<ept id="p1">](../standard-library/ios-functions.md#dec)</ept> for an example of how to use <bpt id="p2">**</bpt>oct<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>right</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Causes text that is not as wide as the output width to appear in the stream flush with the right margin.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>left<ept id="p1">](../standard-library/ios-functions.md#left)</ept> also modifies the justification of text.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::right`</ph>, <ph id="ph3">`ios_base::adjustfield`</ph>), and then returns <ph id="ph4">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>scientific</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Causes floating-point numbers to be displayed using scientific notation.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>fixed<ept id="p1">](../standard-library/ios-functions.md#fixed)</ept> notation is in effect for floating-point numbers.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::scientific`</ph>, <ph id="ph3">`ios_base::floatfield`</ph>), and then returns <ph id="ph4">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>showbase</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Indicates the notational base in which a number is displayed.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The notational base of a number can be changed with <bpt id="p1">[</bpt>dec<ept id="p1">](../standard-library/ios-functions.md#dec)</ept>, <bpt id="p2">[</bpt>oct<ept id="p2">](../standard-library/ios-functions.md#oct)</ept>, or <bpt id="p3">[</bpt>hex<ept id="p3">](../standard-library/ios-functions.md#hex)</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::showbase`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>showpoint</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Displays the whole-number part of a floating-point number and digits to the right of the decimal point even when the fractional part is zero.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>noshowpoint<ept id="p1">](../standard-library/ios-functions.md#noshowpoint)</ept> is in effect.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::showpoint`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>noshowpoint<ept id="p1">](../standard-library/ios-functions.md#noshowpoint)</ept> for an example of using <ph id="ph1">`showpoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>showpos</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Causes positive numbers to be explicitly signed.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>noshowpos<ept id="p1">](../standard-library/ios-functions.md#noshowpos)</ept> is the default.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::showpos`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>skipws</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Cause spaces to not be read by the input stream.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to the object from which _ <bpt id="p1">*</bpt>Str<ept id="p1">*</ept> is derived.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`skipws`</ph> is in effect.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>noskipws<ept id="p1">](../standard-library/ios-functions.md#noskipws)</ept> will cause spaces to be read from the input stream.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id="ph2">`ios_base::skipws`</ph>), and then returns <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>unitbuf</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Causes output to be processed when the buffer is not empty.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>A reference to the object from which <ph id="ph1">` str`</ph> is derived.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`endl`</ph> also flushes the buffer.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nounitbuf<ept id="p1">](../standard-library/ios-functions.md#nounitbuf)</ept> is in effect by default.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id="p2">[</bpt>ios_base::unitbuf<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id="ph2">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>uppercase</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Specifies that hexadecimal digits and the exponent in scientific notation appear in uppercase.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A reference to an object of type <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A reference to the object from which <ph id="ph1">` str`</ph> is derived.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">[</bpt>nouppercase<ept id="p1">](../standard-library/ios-functions.md#nouppercase)</ept> is in effect.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The manipulator effectively calls <ph id="ph1">` str.`</ph><bpt id="p1">[</bpt>setf<ept id="p1">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id="p2">[</bpt>ios_base::uppercase<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id="ph2">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>ios&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>