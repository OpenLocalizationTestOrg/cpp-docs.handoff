<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c444ddf2dd57b49d060cc4dec7c3dfd3796aa7bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccommodule-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d18ca87cf6266aadcc39fbc583be900554ae153</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">395d56b5f9128ade31cc2e59053a94efba499c61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComModule Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComModule Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is deprecated: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CComModule::GetClassObject</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creates an object of a specified CLSID.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For DLLs only.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CComModule::GetModuleInstance</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hInst`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CComModule::GetResourceInstance</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hInstResource`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CComModule::GetTypeLibInstance</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hInstTypeLib`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CComModule::Init</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes data members.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterClassHelper</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Enters an object's standard class registration in the system registry.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterClassObjects</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Registers the class object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For EXEs only.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterServer</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Updates the system registry for each object in the object map.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterTypeLib</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Registers a type library.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CComModule::RevokeClassObjects</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Revokes the class object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For EXEs only.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CComModule::Term</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Releases data members.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CComModule::UnregisterClassHelper</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removes an object's standard class registration from the system registry.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CComModule::UnregisterServer</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unregisters each object in the object map.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryClass</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Registers or unregisters an object's standard class registration.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryFromResourceD</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Runs the script contained in a specified resource to register or unregister an object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryFromResourceS</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Statically links to the ATL Registry Component.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Runs the script contained in a specified resource to register or unregister an object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CComModule::m_csObjMap</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to the object map information.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CComModule::m_csTypeInfoHolder</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to the type library information.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CComModule::m_csWindowCreate</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to window class information and static data used during window creation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInst</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInstResource</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>By default, contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInstTypeLib</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>By default, contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CComModule::m_pObjMap</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Points to the object map maintained by the module instance.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This class is deprecated, and the ATL code generation wizards now use the <bpt id="p1">[</bpt>CAtlAutoThreadModule<ept id="p1">](../../atl/reference/catlautothreadmodule-class.md)</ept> and <bpt id="p2">[</bpt>CAtlModule<ept id="p2">](../../atl/reference/catlmodule-class.md)</ept> derived classes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The information that follows is for use with applications created with older releases of ATL.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>is still part of ATL for backwards capability.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>implements a COM server module, allowing a client to access the module's components.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>supports both DLL (in-process) and EXE (local) modules.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComModule`</ph> instance uses an object map to maintain a set of class object definitions.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This object map is implemented as an array of <ph id="ph1">`_ATL_OBJMAP_ENTRY`</ph> structures, and contains information for:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Entering and removing object descriptions in the system registry.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Instantiating objects through a class factory.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Establishing communication between a client and the root object in the component.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Performing lifetime management of class objects.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you run the ATL COM AppWizard, the wizard automatically generates <ph id="ph1">`_Module`</ph>, a global instance of <ph id="ph2">`CComModule`</ph> or a class derived from it.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about the ATL Project Wizard, see the article <bpt id="p1">[</bpt>Creating an ATL Project<ept id="p1">](../../atl/reference/creating-an-atl-project.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`CComModule`</ph>, ATL provides <bpt id="p1">[</bpt>CComAutoThreadModule<ept id="p1">](../../atl/reference/ccomautothreadmodule-class.md)</ept>, which implements an apartment-model module for EXEs and Windows services.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Derive your module from <ph id="ph1">`CComAutoThreadModule`</ph> when you want to create objects in multiple apartments.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>_ATL_MODULE</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CAtlModule</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CAtlModuleT</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>atlbase.h</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CComModule::GetClassObject</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[in] The CLSID of the object to be created.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[in] The IID of the requested interface.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the interface pointer identified by <ph id="ph1">`riid`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the object does not support this interface, <ph id="ph1">`ppv`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Creates an object of the specified CLSID and retrieves an interface pointer to this object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>is only available to DLLs.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CComModule::GetModuleInstance</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HINSTANCE`</ph> identifying this module.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>m_hInst<ept id="p1">](#ccommodule__m_hinst)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CComModule::GetResourceInstance</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HINSTANCE`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>m_hInstResource<ept id="p1">](#ccommodule__m_hinstresource)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CComModule::GetTypeLibInstance</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HINSTANCE`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">[</bpt>m_hInstTypeLib<ept id="p1">](#ccommodule__m_hinsttypelib)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CComModule::Init</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>[in] A pointer to an array of object map entries.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`HINSTANCE`</ph> passed to <bpt id="p1">**</bpt>DLLMain<ept id="p1">**</ept> or <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the LIBID of the type library associated with the project.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Initializes all data members.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CComModule::m_csObjMap</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to the object map.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CComModule::m_csTypeInfoHolder</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to the type library.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CComModule::m_csWindowCreate</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Ensures synchronized access to window class information and to static data used during window creation.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInst</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Init<ept id="p1">](#ccommodule__init)</ept> method sets <ph id="ph1">`m_hInst`</ph> to the handle passed to <bpt id="p2">**</bpt>DLLMain<ept id="p2">**</ept> or <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInstResource</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>By default, contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Init<ept id="p1">](#ccommodule__init)</ept> method sets <ph id="ph1">`m_hInstResource`</ph> to the handle passed to <bpt id="p2">**</bpt>DLLMain<ept id="p2">**</ept> or <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can explicitly set <ph id="ph1">`m_hInstResource`</ph> to the handle to a resource.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetResourceInstance<ept id="p1">](#ccommodule__getresourceinstance)</ept> method returns the handle stored in <ph id="ph1">`m_hInstResource`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CComModule::m_hInstTypeLib</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>By default, contains the handle to the module instance.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Init<ept id="p1">](#ccommodule__init)</ept> method sets <ph id="ph1">`m_hInstTypeLib`</ph> to the handle passed to <bpt id="p2">**</bpt>DLLMain<ept id="p2">**</ept> or <ph id="ph2">`WinMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can explicitly set <ph id="ph1">`m_hInstTypeLib`</ph> to the handle to a type library.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetTypeLibInstance<ept id="p1">](#ccommodule__gettypelibinstance)</ept> method returns the handle stored in <ph id="ph1">`m_hInstTypeLib`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CComModule::m_pObjMap</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Points to the object map maintained by the module instance.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterClassHelper</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>[in] The CLSID of the object to be registered.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>[in] The ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>[in] The version-independent ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>[in] The identifier of a string resource for the object's description.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>[in] Specifies the threading model to enter in the registry.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Possible values are <bpt id="p1">**</bpt>THREADFLAGS_APARTMENT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>THREADFLAGS_BOTH<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>AUTPRXFLAG<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Enters an object's standard class registration in the system registry.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>UpdateRegistryClass<ept id="p1">](#ccommodule__updateregistryclass)</ept> method calls <ph id="ph1">`RegisterClassHelper`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterClassObjects</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>[in] Specifies the context in which the class object is to be run.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Possible values are <bpt id="p1">**</bpt>CLSCTX_INPROC_SERVER<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CLSCTX_INPROC_HANDLER<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>CLSCTX_LOCAL_SERVER<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For a description of these values, see <bpt id="p1">[</bpt>CLSCTX<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693716)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in] Determines the connection types to the class object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Possible values are <bpt id="p1">**</bpt>REGCLS_SINGLEUSE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>REGCLS_MULTIPLEUSE<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>REGCLS_MULTI_SEPARATE<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For a description of these values, see <bpt id="p1">[</bpt>REGCLS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679697)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Registers an EXE class object with OLE so other applications can connect to it.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This method                        is only available to EXEs.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterServer</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>[in] Indicates whether the type library will be registered.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>[in] Points to the CLSID of the object to be registered.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (the default value), all objects in the object map will be registered.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Depending on the <ph id="ph1">`pCLSID`</ph> parameter, updates the system registry for a single class object or for all objects in the object map.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRegTypeLib`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the type library information will also be updated.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>OBJECT_ENTRY_AUTO<ept id="p1">](http://msdn.microsoft.com/library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c)</ept> for information on how to add an entry to the object map.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>will be called automatically by <bpt id="p1">**</bpt>DLLRegisterServer<ept id="p1">**</ept> for a DLL or by <ph id="ph1">`WinMain`</ph> for an EXE run with the <bpt id="p2">**</bpt>/RegServer<ept id="p2">**</ept> command line option.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CComModule::RegisterTypeLib</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>[in] String in the format <ph id="ph1">`"\\N"`</ph>, where <ph id="ph2">`N`</ph> is the integer index of the TYPELIB resource.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Adds information about a type library to the system registry.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If the module instance contains multiple type libraries, use the second version of this method to specify which type library should be used.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>CComModule::RevokeClassObjects</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Removes the class object.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This method                        is only available to EXEs.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CComModule::Term</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Releases all data members.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CComModule::UnregisterClassHelper</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>[in] The CLSID of the object to be unregistered.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>[in] The ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>[in] The version-independent ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Removes an object's standard class registration from the system registry.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>UpdateRegistryClass<ept id="p1">](#ccommodule__updateregistryclass)</ept> method calls <ph id="ph1">`UnregisterClassHelper`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>CComModule::UnregisterServer</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the type library is also unregistered.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Points to the CLSID of the object to be unregistered.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (the default value), all objects in the object map will be unregistered.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Depending on the <ph id="ph1">`pCLSID`</ph> parameter, unregisters either a single class object or all objects in the object map.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>will be called automatically by <bpt id="p1">**</bpt>DLLUnregisterServer<ept id="p1">**</ept> for a DLL or by <ph id="ph1">`WinMain`</ph> for an EXE run with the <bpt id="p2">**</bpt>/UnregServer<ept id="p2">**</ept> command line option.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>OBJECT_ENTRY_AUTO<ept id="p1">](http://msdn.microsoft.com/library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c)</ept> for information on how to add an entry to the object map.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryClass</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The CLSID of the object to be registered or unregistered.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The version-independent ProgID associated with the object.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The identifier of the string resource for the object's description.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A string containing the object's description.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Specifies the threading model to enter in the registry.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Possible values are <bpt id="p1">**</bpt>THREADFLAGS_APARTMENT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>THREADFLAGS_BOTH<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>AUTPRXFLAG<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Indicates whether the object should be registered.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRegister`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, this method enters the object's standard class registration in the system registry.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRegister`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, it removes the object's registration.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Depending on the value of <ph id="ph1">`bRegister`</ph>, <ph id="ph2">`UpdateRegistryClass`</ph> calls either <bpt id="p1">[</bpt>RegisterClassHelper<ept id="p1">](#ccommodule__registerclasshelper)</ept> or <bpt id="p2">[</bpt>UnregisterClassHelper<ept id="p2">](#ccommodule__unregisterclasshelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>By specifying the <bpt id="p1">[</bpt>DECLARE_REGISTRY<ept id="p1">](http://msdn.microsoft.com/library/89b8949b-5c27-4a9c-8a51-ad276bba3a54)</ept> macro, <ph id="ph1">`UpdateRegistryClass`</ph> will be invoked automatically when your object map is processed.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryFromResourceD</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>[in] A resource name.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>[in] A resource ID.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>[in] Indicates whether the object should be registered.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the replacement map storing values associated with the script's replaceable parameters.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>ATL automatically uses <ph id="ph1">`%MODULE%`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>To use additional replaceable parameters, see the Remarks for details.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Otherwise, use the <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> default value.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Runs the script contained in the resource specified by <ph id="ph1">`lpszRes`</ph> or <ph id="ph2">`nResID`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRegister`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, this method registers the object in the system registry; otherwise, it unregisters the object.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>By specifying the <bpt id="p1">[</bpt>DECLARE_REGISTRY_RESOURCE<ept id="p1">](http://msdn.microsoft.com/library/7ac11498-8ee2-4156-8df2-7076f7ddda8b)</ept> or <bpt id="p2">[</bpt>DECLARE_REGISTRY_RESOURCEID<ept id="p2">](http://msdn.microsoft.com/library/65bf3576-5396-416e-ba48-e14b3236c49b)</ept> macro, <ph id="ph1">`UpdateRegistryFromResourceD`</ph> will be invoked automatically when your object map is processed.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>To substitute replacement values at run time, do not specify the <ph id="ph1">`DECLARE_REGISTRY_RESOURCE`</ph> or <ph id="ph2">`DECLARE_REGISTRY_RESOURCEID`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Instead, create an array of <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures, where each entry contains a variable placeholder paired with a value to replace the placeholder at run time.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Then call <ph id="ph1">`UpdateRegistryFromResourceD`</ph>, passing the array for the <ph id="ph2">`pMapEntries`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This adds all the replacement values in the <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures to the Registrar's replacement map.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>To statically link to the ATL Registry Component (Registrar), see <bpt id="p1">[</bpt>UpdateRegistryFromResourceS<ept id="p1">](#ccommodule__updateregistryfromresources)</ept>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>For more information about replaceable parameters and scripting, see the article <bpt id="p1">[</bpt>The ATL Registry Component (Registrar)<ept id="p1">](../../atl/atl-registry-component-registrar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CComModule::UpdateRegistryFromResourceS</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>As of ATL 7.0, <ph id="ph1">`CComModule`</ph> is obsolete: see <bpt id="p1">[</bpt>ATL Module Classes<ept id="p1">](../../atl/atl-module-classes.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>[in] A resource name.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>[in] A resource ID.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>[in] Indicates whether the resource script should be registered.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the replacement map storing values associated with the script's replaceable parameters.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>ATL automatically uses <ph id="ph1">`%MODULE%`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>To use additional replaceable parameters, see the Remarks for details.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Otherwise, use the <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> default value.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>A standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>UpdateRegistryFromResourceD<ept id="p1">](#ccommodule__updateregistryfromresourced)</ept> except <ph id="ph1">`UpdateRegistryFromResourceS`</ph> creates a static link to the ATL Registry Component (Registrar).</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>will be invoked automatically when your object map is processed, provided you add <ph id="ph1">`#define _ATL_STATIC_REGISTRY`</ph> to your stdafx.h.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>To substitute replacement values at run time, do not specify the <bpt id="p1">[</bpt>DECLARE_REGISTRY_RESOURCE<ept id="p1">](http://msdn.microsoft.com/library/7ac11498-8ee2-4156-8df2-7076f7ddda8b)</ept> or <bpt id="p2">[</bpt>DECLARE_REGISTRY_RESOURCEID<ept id="p2">](http://msdn.microsoft.com/library/65bf3576-5396-416e-ba48-e14b3236c49b)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Instead, create an array of <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures, where each entry contains a variable placeholder paired with a value to replace the placeholder at run time.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Then call <ph id="ph1">`UpdateRegistryFromResourceS`</ph>, passing the array for the <ph id="ph2">`pMapEntries`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This adds all the replacement values in the <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures to the Registrar's replacement map.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For more information about replaceable parameters and scripting, see the article <bpt id="p1">[</bpt>The ATL Registry Component (Registrar)<ept id="p1">](../../atl/atl-registry-component-registrar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>