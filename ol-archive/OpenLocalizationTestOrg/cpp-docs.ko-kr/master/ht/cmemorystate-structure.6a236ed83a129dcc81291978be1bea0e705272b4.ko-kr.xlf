<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12cef2cfae89d39e77b17e11494bc1796abdc819</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmemorystate-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b88cd502599529ff83fe97bd90f719df1838495</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a605821c1e865caa52724ad9893f32312b08127b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMemoryState Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMemoryState Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a convenient way to detect memory leaks in your program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMemoryState::CMemoryState</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a class-like structure that controls memory checkpoints.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMemoryState::Checkpoint</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Obtains a snapshot (checkpoint) of the current memory state.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMemoryState::Difference</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Computes the difference between two objects of type <ph id="ph1">`CMemoryState`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CMemoryState::DumpAllObjectsSince</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Dumps a summary of all currently allocated objects since a previous checkpoint.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CMemoryState::DumpStatistics</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Prints memory allocation statistics for a <ph id="ph1">`CMemoryState`</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>is a structure and does not have a base class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A "memory leak" occurs when memory for an object is allocated on the heap but not deallocated when it is no longer required.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Such memory leaks can eventually lead to out-of-memory errors.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>There are several ways to allocate and deallocate memory in your program:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`malloc`/ </ph><bpt id="p1">**</bpt>free<ept id="p1">**</ept> family of functions from the run-time library.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the Windows API memory management functions, <bpt id="p1">**</bpt>LocalAlloc<ept id="p1">**</ept><ph id="ph1">/ </ph><bpt id="p2">**</bpt>LocalFree<ept id="p2">**</ept> and <bpt id="p3">**</bpt>GlobalAlloc<ept id="p3">**</ept><ph id="ph2">/ </ph><bpt id="p4">**</bpt>GlobalFree<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Using the C++ <bpt id="p1">**</bpt>new<ept id="p1">**</ept> and <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> operators.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMemoryState`</ph> diagnostics only help detect memory leaks caused when memory allocated using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator is not deallocated using <bpt id="p2">**</bpt>delete<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The other two groups of memory-management functions are for non-C++ programs, and mixing them with <bpt id="p1">**</bpt>new<ept id="p1">**</ept> and <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> in the same program is not recommended.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An additional macro, <ph id="ph1">`DEBUG_NEW`</ph>, is provided to replace the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator when you need file and line-number tracking of memory allocations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>is used whenever you would normally use the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As with other diagnostics, the <ph id="ph1">`CMemoryState`</ph> diagnostics are only available in debug versions of your program.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A debug version must have the <bpt id="p1">**</bpt>_DEBUG<ept id="p1">**</ept> constant defined.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you suspect your program has a memory leak, you can use the <ph id="ph1">`Checkpoint`</ph>, <bpt id="p1">**</bpt>Difference<ept id="p1">**</ept>, and <ph id="ph2">`DumpStatistics`</ph> functions to discover the difference between the memory state (objects allocated) at two different points in program execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This information can be useful in determining whether a function is cleaning up all the objects it allocates.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If simply knowing where the imbalance in allocation and deallocation occurs does not provide enough information, you can use the <ph id="ph1">`DumpAllObjectsSince`</ph> function to dump all objects allocated since the previous call to <ph id="ph2">`Checkpoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This dump shows the order of allocation, the source file and line where the object was allocated (if you are using <ph id="ph1">`DEBUG_NEW`</ph> for allocation), and the derivation of the object, its address, and its size.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>also calls each object's <ph id="ph1">`Dump`</ph> function to provide information about its current state.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about how to use <ph id="ph1">`CMemoryState`</ph> and other diagnostics, see <bpt id="p1">[</bpt>Debugging MFC Applications<ept id="p1">](/visualstudio/debugger/mfc-debugging-techniques)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Declarations of objects of type <ph id="ph1">`CMemoryState`</ph> and calls to member functions should be bracketed by <ph id="ph2">`#if defined(_DEBUG)/#endif`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This causes memory diagnostics to be included only in debugging builds of your program.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CMemoryState::Checkpoint</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Takes a snapshot summary of memory and stores it in this <ph id="ph1">`CMemoryState`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMemoryState`</ph> member functions <bpt id="p1">[</bpt>Difference<ept id="p1">](#cmemorystate__difference)</ept> and <bpt id="p2">[</bpt>DumpAllObjectsSince<ept id="p2">](#cmemorystate__dumpallobjectssince)</ept> use this snapshot data.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">[</bpt>CMemoryState<ept id="p1">](#cmemorystate__cmemorystate)</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CMemoryState::CMemoryState</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Constructs an empty <ph id="ph1">`CMemoryState`</ph> object that must be filled in by the <bpt id="p1">[</bpt>Checkpoint<ept id="p1">](#cmemorystate__checkpoint)</ept> or <bpt id="p2">[</bpt>Difference<ept id="p2">](#cmemorystate__difference)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Utilities#18</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CMemoryState::Difference</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">`CMemoryState`</ph> objects, then stores the difference into this <ph id="ph2">`CMemoryState`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>oldState</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The initial memory state as defined by a <ph id="ph1">`CMemoryState`</ph> checkpoint.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>newState</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The new memory state as defined by a <ph id="ph1">`CMemoryState`</ph> checkpoint.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Nonzero if the two memory states are different; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checkpoint<ept id="p1">](#cmemorystate__checkpoint)</ept> must have been called for each of the two memory-state parameters.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">[</bpt>CMemoryState<ept id="p1">](#cmemorystate__cmemorystate)</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CMemoryState::DumpAllObjectsSince</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`Dump`</ph> function for all objects of a type derived from class <ph id="ph2">`CObject`</ph> that were allocated (and are still allocated) since the last <bpt id="p1">[</bpt>Checkpoint<ept id="p1">](#cmemorystate__checkpoint)</ept> call for this <ph id="ph3">`CMemoryState`</ph> object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`DumpAllObjectsSince`</ph> with an uninitialized <ph id="ph2">`CMemoryState`</ph> object will dump out all objects currently in memory.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">[</bpt>CMemoryState<ept id="p1">](#cmemorystate__cmemorystate)</ept> constructor.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CMemoryState::DumpStatistics</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Prints a concise memory statistics report from a <ph id="ph1">`CMemoryState`</ph> object that is filled by the <bpt id="p1">[</bpt>Difference<ept id="p1">](#cmemorystate__difference)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The report, which is printed on the <bpt id="p1">[</bpt>afxDump<ept id="p1">](http://msdn.microsoft.com/library/4b3cfa3f-fb75-456a-9d99-a5601acbcb11)</ept> device, shows the following:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A sample report gives information on the number (or amount) of:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>free blocks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>normal blocks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CRT blocks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ignore blocks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>client blocks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>maximum memory used by the program at any one time (in bytes)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>total memory currently used by the program (in bytes)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Free blocks are the number of blocks whose deallocation was delayed if <ph id="ph1">`afxMemDF`</ph> was set to <bpt id="p1">**</bpt>delayFreeMemDF<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>afxMemDF<ept id="p1">](diagnostic-services.md#afxmemdf)</ept>, in the "MFC Macros and Globals" section.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Types of Blocks on the Debug Heap<ept id="p1">](http://msdn.microsoft.com/en-us/db2e7f62-0679-4b39-a23f-26f2c2f407c5)</ept> for more information on these block types.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following code should be placed in <bpt id="p1">*</bpt>projname<ept id="p1">*</ept>App.cpp.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Define the following global variables:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Utilities#40</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`InitInstance`</ph> function, add the line:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Utilities#41</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Add a handler for the <ph id="ph1">`ExitInstance`</ph> function and use the following code:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Utilities#42</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can now run the program in Debug mode to see the output of the <ph id="ph1">`DumpStatistics`</ph> function.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>