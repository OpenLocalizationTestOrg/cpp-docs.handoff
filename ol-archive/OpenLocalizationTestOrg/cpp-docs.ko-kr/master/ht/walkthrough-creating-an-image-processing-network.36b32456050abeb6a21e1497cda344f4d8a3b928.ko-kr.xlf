<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5893bf3c388f45dac35a45664f24977d26c902a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\walkthrough-creating-an-image-processing-network.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf0032ba90a49ce73069bce525ea90e5172f1b81</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6db86e45c3188bd88db6c3c92a47a06b17e82d61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Image-Processing Network | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Image-Processing Network</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document demonstrates how to create a network of asynchronous message blocks that perform image processing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The network determines which operations to perform on an image on the basis of its characteristics.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">*</bpt>dataflow<ept id="p1">*</ept> model to route images through the network.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the dataflow model, independent components of a program communicate with one another by sending messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When a component receives a message, it can perform some action and then pass the result of that action to another component.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compare this with the <bpt id="p1">*</bpt>control flow<ept id="p1">*</ept> model, in which an application uses control structures, for example, conditional statements, loops, and so on, to control the order of operations in a program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A network that is based on dataflow creates a <bpt id="p1">*</bpt>pipeline<ept id="p1">*</ept> of tasks.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each stage of the pipeline concurrently performs part of the overall task.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An analogy to this is an assembly line for automobile manufacturing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As each vehicle passes through the assembly line, one station assembles the frame, another installs the engine, and so on.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By enabling multiple vehicles to be assembled simultaneously, the assembly line provides better throughput than assembling complete vehicles one at a time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Read the following documents before you start this walkthrough:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We also recommend that you understand the basics of <ph id="ph1">[!INCLUDE[ndptecgdiplus](../../parallel/concrt/includes/ndptecgdiplus_md.md)]</ph> before you start this walkthrough.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This walkthrough contains the following sections:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Defining Image Processing Functionality</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creating the Image Processing Network</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Defining Image Processing Functionality</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section shows the support functions that the image processing network uses to work with images that are read from disk.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following functions, <ph id="ph1">`GetRGB`</ph> and <ph id="ph2">`MakeColor`</ph>, extract and combine the individual components of the given color, respectively.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#2</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following function, <ph id="ph1">`ProcessImage`</ph>, calls the given <bpt id="p1">[</bpt>std::function<ept id="p1">](../../standard-library/function-class.md)</ept> object to transform the color value of each pixel in a <ph id="ph2">[!INCLUDE[ndptecgdiplus](../../parallel/concrt/includes/ndptecgdiplus_md.md)]</ph> <bpt id="p2">[</bpt>Bitmap<ept id="p2">](https://msdn.microsoft.com/library/ms534420.aspx)</ept> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessImage`</ph> function uses the <bpt id="p1">[</bpt>concurrency::parallel_for<ept id="p1">](reference/concurrency-namespace-functions.md#parallel_for)</ept> algorithm to process each row of the bitmap in parallel.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#3</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following functions, <ph id="ph1">`Grayscale`</ph>, <ph id="ph2">`Sepiatone`</ph>, <ph id="ph3">`ColorMask`</ph>, and <ph id="ph4">`Darken`</ph>, call the <ph id="ph5">`ProcessImage`</ph> function to transform the color value of each pixel in a <ph id="ph6">`Bitmap`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each of these functions uses a lambda expression to define the color transformation of one pixel.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#4</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following function, <ph id="ph1">`GetColorDominance`</ph>, also calls the <ph id="ph2">`ProcessImage`</ph> function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, instead of changing the value of each color, this function uses <bpt id="p1">[</bpt>concurrency::combinable<ept id="p1">](../../parallel/concrt/reference/combinable-class.md)</ept> objects to compute whether the red, green, or blue color component dominates the image.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#5</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following function, <ph id="ph1">`GetEncoderClsid`</ph>, retrieves the class identifier for the given MIME type of an encoder.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The application uses this function to retrieve the encoder for a bitmap.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#6</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creating the Image Processing Network</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This section describes how to create a network of asynchronous message blocks that perform image processing on every <ph id="ph1">[!INCLUDE[TLA#tla_jpeg](../../parallel/concrt/includes/tlasharptla_jpeg_md.md)]</ph> (.jpg) image in a given directory.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The network performs the following image-processing operations:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For any image that is authored by Tom, convert to grayscale.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For any image that has red as the dominant color, remove the green and blue components and then darken it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For any other image, apply sepia toning.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The network applies only the first image-processing operation that matches one of these conditions.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, if an image is authored by Tom and has red as its dominant color, the image is only converted to grayscale.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After the network performs each image-processing operation, it saves the image to disk as a bitmap (.bmp) file.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following steps show how to create a function that implements this image processing network and applies that network to every <ph id="ph1">[!INCLUDE[TLA#tla_jpeg](../../parallel/concrt/includes/tlasharptla_jpeg_md.md)]</ph> image in a given directory.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To create the image processing network</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Create a function, <ph id="ph1">`ProcessImages`</ph>, that takes the name of a directory on disk.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#7</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ProcessImages`</ph> function, create a <ph id="ph2">`countdown_event`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`countdown_event`</ph> class is shown later in this walkthrough.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#8</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">[</bpt>std::map<ept id="p1">](../../standard-library/map-class.md)</ept> object that associates a <ph id="ph1">`Bitmap`</ph> object with its original file name.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#9</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add the following code to define the members of the image-processing network.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#10</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Add the following code to connect the network.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#11</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Add the following code to send to the head of the network the full path of each <ph id="ph1">[!INCLUDE[TLA#tla_jpeg](../../parallel/concrt/includes/tlasharptla_jpeg_md.md)]</ph> file in the directory.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#12</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Wait for the <ph id="ph1">`countdown_event`</ph> variable to reach zero.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#13</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following table describes the members of the network.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::transformer<ept id="p1">](../../parallel/concrt/reference/transformer-class.md)</ept> object that loads a <ph id="ph1">`Bitmap`</ph> object from disk and adds an entry to the <ph id="ph2">`map`</ph> object to associate the image with its original file name.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept> object that sends the loaded images to the image processing filters.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that converts images that are authored by Tom to grayscale.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It uses the metadata of the image to determine its author.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that removes the green and blue color components from images that have red as the dominant color.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that darkens images that have red as the dominant color.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that applies sepia toning to images that are not authored by Tom and are not predominantly red.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that saves the processed <ph id="ph2">`image`</ph> to disk as a bitmap.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>retrieves the original file name from the <ph id="ph1">`map`</ph> object and changes its file name extension to .bmp.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`transformer`</ph> object that frees the memory for the images.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> object that acts as the terminal node in the network.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It decrements the <ph id="ph1">`countdown_event`</ph> object to signal to the main application that an image has been processed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`loaded_bitmaps`</ph> message buffer is important because, as an <ph id="ph2">`unbounded_buffer`</ph> object, it offers <ph id="ph3">`Bitmap`</ph> objects to multiple receivers.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When a target block accepts a <ph id="ph1">`Bitmap`</ph> object, the <ph id="ph2">`unbounded_buffer`</ph> object does not offer that <ph id="ph3">`Bitmap`</ph> object to any other targets.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Therefore, the order in which you link objects to an <ph id="ph1">`unbounded_buffer`</ph> object is important.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`grayscale`</ph>, <ph id="ph2">`colormask`</ph>, and <ph id="ph3">`sepiatone`</ph> message blocks each use a filter to accept only certain <ph id="ph4">`Bitmap`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decrement`</ph> message buffer is an important target of the <ph id="ph2">`loaded_bitmaps`</ph> message buffer because it accepts all <ph id="ph3">`Bitmap`</ph> objects that are rejected by the other message buffers.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`unbounded_buffer`</ph> object is required to propagate messages in order.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore, an <ph id="ph1">`unbounded_buffer`</ph> object blocks until a new target block is linked to it and accepts the message if no current target block accepts that message.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If your application requires that multiple message blocks process the message, instead of just the one message block that first accepts the message, you can use another message block type, such as <ph id="ph1">`overwrite_buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`overwrite_buffer`</ph> class holds one message at a time, but it propagates that message to each of its targets.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following illustration shows the image processing network:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Image processing network</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`countdown_event`</ph> object in this example enables the image processing network to inform the main application when all images have been processed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`countdown_event`</ph> class uses a <bpt id="p1">[</bpt>concurrency::event<ept id="p1">](../../parallel/concrt/reference/event-class.md)</ept> object to signal when a counter value reaches zero.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The main application increments the counter every time that it sends a file name to the network.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The terminal node of the network decrements the counter after each image has been processed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>After the main application traverses the specified directory, it waits for the <ph id="ph1">`countdown_event`</ph> object to signal that its counter has reached zero.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`countdown_event`</ph> class:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#14</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The Complete Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following code shows the complete example.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wmain`</ph> function manages the <ph id="ph2">[!INCLUDE[ndptecgdiplus](../../parallel/concrt/includes/ndptecgdiplus_md.md)]</ph> library and calls the <ph id="ph3">`ProcessImages`</ph> function to process the <ph id="ph4">[!INCLUDE[TLA#tla_jpeg](../../parallel/concrt/includes/tlasharptla_jpeg_md.md)]</ph> files in the <ph id="ph5">`Sample Pictures`</ph> directory.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>concrt-image-processing-filter#15</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following illustration shows sample output.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Each source image is above its corresponding modified image.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sample output for the example</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>is authored by Tom Alphin and therefore is converted to grayscale.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`Desert`</ph>, <ph id="ph2">`Koala`</ph>, and <ph id="ph3">`Tulips`</ph> have red as the dominant color and therefore have the blue and green color components removed and are darkened.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`Jellyfish`</ph>, and <ph id="ph2">`Penguins`</ph> match the default criteria and therefore are sepia toned.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`image-processing-network.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>cl.exe /DUNICODE /EHsc image-processing-network.cpp /link gdiplus.lib</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime Walkthroughs</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>