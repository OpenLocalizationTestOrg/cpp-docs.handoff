<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86c354251ad55a295fe3fdba10c7deb60837ca19</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\size-specification.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d0848f4edfbc8df447da33d39472f31b3283886</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">053484a0075ae4a731ffe502968916092c0073e2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Size Specification | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Size Specification</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In a format specification, the fourth field is an argument length modifier for the conversion specifier.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`size`</ph> field prefixes to the <ph id="ph2">`type`</ph> field—<ph id="ph3">`h`</ph>, <ph id="ph4">`l`</ph>, <ph id="ph5">`w`</ph>, <ph id="ph6">`I`</ph>, <ph id="ph7">`I32`</ph>, <ph id="ph8">`I64`</ph>, and <ph id="ph9">`ll`</ph>—specify the "size" of the corresponding argument—long or short, 32-bit or 64-bit, single-byte character or wide character—depending on the conversion specifier that they modify.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These size prefixes are used with <ph id="ph1">`type`</ph> characters in the <ph id="ph2">`printf`</ph> and <ph id="ph3">`wprintf`</ph> families of functions to specify the interpretation of argument lengths, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`size`</ph> field is optional for some argument types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When no size prefix is specified, the formatter consumes integer arguments—for example, signed or unsigned <ph id="ph1">`char`</ph>, <ph id="ph2">`short`</ph>, <ph id="ph3">`int`</ph>, <ph id="ph4">`long`</ph>, and enumeration types—as 32-bit <ph id="ph5">`int`</ph> types, and floating-point arguments are consumed as 64-bit <ph id="ph6">`double`</ph> types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This matches the default argument promotion rules for variable argument lists.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about argument promotion, see Ellipses and Default Arguments in <bpt id="p1">[</bpt>Postfix expressions<ept id="p1">](../cpp/postfix-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On both 32-bit and 64-bit systems, the format specification of a 64-bit integer argument must include a size prefix of <ph id="ph1">`ll`</ph> or <ph id="ph2">`I64`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Otherwise, the behavior of the formatter is undefined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Some types are different sizes in 32-bit and 64-bit code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`size_t`</ph> is 32 bits long in code compiled for x86, and 64 bits in code compiled for x64.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create platform-agnostic formatting code for variable-width types, you can use a variable-width argument length modifier.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Alternatively, use a 64-bit argument length modifier and explicitly promote the variable-width argument type to 64 bits.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Microsoft-specific <ph id="ph1">`I`</ph> argument length modifier handles variable-width integer arguments.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`I`</ph>, <ph id="ph2">`I32`</ph>, and <ph id="ph3">`I64`</ph> length modifier prefixes are Microsoft extensions and are not ANSI-compatible.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`h`</ph> prefix when it's used with data of type <ph id="ph2">`char`</ph>, the <ph id="ph3">`w`</ph> prefix when it's used with data of type <ph id="ph4">`wchar_t`</ph>, and the <ph id="ph5">`l`</ph> prefix when it's used with data of type <ph id="ph6">`double`</ph> are Microsoft extensions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`hh`</ph>, <ph id="ph2">`j`</ph>, <ph id="ph3">`z`</ph>, and <ph id="ph4">`t`</ph> length prefixes are not supported.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Size Prefixes for printf and wprintf Format-Type Specifiers</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To specify</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use prefix</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With type specifier</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(lowercase L)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`u`</ph>, <ph id="ph2">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`u`</ph>, <ph id="ph2">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`u`</ph>, <ph id="ph2">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`u`</ph>, <ph id="ph2">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(that is, <ph id="ph1">`__int32`</ph> on 32-bit platforms, <ph id="ph2">`__int64`</ph> on 64-bit platforms)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`i`</ph>, <ph id="ph2">`o`</ph>, <ph id="ph3">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(that is, <ph id="ph1">`unsigned __int32`</ph> on 32-bit platforms, <ph id="ph2">`unsigned __int64`</ph> on 64-bit platforms)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`u`</ph>, <ph id="ph2">`x`</ph>, or</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(In <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>, although <ph id="ph2">`long double`</ph> is a distinct type, it has the same internal representation as <ph id="ph3">`double`</ph>.)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`A`</ph>, <ph id="ph2">`e`</ph>, <ph id="ph3">`E`</ph>, <ph id="ph4">`f`</ph>, <ph id="ph5">`g`</ph>, or</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Single-byte character with <ph id="ph1">`printf`</ph> and <ph id="ph2">`wprintf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">`hc`</ph> or <ph id="ph2">`hC`</ph> type specifier is synonymous with <ph id="ph3">`c`</ph> in <ph id="ph4">`printf`</ph> functions and with <ph id="ph5">`C`</ph> in <ph id="ph6">`wprintf`</ph> functions.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Wide character with <ph id="ph1">`printf`</ph> and <ph id="ph2">`wprintf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">`lc`</ph>, <ph id="ph2">`lC`</ph>, <ph id="ph3">`wc`</ph> or <ph id="ph4">`wC`</ph> type specifier is synonymous with <ph id="ph5">`C`</ph> in <ph id="ph6">`printf`</ph> functions and with <ph id="ph7">`c`</ph> in <ph id="ph8">`wprintf`</ph> functions.)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Single-byte character string with <ph id="ph1">`printf`</ph> and <ph id="ph2">`wprintf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">`hs`</ph> or <ph id="ph2">`hS`</ph> type specifier is synonymous with <ph id="ph3">`s`</ph> in <ph id="ph4">`printf`</ph> functions and with <ph id="ph5">`S`</ph> in <ph id="ph6">`wprintf`</ph> functions.)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`S`</ph>, or</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Wide-character string with <ph id="ph1">`printf`</ph> and <ph id="ph2">`wprintf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">`ls`</ph>, <ph id="ph2">`lS`</ph>, <ph id="ph3">`ws`</ph> or <ph id="ph4">`wS`</ph> type specifier is synonymous with <ph id="ph5">`S`</ph> in <ph id="ph6">`printf`</ph> functions and with <ph id="ph7">`s`</ph> in <ph id="ph8">`wprintf`</ph> functions.)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`S`</ph>, or</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Format Specification Syntax: printf and wprintf Functions</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Flag Directives</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>printf Width Specification</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Precision Specification</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>printf Type Field Characters</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>