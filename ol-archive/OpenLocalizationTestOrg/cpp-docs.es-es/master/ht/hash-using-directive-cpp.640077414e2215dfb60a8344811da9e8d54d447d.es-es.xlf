<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4c324e83de7a17683a9dc6902349a0f8f126477</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\hash-using-directive-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0a87c37891465d6993c440675386263fd5987ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02487d0e8c0ab07456c0177b9a65fe7d94b83cfd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>using Directive (C++) | Microsoft Doc</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>using Directive (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Imports metadata into a program compiled with <bpt id="p1">[</bpt>/clr<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An MSIL .dll, .exe, .netmodule, or .obj.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>as_friend</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifies that all types in <ph id="ph1">`file`</ph> are accessible.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](../dotnet/friend-assemblies-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>can be a Microsoft intermediate language (MSIL) file that you import for its managed data and managed constructs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a .dll file contains an assembly manifest, then all the .dlls referenced in the manifest are imported and the assembly you are building will list <bpt id="p1">*</bpt>file<ept id="p1">*</ept> in the metadata as an assembly reference.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`file`</ph> does not contain an assembly (if <ph id="ph2">`file`</ph> is a module) and if you do not intend to use type information from the module in the current (assembly) application, you have the option of just indicating that the module is part the assembly; use <bpt id="p1">[</bpt>/ASSEMBLYMODULE<ept id="p1">](../build/reference/assemblymodule-add-a-msil-module-to-the-assembly.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The types in the module would then be available to any application that referenced the assembly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An alternative to use <ph id="ph1">`#using`</ph> is the <bpt id="p1">[</bpt>/FU<ept id="p1">](../build/reference/fu-name-forced-hash-using-file.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.exe assemblies passed to <ph id="ph1">`#using`</ph> should be compiled with <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept>, or with any of the other Visual Studio compilers (Visual Basic or Visual C#, for example).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Attempting to import metadata from an .exe assembly compiled with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> will result in a file load exception.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A component that is referenced with <ph id="ph1">`#using`</ph> can be run with a different version of the file imported at compile time, causing a client application to give unexpected results.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In order for the compiler to recognize a type in an assembly (not a module), it needs to be forced to resolve the type, which you can do, for example, by defining an instance of the type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are other ways to resolve type names in an assembly for the compiler, for example, if you inherit from a type in an assembly, the type name will then become known to the compiler.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When importing metadata built from source code that used <bpt id="p1">[</bpt>__declspec(thread)<ept id="p1">](../cpp/thread.md)</ept>, the thread semantics are not persisted in metadata.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, a variable declared with <bpt id="p1">**</bpt>__declspec(thread)<ept id="p1">**</ept>, compiled in a program that is build for the .NET Framework common language runtime, and then imported via <ph id="ph1">`#using`</ph>, will no longer have <bpt id="p2">**</bpt>__declspec(thread)<ept id="p2">**</ept> semantics on the variable.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All imported types (both managed and native) in a file referenced by <ph id="ph1">`#using`</ph> are available, but the compiler treats native types as declarations not definitions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>mscorlib.dll is automatically referenced when compiling with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The LIBPATH environment variable specifies the directories that will be searched when the compiler tries to resolve file names passed to <ph id="ph1">`#using`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The compiler will search for references along the following path:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A path specified in the <ph id="ph1">`#using`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The current directory.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The .NET Framework system directory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Directories added with the <bpt id="p1">[</bpt>/AI<ept id="p1">](../build/reference/ai-specify-metadata-directories.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Directories on LIBPATH environment variable.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you build an assembly (C) and reference an assembly (B) that itself references another assembly (A), you will not have to explicitly reference assembly A unless you explicitly use one of A's types in C.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the following sample, there is no compiler error for not referencing using_assembly_A.dll because the program does not use any of the types defined in using_assembly_A.cpp.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Preprocessor Directives</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>