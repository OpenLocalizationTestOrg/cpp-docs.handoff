<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6c494f5d1ac5ec650b951f26a48d667d8102e48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\bypassing-the-serialization-mechanism.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">705ed33d6b9830d416cdd11b7329f8355d5c4283</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f86eb456517bfff4f26e8621ca99558aa01cb3a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Bypassing the Serialization Mechanism | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Bypassing the Serialization Mechanism</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As you have seen, the framework provides a default way to read and write data to and from files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Serializing through an archive object suits the needs of a great many applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Such an application reads a file entirely into memory, lets the user update the file, and then writes the updated version to disk again.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, some applications operate on data very differently, and for these applications serialization through an archive is not suitable.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Examples include database programs, programs that edit only parts of large files, programs that write text-only files, and programs that share data files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In these cases, you can override the <bpt id="p1">[</bpt>Serialize<ept id="p1">](../mfc/reference/cobject-class.md#cobject__serialize)</ept> function in a different way to mediate file actions through a <bpt id="p2">[</bpt>CFile<ept id="p2">](../mfc/reference/cfile-class.md)</ept> object rather than a <bpt id="p3">[</bpt>CArchive<ept id="p3">](../mfc/reference/carchive-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Read<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Write<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Close<ept id="p4">**</ept>, and <ph id="ph1">`Seek`</ph> member functions of class <ph id="ph2">`CFile`</ph> to open a file, move the file pointer (seek) to a specific point in the file, read a record (a specified number of bytes) at that point, let the user update the record, then seek to the same point again and write the record back to the file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The framework will open the file for you, and you can use the <ph id="ph1">`GetFile`</ph> member function of class <ph id="ph2">`CArchive`</ph> to obtain a pointer to the <ph id="ph3">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For even more sophisticated and flexible use, you can override the <bpt id="p1">[</bpt>OnOpenDocument<ept id="p1">](../mfc/reference/cdocument-class.md#cdocument__onopendocument)</ept> and <bpt id="p2">[</bpt>OnSaveDocument<ept id="p2">](../mfc/reference/cdocument-class.md#cdocument__onsavedocument)</ept> member functions of class <ph id="ph1">`CWinApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see class <bpt id="p1">[</bpt>CFile<ept id="p1">](../mfc/reference/cfile-class.md)</ept> in the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this scenario, your <ph id="ph1">`Serialize`</ph> override does nothing, unless, for example, you want to have it read and write a file header to keep it up to date when the document closes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using Documents</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>