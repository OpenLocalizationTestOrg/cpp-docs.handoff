<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1869ca6e40585aa8dc38c523ab1494d9ea484152</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\initializing-scalar-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0982698fef3c40f7d5f2fdf5429c4fd2173e1378</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fe4b5b8dda3dbfe63c9b3be13388be86985f466</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Initializing Scalar Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Initializing Scalar Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When initializing scalar types, the value of the <bpt id="p1">*</bpt>assignment-expression<ept id="p1">*</ept> is assigned to the variable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The conversion rules for assignment apply.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Type Conversions<ept id="p1">](../c-language/type-conversions-c.md)</ept> for information on conversion rules.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers init-declarator-list<ept id="p1">*</ept> opt<bpt id="p2">**</bpt>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>init-declarator</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>  <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>init-declarator<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>declarator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>initializer<ept id="p3">*</ept> /* For scalar initialization</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>initializer<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>assignment-expression</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can initialize variables of any type, provided that you obey the following rules:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Variables declared at the file-scope level can be initialized.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not explicitly initialize a variable at the external level, it is initialized to 0 by default.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A constant expression can be used to initialize any global variable declared with the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> <bpt id="p2">*</bpt>storage-class-specifier<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Variables declared to be <bpt id="p1">**</bpt>static<ept id="p1">**</ept> are initialized when program execution begins.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you do not explicitly initialize a global <bpt id="p1">**</bpt>static<ept id="p1">**</ept> variable, it is initialized to 0 by default, and every member that has pointer type is assigned a null pointer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Variables declared with the <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> or <bpt id="p2">**</bpt>register<ept id="p2">**</ept> storage-class specifier are initialized each time execution control passes to the block in which they are declared.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you omit an initializer from the declaration of an <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> or <bpt id="p2">**</bpt>register<ept id="p2">**</ept> variable, the initial value of the variable is undefined.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For automatic and register values, the initializer is not restricted to being a constant; it can be any expression involving previously defined values, even function calls.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The initial values for external variable declarations and for all <bpt id="p1">**</bpt>static<ept id="p1">**</ept> variables, whether external or internal, must be constant expressions.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Constant Expressions<ept id="p1">](../c-language/c-constant-expressions.md)</ept>.) Since the address of any externally declared or static variable is constant, it can be used to initialize an internally declared <bpt id="p2">**</bpt>static<ept id="p2">**</ept> pointer variable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, the address of an <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> variable cannot be used as a static initializer because it may be different for each execution of the block.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use either constant or variable values to initialize <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> and <bpt id="p2">**</bpt>register<ept id="p2">**</ept> variables.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the declaration of an identifier has block scope, and the identifier has external linkage, the declaration cannot have an initialization.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following examples illustrate initializations:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The integer variable <ph id="ph1">`x`</ph> is initialized to the constant expression <ph id="ph2">`10`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The pointer <ph id="ph1">`px`</ph> is initialized to 0, producing a "null" pointer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This example uses a constant expression <ph id="ph1">`(3 * 1024)`</ph> to initialize <ph id="ph2">`c`</ph> to a constant value that cannot be modified because of the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This statement initializes the pointer <ph id="ph1">`b`</ph> with the address of another variable, <ph id="ph2">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The pointer <ph id="ph1">`a`</ph> is initialized with the address of a variable named <ph id="ph2">`z`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, since it is specified to be a <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, the variable <ph id="ph1">`a`</ph> can only be initialized, never modified.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It always points to the same location.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The global variable <ph id="ph1">`GLOBAL`</ph> is declared at the external level, so it has global lifetime.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The local variable <ph id="ph1">`LOCAL`</ph> has <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> storage class and only has an address during the execution of the function in which it is declared.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, attempting to initialize the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> pointer variable <ph id="ph1">`lp`</ph> with the address of <ph id="ph2">`LOCAL`</ph> is not permitted.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>static<ept id="p1">**</ept> pointer variable <ph id="ph1">`gp`</ph> can be initialized to the address of <ph id="ph2">`GLOBAL`</ph> because that address is always the same.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Similarly, <ph id="ph1">`*rp`</ph> can be initialized because <ph id="ph2">`rp`</ph> is a local variable and can have a nonconstant initializer.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each time the block is entered, <ph id="ph1">`LOCAL`</ph> has a new address, which is then assigned to <ph id="ph2">`rp`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Initialization</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>