<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9581bf1ff477a2aee04ebd59f20bc7447ed6160b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\how-to-implement-tracking-in-your-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">692f4fdb20ce3480d3d8435856684d6fd7d58dae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75383389bff69aa518b318b8b912ef9f096caedd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Implement Tracking in Your Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Implement Tracking in Your Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To track an OLE item, you must handle certain events related to the item, such as clicking the item or updating the view of the document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In all cases, it is sufficient to declare a temporary <bpt id="p1">[</bpt>CRectTracker<ept id="p1">](../mfc/reference/crecttracker-class.md)</ept> object and manipulate the item by means of this object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When a user selects an item or inserts an object with a menu command, you must initialize the tracker with the proper styles to represent the state of the OLE item.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table outlines the conventions used by the OCLIENT sample.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on these styles, see <ph id="ph1">`CRectTracker`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Container Styles and States of the OLE Item</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Style displayed</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>State of OLE item</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Dotted border</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Item is linked</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Solid border</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Item is embedded in your document</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Resize handles</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Item is currently selected</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Hatched border</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Item is currently in-place active</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Hatching pattern overlays item</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Item's server is open</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can handle this initialization easily using a procedure that checks the state of the OLE item and sets the appropriate styles.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SetupTracker<ept id="p1">**</ept> function found in the OCLIENT sample demonstrates tracker initialization.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The parameters for this function are the address of the tracker, <bpt id="p1">*</bpt>pTracker<ept id="p1">*</ept>; a pointer to the client item that is related to the tracker, <ph id="ph1">`pItem`</ph>; and a pointer to a rectangle, <bpt id="p2">*</bpt>pTrueRect<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For a more complete example of this function, see the MFC OLE sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SetupTracker<ept id="p1">**</ept> code example presents a single function; lines of the function are interspersed with discussion of the function's features:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFCOClient#1</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The tracker is initialized by setting the minimum size and clearing the style of the tracker.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>NVC_MFCOClient#2</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following lines check to see whether the item is currently selected and whether the item is linked to the document or embedded in it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Resize handles located on the inside of the border are added to the style, indicating that the item is currently selected.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the item is linked to your document, the dotted border style is used.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A solid border is used if the item is embedded.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFCOClient#3</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code overlays the item with a hatched pattern if the item is currently open.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NVC_MFCOClient#4</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can then call this function whenever the tracker has to be displayed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, call this function from the <ph id="ph1">`OnDraw`</ph> function of your view class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This updates the tracker's appearance whenever the view is repainted.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For a complete example, see the <bpt id="p1">**</bpt>CMainView::OnDraw<ept id="p1">**</ept> function of the MFC OLE sample <bpt id="p2">[</bpt>OCLIENT<ept id="p2">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In your application, events that require tracker code, such as resizing, moving, or hit detecting, will occur.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These actions usually indicate that an attempt is being made to grab or move the item.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In these cases, you will need to decide what was grabbed: a resize handle or a portion of the border between resize handles.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnLButtonDown`</ph> message handler is a good place to test the position of the mouse in relation to the item.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Make a call to <ph id="ph1">`CRectTracker::HitTest`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the test returns something besides <bpt id="p1">**</bpt>CRectTracker::hitOutside<ept id="p1">**</ept>, the item is being resized or moved.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you should make a call to the <ph id="ph1">`Track`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">**</bpt>CMainView::OnLButtonDown<ept id="p1">**</ept> function located in the MFC OLE sample <bpt id="p2">[</bpt>OCLIENT<ept id="p2">](../visual-cpp-samples.md)</ept> for a complete example.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRectTracker`</ph> class provides several different cursor shapes used to indicate whether a move, resize, or drag operation is taking place.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To handle this event, check to see whether the item currently under the mouse is selected.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If it is, make a call to <ph id="ph1">`CRectTracker::SetCursor`</ph>, or call the default handler.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example is from the MFC OLE sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>NVC_MFCOClient#5</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Trackers: Implementing Trackers in Your OLE Application</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>