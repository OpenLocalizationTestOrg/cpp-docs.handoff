<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">406fe0affc2146d638960be10b0e74432133271f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\struct-unwind-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8408962a93615240b37f5af1ee25a39604e85f24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04e40e49bad8c22d0ad3bcb22068dfedb5764197</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>struct UNWIND_CODE | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>struct UNWIND_CODE</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The unwind code array is used to record the sequence of operations in the prolog that affect the nonvolatile registers and RSP.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each code item has the following format:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>UBYTE</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Offset in prolog</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>UBYTE: 4</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unwind operation code</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>UBYTE: 4</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operation info</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The array is sorted by descending order of offset in the prolog.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Offset in prolog</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Offset from the beginning of the prolog of the end of the instruction that performs this operation, plus 1 (that is, the offset of the start of the next instruction).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unwind operation code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note: Certain operation codes require an unsigned offset to a value in the local stack frame.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This offset is from the start (lowest address) of the fixed stack allocation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the Frame Register field in the UNWIND_INFO is zero, this offset is from RSP.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the Frame Register field is nonzero, this is the offset from where RSP was located when the FP reg was established.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This equals the FP reg minus the FP reg offset (16 * the scaled frame register offset in the UNWIND_INFO).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If an FP reg is used, then any unwind code taking an offset must only be used after the FP reg is established in the prolog.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For all opcodes except UWOP_SAVE_XMM128 and UWOP_SAVE_XMM128_FAR, the offset will always be a multiple of 8, because all stack values of interest are stored on 8 byte boundaries (the stack itself is always 16-byte aligned).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For operation codes that take a short offset (less than 512K), the final USHORT in the nodes for this code holds the offset divided by 8.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For operation codes that take a long offset (512K &lt;= offset &lt; 4GB), the final two USHORT nodes for this code hold the offset (in little-endian format).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the opcodes UWOP_SAVE_XMM128 and UWOP_SAVE_XMM128_FAR, the offset will always be a multiple of 16, since all 128-bit XMM operations must occur on 16-byte aligned memory.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, a scale factor of 16 is used for UWOP_SAVE_XMM128, permitting offsets of less than 1M.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The unwind operation code is one of the following:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>UWOP_PUSH_NONVOL (0)1 node</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Push a nonvolatile integer register, decrementing RSP by 8.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The operation info is the number of the register.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that, because of the constraints on epilogs, UWOP_PUSH_NONVOL unwind codes must appear first in the prolog and correspondingly, last in the unwind code array.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This relative ordering applies to all other unwind codes except UWOP_PUSH_MACHFRAME.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>UWOP_ALLOC_LARGE (1)2 or 3 nodes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Allocate a large-sized area on the stack.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There are two forms.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the operation info equals 0, then the size of the allocation divided by 8 is recorded in the next slot, allowing an allocation up to 512K – 8.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the operation info equals 1, then the unscaled size of the allocation is recorded in the next two slots in little-endian format, allowing allocations up to 4GB – 8.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>UWOP_ALLOC_SMALL (2)1 node</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Allocate a small-sized area on the stack.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The size of the allocation is the operation info field * 8 + 8, allowing allocations from 8 to 128 bytes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The unwind code for a stack allocation should always use the shortest possible encoding:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Allocation Size</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Unwind Code</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>8 to 128 bytes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>UWOP_ALLOC_SMALL</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>136 to 512K-8 bytes</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>UWOP_ALLOC_LARGE, operation info = 0</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>512K to 4G–8 bytes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>UWOP_ALLOC_LARGE, operation info = 1</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>UWOP_SET_FPREG (3)1 node</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Establish the frame pointer register by setting the register to some offset of the current RSP.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The offset is equal to the Frame Register offset (scaled) field in the UNWIND_INFO * 16, allowing offsets from 0 to 240.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The use of an offset permits establishing a frame pointer that points to the middle of the fixed stack allocation, helping code density by allowing more accesses to use short instruction forms.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that the operation info field is reserved and should not be used.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>UWOP_SAVE_NONVOL (4)2 nodes</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Save a nonvolatile integer register on the stack using a MOV instead of a PUSH.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is primarily used for shrink-wrapping, where a nonvolatile register is saved to the stack in a position that was previously allocated.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The operation info is the number of the register.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The scaled-by-8 stack offset is recorded in the next unwind operation code slot, as described in the note above.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>UWOP_SAVE_NONVOL_FAR (5)3 nodes</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Save a nonvolatile integer register on the stack with a long offset, using a MOV instead of a PUSH.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is primarily used for shrink-wrapping, where a nonvolatile register is saved to the stack in a position that was previously allocated.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The operation info is the number of the register.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The unscaled stack offset is recorded in the next two unwind operation code slots, as described in the note above.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>UWOP_SAVE_XMM128 (8)2 nodes</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Save all 128 bits of a nonvolatile XMM register on the stack.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The operation info is the number of the register.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The scaled-by-16 stack offset is recorded in the next slot.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>UWOP_SAVE_XMM128_FAR (9)3 nodes</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Save all 128 bits of a nonvolatile XMM register on the stack with a long offset.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The operation info is the number of the register.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The unscaled stack offset is recorded in the next two slots.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>UWOP_PUSH_MACHFRAME (10)1 node</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Push a machine frame.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is used to record the effect of a hardware interrupt or exception.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>There are two forms.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the operation info equals 0, the following has been pushed on the stack:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>RSP+32</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>SS</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>RSP+24</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Old RSP</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>RSP+16</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>EFLAGS</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>RSP+8</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CS</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>RSP</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>RIP</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If the operation info equals 1, then the following has instead been pushed:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>RSP+40</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>SS</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>RSP+32</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Old RSP</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>RSP+24</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>EFLAGS</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>RSP+16</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CS</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>RSP+8</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>RIP</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>RSP</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Error code</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This unwind code will always appear in a dummy prolog, which is never actually executed but instead appears before the real entry point of an interrupt routine, and exists only to provide a place to simulate the push of a machine frame.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>UWOP_PUSH_MACHFRAME records that simulation, which indicates the machine has conceptually done the following:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Pop RIP return address from top of stack into <bpt id="p1">*</bpt>Temp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Push SS</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Push old RSP</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Push EFLAGS</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Push CS</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Push <bpt id="p1">*</bpt>Temp<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Push Error Code (if op info equals 1)</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The simulated UWOP_PUSH_MACHFRAME operation decrements RSP by 40 (op info equals 0) or 48 (op info equals 1).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Operation info</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The meaning of these 4 bits depends upon the operation code.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To encode a general-purpose (integer) register, the following mapping is used:</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>RAX</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>RCX</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>RDX</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>RBX</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>RSP</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>RBP</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>6</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>RSI</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>7</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>RDI</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>8 to 15</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>R8 to R15</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Unwind Data for Exception Handling, Debugger Support</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>