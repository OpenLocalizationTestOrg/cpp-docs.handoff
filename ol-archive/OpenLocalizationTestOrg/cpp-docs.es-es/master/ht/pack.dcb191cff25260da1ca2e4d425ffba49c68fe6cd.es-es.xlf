<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b921be2f50f13c5bf73ba566a05632f156ab649</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\pack.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e00186595c9d10b7db5473e7365e1d89764b0459</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f22e27f16e20d26267d741175cb20e49acf0e8fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>pack | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>pack</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies packing alignment for structure, union, and class members.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To pack a class is to place its members directly after each other in memory, which can mean that some or all members can be aligned on a boundary smaller than the default alignment the target architecture.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>gives control at the data-declaration level.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This differs from compiler option <bpt id="p1">[</bpt>/Zp<ept id="p1">](../build/reference/zp-struct-member-alignment.md)</ept>, which only provides module-level control.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>takes effect at the first <ph id="ph1">`struct`</ph>, <ph id="ph2">`union`</ph>, or <ph id="ph3">`class`</ph> declaration after the pragma is seen.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>has no effect on definitions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`pack`</ph> with no arguments sets <ph id="ph2">`n`</ph> to the value set in the compiler option <bpt id="p1">**</bpt>/Zp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the compiler option is not set, the default value is 8.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you change the alignment of a structure, it may not use as much space in memory, but you may see a decrease in performance or even get a hardware-generated exception for unaligned access.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can modify this exception behavior by using <bpt id="p1">[</bpt>SetErrorMode<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680621)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>show<ept id="p1">**</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Displays the current byte value for packing alignment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value is displayed by a warning message.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>push<ept id="p1">**</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Pushes the current packing alignment value on the internal compiler stack, and sets the current packing alignment value to <ph id="ph1">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n`</ph> is not specified, the current packing alignment value is pushed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pop<ept id="p1">**</ept> (optional)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Removes the record from the top of the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n`</ph> is not specified with <bpt id="p1">**</bpt>pop<ept id="p1">**</ept>, then the packing value associated with the resulting record on the top of the stack is the new packing alignment value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n`</ph> is specified, for example, <ph id="ph2">`#pragma pack(pop, 16)`</ph>, <ph id="ph3">`n`</ph> becomes the new packing alignment value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you pop with <ph id="ph1">`identifier`</ph>, for example, <ph id="ph2">`#pragma pack(pop, r1)`</ph>, then all records on the stack are popped until the record that has <ph id="ph3">`identifier`</ph> is found.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That record is popped and the packing value associated with the resulting record on the top of is the stack the new packing alignment value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you pop with an <ph id="ph1">`identifier`</ph> that is not found in any record on the stack, then the <bpt id="p1">**</bpt>pop<ept id="p1">**</ept> is ignored.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When used with <bpt id="p1">**</bpt>push<ept id="p1">**</ept>, assigns a name to the record on the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When used with <bpt id="p1">**</bpt>pop<ept id="p1">**</ept>, pops records off the internal stack until <ph id="ph1">`identifier`</ph> is removed; if <ph id="ph2">`identifier`</ph> is not found on the internal stack, nothing is popped.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifies the value, in bytes, to be used for packing.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the compiler option <bpt id="p1">[</bpt>/Zp<ept id="p1">](../build/reference/zp-struct-member-alignment.md)</ept> is not set for the module, the default value for <ph id="ph1">`n`</ph> is 8.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Valid values are 1, 2, 4, 8, and 16.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The alignment of a member will be on a boundary that is either a multiple of <ph id="ph1">`n`</ph> or a multiple of the size of the member, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>is undefined.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about how to modify alignment, see these topics:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>__alignof</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>align</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>__unaligned</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Examples of Structure Alignment<ept id="p1">](../build/examples-of-structure-alignment.md)</ept> (x64 specific)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note that in Visual Studio 2015 and later you can use the standard alignas and alignof operators which, unlike <ph id="ph1">`__alignof`</ph> and <ph id="ph2">`declspec( align )`</ph> are portable across compilers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The C++ standard does not address packing, so you must still use <ph id="ph1">`pack`</ph> (or the corresponding extension on other compilers) to specify alignments smaller than the target architecture’s word size.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following sample shows how to use the <ph id="ph1">`pack`</ph> pragma to change the alignment of a structure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following sample shows how to use the <bpt id="p1">**</bpt>push<ept id="p1">**</ept>, <bpt id="p2">**</bpt>pop<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>show<ept id="p3">**</ept> syntax.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>