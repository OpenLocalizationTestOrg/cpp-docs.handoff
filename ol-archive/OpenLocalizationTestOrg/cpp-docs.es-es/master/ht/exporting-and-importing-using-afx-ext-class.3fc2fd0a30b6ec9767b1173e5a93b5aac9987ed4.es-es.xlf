<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33eae7eefe6385678ec82e454e07bbd7cc8459ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\exporting-and-importing-using-afx-ext-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f02c1ae01746598e8503f11a692b90cf7b5905b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">322a824f08ef25417f8ddbb4d76e6898d46a1143</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exporting and Importing Using AFX_EXT_CLASS | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exporting and Importing Using AFX_EXT_CLASS</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension DLLs<ept id="p1">](../build/extension-dlls-overview.md)</ept> use the macro <bpt id="p2">**</bpt>AFX_EXT_CLASS<ept id="p2">**</ept> to export classes; the executables that link to the extension DLL use the macro to import classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> macro, the same header files that are used to build the extension DLL can be used with the executables that link to the DLL.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the header file for your DLL, add the <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> keyword to the declaration of your class as follows:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This macro is defined by MFC as <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> when the preprocessor symbols <bpt id="p2">**</bpt>_AFXDLL<ept id="p2">**</ept> and <ph id="ph1">`_AFXEXT`</ph> are defined.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>But the macro is defined as <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> when <bpt id="p2">**</bpt>_AFXDLL<ept id="p2">**</ept> is defined and <ph id="ph1">`_AFXEXT`</ph> is not defined.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When defined, the preprocessor symbol <bpt id="p1">**</bpt>_AFXDLL<ept id="p1">**</ept> indicates that the shared version of MFC is being used by the target executable (either a DLL or an application).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When both <bpt id="p1">**</bpt>_AFXDLL<ept id="p1">**</ept> and <ph id="ph1">`_AFXEXT`</ph> are defined, this indicates that the target executable is an extension DLL.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> is defined as <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept> when exporting from an extension DLL, you can export entire classes without placing the decorated names for all of that class's symbols in the .def file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method is used by the MFC sample <bpt id="p1">[</bpt>DLLHUSK<ept id="p1">](http://msdn.microsoft.com/en-us/dfcaa6ff-b8e2-4efd-8100-ee3650071f90)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Although you can avoid creating a .def file and all of the decorated names for the class with this method, creating a .def file is more efficient because the names can be exported by ordinal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To use the .def file method of exporting, place the following code at the beginning and end of your header file:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Be careful when exporting inline functions, because they can create the possibility of version conflicts.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An inline function gets expanded into the application code; therefore, if you later rewrite the function, it does not get updated unless the application itself is recompiled.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Normally, DLL functions can be updated without rebuilding the applications that use them.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Exporting Individual Members in a Class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Sometimes you might want to export individual members of your class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if you are exporting a <ph id="ph1">`CDialog`</ph>-derived class, you might only need to export the constructor and the <ph id="ph2">`DoModal`</ph> call.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> on the individual members you need to export.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because you are no longer exporting all members of the class, you may run into an additional problem because of the way that MFC macros work.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Several of MFC's helper macros actually declare or define data members.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, these data members must also be exported from your DLL.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`DECLARE_DYNAMIC`</ph> macro is defined as follows when building an extension DLL:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The line that begins with static <ph id="ph1">`AFX_DATA`</ph> is declaring a static object inside of your class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To export this class correctly and access the run-time information from a client executable, you must export this static object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the static object is declared with the modifier <ph id="ph1">`AFX_DATA`</ph>, you only need to define <ph id="ph2">`AFX_DATA`</ph> to be <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> when building your DLL and define it as <bpt id="p2">**</bpt>__declspec(dllimport)<ept id="p2">**</ept> when building your client executable.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> is already defined in this way, you just need to redefine <ph id="ph1">`AFX_DATA`</ph> to be the same as <bpt id="p2">**</bpt>AFX_EXT_CLASS<ept id="p2">**</ept> around your class definition.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because MFC always uses the <ph id="ph1">`AFX_DATA`</ph> symbol on data items it defines within its macros, this technique works for all such scenarios.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, it works for <ph id="ph1">`DECLARE_MESSAGE_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you are exporting the entire class rather than selected members of the class, static data members are automatically exported.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Export from a DLL using .def files</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Export from a DLL using __declspec(dllexport)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Export C++ functions for use in C-language executables</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Export C functions for use in C or C++-language executables</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Determine which exporting method to use</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Import into an application using __declspec(dllimport)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initialize a DLL</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>What do you want to know more about?</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Decorated names</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Importing and exporting inline functions</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Mutual imports</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Exporting from a DLL</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>