<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc5b513a1b81f6632ee98e6633b543413701393f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-relational-and-equality-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d68078bee2f60f28632731ad8915112b457c1b1e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc52f0275de608cf77f986008679e55b51618b64</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Relational and Equality Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Relational and Equality Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The binary relational and equality operators compare their first operand to their second operand to test the validity of the specified relationship.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The result of a relational expression is 1 if the tested relationship is true and 0 if it is false.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The type of the result is <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>relational-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>shift-expression</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>relational-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>shift-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>relational-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">&gt;</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>shift-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>relational-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">\&lt;=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>shift-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>relational-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">&gt;=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>shift-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>equality-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>relational-expression</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>equality-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">==</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>relational-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>equality-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt>!=<ept id="p2">**</ept>  <bpt id="p3">*</bpt>relational-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The relational and equality operators test the following relationships:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Relationship Tested</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>First operand less than second operand</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>First operand greater than second operand</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>First operand less than or equal to second operand</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>First operand greater than or equal to second operand</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>First operand equal to second operand</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>First operand not equal to second operand</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first four operators in the list above have a higher precedence than the equality operators (<ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See the precedence information in the table <bpt id="p1">[</bpt>Precedence and Associativity of C Operators<ept id="p1">](../c-language/precedence-and-order-of-evaluation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The operands can have integral, floating, or pointer type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The types of the operands can be different.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Relational operators perform the usual arithmetic conversions on integral and floating type operands.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition, you can use the following combinations of operand types with the relational and equality operators:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Both operands of any relational or equality operator can be pointers to the same type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the equality (<ph id="ph1">`==`</ph>) and inequality (<ph id="ph2">`!=`</ph>) operators, the result of the comparison indicates whether the two pointers address the same memory location.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For the other relational operators (<bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">&gt;</ph><ept id="p2">**</ept>, <bpt id="p3">**</bpt><ph id="ph3">\&lt;</ph><ept id="p3">**</ept>=, and <bpt id="p4">**</bpt><ph id="ph4">&gt;</ph><ept id="p4">**</ept>=), the result of the comparison indicates the relative position of the two memory addresses of the objects pointed to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Relational operators compare only offsets.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Pointer comparison is defined only for parts of the same object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the pointers refer to members of an array, the comparison is equivalent to comparison of the corresponding subscripts.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The address of the first array element is "less than" the address of the last element.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the case of structures, pointers to structure members declared later are "greater than" pointers to members declared earlier in the structure.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Pointers to the members of the same union are equal.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A pointer value can be compared to the constant value 0 for equality (<ph id="ph1">`==`</ph>) or inequality (<ph id="ph2">`!=`</ph>).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A pointer with a value of 0 is called a "null" pointer; that is, it does not point to a valid memory location.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The equality operators follow the same rules as the relational operators, but permit additional possibilities: a pointer can be compared to a constant integral expression with value 0, or to a pointer to <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If two pointers are both null pointers, they compare as equal.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Equality operators compare both segment and offset.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The examples below illustrate relational and equality operators.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`x`</ph> and <ph id="ph2">`y`</ph> are equal, the expression in this example yields the value 0.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The fragment in this example sets each element of <ph id="ph1">`array`</ph> to a null character constant.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These statements declare an enumeration variable named <ph id="ph1">`col`</ph> with the tag <ph id="ph2">`color`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>At any time, the variable may contain an integer value of 0, 1, or 2, which represents one of the elements of the enumeration set <ph id="ph1">`color`</ph>: the color red, white, or green, respectively.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`col`</ph> contains 0 when the <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement is executed, any statements depending on the <bpt id="p2">**</bpt>if<ept id="p2">**</ept> will be executed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Relational Operators: <ph id="ph1">\&lt;</ph>, &gt;, <ph id="ph2">\&lt;</ph>=, and &gt;=</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Equality Operators: == and !=</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>