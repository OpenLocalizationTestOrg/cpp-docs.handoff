<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">416ee4444aad96dd263e5436d26dcdd57ebda3a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\argument-definitions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecafdaae9a623dbca1ab0b2e43d2fa8872a0208d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b12abfb7e7f5b99db088fdc2e052ff57f1402e98</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Argument Definitions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Argument Definitions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The arguments in the prototype</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>allow convenient command-line parsing of arguments and, optionally, access to environment variables.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The argument definitions are as follows:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An integer that contains the count of arguments that follow in <ph id="ph1">`argv`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`argc`</ph> parameter is always greater than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An array of null-terminated strings representing command-line arguments entered by the user of the program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By convention, <ph id="ph1">`argv`</ph><bpt id="p1">**</bpt>[0]<ept id="p1">**</ept> is the command with which the program is invoked, <ph id="ph2">`argv`</ph><bpt id="p2">**</bpt>[1]<ept id="p2">**</ept> is the first command-line argument, and so on, until <ph id="ph3">`argv`</ph><bpt id="p3">**</bpt>[<ept id="p3">**</ept><ph id="ph4">`argc`</ph><bpt id="p4">**</bpt>]<ept id="p4">**</ept>, which is always <bpt id="p5">**</bpt>NULL<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Customizing Command Line Processing<ept id="p1">](../cpp/customizing-cpp-command-line-processing.md)</ept> for information on suppressing command-line processing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first command-line argument is always <ph id="ph1">`argv`</ph><bpt id="p1">**</bpt>[1]<ept id="p1">**</ept> and the last one is <ph id="ph2">`argv`</ph><bpt id="p2">**</bpt>[<ept id="p2">**</ept><ph id="ph3">`argc`</ph> â€“ 1<bpt id="p3">**</bpt>]<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By convention, <ph id="ph1">`argv`</ph><bpt id="p1">**</bpt>[0]<ept id="p1">**</ept> is the command with which the program is invoked.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, it is possible to spawn a process using <bpt id="p1">[</bpt>CreateProcess<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> and if you use both the first and second arguments (<ph id="ph1">`lpApplicationName`</ph> and <ph id="ph2">`lpCommandLine`</ph>), <ph id="ph3">`argv`</ph><bpt id="p2">**</bpt>[0]<ept id="p2">**</ept> may not be the executable name; use <bpt id="p3">[</bpt>GetModuleFileName<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> to retrieve the executable name, and its fully-qualified path.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`envp`</ph> array, which is a common extension in many UNIX systems, is used in Microsoft C++.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is an array of strings representing the variables set in the user's environment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This array is terminated by a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> entry.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It can be declared as an array of pointers to <bpt id="p1">**</bpt>char (char<ept id="p1">**</ept> <ph id="ph1">\*</ph>envp[ ]<bpt id="p2">**</bpt>)<ept id="p2">**</ept> or as a pointer to pointers to <bpt id="p3">**</bpt>char (char<ept id="p3">**</ept> <ph id="ph2">\*\*</ph>envp<bpt id="p4">**</bpt>)<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your program uses <bpt id="p1">**</bpt>wmain<ept id="p1">**</ept> instead of <bpt id="p2">**</bpt>main<ept id="p2">**</ept>, use the <ph id="ph1">`wchar_t`</ph> data type instead of <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The environment block passed to <bpt id="p1">**</bpt>main<ept id="p1">**</ept> and <bpt id="p2">**</bpt>wmain<ept id="p2">**</ept> is a "frozen" copy of the current environment.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you subsequently change the environment via a call to <bpt id="p1">**</bpt>putenv<ept id="p1">**</ept> or <ph id="ph1">`_wputenv`</ph>, the current environment (as returned by <ph id="ph2">`getenv`/`_wgetenv`</ph> and the <ph id="ph3">`_environ`/ `_wenviron`</ph> variable) will change, but the block pointed to by envp will not change.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Customizing Command Line Processing<ept id="p1">](../cpp/customizing-cpp-command-line-processing.md)</ept> for information on suppressing environment processing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This argument is ANSI compatible in C, but not in C++.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`argc`</ph>, <ph id="ph2">`argv`</ph>, and <ph id="ph3">`envp`</ph> arguments to <bpt id="p1">**</bpt>main<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>main: Program Startup</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>