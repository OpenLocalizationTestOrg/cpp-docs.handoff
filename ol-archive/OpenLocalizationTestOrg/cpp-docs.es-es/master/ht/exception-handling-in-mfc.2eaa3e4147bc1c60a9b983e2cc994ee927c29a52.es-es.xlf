<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8f13e095e57d9364876c150bb476b0c4504d4a2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\exception-handling-in-mfc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ed335efea967aa98684c7ba66e9083c80c48fc8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af33548b6ec8008338f558e6fe11057d4578dfd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exception Handling in MFC | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exception Handling in MFC</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains the exception-handling mechanisms available in MFC.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Two mechanisms are available:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C++ exceptions, available in MFC version 3.0 and later</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The MFC exception macros, available in MFC versions 1.0 and later</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you're writing a new application using MFC, you should use the C++ mechanism.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use the macro-based mechanism if your existing application already uses that mechanism extensively.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can readily convert existing code to use C++ exceptions instead of the MFC exception macros.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Advantages of converting your code and guidelines for doing so are described in the article <bpt id="p1">[</bpt>Exceptions: Converting from MFC Exception Macros<ept id="p1">](../mfc/exceptions-converting-from-mfc-exception-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you have already developed an application using the MFC exception macros, you can continue using these macros in your existing code, while using C++ exceptions in your new code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>Exceptions: Changes to Exception Macros in Version 3.0<ept id="p1">](../mfc/exceptions-changes-to-exception-macros-in-version-3-0.md)</ept> gives guidelines for doing so.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To enable C++ exception handling in your code, select Enable C++ Exceptions on the Code Generation page in the C/C++ folder of the project's <bpt id="p1">[</bpt>Property Pages<ept id="p1">](../ide/property-pages-visual-cpp.md)</ept> dialog box, or use the /GX compiler option.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The default is /GXâ€“, which disables exception handling.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This article covers the following topics:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When to use exceptions</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>MFC exception support</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Further reading about exceptions</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When to Use Exceptions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Three categories of outcomes can occur when a function is called during program execution: normal execution, erroneous execution, or abnormal execution.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each category is described below.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Normal execution</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The function may execute normally and return.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some functions return a result code to the caller, which indicates the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The possible result codes are strictly defined for the function and represent the range of possible outcomes of the function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The result code can indicate success or failure or can even indicate a particular type of failure that is within the normal range of expectations.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, a file-status function can return a code that indicates that the file does not exist.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that the term "error code" is not used because a result code represents one of many expected outcomes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Erroneous execution</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The caller makes some mistake in passing arguments to the function or calls the function in an inappropriate context.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This situation causes an error, and it should be detected by an assertion during program development.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(For more information on assertions, see <bpt id="p1">[</bpt>C/C++ Assertions<ept id="p1">](/visualstudio/debugger/c-cpp-assertions)</ept>.)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Abnormal execution</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Abnormal execution includes situations where conditions outside the program's control, such as low memory or I/O errors, are influencing the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Abnormal situations should be handled by catching and throwing exceptions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Using exceptions is especially appropriate for abnormal execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>MFC Exception Support</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Whether you use the C++ exceptions directly or use the MFC exception macros, you will use <bpt id="p1">[</bpt>CException Class<ept id="p1">](../mfc/reference/cexception-class.md)</ept> or <ph id="ph1">`CException`</ph>-derived objects that may be thrown by the framework or by your application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following table shows the predefined exceptions provided by MFC.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Exception class</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CMemoryException Class</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Out-of-memory</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CFileException Class</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>File exception</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CArchiveException Class</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Archive/Serialization exception</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CNotSupportedException Class</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Response to request for unsupported service</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CResourceException Class</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Windows resource allocation exception</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CDaoException Class</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Database exceptions (DAO classes)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CDBException Class</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Database exceptions (ODBC classes)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>COleException Class</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>OLE exceptions</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>COleDispatchException Class</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Dispatch (automation) exceptions</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CUserException Class</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Exception that alerts the user with a message box, then throws a generic <bpt id="p1">[</bpt>CException Class<ept id="p1">](../mfc/reference/cexception-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>MFC supports both C++ exceptions and the MFC exception macros.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>MFC does not directly support Windows NT structured exception handlers (SEH), as discussed in <bpt id="p1">[</bpt>Structured Exception Handling<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680657)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Further Reading About Exceptions</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following articles explain using the MFC library for exception handing:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Exceptions: Catching and Deleting Exceptions</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Exceptions: Examining Exception Contents</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Exceptions: Freeing Objects in Exceptions</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Exceptions: Throwing Exceptions from Your Own Functions</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Exceptions: Database Exceptions</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Exceptions: OLE Exceptions</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following articles compare the MFC exception macros with the C++ exception keywords and explain how you can adapt your code:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Exceptions: Changes to Exception Macros in Version 3.0</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Exceptions: Converting from MFC Exception Macros</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Exceptions: Using MFC Macros and C++ Exceptions</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>C++ Exception Handling</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>How Do I: Create my Own Custom Exception Classes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>