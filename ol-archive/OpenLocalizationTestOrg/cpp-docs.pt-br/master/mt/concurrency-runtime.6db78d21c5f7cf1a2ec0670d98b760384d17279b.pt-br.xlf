<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd5462c53023954f06e8de7b1f5baf45ccfd5a8f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\concurrency-runtime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26e176143c63bf1d4b84f34ecefda71deaf4f8c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7766748157512b39c3d3a77cc6d1abf40d21b471</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime for C++ helps you write robust, scalable, and responsive parallel applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It raises the level of abstraction so that you do not have to manage the infrastructure details that are related to concurrency.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also use it to specify scheduling policies that meet the quality of service demands of your applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use these resources to help you start working with the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For reference documentation, see <bpt id="p1">[</bpt>Reference<ept id="p1">](../../parallel/concrt/reference/reference-concurrency-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime relies heavily on C++11 features and adopts the more modern C++ style.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To learn more, read  <bpt id="p1">[</bpt>Welcome Back to C++<ept id="p1">](../../cpp/welcome-back-to-cpp-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Choosing Concurrency Runtime Features</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Teaches why the Concurrency Runtime is important and describes its key features.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Comparing to Other Concurrency Models</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Shows how the Concurrency Runtime compares to other concurrency models, such as the Windows thread pool and OpenMP, so that you can use the concurrency model that best fits your application requirements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Migrating from OpenMP to the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compares OpenMP to the Concurrency Runtime and provides examples about how to migrate existing OpenMP code to use the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Parallel Patterns Library (PPL)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Introduces you to the PPL, which provides parallel loops, tasks, and parallel containers.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Introduces you to how to use asynchronous agents and message passing to easily incorporate dataflow and pipelining tasks in your applications.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Introduces you to the Task Scheduler, which enables you to fine-tune the performance of your desktop apps that uses the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Task Parallelism in the PPL</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Task Parallelism</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>How to: Use parallel_invoke to Write a Parallel Sort Routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to: Use parallel_invoke to Execute Parallel Operations</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>How to: Create a Task that Completes After a Delay</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Describes tasks and task groups, which can help you to write asynchronous code and decompose parallel work into smaller pieces.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing Futures</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Demonstrates how to combine Concurrency Runtime features to do something more.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Walkthrough: Removing Work from a User-Interface Thread</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Shows how to move the work that is performed by the UI thread in a MFC application to a worker thread.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Best Practices in the Parallel Patterns Library</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>General Best Practices in the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Provides tips and best practices for working with the PPL.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Data Parallelism in the PPL</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>How to: Write a parallel_for Loop</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How to: Write a parallel_for_each Loop</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>How to: Perform Map and Reduce Operations in Parallel</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Describes <ph id="ph1">`parallel_for`</ph>, <ph id="ph2">`parallel_for_each`</ph>, <ph id="ph3">`parallel_invoke`</ph>, and other parallel algorithms.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use parallel algorithms to solve <bpt id="p1">*</bpt>data parallel<ept id="p1">*</ept> problems that involve collections of data.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parallel Containers and Objects</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>How to: Use Parallel Containers to Increase Efficiency</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Improve Performance</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>How to: Use combinable to Combine Sets</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Describes the <ph id="ph1">`combinable`</ph> class, as well as <ph id="ph2">`concurrent_vector`</ph>, <ph id="ph3">`concurrent_queue`</ph>, <ph id="ph4">`concurrent_unordered_map`</ph>, and other parallel containers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use parallel containers and objects when you require containers that provide thread-safe access to their elements.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Best Practices in the Parallel Patterns Library</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>General Best Practices in the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Provides tips and best practices for working with the PPL.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Canceling Tasks and Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Cancellation in the PPL</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Describes the role of cancellation in the PPL, including how to initiate and respond to cancellation requests.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to: Use Cancellation to Break from a Parallel Loop</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>How to: Use Exception Handling to Break from a Parallel Loop</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Demonstrates two ways to cancel data-parallel work.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Windows Store Apps</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Creating Asynchronous Operations in C++ for Windows Store Apps</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Describes some of the key points to keep in mind when you use the Concurrency Runtime to produce asynchronous operations in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Walkthrough: Connecting Using Tasks and XML HTTP Requests</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Shows how to combine PPL tasks with the <ph id="ph1">`IXMLHTTPRequest2`</ph> and <ph id="ph2">`IXMLHTTPRequest2Callback`</ph> interfaces to send HTTP GET and POST requests to a web service in a <ph id="ph3">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows Store app samples</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Contains downloadable code samples and demo apps for <ph id="ph1">[!INCLUDE[win8](../../build/reference/includes/win8_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The C++ samples use Concurrency Runtime features such as PPL tasks to process data in the background to keep the UX responsive.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Dataflow Programming in the Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>How to: Implement Various Producer-Consumer Patterns</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>How to: Provide Work Functions to the call and transformer Classes</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>How to: Use transformer in a Data Pipeline</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>How to: Select Among Completed Tasks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>How to: Send a Message at a Regular Interval</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Describes asynchronous agents, message blocks, and message-passing functions, which are the building blocks for performing dataflow operations in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Agent-Based Application</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Dataflow Agent</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Shows how to create basic agent-based applications.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Image-Processing Network</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Shows how to create a network of asynchronous message blocks that perform image processing.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Walkthrough: Using join to Prevent Deadlock</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Uses the dining philosophers problem to illustrate how to use the Concurrency Runtime to prevent deadlock in your application.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Custom Message Block</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Shows how to create a custom message block type that orders incoming messages by priority.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Best Practices in the Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>General Best Practices in the Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Provides tips and best practices for working with agents.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Exception Handling and Debugging</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Describes how to work with exceptions in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parallel Diagnostic Tools</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Teaches you how to fine-tune your applications and make the most effective use of the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Tuning Performance</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parallel Diagnostic Tools</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Teaches you how to fine-tune your applications and make the most effective use of the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Scheduler Instances</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>How to: Manage a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Scheduler Policies</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>How to: Specify Specific Scheduler Policies</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>How to: Create Agents that Use Specific Scheduler Policies</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Shows how to work with manage scheduler instances and scheduler policies.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For desktop apps, scheduler policies enable you to associate specific rules with specific types of workloads.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, you can create one scheduler instance to run some tasks at an elevated thread priority and use the default scheduler to run other tasks at the normal thread priority.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Schedule Groups</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>How to: Use Schedule Groups to Influence Order of Execution</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use schedule groups to affinitize, or group, related tasks together.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, you might require a high degree of locality among related tasks when those tasks benefit from executing on the same processor node.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Lightweight Tasks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Explains how lightweight tasks are useful for creating work that does not require load-balancing or cancellation, and how they are also useful for adapting existing code for use with the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Contexts</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>How to: Use the Context Class to Implement a Cooperative Semaphore</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>How to: Use Oversubscription to Offset Latency</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Describes how to control the behavior of the threads that are managed by the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Memory Management Functions</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>How to: Use Alloc and Free to Improve Memory Performance</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Describes the memory management functions that the Concurrency Runtime provides to help you allocate and free memory in a concurrent manner.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Async programming patterns and tips in Hilo (Windows Store apps using C++ and XAML)</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Learn how we used the Concurrency Runtime to implement asynchronous operations in Hilo, a <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app using C++ and XAML.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Code samples for the Concurrency Runtime and Parallel Pattern Library in Visual Studio 2010</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Provides sample applications and utilities that demonstrate the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parallel Programming in Native Code blog</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Provides additional in-depth blog articles about parallel programming in the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parallel Computing in C++ and Native Code forum</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Enables you to participate in community discussions about the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parallel Programming</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Teaches you about the parallel programming model that is available in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../error-messages/tool-errors/includes/dnprdnshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>