<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c42ab556d43b2190d4ee21b67bebb75e36284471</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\thread.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f430cd957bb0fcdb93c435989f5f9f1cb77c8a04</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">673913c47d58ceef9857735f92c2879422bdfe19</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>thread | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>thread</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> extended storage-class modifier is used to declare a thread local variable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the portable equivalent in C++11, use the <bpt id="p1">[</bpt>thread_local<ept id="p1">](../cpp/storage-classes-cpp.md#thread_local)</ept> storage class specifier.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Thread Local Storage (TLS) is the mechanism by which each thread in a multithreaded process allocates storage for thread-specific data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In standard multithreaded programs, data is shared among all threads of a given process, whereas thread local storage is the mechanism for allocating per-thread data.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a complete discussion of threads, see <bpt id="p1">[</bpt>Multithreading<ept id="p1">](../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declarations of thread local variables must use <bpt id="p1">[</bpt>extended attribute syntax<ept id="p1">](../cpp/declspec.md)</ept> and the <ph id="ph1">`__declspec`</ph> keyword with the <bpt id="p2">**</bpt>thread<ept id="p2">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, the following code declares an integer thread local variable and initializes it with a value:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You must observe these guidelines when declaring thread local objects and variables:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can apply the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute only to class and data declarations and definitions; <bpt id="p2">**</bpt>thread<ept id="p2">**</ept> cannot be used on function declarations or definitions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The use of the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute may interfere with <bpt id="p2">[</bpt>delay loading<ept id="p2">](../build/reference/linker-support-for-delay-loaded-dlls.md)</ept> of DLL imports<bpt id="p3">**</bpt>.<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>On XP systems, <ph id="ph1">`thread`</ph> may not function correctly if a DLL uses __declspec(thread) data and it is loaded dynamically via LoadLibrary.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can specify the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute only on data items with static storage duration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This includes global data objects (both <bpt id="p1">**</bpt>static<ept id="p1">**</ept> and <ph id="ph1">`extern`</ph>), local static objects, and static data members of classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You cannot declare automatic data objects with the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You must use the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute for the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You cannot use the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute as a type modifier.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because the declaration of objects that use the <bpt id="p1">**</bpt>thread<ept id="p1">**</ept> attribute is permitted, these two examples are semantically equivalent:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Standard C permits initialization of an object or variable with an expression involving a reference to itself, but only for objects of nonstatic extent.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Although C++ normally permits such dynamic initialization of an object with an expression involving a reference to itself, this type of initialization is not permitted with thread local objects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that a <ph id="ph1">`sizeof`</ph> expression that includes the object being initialized does not constitute a reference to itself and is allowed in C and C++.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Thread Local Storage (TLS)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>