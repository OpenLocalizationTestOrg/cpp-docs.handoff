<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b186bbe6311c9ba70079be66a6b90a16f4f71a12</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\type-int.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02a1efce7db1f21962948c42efc8c32e0689f5e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1df1f5c72c66ba084cec19fffa4f9380ffc7a2ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type int | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type int</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The size of a signed or unsigned <ph id="ph1">`int`</ph> item is the standard size of an integer on a particular machine.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in 16-bit operating systems, the <ph id="ph1">`int`</ph> type is usually 16 bits, or 2 bytes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In 32-bit operating systems, the <ph id="ph1">`int`</ph> type is usually 32 bits, or 4 bytes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Thus, the <ph id="ph1">`int`</ph> type is equivalent to either the <ph id="ph2">`short int`</ph> or the <bpt id="p1">**</bpt>long int<ept id="p1">**</ept> type, and the <ph id="ph3">`unsigned int`</ph> type is equivalent to either the <bpt id="p2">**</bpt>unsigned short<ept id="p2">**</ept> or the <ph id="ph4">`unsigned long`</ph> type, depending on the target environment.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`int`</ph> types all represent signed values unless specified otherwise.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type specifiers <ph id="ph1">`int`</ph> and <ph id="ph2">`unsigned int`</ph> (or simply <ph id="ph3">`unsigned`</ph>) define certain features of the C language (for instance, the <ph id="ph4">`enum`</ph> type).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In these cases, the definitions of <ph id="ph1">`int`</ph> and unsigned int for a particular implementation determine the actual storage.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Signed integers are represented in two's-complement form.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The most-significant bit holds the sign: 1 for negative, 0 for positive and zero.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The range of values is given in <bpt id="p1">[</bpt>C++ Integer Limits<ept id="p1">](../c-language/cpp-integer-limits.md)</ept>, which is taken from the LIMITS.H header file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The int and unsigned int type specifiers are widely used in C programs because they allow a particular machine to handle integer values in the most efficient way for that machine.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, since the sizes of the int and unsigned int types vary, programs that depend on a specific int size may not be portable to other machines.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To make programs more portable, you can use expressions with the sizeof operator (as discussed in <bpt id="p1">[</bpt>The sizeof Operator<ept id="p1">](../c-language/sizeof-operator-c.md)</ept>) instead of hard-coded data sizes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Storage of Basic Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>