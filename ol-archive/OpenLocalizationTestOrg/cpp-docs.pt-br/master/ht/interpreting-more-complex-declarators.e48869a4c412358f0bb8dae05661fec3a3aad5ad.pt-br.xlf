<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7c0c710080c162f16d5052af5286959e0d856b9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\interpreting-more-complex-declarators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01c07ebe24536a6f36d39e1e877c83dd7655613c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92a68b9fb925ea7a9acff84eef380f14389af908</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Interpreting More Complex Declarators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interpreting More Complex Declarators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can enclose any declarator in parentheses to specify a particular interpretation of a "complex declarator."</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A complex declarator is an identifier qualified by more than one array, pointer, or function modifier.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can apply various combinations of array, pointer, and function modifiers to a single identifier.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Generally <ph id="ph1">`typedef`</ph> may be used to simplify declarations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Typedef Declarations<ept id="p1">](../c-language/typedef-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In interpreting complex declarators, brackets and parentheses (that is, modifiers to the right of the identifier) take precedence over asterisks (that is, modifiers to the left of the identifier).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Brackets and parentheses have the same precedence and associate from left to right.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>After the declarator has been fully interpreted, the type specifier is applied as the last step.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By using parentheses you can override the default association order and force a particular interpretation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Never use parentheses, however, around an identifier name by itself.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This could be misinterpreted as a parameter list.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A simple way to interpret complex declarators is to read them "from the inside out," using the following four steps:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Start with the identifier and look directly to the right for brackets or parentheses (if any).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Interpret these brackets or parentheses, then look to the left for asterisks.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you encounter a right parenthesis at any stage, go back and apply rules 1 and 2 to everything within the parentheses.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Apply the type specifier.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this example, the steps are numbered in order and can be interpreted as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The identifier <ph id="ph1">`var`</ph> is declared as</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>a pointer to</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>a function returning</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>a pointer to</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>an array of 10 elements, which are</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>pointers to</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following examples illustrate other complex declarations and show how parentheses can affect the meaning of a declaration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The array modifier has higher priority than the pointer modifier, so <ph id="ph1">`var`</ph> is declared to be an array.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The pointer modifier applies to the type of the array elements; therefore, the array elements are pointers to <ph id="ph1">`int`</ph> values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this declaration for <ph id="ph1">`var`</ph>, parentheses give the pointer modifier higher priority than the array modifier, and <ph id="ph2">`var`</ph> is declared to be a pointer to an array of five <ph id="ph3">`int`</ph> values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Function modifiers also have higher priority than pointer modifiers, so this declaration for <ph id="ph1">`var`</ph> declares <ph id="ph2">`var`</ph> to be a function returning a pointer to a <bpt id="p1">**</bpt>long<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The function is declared to take two <bpt id="p1">**</bpt>long<ept id="p1">**</ept> values as arguments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example is similar to the previous one.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parentheses give the pointer modifier higher priority than the function modifier, and <ph id="ph1">`var`</ph> is declared to be a pointer to a function that returns a <bpt id="p1">**</bpt>long<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Again, the function takes two <bpt id="p1">**</bpt>long<ept id="p1">**</ept> arguments.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The elements of an array cannot be functions, but this declaration demonstrates how to declare an array of pointers to functions instead.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`var`</ph> is declared to be an array of five pointers to functions that return structures with two members.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The arguments to the functions are declared to be two structures with the same structure type, <ph id="ph1">`both`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Note that the parentheses surrounding <ph id="ph1">`*var[5]`</ph> are required.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Without them, the declaration is an illegal attempt to declare an array of functions, as shown below:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following statement declares an array of pointers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> array has 50 elements organized in a multidimensional array.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The elements are pointers to a pointer that is a constant.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This constant pointer points to a function that has no parameters and returns a pointer to an unsigned type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This next example is a function returning a pointer to an array of three <bpt id="p1">**</bpt>double<ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this declaration, a function returns a pointer to an array, since functions returning arrays are illegal.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here <ph id="ph1">`var`</ph> is declared to be a function returning a pointer to an array of three <bpt id="p1">**</bpt>double<ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`var`</ph> takes one argument.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The argument, like the return value, is a pointer to an array of three <bpt id="p1">**</bpt>double<ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The argument type is given by a complex <bpt id="p1">*</bpt>abstract-declarator<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The parentheses around the asterisk in the argument type are required; without them, the argument type would be an array of three pointers to <bpt id="p1">**</bpt>double<ept id="p1">**</ept> values.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a discussion and examples of abstract declarators, see <bpt id="p1">[</bpt>Abstract Declarators<ept id="p1">](../c-language/c-abstract-declarators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As the above example shows, a pointer can point to another pointer, and an array can contain arrays as elements.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Here <ph id="ph1">`var`</ph> is an array of five elements.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each element is a five-element array of pointers to pointers to unions with two members.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This example shows how the placement of parentheses changes the meaning of the declaration.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`var`</ph> is a five-element array of pointers to five-element arrays of pointers to unions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For examples of how to use <ph id="ph1">`typedef`</ph> to avoid complex declarations, see <bpt id="p1">[</bpt>Typedef Declarations<ept id="p1">](../c-language/typedef-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declarations and Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>