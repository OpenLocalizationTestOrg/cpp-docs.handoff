<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b2e68a92e4a44b45c2807d074823bacd1313359</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cstdiofile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85c5d0328e529be9eb370621b276d6ce96ddd9da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f34772da0308ed22b957e7e384593221135039b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CStdioFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CStdioFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a C run-time stream file as opened by the run-time function <bpt id="p1">[</bpt>fopen<ept id="p1">](../../c-runtime-library/reference/fopen-wfopen.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CStdioFile::CStdioFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CStdioFile`</ph> object from a path or file pointer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CStdioFile::Open</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Open is designed for use with the default <ph id="ph1">`CStdioFile`</ph> constructor (Overrides <bpt id="p1">[</bpt>CFile::Open<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__open)</ept>).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CStdioFile::ReadString</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Reads a single line of text.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CStdioFile::Seek</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Positions the current file pointer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CStdioFile::WriteString</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Writes a single line of text.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CStdioFile::m_pStream</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Contains a pointer to an open file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Stream files are buffered and can be opened in either text mode (the default) or binary mode.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Text mode provides special processing for carriage returnâ€“linefeed pairs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you write a newline character (0x0A) to a text-mode <ph id="ph1">`CStdioFile`</ph> object, the byte pair (0x0D, 0x0A) is sent to the file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you read, the byte pair (0x0D, 0x0A) is translated to a single 0x0A byte.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> functions <bpt id="p2">[</bpt>Duplicate<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__duplicate)</ept>, <bpt id="p3">[</bpt>LockRange<ept id="p3">](../../mfc/reference/cfile-class.md#cfile__lockrange)</ept>, and <bpt id="p4">[</bpt>UnlockRange<ept id="p4">](../../mfc/reference/cfile-class.md#cfile__unlockrange)</ept> are not supported for <ph id="ph1">`CStdioFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you call these functions on a <ph id="ph1">`CStdioFile`</ph>, you will get a <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CStdioFile`</ph>, see the articles <bpt id="p1">[</bpt>Files in MFC<ept id="p1">](../../mfc/files-in-mfc.md)</ept> and <bpt id="p2">[</bpt>File Handling<ept id="p2">](../../c-runtime-library/file-handling.md)</ept> in the <bpt id="p3">*</bpt>Run-Time Library Reference<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CFile</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CStdioFile::CStdioFile</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Constructs and initializes a <ph id="ph1">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specifies the file pointer returned by a call to the C run-time function <bpt id="p1">[</bpt>fopen<ept id="p1">](../../c-runtime-library/reference/fopen-wfopen.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies a string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The path can be relative or absolute.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies options for file creation, file sharing, and file access modes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can specify multiple options by using the bitwise OR ( <ph id="ph1">`|`</ph>) operator.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>One file access mode option is required; other modes are optional.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CFile::CFile<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__cfile)</ept> for a list of mode options and other flags.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In MFC version 3.0 and later, share flags are allowed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default constructor does not attach a file to the <ph id="ph1">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When using this constructor, you must use the <ph id="ph1">`CStdioFile::Open`</ph> method to open a file and attach it to the <ph id="ph2">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The single-parameter constructor attaches an open file stream to the <ph id="ph1">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Allowed pointer values include the predefined input/output file pointers <ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, or <ph id="ph3">`stderr`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The two-parameter constructor creates a <ph id="ph1">`CStdioFile`</ph> object and opens the corresponding file with the given path.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you pass <ph id="ph1">`NULL`</ph> for either <ph id="ph2">`pOpenStream`</ph> or <ph id="ph3">`lpszFileName`</ph>, the constructor throws a <ph id="ph4">`CInvalidArgException*`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the file cannot be opened or created, the constructor throws a <ph id="ph1">`CFileException*`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#37</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CStdioFile::m_pStream</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_pStream`</ph> data member is the pointer to an open file as returned by the C run-time function <ph id="ph2">`fopen`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the file has never been opened or has been closed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CStdioFile::Open</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Open is designed for use with the default <ph id="ph1">`CStdioFile`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A string that is the path to the desired file.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The path can be relative or absolute.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Sharing and access mode.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies the action to take when opening the file.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can combine options by using the bitwise-OR (&amp;#124;) operator.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>One access permission and one share option are required; the modeCreate and modeNoInherit modes are optional.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A pointer to an existing file-exception object that will receive the status of a failed operation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>if successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CStdioFile::ReadString</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reads text data into a buffer, up to a limit of <ph id="ph1">`nMax`</ph>â€“1 characters, from the file associated with the <ph id="ph2">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a user-supplied buffer that will receive a null-terminated text string.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of characters to read, not counting the terminating null character.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CString`</ph> object that will contain the string when the function returns.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A pointer to the buffer containing the text data.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if end-of-file was reached without reading any data; or if boolean, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if end-of-file was reached without reading any data.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Reading is stopped by the first newline character.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If, in that case, fewer than <ph id="ph1">`nMax`</ph>â€“1 characters have been read, a newline character is stored in the buffer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A null character ('\0') is appended in either case.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CFile::Read<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__read)</ept> is also available for text-mode input, but it does not terminate on a carriage returnâ€“linefeed pair.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CString`</ph> version of this function removes the <ph id="ph2">`'\n'`</ph> if present; the <ph id="ph3">`LPTSTR`</ph> version does not.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#38</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CStdioFile::Seek</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Repositions the pointer in a previously opened file.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Number of bytes to move the pointer.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Pointer movement mode.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>: Move the file pointer <ph id="ph1">`lOff`</ph> bytes forward from the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>: Move the file pointer <ph id="ph1">`lOff`</ph> bytes from the current position in the file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>: Move the file pointer <ph id="ph1">`lOff`</ph> bytes from the end of the file.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`lOff`</ph> must be negative to seek into the existing file; positive values will seek past the end of the file.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the requested position is legal, <ph id="ph1">`Seek`</ph> returns the new byte offset from the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value is undefined and a <ph id="ph1">`CFileException`</ph> object is thrown.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Seek`</ph> function permits random access to a file's contents by moving the pointer a specified amount, absolutely or relatively.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>No data is actually read during the seek.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If the requested position is larger than the size of the file, the file length will be extended to that position, and no exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When a file is opened, the file pointer is positioned at offset 0, the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This implementation of <ph id="ph1">`Seek`</ph> is based on the Run-Time Library (CRT) function <ph id="ph2">`fseek`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>There are several limits on the usage of <ph id="ph1">`Seek`</ph> on streams opened in text mode.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>fseek, _fseeki64<ept id="p1">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">`Seek`</ph> to move the pointer 1000 bytes from the beginning of the <ph id="ph2">`cfile`</ph> file.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`Seek`</ph> does not read data, so you must subsequently call <bpt id="p1">[</bpt>CStdioFile::ReadString<ept id="p1">](#cstdiofile__readstring)</ept> to read data.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#39</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CStdioFile::WriteString</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Writes data from a buffer to the file associated with the <ph id="ph1">`CStdioFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a buffer that contains a null-terminated string.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The terminating null character ( <ph id="ph1">`\0`</ph>) is not written to the file.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This method writes newline characters in <ph id="ph1">`lpsz`</ph> to the file as a carriage return/linefeed pair.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you want to write data that is not null-terminated to a file, use <ph id="ph1">`CStdioFile::Write`</ph> or <bpt id="p1">[</bpt>CFile::Write<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__write)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This method throws a <ph id="ph1">`CInvalidArgException*`</ph> if you specify <ph id="ph2">`NULL`</ph> for the <ph id="ph3">`lpsz`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This method throws a <ph id="ph1">`CFileException*`</ph> in response to file system errors.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#40</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CFile::Duplicate</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CFile::LockRange</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CFile::UnlockRange</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CNotSupportedException Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>