<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">183cb9de9e2d3e456807624c0f5154b6d3fadf01</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn003-mapping-of-windows-handles-to-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba3bc85e28ccc869b9db98b0234b65f8e01088c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03ee9614ac7064e51c80d1a3a4e8acb152401f61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN003: Mapping of Windows Handles to Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN003: Mapping of Windows Handles to Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This note describes the MFC routines that support mapping Windows object handles to C++ objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Problem</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows objects are typically represented by various <bpt id="p1">[</bpt>HANDLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept> objects The MFC classes wrap Windows object handles with C++ objects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The handle wrapping functions of the MFC class library let you find the C++ object that is wrapping the Windows object that has a particular handle.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, sometimes an object does not have a C++ wrapper object and at these times the system creates a temporary object to act as the C++ wrapper.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Windows objects that use handle maps are as follows:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>HWND (<bpt id="p1">[</bpt>CWnd<ept id="p1">](../mfc/reference/cwnd-class.md)</ept> and <ph id="ph1">`CWnd`</ph>-derived classes)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>HDC (<bpt id="p1">[</bpt>CDC<ept id="p1">](../mfc/reference/cdc-class.md)</ept> and <ph id="ph1">`CDC`</ph>-derived classes)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>HMENU (<bpt id="p1">[</bpt>CMenu<ept id="p1">](../mfc/reference/cmenu-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>HPEN (<bpt id="p1">[</bpt>CGdiObject<ept id="p1">](../mfc/reference/cgdiobject-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>HBRUSH (<ph id="ph1">`CGdiObject`</ph>)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>HFONT (<ph id="ph1">`CGdiObject`</ph>)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>HBITMAP (<ph id="ph1">`CGdiObject`</ph>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>HPALETTE (<ph id="ph1">`CGdiObject`</ph>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>HRGN (<ph id="ph1">`CGdiObject`</ph>)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>HIMAGELIST (<bpt id="p1">[</bpt>CImageList<ept id="p1">](../mfc/reference/cimagelist-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>SOCKET (<bpt id="p1">[</bpt>CSocket<ept id="p1">](../mfc/reference/csocket-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Given a handle to any one of these objects, you can find the MFC object that wraps the handle by calling the static method <ph id="ph1">`FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, given an HWND called <ph id="ph1">`hWnd`</ph>, the following line will return a pointer to the <ph id="ph2">`CWnd`</ph> that wraps <ph id="ph3">`hWnd`</ph>:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hWnd`</ph> does not have a specific wrapper object, a temporary <ph id="ph2">`CWnd`</ph> is created to wrap <ph id="ph3">`hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This makes it possible to obtain a valid C++ object from any handle.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After you have a wrapper object, you can retrieve its handle from a public member variable of the wrapper class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the case of a <ph id="ph1">`CWnd`</ph>, <ph id="ph2">`m_hWnd`</ph> contains the HWND for that object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Attaching Handles to MFC Objects</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Given a newly created handle-wrapper object and a handle to a Windows object, you can associate the two by calling the <ph id="ph1">`Attach`</ph> function as in this example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This makes an entry in the permanent map associating <ph id="ph1">`myWnd`</ph> and <ph id="ph2">`hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`CWnd::FromHandle(hWnd)`</ph> will now return a pointer to <ph id="ph2">`myWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`myWnd`</ph> is deleted, the destructor will automatically destroy <ph id="ph2">`hWnd`</ph> by calling the Windows <bpt id="p1">[</bpt>DestroyWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632682)</ept> function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If this is not desired, <ph id="ph1">`hWnd`</ph> must be detached from <ph id="ph2">`myWnd`</ph> before <ph id="ph3">`myWnd`</ph> is destroyed (normally when leaving the scope at which <ph id="ph4">`myWnd`</ph> was defined).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Detach`</ph> method does this.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>More About Temporary Objects</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Temporary objects are created whenever <ph id="ph1">`FromHandle`</ph> is given a handle that does not already have a wrapper object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These temporary objects are detached from their handle and deleted by the <ph id="ph1">`DeleteTempMap`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By default <bpt id="p1">[</bpt>CWinThread::OnIdle<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__onidle)</ept> automatically calls <ph id="ph1">`DeleteTempMap`</ph> for each class that supports temporary handle maps.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This means that you cannot assume a pointer to a temporary object will be valid past the point of exit from the function where the pointer was obtained.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Wrapper Objects and Multiple Threads</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Both temporary and permanent objects are maintained on a per-thread basis.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That is, one thread cannot access another thread's C++ wrapper objects, regardless of whether it is temporary or permanent.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To pass these objects from one thread to another, always send them as their native <ph id="ph1">`HANDLE`</ph> type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Passing a C++ wrapper object from one thread to another will often cause unexpected results.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>