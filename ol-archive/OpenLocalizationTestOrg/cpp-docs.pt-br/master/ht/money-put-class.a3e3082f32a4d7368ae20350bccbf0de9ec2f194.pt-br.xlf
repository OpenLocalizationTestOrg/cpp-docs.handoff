<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44135e1a0ee3d071519ea4b7020f1e63504b3b83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\money-put-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3232acdf46358dd849a009c5b1415134f2012640</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc1a8ccab4acc57d02e3a0103dc8f17bf2112be0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>money_put Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>money_put Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that can serve as a locale facet to control conversions of monetary values to sequences of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters in a locale.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of iterator to which the monetary put functions write their output.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>money_put</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`money_put`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>iter_type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A type that describes an output iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>string_type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type that describes a string containing characters of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>do_put</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert either number or a string to a character sequence that represents a monetary value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>put</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Converts either number or a string to a character sequence that represents a monetary value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>money_put::char_type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>money_put::do_put</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A virtual function called to convert either number or a string to a character sequence that represents a monetary value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An iterator addressing the first element of the inserted string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if international, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if domestic.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A character which is used for spacing.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A string object to be converted.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An output iterator the addresses the position one beyond the last element produced.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The first virtual protected member function generates sequential elements beginning at <ph id="ph1">` next`</ph> to produce a monetary output field from the <bpt id="p1">[</bpt>string_type<ept id="p1">](#money_put__string_type)</ept> object <ph id="ph2">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The sequence controlled by <ph id="ph1">` val`</ph> must begin with one or more decimal digits, optionally preceded by a minus sign (â€“), which represents the amount.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The function returns an iterator designating the first element beyond the generated monetary output field.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The second virtual protected member function behaves the same as the first, except that it effectively first converts <ph id="ph1">` val`</ph> to a sequence of decimal digits, optionally preceded by a minus sign, then converts that sequence as above.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The format of a monetary output field is determined by the <bpt id="p1">[</bpt>locale facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept> fac returned by the (effective) call <bpt id="p2">[</bpt>use_facet<ept id="p2">](../standard-library/locale-functions.md#use_facet)</ept><ph id="ph1"> &lt; </ph><bpt id="p3">[</bpt>moneypunct<ept id="p3">](../standard-library/moneypunct-class.md)</ept><ph id="ph2">\&lt;</ph> <bpt id="p4">**</bpt>CharType<ept id="p4">**</ept>, <bpt id="p5">**</bpt>intl<ept id="p5">**</ept>&gt; &gt;( <bpt id="p6">**</bpt>iosbase<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getloc<ept id="p1">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pos_format<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__pos_format)</ept> determines the order in which components of the field are generated for a nonnegative value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>neg_format<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__neg_format)</ept> determines the order in which components of the field are generated for a negative value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>curr_symbol<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__curr_symbol)</ept> determines the sequence of elements to generate for a currency symbol.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>positive_sign<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__positive_sign)</ept> determines the sequence of elements to generate for a positive sign.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>negative_sign<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__negative_sign)</ept> determines the sequence of elements to generate for a negative sign.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>grouping<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__grouping)</ept> determines how digits are grouped to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>thousands_sep<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__thousands_sep)</ept> determines the element that separates groups of digits to the left of any decimal point.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>decimal_point<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__decimal_point)</ept> determines the element that separates the integer digits from any fraction digits.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>frac_digits<ept id="p1">](../standard-library/moneypunct-class.md#moneypunct__frac_digits)</ept> determines the number of significant fraction digits to the right of any decimal point.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the sign string ( <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>or <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>) has more than one element, only the first element is generated where the element equal to <bpt id="p1">**</bpt>money_base::sign<ept id="p1">**</ept> appears in the format pattern ( <bpt id="p2">**</bpt>fac<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>or <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Any remaining elements are generated at the end of the monetary output field.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id="ph1"> &amp; </ph><bpt id="p2">[</bpt>showbase<ept id="p2">](../standard-library/ios-functions.md#showbase)</ept> is nonzero, the string <bpt id="p3">**</bpt>fac<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>is generated where the element equal to <bpt id="p1">**</bpt>money_base::symbol<ept id="p1">**</ept> appears in the format pattern.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Otherwise, no currency symbol is generated.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If no grouping constraints are imposed by <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>grouping<ept id="p1">**</ept> (its first element has the value CHAR_MAX), then no instances of <bpt id="p2">**</bpt>fac<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>are generated in the value portion of the monetary output field (where the element equal to <bpt id="p1">**</bpt>money_base::value<ept id="p1">**</ept> appears in the format pattern).</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>is zero, then no instance of <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>is generated after the decimal digits.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Otherwise, the resulting monetary output field places the low-order <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>decimal digits to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Padding occurs as for any numeric output field, except that if <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>iosbase<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>internal<ept id="p1">](../standard-library/ios-functions.md#internal)</ept> is nonzero, any internal padding is generated where the element equal to <bpt id="p2">**</bpt>money_base::space<ept id="p2">**</ept> appears in the format pattern, if it does appear.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Otherwise, internal padding occurs before the generated sequence.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The padding character is <bpt id="p1">**</bpt>fill<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The function calls <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept>(0) to reset the field width to zero.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>put<ept id="p1">](#money_put__put)</ept>, where the virtual member function is called by <bpt id="p2">**</bpt>put<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>money_put::iter_type</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A type that describes an output iterator.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>OutputIterator.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>money_put::money_put</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`money_put`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>0: the lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>1: the lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>0: these values are not defined.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>( <ph id="ph1">`_Refs`</ph>).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>money_put::put</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Converts either number or a string to a character sequence that represents a monetary value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An iterator addressing the first element of the inserted string.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if international, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if domestic.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A format flag which when set indicates that the currency symbol is optional; otherwise, it is required</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A character which is used for spacing.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A string object to be converted.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An output iterator the addresses the position one beyond the last element produced.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Both member functions return <bpt id="p1">[</bpt>do_put<ept id="p1">](#money_put__do_put)</ept>( <ph id="ph1">` next`</ph>, <ph id="ph2">`_Intl`</ph>, <ph id="ph3">`_Iosbase`</ph>, <ph id="ph4">`_Fill`</ph>, <ph id="ph5">` val`</ph>).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>money_put::string_type</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A type that describes a string containing characters of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>basic_string<ept id="p1">](../standard-library/basic-string-class.md)</ept> whose objects can store sequences of elements from the source sequence.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>locale&gt;</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>facet Class</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>