<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">801e024e4355dba41a16263fdbefcaaa25961c32</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\provider-support-for-bookmarks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c302761f42e20e430e20469ce4c7eccfaf262a8f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88be86df32800a6c3a441a0ac76b4aca2386ffe6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provider Support for Bookmarks | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Provider Support for Bookmarks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The example in this topic adds the <ph id="ph1">`IRowsetLocate`</ph> interface to the <ph id="ph2">`CMyProviderRowset`</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In almost all cases, you start by adding an interface to an existing COM object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can then test it by adding more calls from the consumer templates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The example demonstrates how to:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Add an interface to a provider.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Dynamically determine the columns to return to the consumer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Add bookmark support.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IRowsetLocate`</ph> interface inherits from the <ph id="ph2">`IRowset`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To add the <ph id="ph1">`IRowsetLocate`</ph> interface, inherit <ph id="ph2">`CMyProviderRowset`</ph> from <bpt id="p1">[</bpt>IRowsetLocateImpl<ept id="p1">](../../data/oledb/irowsetlocateimpl-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`IRowsetLocate`</ph> interface is a bit different from most interfaces.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To make the VTABLEs line up, the OLE DB provider templates have a template parameter to handle the derived interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code shows the new inheritance list:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The fourth, fifth, and sixth parameters are all added.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses the defaults for the fourth and fifth parameters but specify <ph id="ph1">`IRowsetLocateImpl`</ph> as the sixth parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is an OLE DB template class that takes two template parameters: these hook up the <ph id="ph1">`IRowsetLocate`</ph> interface to the <ph id="ph2">`CMyProviderRowset`</ph> class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To add most interfaces, you can skip this step and move to the next one.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Only the <ph id="ph1">`IRowsetLocate`</ph> and <ph id="ph2">`IRowsetScroll`</ph> interfaces need to be handled in this way.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You then need to tell the <ph id="ph1">`CMyProviderRowset`</ph> to call <ph id="ph2">`QueryInterface`</ph> for the <ph id="ph3">`IRowsetLocate`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add the line <ph id="ph1">`COM_INTERFACE_ENTRY(IRowsetLocate)`</ph> to the map.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The interface map for <ph id="ph1">`CMyProviderRowset`</ph> should appear as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You also need to hook your map into the <ph id="ph1">`CRowsetImpl`</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add in the COM_INTERFACE_ENTRY_CHAIN macro to hook in the <ph id="ph1">`CRowsetImpl`</ph> map.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Also, create a typedef called <ph id="ph1">`RowsetBaseClass`</ph> that consists of the inheritance information.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This typedef is arbitrary and can be ignored.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Finally, handle the <bpt id="p1">**</bpt>IColumnsInfo::GetColumnsInfo<ept id="p1">**</ept> call.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You would normally use the PROVIDER_COLUMN_ENTRY macros to do this.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, a consumer might want to use bookmarks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You must be able to change the columns the provider returns depending on whether the consumer asks for a bookmark.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To handle the <bpt id="p1">**</bpt>IColumnsInfo::GetColumnsInfo<ept id="p1">**</ept> call, delete the <bpt id="p2">**</bpt>PROVIDER_COLUMN<ept id="p2">**</ept> map in the <ph id="ph1">`CTextData`</ph> class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The PROVIDER_COLUMN_MAP macro defines a function <ph id="ph1">`GetColumnInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You need to define your own <ph id="ph1">`GetColumnInfo`</ph> function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The function declaration should look like this:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Then, implement the <ph id="ph1">`GetColumnInfo`</ph> function in the MyProviderRS.cpp file as follows:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>first checks to see whether a property called <bpt id="p1">**</bpt>DBPROP_IRowsetLocate<ept id="p1">**</ept> is set.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>OLE DB has properties for each of the optional interfaces off the rowset object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the consumer wants to use one of these optional interfaces, it sets a property to true.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The provider can then check this property and take special action based on it.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In your implementation, you get the property by using the pointer to the command object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pThis`</ph> pointer represents the rowset or command class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because you use templates here, you have to pass this in as a <ph id="ph1">`void`</ph> pointer or the code does not compile.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specify a static array to contain the column information.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the consumer does not want the bookmark column, an entry in the array is wasted.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can dynamically allocate this array, but you would need to make sure to destroy it properly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This example defines and uses the macros ADD_COLUMN_ENTRY and ADD_COLUMN_ENTRY_EX to insert the information into the array.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can add the macros to the MyProviderRS.H file as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To test the code in the consumer, you need to make a few changes to the <ph id="ph1">`OnRun`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The first change to the function is that you add code to add a property to the property set.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The code sets the <bpt id="p1">**</bpt>DBPROP_IRowsetLocate<ept id="p1">**</ept> property to true, thus telling the provider that you want the bookmark column.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnRun`</ph> handler code should appear as follows:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The while loop contains code to call the <ph id="ph1">`Compare`</ph> method in the <ph id="ph2">`IRowsetLocate`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The code you have should always pass because you are comparing the exact same bookmarks.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Also, store one bookmark in a temporary variable so that you can use it after the while loop finishes to call the <ph id="ph1">`MoveToBookmark`</ph> function in the consumer templates.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MoveToBookmark`</ph> function calls the <ph id="ph2">`GetRowsAt`</ph> method in <ph id="ph3">`IRowsetLocate`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You also need to update the user record in the consumer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add an entry in the class to handle a bookmark and an entry in the <bpt id="p1">**</bpt>COLUMN_MAP<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you have updated the code, you should be able to build and execute the provider with the <ph id="ph1">`IRowsetLocate`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Advanced Provider Techniques</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>