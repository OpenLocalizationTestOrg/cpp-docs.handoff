<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8807e89061c2d986095a8c32a09ac487b4db9203</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-ios-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f2a7830596a7d9fe4274517a444b058cef2ff10</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74fb701ccaddf818f5865e3ed040dc4d68acd611</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_ios Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_ios Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes the storage and member functions common to both input streams (of template class <bpt id="p1">[</bpt>basic_istream<ept id="p1">](../standard-library/basic-istream-class.md)</ept>) and output streams (of template class <bpt id="p2">[</bpt>basic_ostream<ept id="p2">](../standard-library/basic-ostream-class.md)</ept>) that depend on the template parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(The class <bpt id="p1">[</bpt>ios_base<ept id="p1">](../standard-library/ios-base-class.md)</ept> describes what is common and not dependent on template parameters.) An object of class <bpt id="p2">**</bpt>basic_ios<ph id="ph1">\&lt;</ph>class Elem, class Traits&gt;<ept id="p2">**</ept> helps control a stream with elements of type <bpt id="p3">**</bpt>Elem<ept id="p3">**</ept>, whose character traits are determined by the class <bpt id="p4">**</bpt>Traits<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A variable of type <ph id="ph1">`char_traits`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An object of class <bpt id="p1">**</bpt>basic_ios<ph id="ph1">\&lt;</ph>class Elem, class Traits&gt;<ept id="p1">**</ept> stores:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A tie pointer to an object of type <bpt id="p1">[</bpt>basic_istream<ept id="p1">](../standard-library/basic-istream-class.md)</ept><bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Elem, Traits&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A stream buffer pointer to an object of type <bpt id="p1">[</bpt>basic_streambuf<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept><bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Elem, Traits &gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting information<ept id="p1">](../standard-library/ios-base-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stream state information<ept id="p1">](../standard-library/ios-base-class.md)</ept> in a base object of type <bpt id="p2">[</bpt>ios_base<ept id="p2">](../standard-library/ios-base-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A fill character in an object of type <ph id="ph1">`char_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>basic_ios</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructs the <ph id="ph1">`basic_ios`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter <ph id="ph1">`Elem`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>int_type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`Traits::int_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>off_type</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`Traits::off_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>pos_type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`Traits::pos_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter <ph id="ph1">`Traits`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>bad</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Indicates a loss of integrity of the stream buffer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Clears all error flags.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>copyfmt</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Copies flags from one stream to another.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>eof</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indicates if the end of a stream has been reached.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>exceptions</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Indicates which exceptions will be thrown by the stream.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>fail</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Indicates failure to extract a valid field from a stream.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>fill</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specifies or returns the character that will be used when the text is not as wide as the stream.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>good</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Indicates the stream is in good condition.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>imbue</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Changes the locale.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>init</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Called by <ph id="ph1">`basic_ios`</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>move</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Moves all values, except the pointer to the stream buffer, from the parameter to the current object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>narrow</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Finds the equivalent char to a given <ph id="ph1">`char_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>rdbuf</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Routes stream to specified buffer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>rdstate</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Reads the state of bits for flags.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>set_rdbuf</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Assigns a stream buffer to be the read buffer for this stream object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>setstate</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Sets additional flags.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Exchanges the values in this <ph id="ph1">`basic_ios`</ph> object for those of another <ph id="ph2">`basic_ios`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The pointers to the stream buffers are not swapped.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>tie</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Ensures that one stream is processed before another stream.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>widen</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Finds the equivalent <ph id="ph1">`char_type`</ph> to a given char.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>explicit operator bool</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Allows use of a <ph id="ph1">`basic_ios`</ph> object as a <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Automatic type conversion is disabled to prevent common, unintended side effects.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>operator void *</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Indicates if the stream is still good.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>operator!</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Indicates if the stream is not bad.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>ios&gt;</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>basic_ios::bad</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Indicates a loss of integrity of the stream buffer</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`rdstate &amp; badbit`</ph> is nonzero; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`badbit`</ph>, see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>basic_ios::basic_ios</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Constructs the basic_ios class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Standard buffer to store input or output elements.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The first constructor initializes its member objects by calling <bpt id="p1">[</bpt>init<ept id="p1">](#basic_ios__init)</ept>(_ <bpt id="p2">*</bpt>Sb<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The second (protected) constructor leaves its member objects uninitialized.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A later call to <bpt id="p1">**</bpt>init<ept id="p1">**</ept> must initialize the object before it can be safely destroyed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>basic_ios::char_type</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>basic_ios::clear</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Clears all error flags.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The flags you want to set after clearing all flags.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Defaults to <ph id="ph1">`goodbit`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Specifies whether the exception should be re-raised.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Defaults to <ph id="ph1">`false`</ph> (will not re-raise the exception).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The flags are <bpt id="p1">**</bpt>goodbit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>, <bpt id="p3">**</bpt>eofbit<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>badbit<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Test for these flags with <bpt id="p1">[</bpt>good<ept id="p1">](#basic_ios__good)</ept>, <bpt id="p2">[</bpt>bad<ept id="p2">](#basic_ios__bad)</ept>, <bpt id="p3">[</bpt>eof<ept id="p3">](#basic_ios__eof)</ept>, and <bpt id="p4">[</bpt>fail<ept id="p4">](#basic_ios__fail)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The member function replaces the stored stream state information with:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>&amp;#124; <ph id="ph1">`(`</ph><bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ios__rdbuf)</ept> != 0 <bpt id="p2">**</bpt>goodbit<ept id="p2">**</ept> : <bpt id="p3">**</bpt>badbit<ept id="p3">**</ept>)</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`state`</ph><bpt id="p1">**</bpt><ph id="ph2">&amp;</ph><ept id="p1">**</ept><bpt id="p2">[</bpt>exceptions<ept id="p2">](#basic_ios__exceptions)</ept> is nonzero, it then throws an object of class <bpt id="p3">[</bpt>failure<ept id="p3">](../standard-library/ios-base-class.md#ios_base__failure)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>rdstate<ept id="p1">](#basic_ios__rdstate)</ept> and <bpt id="p2">[</bpt>getline<ept id="p2">](../standard-library/string-functions.md#getline)</ept> for examples using <bpt id="p3">**</bpt>clear<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>basic_ios::copyfmt</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Copies flags from one stream to another.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The stream whose flags you want to copy.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> object for the stream to which you are copying the flags.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The member function reports the callback eventÂ erase_event.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>It then copies from <ph id="ph1">` right`</ph> into <bpt id="p1">**</bpt><ph id="ph2">\*</ph>this<ept id="p1">**</ept> the fill character, the tie pointer, and the formatting information.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Before altering the exception mask, it reports the callback event copyfmt_event.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If, after the copy is complete, <bpt id="p1">**</bpt>state &amp;<ept id="p1">**</ept><bpt id="p2">[</bpt>exceptions<ept id="p2">](#basic_ios__exceptions)</ept> is nonzero, the function effectively calls <bpt id="p3">[</bpt>clear<ept id="p3">](#basic_ios__clear)</ept> with the argument <bpt id="p4">[</bpt>rdstate<ept id="p4">](#basic_ios__rdstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>basic_ios::eof</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Indicates if the end of a stream has been reached.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>if the end of the stream has been reached, <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`true`</ph> if <bpt id="p1">[</bpt>rdstate<ept id="p1">](#basic_ios__rdstate)</ept> <ph id="ph2">`&amp; eofbit`</ph> is nonzero.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`eofbit`</ph>, see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>basic_ios::exceptions</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Indicates which exceptions will be thrown by the stream.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Newexcept</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The flags that you want to throw an exception.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The flags that are currently specified to thrown an exception for the stream.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored exception mask.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The second member function stores <bpt id="p1">*</bpt>_Except<ept id="p1">*</ept> in the exception mask and returns its previous stored value.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Note that storing a new exception mask can throw an exception just like the call <bpt id="p1">[</bpt>clear<ept id="p1">](#basic_ios__clear)</ept>( <bpt id="p2">[</bpt>rdstate<ept id="p2">](#basic_ios__rdstate)</ept> ).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>basic_ios::fail</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Indicates failure to extract a valid field from a stream.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>if <bpt id="p1">[</bpt>rdstate<ept id="p1">](#basic_ios__rdstate)</ept> <ph id="ph1">`&amp; (badbit|failbit)`</ph> is nonzero, otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`failbit`</ph>, see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>basic_ios::fill</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Specifies or returns the character that will be used when the text is not as wide as the stream.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The character you want as the fill character.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The current fill character.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored fill character.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The second member function stores <ph id="ph1">`Char`</ph> in the fill character and returns its previous stored value.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>basic_ios::good</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Indicates the stream is in good condition.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>if <bpt id="p1">[</bpt>rdstate<ept id="p1">](#basic_ios__rdstate)</ept> <ph id="ph1">`== goodbit`</ph> (no state flags are set), otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`goodbit`</ph>, see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_ios::bad<ept id="p1">](#basic_ios__bad)</ept> for an example of using <ph id="ph1">`good`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>basic_ios::imbue</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Changes the locale.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A locale string.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The previous locale.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ios__rdbuf)</ept> is not a null pointer, the member function calls</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pubimbue<ept id="p1">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubimbue)</ept>(_ <bpt id="p2">*</bpt>Loc<ept id="p2">*</ept>)</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In any case, it returns <bpt id="p1">[</bpt>ios_base::imbue<ept id="p1">](../standard-library/ios-base-class.md#ios_base__imbue)</ept>(_ <bpt id="p2">*</bpt>Loc<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>basic_ios::init</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Called by basic_ios constructors.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Standard buffer to store input or output elements.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Specifies whether this is a standard stream.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The member function stores values in all member objects, so that:</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rdbuf<ept id="p1">](#basic_ios__rdbuf)</ept> returns <bpt id="p2">*</bpt>_Sb.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>tie<ept id="p1">](#basic_ios__tie)</ept> returns a null pointer.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>rdstate<ept id="p1">](#basic_ios__rdstate)</ept> returns <bpt id="p2">[</bpt>goodbit<ept id="p2">](../standard-library/ios-base-class.md#ios_base__iostate)</ept> if <ph id="ph1">`_Sb`</ph> is nonzero; otherwise, it returns <bpt id="p3">[</bpt>badbit<ept id="p3">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>exceptions<ept id="p1">](#basic_ios__exceptions)</ept> returns <bpt id="p2">**</bpt>goodbit<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept> returns <bpt id="p2">[</bpt>skipws<ept id="p2">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept> &amp;#124; <bpt id="p3">[</bpt>dec<ept id="p3">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept> returns 0.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>precision<ept id="p1">](../standard-library/ios-base-class.md#ios_base__precision)</ept> returns 6.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>fill<ept id="p1">](#basic_ios__fill)</ept> returns the space character.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getloc<ept id="p1">](../standard-library/ios-base-class.md#ios_base__getloc)</ept> returns <ph id="ph1">`locale::classic`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>iword<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iword)</ept> returns zero, and <bpt id="p2">[</bpt>pword<ept id="p2">](../standard-library/ios-base-class.md#ios_base__pword)</ept> returns a null pointer for all argument values.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>basic_ios::int_type</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A synonym for <bpt id="p1">**</bpt>traits_type::int_type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>basic_ios::move</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Moves all values, except the pointer to the stream buffer, from the parameter to the current object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ios_base`</ph> object to move values from.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The protected member function moves all the values stored in <ph id="ph1">` right`</ph> to <ph id="ph2">`*this`</ph> except the stored <ph id="ph3">`stream buffer pointer`</ph>, which is unchanged in <ph id="ph4">` right`</ph> and set to a null pointer in <ph id="ph5">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The stored <ph id="ph1">`tie pointer`</ph> is set to a null pointer in <ph id="ph2">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>basic_ios::narrow</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Finds the equivalent char to a given <ph id="ph1">`char_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`char`</ph> to convert.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`char`</ph> that you want returned if no equivalent is found.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The equivalent <ph id="ph1">`char`</ph> to a given <ph id="ph2">`char_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>use_facet<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><bpt id="p2">**</bpt><ph id="ph1">&lt;</ph><ept id="p2">**</ept>Â <bpt id="p3">**</bpt>ctype<ept id="p3">**</ept><ph id="ph2">\&lt;</ph> <bpt id="p4">**</bpt>E<ept id="p4">**</ept>&gt; &gt;( <bpt id="p5">[</bpt>getloc<ept id="p5">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>( ) ).</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`Char`</ph>, <ph id="ph2">`Default`</ph>).</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>basic_ios::off_type</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A synonym for <bpt id="p1">**</bpt>traits_type::off_type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>basic_ios::operator void *</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Indicates if the stream is still good.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The operator returns a null pointer only if <bpt id="p1">[</bpt>fail<ept id="p1">](#basic_ios__fail)</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>basic_ios::operator!</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Indicates if the stream is not bad.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">[</bpt>fail<ept id="p1">](#basic_ios__fail)</ept>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>basic_ios::operator bool</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Allows use of a <ph id="ph1">`basic_ios`</ph> object as a <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Automatic type conversion is disabled to prevent common, unintended side effects.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The operator returns a value convertible to <ph id="ph1">`false`</ph> only if <ph id="ph2">`fail``()`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The return type is convertible only to <ph id="ph1">`bool`</ph>, not to <ph id="ph2">`void *`</ph> or other known scalar type.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>basic_ios::pos_type</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A synonym for <bpt id="p1">**</bpt>traits_type::pos_type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>basic_ios::rdbuf</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Routes stream to specified buffer.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A stream.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored stream buffer pointer.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The second member function stores <ph id="ph1">`_Sb`</ph> in the stored stream buffer pointer and returns the previously stored value.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>basic_ios::rdstate</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Reads the state of bits for flags.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The stored stream state information.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>basic_ios::setstate</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Sets additional flags.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Additional flags to set.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The member function effectively calls <bpt id="p1">[</bpt>clear<ept id="p1">](#basic_ios__clear)</ept>(_ <bpt id="p2">*</bpt>State<ept id="p2">*</ept> &amp;#124; <bpt id="p3">[</bpt>rdstate<ept id="p3">](#basic_ios__rdstate)</ept>).</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>basic_ios::set_rdbuf</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Assigns a stream buffer to be the read buffer for this stream object.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The stream buffer to become the read buffer.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The protected member function stores <ph id="ph1">` strbuf`</ph> in the <ph id="ph2">`stream buffer pointer`</ph>.It does not call <ph id="ph3">`clear`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>basic_ios::tie</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Ensures that one stream is processed before another stream.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A stream.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored tie pointer.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The second member function stores <ph id="ph1">` str`</ph> in the tie pointer and returns its previous stored value.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>causes two streams to be synchronized, such that, operations on one stream occur after operations on the other stream are complete.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>In this example, by tying cin to cout, it is guaranteed that the "Enter a number:" string will go to the console before the number itself is extracted from cin.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This eliminates the possibility that the "Enter a number:" string is still sitting in the buffer when the number is read, so that we are certain that the user actually has some prompt to respond to.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>By default, cin and cout are tied.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>basic_ios::traits_type</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>A synonym for the template parameter <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>basic_ios::widen</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Finds the equivalent <ph id="ph1">`char_type`</ph> to a given <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The character to convert.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Finds the equivalent <ph id="ph1">`char_type`</ph> to a given <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>use_facet<ept id="p1">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><ph id="ph1">&lt; </ph><bpt id="p2">**</bpt>ctype<ept id="p2">**</ept><ph id="ph2">\&lt;</ph> <bpt id="p3">**</bpt>E<ept id="p3">**</ept>&gt; &gt;( <bpt id="p4">[</bpt>getloc<ept id="p4">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`Char`</ph>).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>basic_ios::swap</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Exchanges the values in this <ph id="ph1">`basic_ios`</ph> object for those of another <ph id="ph2">`basic_ios`</ph> object.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>However, the pointers to the stream buffers are not swapped.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`basic_ios`</ph> object that is used to exchange values.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The protected member function exchanges all the values stored in <ph id="ph1">` right`</ph> with <ph id="ph2">`*this`</ph> except the stored <ph id="ph3">`stream buffer pointer`</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>