<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">876f4fe4003c7bbd093d739bcdda4a5fe14fdb02</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\return-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9ffd9e9b2d5e015c70211df898a199644c524b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">694873eb01da0e909bc0138db95f2c94dc56f865</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Return Type | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Return Type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The return type of a function establishes the size and type of the value returned by the function and corresponds to the type-specifier in the syntax below:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>function-definition<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>attribute-seq<ept id="p2">*</ept> opt<bpt id="p3">*</bpt>declarator declaration-list<ept id="p3">*</ept> opt<bpt id="p4">*</bpt>compound-statement<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>attribute-seq<ept id="p1">*</ept> is Microsoft Specific */</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>void</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>signed</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>unsigned</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>struct-or-union-specifier</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>enum-specifier</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>typedef-name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> can specify any fundamental, structure, or union type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you do not include <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept>, the return type <ph id="ph1">`int`</ph> is assumed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The return type given in the function definition must match the return type in declarations of the function elsewhere in the program.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A function returns a value when a <ph id="ph1">`return`</ph> statement containing an expression is executed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The expression is evaluated, converted to the return value type if necessary, and returned to the point at which the function was called.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a function is declared with return type <ph id="ph1">`void`</ph>, a return statement containing an expression generates a warning and the expression is not evaluated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following examples illustrate function return values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example defines the <ph id="ph1">`STUDENT`</ph> type with a <ph id="ph2">`typedef`</ph> declaration and defines the function <ph id="ph3">`sortstu`</ph> to have <ph id="ph4">`STUDENT`</ph> return type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The function selects and returns one of its two structure arguments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In subsequent calls to the function, the compiler checks to make sure the argument types are <ph id="ph1">`STUDENT`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Efficiency would be enhanced by passing pointers to the structure, rather than the entire structure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example defines a function returning a pointer to an array of characters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The function takes two character arrays (strings) as arguments and returns a pointer to the shorter of the two strings.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A pointer to an array points to the first of the array elements and has its type; thus, the return type of the function is a pointer to type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You need not declare functions with <ph id="ph1">`int`</ph> return type before you call them, although prototypes are recommended so that correct type checking for arguments and return values is enabled.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>C Function Definitions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>