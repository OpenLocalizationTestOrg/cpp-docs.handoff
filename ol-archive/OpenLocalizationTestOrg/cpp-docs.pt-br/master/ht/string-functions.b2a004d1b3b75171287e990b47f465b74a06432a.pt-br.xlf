<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">854a186c41a5a48c11d94796f06ef8fb200413e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\string-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec56315b232a66ca103735ccd07c34c6d4f6d9c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59b16894c5cc1675a58b6dc328024546c76f8e3d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>string<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>string<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>getline</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>stod</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>stof</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>stoi</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>stol</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>stold</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>stoll</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>stoul</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>stoull</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>to_string</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>to_wstring</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>getline</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extract strings from the input stream line-by-line.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The input stream from which a string is to be extracted.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The string into which are read the characters from the input stream.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The line delimiter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The input stream <ph id="ph1">`is`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The pair of function signatures marked <ph id="ph1">`(1)`</ph> extract characters from <ph id="ph2">`is`</ph> until <ph id="ph3">`delim`</ph> is found, storing them in <ph id="ph4">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The pair of function signatures marked <ph id="ph1">`(2)`</ph> use newline as the default line delimiter and behave as <bpt id="p1">**</bpt>getline<ept id="p1">**</ept>( <ph id="ph2">`is`</ph>, <ph id="ph3">`str`</ph>, <ph id="ph4">`is`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(' <ph id="ph1">`\n`</ph>')).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second function of each pair is an analog to the first one to support <bpt id="p1">[</bpt>rvalue references<ept id="p1">](../cpp/lvalues-and-rvalues-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Extraction stops when one of the following occurs:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>At end-of-file, in which case the internal state flag of <ph id="ph1">`is`</ph> is set to <ph id="ph2">`ios_base::eofbit`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After the function extracts an element that compares equal to <bpt id="p1">**</bpt>delim<ept id="p1">**</ept>, in which case the element is neither put back nor appended to the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After the function extracts <ph id="ph1">`str.`</ph><bpt id="p1">[</bpt>max_size<ept id="p1">](../standard-library/basic-string-class.md#basic_string__max_size)</ept> elements, in which case the internal state flag of <ph id="ph2">`is`</ph> is set to <ph id="ph3">`ios_base::failbit`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some other error other than those previously listed, in which case the internal state flag of <ph id="ph1">`is`</ph> is set to</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For information about internal state flags, see <bpt id="p1">[</bpt>ios_base::iostate<ept id="p1">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the function extracts no elements, the internal state flag of <ph id="ph1">`is`</ph> is set to <ph id="ph2">`ios_base::failbit`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In any case, <ph id="ph1">`getline`</ph> returns <ph id="ph2">`is`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, <ph id="ph1">`is`</ph> and <ph id="ph2">`str`</ph> are left in a valid state.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code demonstrates <ph id="ph1">`getline()`</ph> in two modes: first with the default delimiter (newline) and second with a whitespace as delimiter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The end-of-file character (CTRL-Z on the keyboard) is used to control termination of the while loops.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This sets the internal state flag of <ph id="ph1">`cin`</ph> to <ph id="ph2">`eofbit`</ph>, which must be cleared with <bpt id="p1">[</bpt>basic_ios::clear()<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__clear)</ept> before the second while loop will work properly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>stod</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to a <ph id="ph1">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`double`</ph> value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`double`</ph> as if by calling <ph id="ph4">`strtod( str.c_str(), _Eptr)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>stof</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to a float.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The float value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`float`</ph> as if by calling <ph id="ph4">`strtof( str.c_str(), _Eptr)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>stoi</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to an integer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The integer value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Contains the index of the first unconverted character on return.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The number base to use.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The function <ph id="ph1">`stoi`</ph> converts the sequence of characters in <ph id="ph2">` str`</ph> to a value of type <ph id="ph3">`int`</ph> and returns the value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, when passed a character sequence "10", the value returned by <ph id="ph1">`stoi`</ph> is the integer 10.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>behaves similarly to the function <ph id="ph1">`strtol`</ph> for single-byte characters when it is called in the manner <ph id="ph2">`strtol( str.c_str(), _Eptr, Idx)`</ph>, where <ph id="ph3">`_Eptr`</ph> is an object internal to the function; or <ph id="ph4">`wcstol`</ph> for wide characters, when it is called in similar manner, <ph id="ph5">`wcstol(Str.c_str(), _Eptr, Idx)`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>strtol, wcstol, _strtol_l, _wcstol_l<ept id="p1">](../c-runtime-library/reference/strtol-wcstol-strtol-l-wcstol-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr,``stoi`</ph> throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, or if the returned value cannot be represented as an object of type <ph id="ph2">`int`</ph>, it throws an object of type <ph id="ph3">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr - _ str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>stol</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to a <ph id="ph1">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The number base to use.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The long-integer value.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`long`</ph> as if by calling <ph id="ph4">`strtol( str.c_str(), _Eptr, Idx)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>stold</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to a <ph id="ph1">`long double`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`long double`</ph> value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`long double`</ph> as if by calling <ph id="ph4">`strtold( str.c_str(), _Eptr)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>stoll</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to a <ph id="ph1">`long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The number base to use.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`long long`</ph> value.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`long long`</ph> as if by calling <ph id="ph4">`strtoll( str.c_str(), _Eptr, Idx)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>stoul</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to an unsigned long.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The number base to use.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The unsigned long-integer value.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`unsigned long`</ph> as if by calling <ph id="ph4">`strtoul( str.c_str(), _Eptr, Idx)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>stoull</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Converts a character sequence to an <ph id="ph1">`unsigned long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The character sequence to be converted.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The index value of the first unconverted character.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The number base to use.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`unsigned long long`</ph> value.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The function converts the sequence of elements in <ph id="ph1">` str`</ph> to a value <ph id="ph2">` val`</ph> of type <ph id="ph3">`unsigned long long`</ph> as if by calling <ph id="ph4">`strtoull( str.c_str(), _Eptr, Idx)`</ph>, where <ph id="ph5">`_Eptr`</ph> is an object internal to the function.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id="ph2">`invalid_argument`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If such a call would set <ph id="ph1">`errno`</ph>, it throws an object of type <ph id="ph2">`out_of_range`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">`Idx`</ph> is not a null pointer, the function stores <ph id="ph2">`*_Eptr -  str.c_str()`</ph> in <ph id="ph3">`*Idx`</ph> and returns <ph id="ph4">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Exchanges the arrays of characters of two strings.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>One string whose elements are to be swapped with those of another string.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The other string whose elements are to be swapped with the first string.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The template function executes the specialized member function _ <bpt id="p1">*</bpt>Left<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>swap<ept id="p1">](../standard-library/basic-string-class.md#basic_string__swap)</ept>(<ph id="ph1">\_</ph> <bpt id="p2">*</bpt>Right<ept id="p2">*</ept>) for strings, which guarantees constant complexity.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>to_string</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Converts a value to a <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The value to be converted.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`string`</ph> that represents the value.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The function converts <ph id="ph1">`Val`</ph> to a sequence of elements stored in an array object <ph id="ph2">`Buf`</ph> internal to the function as if by calling <ph id="ph3">`sprintf(Buf, Fmt, Val)`</ph>, where <ph id="ph4">`Fmt`</ph> is</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type <ph id="ph2">`float`</ph> or</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The function returns <ph id="ph1">`string(Buf)`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>to_wstring</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Converts a value to a wide string.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The value to be converted.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The wide string that represents the value.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The function converts <ph id="ph1">`Val`</ph> to a sequence of elements stored in an array object <ph id="ph2">`Buf`</ph> internal to the function as if by calling <ph id="ph3">`swprintf(Buf, Len, Fmt, Val)`</ph>, where <ph id="ph4">`Fmt`</ph> is</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type <ph id="ph2">`float`</ph> or</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`Val`</ph> has type</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The function returns <ph id="ph1">`wstring(Buf)`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>string&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>