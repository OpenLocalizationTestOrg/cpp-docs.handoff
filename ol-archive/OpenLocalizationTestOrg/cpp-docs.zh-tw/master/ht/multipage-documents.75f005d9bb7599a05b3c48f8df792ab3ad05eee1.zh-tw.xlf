<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bc4782676c8ec9eedc816dda12048fe9513bb81</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\multipage-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1c1dd2734d09af7a1f57f5d664c0abed3022353</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b576f2e95261966f17de28b4de6061d0b6a38c94</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multipage Documents | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multipage Documents</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the Windows printing protocol and explains how to print documents that contain more than one page.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The article covers the following topics:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Printing protocol</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overriding view class functions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pagination</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Printer pages vs. document pages</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Print-time pagination</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Printing Protocol</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To print a multipage document, the framework and view interact in the following manner.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>First the framework displays the <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> dialog box, creates a device context for the printer, and calls the <bpt id="p2">[</bpt>StartDoc<ept id="p2">](../mfc/reference/cdc-class.md#cdc__startdoc)</ept> member function of the <bpt id="p3">[</bpt>CDC<ept id="p3">](../mfc/reference/cdc-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then, for each page of the document, the framework calls the <bpt id="p1">[</bpt>StartPage<ept id="p1">](../mfc/reference/cdc-class.md#cdc__startpage)</ept> member function of the <ph id="ph1">`CDC`</ph> object, instructs the view object to print the page, and calls the <bpt id="p2">[</bpt>EndPage<ept id="p2">](../mfc/reference/cdc-class.md#cdc__endpage)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the printer mode must be changed before starting a particular page, the view calls <bpt id="p1">[</bpt>ResetDC<ept id="p1">](../mfc/reference/cdc-class.md#cdc__resetdc)</ept>, which updates the <bpt id="p2">[</bpt>DEVMODE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd183565)</ept> structure containing the new printer mode information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the entire document has been printed, the framework calls the <bpt id="p1">[</bpt>EndDoc<ept id="p1">](../mfc/reference/cdc-class.md#cdc__enddoc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overriding View Class Functions</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CView<ept id="p1">](../mfc/reference/cview-class.md)</ept> class defines several member functions that are called by the framework during printing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By overriding these functions in your view class, you provide the connections between the framework's printing logic and your view class's printing logic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table lists these member functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CView's Overridable Functions for Printing</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Reason for overriding</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>OnPreparePrinting</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To insert values in the Print dialog box, especially the length of the document</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>OnBeginPrinting</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To allocate fonts or other GDI resources</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>OnPrepareDC</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To adjust attributes of the device context for a given page, or to do print-time pagination</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>OnPrint</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To print a given page</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>OnEndPrinting</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To deallocate GDI resources</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can do printing-related processing in other functions as well, but these functions are the ones that drive the printing process.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the steps involved in the printing process and shows where each of <ph id="ph1">`CView`</ph>'s printing member functions are called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The rest of this article explains most of these steps in more detail.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Additional parts of the printing process are described in the article <bpt id="p1">[</bpt>Allocating GDI Resources<ept id="p1">](../mfc/allocating-gdi-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Printing loop process</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Printing Loop</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Pagination</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The framework stores much of the information about a print job in a <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../mfc/reference/cprintinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Several of the values in <ph id="ph1">`CPrintInfo`</ph> pertain to pagination; these values are accessible as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Page Number Information Stored in CPrintInfo</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Member variable or</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>function name(s)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Page number referenced</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>First page of document</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Last page of document</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>First page to be printed</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Last page to be printed</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Page currently being printed</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Page numbers start at 1, that is, the first page is numbered 1, not 0.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about these and other members of <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../mfc/reference/cprintinfo-structure.md)</ept>, see the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>At the beginning of the printing process, the framework calls the view's <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](../mfc/reference/cview-class.md#cview__onprepareprinting)</ept> member function, passing a pointer to a <ph id="ph1">`CPrintInfo`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Application Wizard provides an implementation of <ph id="ph1">`OnPreparePrinting`</ph> that calls <bpt id="p1">[</bpt>DoPreparePrinting<ept id="p1">](../mfc/reference/cview-class.md#cview__doprepareprinting)</ept>, another member function of <ph id="ph2">`CView`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>is the function that displays the Print dialog box and creates a printer device context.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>At this point the application doesn't know how many pages are in the document.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the default values 1 and 0xFFFF for the numbers of the first and last page of the document.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you know how many pages your document has, override <ph id="ph1">`OnPreparePrinting`</ph> and call [SetMaxPage]--brokenlink--(reference/cprintinfo-class.md#cprintinfo__setmaxpage) for the <ph id="ph2">`CPrintInfo`</ph> structure before you send it to <ph id="ph3">`DoPreparePrinting`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This lets you specify the length of your document.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>then displays the Print dialog box.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When it returns, the <ph id="ph1">`CPrintInfo`</ph> structure contains the values specified by the user.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the user wishes to print only a selected range of pages, he or she can specify the starting and ending page numbers in the Print dialog box.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The framework retrieves these values using the <ph id="ph1">`GetFromPage`</ph> and <ph id="ph2">`GetToPage`</ph> functions of <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../mfc/reference/cprintinfo-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the user doesn't specify a page range, the framework calls <ph id="ph1">`GetMinPage`</ph> and <ph id="ph2">`GetMaxPage`</ph> and uses the values returned to print the entire document.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For each page of a document to be printed, the framework calls two member functions in your view class, <bpt id="p1">[</bpt>OnPrepareDC<ept id="p1">](../mfc/reference/cview-class.md#cview__onpreparedc)</ept> and <bpt id="p2">[</bpt>OnPrint<ept id="p2">](../mfc/reference/cview-class.md#cview__onprint)</ept>, and passes each function two parameters: a pointer to a <bpt id="p3">[</bpt>CDC<ept id="p3">](../mfc/reference/cdc-class.md)</ept> object and a pointer to a <ph id="ph1">`CPrintInfo`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Each time the framework calls <ph id="ph1">`OnPrepareDC`</ph> and <ph id="ph2">`OnPrint`</ph>, it passes a different value in the <ph id="ph3">`m_nCurPage`</ph> member of the <ph id="ph4">`CPrintInfo`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this way the framework tells the view which page should be printed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>OnPrepareDC<ept id="p1">](../mfc/reference/cview-class.md#cview__onpreparedc)</ept> member function is also used for screen display.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It makes adjustments to the device context before drawing takes place.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>serves a similar role in printing, but there are a couple of differences: first, the <ph id="ph1">`CDC`</ph> object represents a printer device context instead of a screen device context, and second, a <ph id="ph2">`CPrintInfo`</ph> object is passed as a second parameter.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>(This parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> when <ph id="ph1">`OnPrepareDC`</ph> is called for screen display.) Override <ph id="ph2">`OnPrepareDC`</ph> to make adjustments to the device context based on which page is being printed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, you can move the viewport origin and the clipping region to ensure that the appropriate portion of the document gets printed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>OnPrint<ept id="p1">](../mfc/reference/cview-class.md#cview__onprint)</ept> member function performs the actual printing of the page.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>How Default Printing Is Done<ept id="p1">](../mfc/how-default-printing-is-done.md)</ept> shows how the framework calls <bpt id="p2">[</bpt>OnDraw<ept id="p2">](../mfc/reference/cview-class.md#cview__ondraw)</ept> with a printer device context to perform printing.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>More precisely, the framework calls <ph id="ph1">`OnPrint`</ph> with a <ph id="ph2">`CPrintInfo`</ph> structure and a device context, and <ph id="ph3">`OnPrint`</ph> passes the device context to <ph id="ph4">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnPrint`</ph> to perform any rendering that should be done only during printing and not for screen display.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to print headers or footers (see the article <bpt id="p1">[</bpt>Headers and Footers<ept id="p1">](../mfc/headers-and-footers.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Then call <ph id="ph1">`OnDraw`</ph> from the override of <ph id="ph2">`OnPrint`</ph> to do the rendering common to both screen display and printing.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The fact that <ph id="ph1">`OnDraw`</ph> does the rendering for both screen display and printing means that your application is WYSIWYG: "What you see is what you get."</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>However, suppose you aren't writing a WYSIWYG application.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, consider a text editor that uses a bold font for printing but displays control codes to indicate bold text on the screen.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In such a situation, you use <ph id="ph1">`OnDraw`</ph> strictly for screen display.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you override <ph id="ph1">`OnPrint`</ph>, substitute the call to <ph id="ph2">`OnDraw`</ph> with a call to a separate drawing function.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>That function draws the document the way it appears on paper, using the attributes that you don't display on the screen.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Printer Pages vs. Document Pages</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you refer to page numbers, it's sometimes necessary to distinguish between the printer's concept of a page and a document's concept of a page.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>From the point of view of the printer, a page is one sheet of paper.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>However, one sheet of paper doesn't necessarily equal one page of the document.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, if you're printing a newsletter, where the sheets are to be folded, one sheet of paper might contain both the first and last pages of the document, side by side.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Similarly, if you're printing a spreadsheet, the document doesn't consist of pages at all.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Instead, one sheet of paper might contain rows 1 through 20, columns 6 through 10.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>All the page numbers in the <bpt id="p1">[</bpt>CPrintInfo<ept id="p1">](../mfc/reference/cprintinfo-structure.md)</ept> structure refer to printer pages.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`OnPrepareDC`</ph> and <ph id="ph2">`OnPrint`</ph> once for each sheet of paper that will pass through the printer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you override the <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](../mfc/reference/cview-class.md#cview__onprepareprinting)</ept> function to specify the length of the document, you must use printer pages.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If there is a one-to-one correspondence (that is, one printer page equals one document page), then this is easy.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If, on the other hand, document pages and printer pages do not directly correspond, you must translate between them.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For example, consider printing a spreadsheet.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When overriding <ph id="ph1">`OnPreparePrinting`</ph>, you must calculate how many sheets of paper will be required to print the entire spreadsheet and then use that value when calling the <ph id="ph2">`SetMaxPage`</ph> member function of <ph id="ph3">`CPrintInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Similarly, when overriding <ph id="ph1">`OnPrepareDC`</ph>, you must translate <ph id="ph2">`m_nCurPage`</ph> into the range of rows and columns that will appear on that particular sheet and then adjust the viewport origin accordingly.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Print-Time Pagination</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In some situations, your view class may not know in advance how long the document is until it has actually been printed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, suppose your application isn't WYSIWYG, so a document's length on the screen doesn't correspond to its length when printed.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This causes a problem when you override <bpt id="p1">[</bpt>OnPreparePrinting<ept id="p1">](../mfc/reference/cview-class.md#cview__onprepareprinting)</ept> for your view class: you can't pass a value to the <ph id="ph1">`SetMaxPage`</ph> function of the <bpt id="p2">[</bpt>CPrintInfo<ept id="p2">](../mfc/reference/cprintinfo-structure.md)</ept> structure, because you don't know the length of a document.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If the user doesn't specify a page number to stop at using the Print dialog box, the framework doesn't know when to stop the print loop.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The only way to determine when to stop the print loop is to print out the document and see when it ends.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Your view class must check for the end of the document while it is being printed, and then inform the framework when the end is reached.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The framework relies on your view class's <bpt id="p1">[</bpt>OnPrepareDC<ept id="p1">](../mfc/reference/cview-class.md#cview__onpreparedc)</ept> function to tell it when to stop.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After each call to <ph id="ph1">`OnPrepareDC`</ph>, the framework checks a member of the <ph id="ph2">`CPrintInfo`</ph> structure called <ph id="ph3">`m_bContinuePrinting`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Its default value is <bpt id="p1">**</bpt>TRUE.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>As long as it remains so, the framework continues the print loop.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If it is set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the framework stops.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To perform print-time pagination, override <ph id="ph1">`OnPrepareDC`</ph> to check whether the end of the document has been reached, and set <ph id="ph2">`m_bContinuePrinting`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> when it has.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnPrepareDC`</ph> sets <ph id="ph2">`m_bContinuePrinting`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if the current page is greater than 1.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This means that if the length of the document wasn't specified, the framework assumes the document is one page long.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>One consequence of this is that you must be careful if you call the base class version of <ph id="ph1">`OnPrepareDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Do not assume that <ph id="ph1">`m_bContinuePrinting`</ph> will be <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> after calling the base class version.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Headers and footers</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Allocating GDI resources</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Printing</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CDC Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>