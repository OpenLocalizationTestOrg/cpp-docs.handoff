<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e91c5e894f6503cb84d8d7db7b03c12b142ca2e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwordarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bf70b16b81f5b0afe7d59c96fa3b38006564e4e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1e25e57ab5e3a85fc0af3501373e1baf6180539</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWordArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWordArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports arrays of 16-bit words.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The member functions of <ph id="ph1">`CWordArray`</ph> are similar to the member functions of class <bpt id="p1">[</bpt>CObArray<ept id="p1">](../../mfc/reference/cobarray-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because of this similarity, you can use the <ph id="ph1">`CObArray`</ph> reference documentation for member function specifics.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Wherever you see a <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> pointer as a function parameter or return value, substitute a <bpt id="p2">**</bpt>WORD<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>for example, translates to</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CObArray::CObArray</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructs an empty array.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CObArray::Add</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CObArray::Append</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Appends another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CObArray::Copy</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Copies another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CObArray::ElementAt</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a temporary reference to the element pointer within the array.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CObArray::FreeExtra</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Frees all unused memory above the current upper bound.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CObArray::GetAt</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the value at a given index.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CObArray::GetCount</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CObArray::GetData</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Allows access to elements in the array.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CObArray::GetSize</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CObArray::GetUpperBound</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns the largest valid index.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CObArray::InsertAt</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Inserts an element (or all the elements in another array) at a specified index.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CObArray::IsEmpty</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines if the array is empty.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAll</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAt</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Removes an element at a specific index.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CObArray::SetAt</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; array not allowed to grow.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CObArray::SetAtGrow</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CObArray::SetSize</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Sets the number of elements to be contained in this array.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CObArray::operator &amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Sets or gets the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>incorporates the <bpt id="p1">[</bpt>IMPLEMENT_SERIAL<ept id="p1">](run-time-object-model-services.md#implement_serial)</ept> macro to support serialization and dumping of its elements.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If an array of words is stored to an archive, either with an overloaded insertion operator or with the <bpt id="p1">[</bpt>CObject::Serialize<ept id="p1">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept> member function, each element is, in turn, serialized.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Before using an array, use <ph id="ph1">`SetSize`</ph> to establish its size and allocate memory for it.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you do not use <ph id="ph1">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Frequent reallocation and copying are inefficient and can fragment memory.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you need a dump of individual elements in the array, you must set the depth of the dump context to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CWordArray`</ph>, see the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcoll.h</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ICommandSource Interface</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Manages commands sent from a command source object to a user control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you host a user control in an MFC View, <bpt id="p1">[</bpt>CWinFormsView Class<ept id="p1">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>By implementing  , you give the user control a reference to the <ph id="ph1">`ICommandSource`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id="p1">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id="ph1">`ICommandTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information on using Windows Forms, see <bpt id="p1">[</bpt>Using a Windows Form User Control in MFC<ept id="p1">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>ICommandSource::AddCommandHandler</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Adds a command handler to a command source object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The command ID.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A handle to the command handler method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method adds the command handler <ph id="ph1">`cmdHandler`</ph> to the command source object and maps the handler to <ph id="ph2">`cmdID`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id="p1">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id="ph1">`AddCommandHandler`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>ICommandSource::AddCommandRangeHandler</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Adds a group of command handlers to a command source object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The beginning index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The ending index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A handle to the message handler method to which the commands are mapped.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This method maps a contiguous range of command IDs to a single message handler and adds it to the command source object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This is used for handling a group of related buttons with one method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ICommandSource::AddCommandRangeUIHandler</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Adds a group of user interface command message handlers to a command source object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The beginning index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The ending index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A handle to the message handler method to which the commands are mapped.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This method maps a contiguous range of command IDs to a single user interface command message handler and adds it to the command source object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This is used for handling a group of related buttons with one method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ICommandSource::AddCommandUIHandler</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Adds a user interface command message handler to a command source object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The command ID.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A handle to the user interface command message handler method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This method adds the user interface command message handler <ph id="ph1">`cmdHandler`</ph> to the command source object and maps the handler to <ph id="ph2">`cmdID`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>ICommandSource::PostCommand</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Posts a message without waiting for it to be processed.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The command ID of the message to be posted.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This method asynchronously posts the message mapped to the ID specified by <ph id="ph1">`command`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It calls <bpt id="p1">[</bpt>CWnd::PostMessage<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__postmessage)</ept> to place the message in the window's message queue and then returns without waiting for the corresponding window to process the message.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>ICommandSource::RemoveCommandHandler</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Removes a command handler from a command source object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The command ID.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This method removes the command handler mapped to <ph id="ph1">`cmdID`</ph> from the command source object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>ICommandSource::RemoveCommandRangeHandler</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Removes a group of command handlers from a command source object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The beginning index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The ending index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This method removes a group of message handlers, mapped to the command IDs specifed by <ph id="ph1">`cmdIDMin`</ph> and <ph id="ph2">`cmdIDMax`</ph>, from the command source object.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>ICommandSource::RemoveCommandRangeUIHandler</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Removes a group of user interface command message handlers from a command source object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The beginning index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The ending index of the command ID range.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This method removes a group of user interface command message handlers, mapped to the command IDs specifed by <ph id="ph1">`cmdIDMin`</ph> and <ph id="ph2">`cmdIDMax`</ph>, from the command source object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>ICommandSource::RemoveCommandUIHandler</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Removes a user interface command message handler from a command source object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The command ID.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This method removes the user interface command message handler mapped to <ph id="ph1">`cmdID`</ph> from the command source object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>ICommandSource::SendCommand</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Sends a message and waits for it to be processed before returning.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The command ID of the message to be sent.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This method synchronously sends the message mapped to the ID specified by <ph id="ph1">`command`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It calls <bpt id="p1">[</bpt>CWnd::SendMessage<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__sendmessage)</ept> to place the message in the window's message queue and waits until that window procedure has processed the message before returning.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>ICommandTarget Interface</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Provides a user control with an interface to receive commands from a command source object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>When you host a user control in an MFC View, <bpt id="p1">[</bpt>CWinFormsView<ept id="p1">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>By implementing <ph id="ph1">`ICommandTarget`</ph>, you give the user control a reference to the  object.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id="p1">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id="ph1">`ICommandTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For more information on using Windows Forms, see <bpt id="p1">[</bpt>Using a Windows Form User Control in MFC<ept id="p1">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>ICommandTarget::Initialize</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Initializes the command target object.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A handle to the command source object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When you host a user control in an MFC View, <bpt id="p1">[</bpt>CWinFormsView<ept id="p1">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This method initializes the command target object and associates it with the specified command source object <ph id="ph1">`cmdSource`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>It should be called in the user control class implementation.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>At initialization, you should register command handlers with the command source object by calling <bpt id="p1">[</bpt>ICommandSource::AddCommandHandler<ept id="p1">](../../mfc/reference/icommandsource-interface.md)</ept> in the <ph id="ph1">`Initialize`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id="p1">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id="ph1">`Initialize`</ph> to do this.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>ICommandUI Interface</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Manages user interface commands.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This interface provides methods and properties that manage user interface commands.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>is similar to <bpt id="p1">[</bpt>CCmdUI Class<ept id="p1">](../../mfc/reference/ccmdui-class.md)</ept>, except that <ph id="ph1">`ICommandUI`</ph> is used for MFC applications that interoperate with .NET components.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>is used within an <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handler in an  -derived class.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When a user of an application activates (selects or clicks) a menu, each menu item is displayed as enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The target of each menu command provides this information by implementing an <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For each of the command user interface objects in your application, use the Properties window to create a message-map entry and function prototype for each handler.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For more information on how the <ph id="ph1">`ICommandUI`</ph> interface is used in command routing, see <bpt id="p1">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id="p1">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>For more information on using Windows Forms, see <bpt id="p1">[</bpt>Using a Windows Form User Control in MFC<ept id="p1">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For more information on how user interface commands are managed in MFC, see <bpt id="p1">[</bpt>CCmdUI Class<ept id="p1">](../../mfc/reference/ccmdui-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>ICommandUI::Check</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Sets the user interface item for this command to the appropriate check state.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This property sets the user interface item for this command to the appropriate check state.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`Check`</ph> to the following values:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Uncheck</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Check</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Set indeterminate</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>ICommandUI::ContinueRouting</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Tells the command routing mechanism to continue routing the current message down the chain of handlers.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This is an advanced member function that should be used in conjunction with an <bpt id="p1">[</bpt>ON_COMMAND_EX<ept id="p1">](http://msdn.microsoft.com/library/0bb49090-aee8-4203-87c8-dd001d3dd26e)</ept> handler that returns <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For more information, see Technical Note <bpt id="p1">[</bpt>TN006: Message Maps<ept id="p1">](../../mfc/tn006-message-maps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>ICommandUI::Enabled</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Enables or disables the user interface item for this command.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This property enables or disables the user interface item for this command.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`Enabled`</ph> to <ph id="ph2">`TRUE`</ph> to enable the item, <ph id="ph3">`FALSE`</ph> to disable it.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>ICommandUI::ID</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Gets the ID of the user interface object represented by the <ph id="ph1">`ICommandUI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the <ph id="ph1">`ICommandUI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>ICommandUI::Index</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Gets the index of the user interface object represented by the <ph id="ph1">`ICommandUI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the <ph id="ph1">`ICommandUI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>ICommandUI::Radio</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Sets the user interface item for this command to the appropriate check state.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This property sets the user interface item for this command to the appropriate check state.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`Radio`</ph> to <ph id="ph2">`TRUE`</ph> to enable the item; otherwise <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>ICommandUI::Text</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Sets the text of the user interface item for this command.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This property sets the text of the user interface item for this command.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`Text`</ph> to a text string handle.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>IView Interface</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Implements several methods that <bpt id="p1">[</bpt>CWinFormsView<ept id="p1">](../../mfc/reference/cwinformsview-class.md)</ept> uses to send view notifications to a managed control.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>implements several methods that <ph id="ph1">`CWinFormsView`</ph> uses to forward common view notifications to a hosted managed control.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>These are <bpt id="p1">[</bpt>OnInitialUpdate<ept id="p1">](../../mfc/reference/iview-interface.md)</ept>, <bpt id="p2">[</bpt>OnUpdate<ept id="p2">](../../mfc/reference/iview-interface.md)</ept> and <bpt id="p3">[</bpt>OnActivateView<ept id="p3">](../../mfc/reference/iview-interface.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>is similar to <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept>, but is used only with managed views and controls.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For more information on using Windows Forms, see <bpt id="p1">[</bpt>Using a Windows Form User Control in MFC<ept id="p1">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>IView::OnActivateView</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Called by MFC when a view is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Indicates whether the view is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>IView::OnInitialUpdate</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Called by the framework after the view is first attached to the document, but before the view is initially displayed.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>IView::OnUpdate</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Called by MFC after the view's document has been modified.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This function allows the view to update its display to reflect modifications.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>MFC Sample COLLECT</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>