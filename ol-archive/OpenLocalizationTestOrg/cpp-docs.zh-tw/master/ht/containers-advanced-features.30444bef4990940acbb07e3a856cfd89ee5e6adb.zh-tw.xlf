<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a87b0a33985aa472af9756b660e5dc1f5dc3e00</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\containers-advanced-features.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8733e4f4133dea58ee551aa756aeec10a930b29</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cac527685b500d19d97d90a37eb7c52cb55e8e23</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Containers: Advanced Features | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Containers: Advanced Features</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the steps necessary to incorporate optional advanced features into existing container applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These features are:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An application that is both a container and a server</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An OLE link to an embedded object</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating a Container/Server Application</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A container/server application is an application that acts as both a container and a server.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Microsoft Word for Windows is an example of this.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can embed Word for Windows documents in other applications, and you can also embed items in Word for Windows documents.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The process for modifying your container application to be both a container and a full server (you cannot create a combination container/miniserver application) is similar to the process for creating a full server.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>Servers: Implementing a Server<ept id="p1">](../mfc/servers-implementing-a-server.md)</ept> lists a number of tasks required to implement a server application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you convert a container application to a container/server application, then you need to perform some of those same tasks, adding code to the container.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following lists the important things to consider:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The container code created by the application wizard already initializes the OLE subsystem.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You will not need to change or add anything for that support.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Wherever the base class of a document class is <ph id="ph1">`COleDocument`</ph>, change the base class to <ph id="ph2">`COleServerDoc`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`COleClientItem::CanActivate`</ph> to avoid editing items in place while the server itself is being used to edit in place.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the MFC OLE sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept> has embedded an item created by your container/server application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You open the OCLIENT application and in-place edit the item created by your container/server application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>While editing your application's item, you decide you want to embed an item created by the MFC OLE sample <bpt id="p1">[</bpt>HIERSVR<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To do this, you cannot use in-place activation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You must fully open HIERSVR to activate this item.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because the Microsoft Foundation Class Library does not support this OLE feature, overriding <ph id="ph1">`COleClientItem::CanActivate`</ph> allows you to check for this situation and prevent a possible run-time error in your application.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are creating a new application and want it to function as a container/server application, choose that option in the OLE Options dialog box in the application wizard and this support will be created automatically.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Overview: Creating an ActiveX Control Container<ept id="p1">](../mfc/reference/creating-an-mfc-activex-control-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For information about MFC samples, see MFC Samples.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that you cannot insert an MDI application into itself.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An application that is a container/server cannot be inserted into itself unless it is an SDI application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Links to Embedded Objects</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Links to Embedded Objects feature enables a user to create a document with an OLE link to an embedded object inside your container application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, create a document in a word processor containing an embedded spreadsheet.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If your application supports links to embedded objects, it could paste a link to the spreadsheet contained in the word processor's document.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This feature allows your application to use the information contained in the spreadsheet without knowing where the word processor originally got it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To link to embedded objects in your application</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Derive your document class from <ph id="ph1">`COleLinkingDoc`</ph> instead of <ph id="ph2">`COleDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Create an OLE class ID (<bpt id="p1">**</bpt>CLSID<ept id="p1">**</ept>) for your application by using the Class ID Generator included with the OLE Development Tools.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Register the application with OLE.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`COleTemplateServer`</ph> object as a member of your application class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In your application class's <ph id="ph1">`InitInstance`</ph> member function, do the following:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Connect your <ph id="ph1">`COleTemplateServer`</ph> object to your document templates by calling the object's <ph id="ph2">`ConnectTemplate`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>COleTemplateServer::RegisterAll<ept id="p1">**</ept> member function to register all class objects with the OLE system.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`COleTemplateServer::UpdateRegistry`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The only parameter to <ph id="ph1">`UpdateRegistry`</ph> should be <ph id="ph2">`OAT_CONTAINER`</ph> if the application is not launched with the "/Embedded" switch.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This registers the application as a container that can support links to embedded objects.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the application is launched with the "/Embedded" switch, it should not show its main window, similar to a server application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The MFC OLE sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept> implements this feature.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For an example of how this is done, see the <ph id="ph1">`InitInstance`</ph> function in the OCLIENT.CPP file of this sample application.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Servers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>