<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fead2d3422af4f4923ec476cdbff554db868e43</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\recordset-fetching-records-in-bulk-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76f0684d2165b502abb36730508129b21fadf154</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840bfbee3ee417106c61c2dcdc39fadcdcc79be3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recordset: Fetching Records in Bulk (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recordset: Fetching Records in Bulk (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CRecordset`</ph> provides support for bulk row fetching, which means that multiple records can be retrieved at once during a single fetch, rather than retrieving one record at a time from the data source.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can implement bulk row fetching only in a derived <ph id="ph1">`CRecordset`</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The process of transferring data from the data source to the recordset object is called bulk record field exchange (Bulk RFX).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Note that if you are not using bulk row fetching in a <ph id="ph1">`CRecordset`</ph>-derived class, data is transferred via record field exchange (RFX).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Record Field Exchange (RFX)<ept id="p1">](../../data/odbc/record-field-exchange-rfx.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How CRecordset supports bulk row fetching<ept id="p1">](#_core_how_crecordset_supports_bulk_row_fetching)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Some special considerations when using bulk row fetching<ept id="p1">](#_core_special_considerations)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to implement bulk record field exchange<ept id="p1">](#_core_how_to_implement_bulk_record_field_exchange)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>How CRecordset Supports Bulk Row Fetching</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Before opening your recordset object, you can define a rowset size with the <ph id="ph1">`SetRowsetSize`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The rowset size specifies how many records should be retrieved during a single fetch.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When bulk row fetching is implemented, the default rowset size is 25.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If bulk row fetching is not implemented, the rowset size remains fixed at 1.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After you have initialized the rowset size, call the <bpt id="p1">[</bpt>Open<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here you must specify the <ph id="ph1">`CRecordset::useMultiRowFetch`</ph> option of the <bpt id="p1">**</bpt>dwOptions<ept id="p1">**</ept> parameter to implement bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can additionally set the <bpt id="p1">**</bpt>CRecordset::userAllocMultiRowBuffers<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The bulk record field exchange mechanism uses arrays to store the multiple rows of data retrieved during a fetch.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These storage buffers can be allocated automatically by the framework or you can allocate them manually.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specifying the <bpt id="p1">**</bpt>CRecordset::userAllocMultiRowBuffers<ept id="p1">**</ept> option means that you will do the allocation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following table lists the member functions provided by <ph id="ph1">`CRecordset`</ph> to support bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Member function</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CheckRowsetError</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Virtual function that handles any errors that occur during fetching.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>DoBulkFieldExchange</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Implements bulk record field exchange.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Called automatically to transfers multiple rows of data from the data source to the recordset object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>GetRowsetSize</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the current setting for the rowset size.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>GetRowsFetched</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Tells how many rows were actually retrieved after a given fetch.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In most cases, this is the rowset size, unless an incomplete rowset was fetched.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>GetRowStatus</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns a fetch status for a particular row within a rowset.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>RefreshRowset</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Refreshes the data and status of a particular row within a rowset.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>SetRowsetCursorPosition</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Moves the cursor to a particular row within a rowset.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>SetRowsetSize</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Virtual function that changes the setting for the rowset size to the specified value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Special Considerations</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Although bulk row fetching is a performance gain, certain features operate differently.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Before you decide to implement bulk row fetching, consider the following:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The framework automatically calls the <ph id="ph1">`DoBulkFieldExchange`</ph> member function to transfer data from the data source to the recordset object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, data is not transferred from the recordset back to the data source.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Calling the <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> member functions results in a failed assertion.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`CRecordset`</ph> currently does not provide a mechanism for updating bulk rows of data, you can write your own functions by using the ODBC API function <bpt id="p1">**</bpt>SQLSetPos<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">**</bpt>SQLSetPos<ept id="p1">**</ept>, see the <bpt id="p2">*</bpt>ODBC SDK Programmer's Reference<ept id="p2">*</ept> in the MSDN documentation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The member functions <ph id="ph1">`IsDeleted`</ph>, <ph id="ph2">`IsFieldDirty`</ph>, <ph id="ph3">`IsFieldNull`</ph>, <ph id="ph4">`IsFieldNullable`</ph>, <ph id="ph5">`SetFieldDirty`</ph>, and <ph id="ph6">`SetFieldNull`</ph> cannot be used on recordsets that implement bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, you can call <ph id="ph1">`GetRowStatus`</ph> in place of <ph id="ph2">`IsDeleted`</ph>, and <ph id="ph3">`GetODBCFieldInfo`</ph> in place of <ph id="ph4">`IsFieldNullable`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> operations repositions your recordset by rowset.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, suppose you open a recordset that has 100 records with an initial rowset size of 10.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open<ept id="p1">**</ept> fetches rows 1 through 10, with the current record positioned on row 1.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">`MoveNext`</ph> fetches the next rowset, not the next row.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This rowset consists of rows 11 through 20, with the current record positioned on row 11.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`MoveNext`</ph> and <bpt id="p1">**</bpt>Move( 1 )<ept id="p1">**</ept> are not equivalent when bulk row fetching is implemented.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Move( 1 )<ept id="p1">**</ept> fetches the rowset that begins 1 row from the current record.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this example, calling <bpt id="p1">**</bpt>Move( 1 )<ept id="p1">**</ept> after calling <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> fetches the rowset consisting of rows 2 through 11, with the current record positioned on row 2.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Move<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__move)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Unlike record field exchange, the wizards do not support bulk record field exchange.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This means that you must manually declare your field data members and manually override <ph id="ph1">`DoBulkFieldExchange`</ph> by writing calls to the Bulk RFX functions.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Record Field Exchange Functions<ept id="p1">](../../mfc/reference/record-field-exchange-functions.md)</ept> in the <bpt id="p2">*</bpt>Class Library Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>How to Implement Bulk Record Field Exchange</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Bulk record field exchange transfers a rowset of data from the data source to the recordset object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Bulk RFX functions use arrays to store this data, as well as arrays to store the length of each data item in the rowset.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In your class definition, you must define your field data members as pointers to access the arrays of data.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In addition, you must define a set of pointers to access the arrays of lengths.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Any parameter data members should not be declared as pointers; declaring parameter data members when using bulk record field exchange is the same as declaring them when using record field exchange.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following code shows a simple example:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can either allocate these storage buffers manually or have the framework do the allocation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To allocate the buffers yourself, you must specify the <bpt id="p1">**</bpt>CRecordset::userAllocMultiRowBuffers<ept id="p1">**</ept> option of the <bpt id="p2">**</bpt>dwOptions<ept id="p2">**</ept> parameter in the <bpt id="p3">**</bpt>Open<ept id="p3">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Be sure to set the sizes of the arrays at least equal to the rowset size.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you want to have the framework do the allocation, you should initialize your pointers to <bpt id="p1">**</bpt>NULL.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is typically done in the recordset object's constructor:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Finally, you must override the <ph id="ph1">`DoBulkFieldExchange`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For the field data members, call the Bulk RFX functions; for any parameter data members, call the RFX functions.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you opened the recordset by passing a SQL statement or stored procedure to <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, the order in which you make the Bulk RFX calls must correspond to the order of the columns in the recordset; similarly, the order of the RFX calls for parameters must correspond to the order of parameters in the SQL statement or stored procedure.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You must call the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> member function before your derived <ph id="ph1">`CRecordset`</ph> class goes out of scope.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This ensures that any memory allocated by the framework are freed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It is good programming practice to always explicitly call <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>, regardless of whether you have implemented bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information about record field exchange (RFX), see <bpt id="p1">[</bpt>Record Field Exchange: How RFX Works<ept id="p1">](../../data/odbc/record-field-exchange-how-rfx-works.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information about using parameters, see <bpt id="p1">[</bpt>CFieldExchange::SetFieldType<ept id="p1">](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype)</ept> and <bpt id="p2">[</bpt>Recordset: Parameterizing a Recordset (ODBC)<ept id="p2">](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CRecordset::m_nFields</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CRecordset::m_nParams</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>