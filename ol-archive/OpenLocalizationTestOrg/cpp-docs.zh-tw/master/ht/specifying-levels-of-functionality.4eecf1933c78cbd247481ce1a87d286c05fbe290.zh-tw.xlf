<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cfcebf8ed23347510fa647f9bd7ed9eebc9ee76</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\specifying-levels-of-functionality.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdcfec5d9fc68858f70e095df4bc267a42bf2829</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7be18eb540ad0eea6087392e5d04127c112ae0f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifying Levels of Functionality | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying Levels of Functionality</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes how to add the following levels of functionality to your <bpt id="p1">[</bpt>CObject<ept id="p1">](../mfc/reference/cobject-class.md)</ept>-derived class:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Run-time class information</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Dynamic creation support</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Serialization support</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For a general description of <ph id="ph1">`CObject`</ph> functionality, see the article <bpt id="p1">[</bpt>Deriving a Class from CObject<ept id="p1">](../mfc/deriving-a-class-from-cobject.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run-time class information</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To add run-time class information</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Derive your class from <ph id="ph1">`CObject`</ph>, as described in the <bpt id="p1">[</bpt>Deriving a Class from CObject<ept id="p1">](../mfc/deriving-a-class-from-cobject.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`DECLARE_DYNAMIC`</ph> macro in your class declaration, as shown here:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#2</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph> macro in the implementation file (.CPP) of your class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This macro takes as arguments the name of the class and its base class, as follows:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#3</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Always put <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph> in the implementation file (.CPP) for your class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph> macro should be evaluated only once during a compilation and therefore should not be used in an interface file (.H) that could potentially be included in more than one file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To add dynamic creation support</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Derive your class from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`DECLARE_DYNCREATE`</ph> macro in the class declaration.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Define a constructor with no arguments (a default constructor).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`IMPLEMENT_DYNCREATE`</ph> macro in the class implementation file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To add serialization support</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Derive your class from <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`Serialize`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`Serialize`</ph> directly, that is, you do not want to serialize the object through a polymorphic pointer, omit steps 3 through 5.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`DECLARE_SERIAL`</ph> macro in the class declaration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Define a constructor with no arguments (a default constructor).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro in the class implementation file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A "polymorphic pointer" points to an object of a class (call it A) or to an object of any class derived from A (say, B).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To serialize through a polymorphic pointer, the framework must determine the run-time class of the object it is serializing (B), since it might be an object of any class derived from some base class (A).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more details on how to enable serialization when you derive your class from <ph id="ph1">`CObject`</ph>, see the articles <bpt id="p1">[</bpt>Files in MFC<ept id="p1">](../mfc/files-in-mfc.md)</ept> and <bpt id="p2">[</bpt>Serialization<ept id="p2">](../mfc/serialization-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Deriving a Class from CObject</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>