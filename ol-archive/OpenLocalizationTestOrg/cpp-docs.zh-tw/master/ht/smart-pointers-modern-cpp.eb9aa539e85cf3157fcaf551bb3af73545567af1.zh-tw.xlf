<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c568d10e94866039ea87b9acae065b81e0038a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\smart-pointers-modern-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13b602d1d4595597a5284a11caf6ebcf901bf536</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88a6a9a85afd1c05d45c798d967e49fd8ab330d6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Smart Pointers (Modern C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Smart Pointers (Modern C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In modern C++ programming, the Standard Library includes <bpt id="p1">*</bpt>smart pointers<ept id="p1">*</ept>, which are used to help ensure that programs are free of memory and resource leaks and are exception-safe.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Uses for smart pointers</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Smart pointers are defined in the <ph id="ph1">`std`</ph> namespace in the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>memory&gt;<ept id="p1">](../standard-library/memory.md)</ept> header file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They are crucial to the <bpt id="p1">[</bpt>RAII<ept id="p1">](../cpp/objects-own-resources-raii.md)</ept> or <bpt id="p2">*</bpt>Resource Acquisition Is Initialialization<ept id="p2">*</ept> programming idiom.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The main goal of this idiom is to ensure that resource acquisition occurs at the same time that the object is initialized, so that all resources for the object are created and made ready in one line of code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In practical terms, the main principle of RAII is to give ownership of any heap-allocated resource—for example, dynamically-allocated memory or system object handles—to a stack-allocated object whose destructor contains the code to delete or free the resource and also any associated cleanup code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In most cases, when you initialize a raw pointer or resource handle to point to an actual resource, pass the pointer to a smart pointer immediately.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In modern C++, raw pointers are only used in small code blocks of limited scope, loops, or helper functions where performance is critical and there is no chance of confusion about ownership.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example compares a raw pointer declaration to a smart pointer declaration.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>smart_pointers_intro#1</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As shown in the example, a smart pointer is a class template that you declare on the stack, and initialize by using a raw pointer that points to a heap-allocated object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>After the smart pointer is initialized, it owns the raw pointer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This means that the smart pointer is responsible for deleting the memory that the raw pointer specifies.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The smart pointer destructor contains the call to delete, and because the smart pointer is declared on the stack, its destructor is invoked when the smart pointer goes out of scope, even if an exception is thrown somewhere further up the stack.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Access the encapsulated pointer by using the familiar pointer operators, <ph id="ph1">`-&gt;`</ph> and <ph id="ph2">`*`</ph>, which the smart pointer class overloads to return the encapsulated raw pointer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The C++ smart pointer idiom resembles object creation in languages such as C#: you create the object and then let the system take care of deleting it at the correct time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The difference is that no separate garbage collector runs in the background; memory is managed through the standard C++ scoping rules so that the runtime environment is faster and more efficient.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Always create smart pointers on a separate line of code, never in a parameter list, so that a subtle resource leak won't occur due to certain parameter list allocation rules.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example shows how a <ph id="ph1">`unique_ptr`</ph> smart pointer type from the Standard Template Library could be used to encapsulate a pointer to a large object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>smart_pointers_intro#2</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The example demonstrates the following essential steps for using smart pointers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declare the smart pointer as an automatic (local) variable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(Do not use the <ph id="ph1">`new`</ph> or <ph id="ph2">`malloc`</ph> expression on the smart pointer itself.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the type parameter, specify the pointed-to type of the encapsulated pointer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pass a raw pointer to a <ph id="ph1">`new`</ph>-ed object in the smart pointer constructor.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>(Some utility functions or smart pointer constructors do this for you.)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the overloaded <ph id="ph1">`-&gt;`</ph> and <ph id="ph2">`*`</ph> operators to access the object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Let the smart pointer delete the object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Smart pointers are designed to be as efficient as possible both in terms of memory and performance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the only data member in <ph id="ph1">`unique_ptr`</ph> is the encapsulated pointer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This means that <ph id="ph1">`unique_ptr`</ph> is exactly the same size as that pointer, either four bytes or eight bytes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accessing the encapsulated pointer by using the smart pointer overloaded * and -&gt; operators is not significantly slower than accessing the raw pointers directly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Smart pointers have their own member functions, which are accessed by using “dot” notation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, some STL smart pointers have a reset member function that releases ownership of the pointer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is useful when you want to free the memory owned by the smart pointer before the smart pointer goes out of scope, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>smart_pointers_intro#3</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Smart pointers usually provide a way to access their  raw pointer directly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>STL smart pointers have a <ph id="ph1">`get`</ph> member function for this purpose, and <ph id="ph2">`CComPtr`</ph> has a public <ph id="ph3">`p`</ph> class member.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By providing direct access to the underlying pointer, you can use the smart pointer to manage memory in your own code and still pass the raw pointer to code that does not support smart pointers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>smart_pointers_intro#4</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Kinds of Smart Pointers</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following section summarizes the different kinds of smart pointers that are available in the Windows programming environment and describes when to use them.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Smart Pointers</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use these smart pointers as a first choice for encapsulating pointers to plain old C++ objects (POCO).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Allows exactly one owner of the underlying pointer.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use as the default choice for POCO unless you know for certain that you require a <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Can be moved to a new owner, but not copied or shared.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Replaces <ph id="ph1">`auto_ptr`</ph>, which is deprecated.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compare to <ph id="ph1">`boost::scoped_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>is small and efficient; the size is one pointer and it supports rvalue references for fast insertion and retrieval from STL collections.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Header file: <ph id="ph1">`&lt;memory&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Use unique_ptr Instances<ept id="p1">](../cpp/how-to-create-and-use-unique-ptr-instances.md)</ept> and <bpt id="p2">[</bpt>unique_ptr Class<ept id="p2">](../standard-library/unique-ptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Reference-counted smart pointer.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use when you want to assign one raw pointer to multiple owners, for example, when you return a copy of a pointer from a container but want to keep the original.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The raw pointer is not deleted until all <ph id="ph1">`shared_ptr`</ph> owners have gone out of scope or have otherwise given up ownership.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The size is two pointers; one for the object and one for the shared control block that contains the reference count.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Header file: <ph id="ph1">`&lt;memory&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Use shared_ptr Instances<ept id="p1">](../cpp/how-to-create-and-use-shared-ptr-instances.md)</ept> and <bpt id="p2">[</bpt>shared_ptr Class<ept id="p2">](../standard-library/shared-ptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Special-case smart pointer for use in conjunction with <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`weak_ptr`</ph> provides access to an object that is owned by one or more <ph id="ph2">`shared_ptr`</ph> instances, but does not participate in reference counting.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use when you want to observe an object, but do not require it to remain alive.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Required in some cases to break circular references between <ph id="ph1">`shared_ptr`</ph> instances.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Header file: <ph id="ph1">`&lt;memory&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Use weak_ptr Instances<ept id="p1">](../cpp/how-to-create-and-use-weak-ptr-instances.md)</ept> and <bpt id="p2">[</bpt>weak_ptr Class<ept id="p2">](../standard-library/weak-ptr-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Smart Pointers for COM Objects (Classic Windows Programming)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you work with COM objects, wrap the interface pointers in an appropriate smart pointer type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Active Template Library (ATL) defines several smart pointers for various purposes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`_com_ptr_t`</ph> smart pointer type, which the compiler uses when it creates wrapper classes from .tlb files.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It's the best choice when you do not want to include the ATL header files.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CComPtr Class</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use this unless you cannot use ATL.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Performs reference counting by using the <ph id="ph1">`AddRef`</ph> and <ph id="ph2">`Release`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Use CComPtr and CComQIPtr Instances<ept id="p1">](../cpp/how-to-create-and-use-ccomptr-and-ccomqiptr-instances.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CComQIPtr Class</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Resembles <ph id="ph1">`CComPtr`</ph> but also provides simplified syntax for calling <ph id="ph2">`QueryInterface`</ph> on COM objects.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create and Use CComPtr and CComQIPtr Instances<ept id="p1">](../cpp/how-to-create-and-use-ccomptr-and-ccomqiptr-instances.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CComHeapPtr Class</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Smart pointer to objects that use <ph id="ph1">`CoTaskMemFree`</ph> to free memory.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CComGITPtr Class</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Smart pointer for interfaces that are obtained from the global interface table (GIT).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>_com_ptr_t Class</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Resembles <ph id="ph1">`CComQIPtr`</ph> in functionality but does not depend on ATL headers.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>ATL Smart Pointers for POCO Objects</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In addition to smart pointers for COM objects, ATL also defines smart pointers, and collections of smart pointers, for plain old C++ objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In classic Windows programming, these types are useful alternatives to the STL collections, especially when code portability is not required or when you do not want to mix the programming models of STL and ATL.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CAutoPtr Class</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Smart pointer that enforces unique ownership by transferring ownership on copy.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Comparable to the deprecated <ph id="ph1">`std::auto_ptr`</ph> Class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CHeapPtr Class</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Smart pointer for objects that are allocated by using the C <bpt id="p1">[</bpt>malloc<ept id="p1">](../c-runtime-library/reference/malloc.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CAutoVectorPtr Class</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Smart pointer for arrays that are allocated by using <ph id="ph1">`new[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CAutoPtrArray Class</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Class that encapsulates an array of <ph id="ph1">`CAutoPtr`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CAutoPtrList Class</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Class that encapsulates methods for manipulating a list of <ph id="ph1">`CAutoPtr`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Welcome Back to C++</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>